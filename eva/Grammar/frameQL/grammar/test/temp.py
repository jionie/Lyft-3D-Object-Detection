import sys
from antlr4 import *
from frameQLParser import frameQLParser 
from frameQLLexer import frameQLLexer 
from frameQLParserListener import frameQLParserListener
 
class KeyPrinter(frameQLParserListener):
    def __init__(self):
        super().__init__()
    
    def printOutput(self):
        print(self.predicate_list)
        print(self.output_predicate)
        print(self.output_operator)

    def generateParsedLists(self):
        for i in self.predicate_list:
            if (i[0] != "("):
                self.output_predicate.append(i)

    
    def getQueryParsed(self):
        """
        Print out the list of predicates generated from the sql statement
        :param none
        :return: list of lists representing predicates. Ex: [["t","=","1"], ["s","<","5"]]
        """
        return self.output_predicate

    def getQueryOperator(self):
        """
        Print out the list of operators between the lists of predicates generated from the sql statement
        :param none
        :return: list of operators. Ex: ["AND", "OR", "&&", "||"]
        """
        return self.output_operator

    

def main(argv):
    input_stream = FileStream(argv[1])
    lexer = frameQLLexer(input_stream)
    stream = CommonTokenStream(lexer)
    parser = frameQLParser(stream)
    tree = parser.root()

    '''print out the parse tree'''
    #print(tree.toStringTree(recog=parser))
    
    '''traverse through the parse tree'''
    printer = KeyPrinter()
    walker = ParseTreeWalker()
    walker.walk(printer, tree)

    '''generate the predicate list and the operator list required by the query optimizer'''
    '''these lists are generated by the _parseQuery in the query_optimizer.py file'''
    printer.generateParsedLists()
    print(printer.getQueryParsed())
    print(printer.getQueryOperator())
 
if __name__ == '__main__':
    main(sys.argv)