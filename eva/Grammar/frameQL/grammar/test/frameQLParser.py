# Generated from frameQLParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u03d7")
        buf.write("\u17d0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\3\2\5\2\u0270\n\2\3\2\5\2\u0273\n\2\3")
        buf.write("\2\3\2\3\3\3\3\5\3\u0279\n\3\3\3\3\3\3\3\7\3\u027e\n\3")
        buf.write("\f\3\16\3\u0281\13\3\3\3\3\3\5\3\u0285\n\3\3\3\5\3\u0288")
        buf.write("\n\3\3\3\5\3\u028b\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4")
        buf.write("\u0294\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u02bb\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u02c7\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02d2")
        buf.write("\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\5\t\u02e3\n\t\3\n\3\n\3\n\5\n\u02e8\n\n\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u02f4")
        buf.write("\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5")
        buf.write("\f\u030f\n\f\3\r\3\r\3\r\3\r\5\r\u0315\n\r\3\16\3\16\3")
        buf.write("\16\5\16\u031a\n\16\3\16\3\16\7\16\u031e\n\16\f\16\16")
        buf.write("\16\u0321\13\16\3\17\3\17\5\17\u0325\n\17\3\17\3\17\5")
        buf.write("\17\u0329\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u0332\n\17\3\17\5\17\u0335\n\17\3\17\5\17\u0338\n\17")
        buf.write("\3\17\3\17\5\17\u033c\n\17\3\17\3\17\3\17\3\20\3\20\5")
        buf.write("\20\u0343\n\20\3\20\5\20\u0346\n\20\3\20\3\20\3\20\5\20")
        buf.write("\u034b\n\20\3\20\3\20\3\20\3\20\7\20\u0351\n\20\f\20\16")
        buf.write("\20\u0354\13\20\3\20\3\20\5\20\u0358\n\20\3\20\3\20\3")
        buf.write("\20\5\20\u035d\n\20\3\20\5\20\u0360\n\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u036b\n\21\3\21\5")
        buf.write("\21\u036e\n\21\3\21\3\21\5\21\u0372\n\21\3\21\5\21\u0375")
        buf.write("\n\21\3\21\3\21\5\21\u0379\n\21\3\21\5\21\u037c\n\21\3")
        buf.write("\21\3\21\5\21\u0380\n\21\3\21\5\21\u0383\n\21\3\21\5\21")
        buf.write("\u0386\n\21\3\21\3\21\5\21\u038a\n\21\3\21\5\21\u038d")
        buf.write("\n\21\3\21\3\21\5\21\u0391\n\21\3\21\3\21\3\22\3\22\5")
        buf.write("\22\u0397\n\22\3\22\3\22\3\22\3\22\5\22\u039d\n\22\3\22")
        buf.write("\3\22\7\22\u03a1\n\22\f\22\16\22\u03a4\13\22\3\22\3\22")
        buf.write("\7\22\u03a8\n\22\f\22\16\22\u03ab\13\22\3\22\3\22\3\23")
        buf.write("\3\23\5\23\u03b1\n\23\3\23\3\23\3\23\3\23\5\23\u03b7\n")
        buf.write("\23\3\23\3\23\7\23\u03bb\n\23\f\23\16\23\u03be\13\23\3")
        buf.write("\23\3\23\3\23\3\23\7\23\u03c4\n\23\f\23\16\23\u03c7\13")
        buf.write("\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\7\24\u03d7\n\24\f\24\16\24\u03da")
        buf.write("\13\24\3\24\3\24\3\25\3\25\5\25\u03e0\n\25\3\25\3\25\5")
        buf.write("\25\u03e4\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u03ee\n\25\3\25\3\25\5\25\u03f2\n\25\3\25\3\25\5")
        buf.write("\25\u03f6\n\25\3\25\3\25\5\25\u03fa\n\25\3\25\3\25\5\25")
        buf.write("\u03fe\n\25\3\25\7\25\u0401\n\25\f\25\16\25\u0404\13\25")
        buf.write("\5\25\u0406\n\25\3\25\5\25\u0409\n\25\3\25\5\25\u040c")
        buf.write("\n\25\3\25\5\25\u040f\n\25\3\25\3\25\3\25\3\25\5\25\u0415")
        buf.write("\n\25\3\25\3\25\5\25\u0419\n\25\3\25\3\25\3\25\3\25\5")
        buf.write("\25\u041f\n\25\3\25\7\25\u0422\n\25\f\25\16\25\u0425\13")
        buf.write("\25\5\25\u0427\n\25\3\25\5\25\u042a\n\25\5\25\u042c\n")
        buf.write("\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26")
        buf.write("\u0437\n\26\3\26\3\26\5\26\u043b\n\26\3\26\5\26\u043e")
        buf.write("\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\5\27\u044c\n\27\3\27\5\27\u044f\n\27\3\27\3")
        buf.write("\27\5\27\u0453\n\27\3\27\5\27\u0456\n\27\3\27\3\27\5\27")
        buf.write("\u045a\n\27\3\27\5\27\u045d\n\27\3\27\3\27\5\27\u0461")
        buf.write("\n\27\3\27\5\27\u0464\n\27\3\27\3\27\5\27\u0468\n\27\3")
        buf.write("\27\5\27\u046b\n\27\3\27\5\27\u046e\n\27\3\27\3\27\5\27")
        buf.write("\u0472\n\27\3\27\5\27\u0475\n\27\3\27\3\27\5\27\u0479")
        buf.write("\n\27\3\27\3\27\3\30\3\30\5\30\u047f\n\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u048c")
        buf.write("\n\30\3\30\3\30\3\31\3\31\3\31\5\31\u0493\n\31\3\31\3")
        buf.write("\31\3\31\5\31\u0498\n\31\3\31\5\31\u049b\n\31\3\31\3\31")
        buf.write("\3\31\5\31\u04a0\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5")
        buf.write("\31\u04a8\n\31\3\31\3\31\3\31\3\31\5\31\u04ae\n\31\3\31")
        buf.write("\3\31\5\31\u04b2\n\31\3\32\5\32\u04b5\n\32\3\32\3\32\3")
        buf.write("\32\5\32\u04ba\n\32\3\32\5\32\u04bd\n\32\3\32\3\32\5\32")
        buf.write("\u04c1\n\32\3\32\3\32\5\32\u04c5\n\32\3\32\5\32\u04c8")
        buf.write("\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u04d0\n\33\5")
        buf.write("\33\u04d2\n\33\3\34\3\34\3\34\7\34\u04d7\n\34\f\34\16")
        buf.write("\34\u04da\13\34\3\34\3\34\3\34\5\34\u04df\n\34\3\34\3")
        buf.write("\34\3\34\3\34\7\34\u04e5\n\34\f\34\16\34\u04e8\13\34\5")
        buf.write("\34\u04ea\n\34\3\34\3\34\3\34\7\34\u04ef\n\34\f\34\16")
        buf.write("\34\u04f2\13\34\5\34\u04f4\n\34\5\34\u04f6\n\34\3\35\3")
        buf.write("\35\3\35\3\35\5\35\u04fc\n\35\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u0502\n\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0513\n\37\3 \3")
        buf.write(" \3 \3 \3 \5 \u051a\n \3!\3!\3!\3\"\3\"\5\"\u0521\n\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u052a\n\"\3#\3#\3#\3")
        buf.write("#\3$\3$\3$\3%\3%\3%\3%\3%\5%\u0538\n%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\5%\u0545\n%\3%\3%\3%\5%\u054a\n%\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u055a\n&\3\'")
        buf.write("\3\'\3\'\3\'\7\'\u0560\n\'\f\'\16\'\u0563\13\'\3\'\3\'")
        buf.write("\3(\3(\3(\3(\3(\5(\u056c\n(\3)\3)\7)\u0570\n)\f)\16)\u0573")
        buf.write("\13)\3*\3*\3*\3*\3*\5*\u057a\n*\3*\3*\3*\5*\u057f\n*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u058a\n*\3*\3*\3*\3*\3*\5")
        buf.write("*\u0591\n*\3*\3*\3*\5*\u0596\n*\3+\3+\5+\u059a\n+\5+\u059c")
        buf.write("\n+\3+\3+\3+\5+\u05a1\n+\3+\3+\7+\u05a5\n+\f+\16+\u05a8")
        buf.write("\13+\3+\3+\5+\u05ac\n+\5+\u05ae\n+\3+\3+\5+\u05b2\n+\3")
        buf.write("+\5+\u05b5\n+\3+\5+\u05b8\n+\3+\3+\7+\u05bc\n+\f+\16+")
        buf.write("\u05bf\13+\3+\3+\5+\u05c3\n+\5+\u05c5\n+\3+\3+\3+\5+\u05ca")
        buf.write("\n+\3+\3+\3+\3+\3+\5+\u05d1\n+\5+\u05d3\n+\3+\3+\3+\3")
        buf.write("+\3+\5+\u05da\n+\3,\3,\3,\3,\3,\5,\u05e1\n,\3,\5,\u05e4")
        buf.write("\n,\3-\3-\3-\3-\3-\3-\5-\u05ec\n-\3-\3-\3-\3-\3-\3-\5")
        buf.write("-\u05f4\n-\5-\u05f6\n-\3.\3.\3.\3.\3.\3.\5.\u05fe\n.\3")
        buf.write("/\3/\5/\u0602\n/\3/\5/\u0605\n/\3/\3/\7/\u0609\n/\f/\16")
        buf.write("/\u060c\13/\3/\3/\5/\u0610\n/\3/\5/\u0613\n/\3/\3/\7/")
        buf.write("\u0617\n/\f/\16/\u061a\13/\5/\u061c\n/\3\60\3\60\5\60")
        buf.write("\u0620\n\60\3\60\3\60\3\60\5\60\u0625\n\60\3\60\3\60\3")
        buf.write("\60\5\60\u062a\n\60\3\60\3\60\5\60\u062e\n\60\3\60\3\60")
        buf.write("\3\60\5\60\u0633\n\60\3\60\5\60\u0636\n\60\3\60\3\60\3")
        buf.write("\60\5\60\u063b\n\60\3\60\3\60\5\60\u063f\n\60\3\60\3\60")
        buf.write("\5\60\u0643\n\60\3\60\3\60\3\60\5\60\u0648\n\60\3\60\3")
        buf.write("\60\3\60\5\60\u064d\n\60\3\60\3\60\3\60\5\60\u0652\n\60")
        buf.write("\3\60\3\60\3\60\3\60\5\60\u0658\n\60\3\60\3\60\3\60\5")
        buf.write("\60\u065d\n\60\3\60\3\60\3\60\5\60\u0662\n\60\3\60\3\60")
        buf.write("\3\60\3\60\5\60\u0668\n\60\3\60\3\60\3\60\5\60\u066d\n")
        buf.write("\60\3\60\3\60\3\60\5\60\u0672\n\60\3\60\3\60\3\60\5\60")
        buf.write("\u0677\n\60\3\60\3\60\3\60\5\60\u067c\n\60\3\60\3\60\3")
        buf.write("\60\5\60\u0681\n\60\3\60\3\60\3\60\5\60\u0686\n\60\3\60")
        buf.write("\3\60\3\60\5\60\u068b\n\60\3\60\3\60\3\60\5\60\u0690\n")
        buf.write("\60\3\60\3\60\3\60\5\60\u0695\n\60\3\60\3\60\3\60\5\60")
        buf.write("\u069a\n\60\3\60\3\60\3\60\3\60\5\60\u06a0\n\60\3\60\3")
        buf.write("\60\5\60\u06a4\n\60\3\60\3\60\3\60\3\60\5\60\u06aa\n\60")
        buf.write("\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\5\62\u06b4\n")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\5\62\u06bb\n\62\5\62\u06bd")
        buf.write("\n\62\3\62\3\62\3\62\3\62\7\62\u06c3\n\62\f\62\16\62\u06c6")
        buf.write("\13\62\3\62\3\62\5\62\u06ca\n\62\3\63\5\63\u06cd\n\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u06d5\n\63\3\63\3")
        buf.write("\63\3\63\3\63\5\63\u06db\n\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u06eb")
        buf.write("\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u06f7\n\63\5\63\u06f9\n\63\3\64\5\64\u06fc\n\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0704\n\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u070a\n\64\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u0710\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\7\65\u071b\n\65\f\65\16\65\u071e\13\65\3\65\3\65\7")
        buf.write("\65\u0722\n\65\f\65\16\65\u0725\13\65\3\65\3\65\3\65\7")
        buf.write("\65\u072a\n\65\f\65\16\65\u072d\13\65\5\65\u072f\n\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u0739\n")
        buf.write("\65\f\65\16\65\u073c\13\65\3\65\3\65\7\65\u0740\n\65\f")
        buf.write("\65\16\65\u0743\13\65\3\65\3\65\3\65\7\65\u0748\n\65\f")
        buf.write("\65\16\65\u074b\13\65\5\65\u074d\n\65\3\65\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\7\65\u0757\n\65\f\65\16\65\u075a")
        buf.write("\13\65\3\65\3\65\7\65\u075e\n\65\f\65\16\65\u0761\13\65")
        buf.write("\3\65\3\65\3\65\7\65\u0766\n\65\f\65\16\65\u0769\13\65")
        buf.write("\5\65\u076b\n\65\3\65\3\65\3\65\7\65\u0770\n\65\f\65\16")
        buf.write("\65\u0773\13\65\3\65\3\65\3\65\7\65\u0778\n\65\f\65\16")
        buf.write("\65\u077b\13\65\5\65\u077d\n\65\5\65\u077f\n\65\3\66\3")
        buf.write("\66\3\66\5\66\u0784\n\66\3\67\3\67\3\67\3\67\6\67\u078a")
        buf.write("\n\67\r\67\16\67\u078b\3\67\3\67\38\38\38\78\u0793\n8")
        buf.write("\f8\168\u0796\138\39\59\u0799\n9\39\39\59\u079d\n9\39")
        buf.write("\39\39\59\u07a2\n9\39\39\39\39\59\u07a8\n9\39\39\39\3")
        buf.write("9\59\u07ae\n9\39\39\39\59\u07b3\n9\39\39\39\59\u07b8\n")
        buf.write("9\39\39\39\59\u07bd\n9\39\39\39\59\u07c2\n9\39\59\u07c5")
        buf.write("\n9\3:\3:\3:\5:\u07ca\n:\3:\6:\u07cd\n:\r:\16:\u07ce\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\5:\u07d9\n:\3;\3;\5;\u07dd\n;\3")
        buf.write(";\3;\3;\3;\3;\5;\u07e4\n;\3;\3;\3;\5;\u07e9\n;\3;\5;\u07ec")
        buf.write("\n;\3;\3;\3;\5;\u07f1\n;\3;\5;\u07f4\n;\3;\3;\5;\u07f8")
        buf.write("\n;\3;\3;\5;\u07fc\n;\3<\3<\3<\3<\7<\u0802\n<\f<\16<\u0805")
        buf.write("\13<\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>\5")
        buf.write(">\u0817\n>\3>\5>\u081a\n>\3>\5>\u081d\n>\3>\3>\5>\u0821")
        buf.write("\n>\3>\3>\3?\3?\3?\3?\7?\u0829\n?\f?\16?\u082c\13?\3@")
        buf.write("\3@\3@\3@\3@\3@\3@\3@\7@\u0836\n@\f@\16@\u0839\13@\3@")
        buf.write("\3@\3A\3A\5A\u083f\nA\3A\5A\u0842\nA\3A\3A\3A\3A\3A\7")
        buf.write("A\u0849\nA\fA\16A\u084c\13A\3A\5A\u084f\nA\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\5B\u085a\nB\3B\5B\u085d\nB\3B\3B\5B\u0861")
        buf.write("\nB\3B\3B\3C\3C\3C\3C\5C\u0869\nC\3C\5C\u086c\nC\3C\3")
        buf.write("C\3C\5C\u0871\nC\3C\3C\3C\3C\3C\3C\5C\u0879\nC\3C\3C\3")
        buf.write("C\3C\5C\u087f\nC\3C\3C\5C\u0883\nC\3D\3D\5D\u0887\nD\3")
        buf.write("D\7D\u088a\nD\fD\16D\u088d\13D\3D\3D\5D\u0891\nD\3D\3")
        buf.write("D\3D\3D\3D\5D\u0898\nD\3D\3D\5D\u089c\nD\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\7D\u08a5\nD\fD\16D\u08a8\13D\3D\3D\3D\3D\3D\5")
        buf.write("D\u08af\nD\3D\5D\u08b2\nD\3D\3D\7D\u08b6\nD\fD\16D\u08b9")
        buf.write("\13D\3D\3D\3D\5D\u08be\nD\5D\u08c0\nD\3D\3D\3D\5D\u08c5")
        buf.write("\nD\3D\3D\7D\u08c9\nD\fD\16D\u08cc\13D\3D\3D\3D\5D\u08d1")
        buf.write("\nD\5D\u08d3\nD\3D\3D\5D\u08d7\nD\3D\5D\u08da\nD\3D\5")
        buf.write("D\u08dd\nD\3D\3D\7D\u08e1\nD\fD\16D\u08e4\13D\3D\3D\3")
        buf.write("D\5D\u08e9\nD\3D\5D\u08ec\nD\3D\3D\7D\u08f0\nD\fD\16D")
        buf.write("\u08f3\13D\3D\3D\3D\5D\u08f8\nD\5D\u08fa\nD\3D\3D\3D\5")
        buf.write("D\u08ff\nD\3D\3D\3D\3D\3D\3D\5D\u0907\nD\5D\u0909\nD\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\5D\u0912\nD\3D\3D\3D\5D\u0917\nD\3")
        buf.write("D\3D\3D\3D\3D\3D\5D\u091f\nD\3D\3D\5D\u0923\nD\3D\3D\3")
        buf.write("D\3D\3D\3D\5D\u092b\nD\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0935")
        buf.write("\nD\3D\3D\3D\5D\u093a\nD\3D\3D\3D\3D\3D\5D\u0941\nD\3")
        buf.write("D\3D\5D\u0945\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\5D\u0958\nD\3D\3D\5D\u095c\nD\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\5D\u0968\nD\3D\5D\u096b\nD\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\5D\u0974\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\7D\u0983\nD\fD\16D\u0986\13D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\5D\u0991\nD\3D\3D\3D\3D\3D\5D\u0998\nD\3")
        buf.write("D\3D\3D\3D\3D\5D\u099f\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\7D\u09ac\nD\fD\16D\u09af\13D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\5D\u09bb\nD\3D\3D\3D\3D\5D\u09c1\nD\3D\3D\3")
        buf.write("D\3D\5D\u09c7\nD\3D\3D\3D\3D\5D\u09cd\nD\3D\3D\3D\3D\5")
        buf.write("D\u09d3\nD\3D\3D\3D\3D\5D\u09d9\nD\3D\3D\3D\3D\5D\u09df")
        buf.write("\nD\3E\3E\3E\5E\u09e4\nE\3E\3E\3F\3F\3F\5F\u09eb\nF\3")
        buf.write("F\3F\3G\3G\3G\5G\u09f2\nG\3G\3G\3G\3G\3G\5G\u09f9\nG\3")
        buf.write("G\5G\u09fc\nG\3G\3G\5G\u0a00\nG\3G\5G\u0a03\nG\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3I\3I\3I\5I\u0a10\nI\3I\3I\3J\3J\3J\5")
        buf.write("J\u0a17\nJ\3J\3J\3K\3K\3K\5K\u0a1e\nK\3K\3K\3L\3L\5L\u0a24")
        buf.write("\nL\3L\3L\5L\u0a28\nL\3L\3L\5L\u0a2c\nL\3M\3M\3M\3M\3")
        buf.write("M\5M\u0a33\nM\3M\5M\u0a36\nM\3N\3N\3N\5N\u0a3b\nN\3N\3")
        buf.write("N\3O\3O\3O\5O\u0a42\nO\3O\3O\3O\7O\u0a47\nO\fO\16O\u0a4a")
        buf.write("\13O\3O\5O\u0a4d\nO\3P\3P\3P\3P\3P\7P\u0a54\nP\fP\16P")
        buf.write("\u0a57\13P\3Q\3Q\3Q\3Q\3R\3R\5R\u0a5f\nR\3R\3R\3S\3S\3")
        buf.write("S\3S\3S\5S\u0a68\nS\3S\5S\u0a6b\nS\3T\3T\5T\u0a6f\nT\3")
        buf.write("U\3U\3U\3V\3V\3V\3V\5V\u0a78\nV\3W\3W\5W\u0a7c\nW\3W\5")
        buf.write("W\u0a7f\nW\3W\5W\u0a82\nW\3W\3W\3W\3W\3W\3W\5W\u0a8a\n")
        buf.write("W\3W\3W\3W\3W\5W\u0a90\nW\3W\3W\3W\3W\3W\7W\u0a97\nW\f")
        buf.write("W\16W\u0a9a\13W\5W\u0a9c\nW\3W\3W\3W\3W\3W\3W\3W\7W\u0aa5")
        buf.write("\nW\fW\16W\u0aa8\13W\5W\u0aaa\nW\3X\3X\3X\5X\u0aaf\nX")
        buf.write("\3X\5X\u0ab2\nX\3X\3X\3X\5X\u0ab7\nX\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\3X\5X\u0ac1\nX\3X\3X\3X\5X\u0ac6\nX\3X\3X\6X\u0aca")
        buf.write("\nX\rX\16X\u0acb\5X\u0ace\nX\3X\3X\6X\u0ad2\nX\rX\16X")
        buf.write("\u0ad3\5X\u0ad6\nX\3X\3X\3X\3X\5X\u0adc\nX\3X\3X\3X\3")
        buf.write("X\7X\u0ae2\nX\fX\16X\u0ae5\13X\3X\3X\5X\u0ae9\nX\3X\3")
        buf.write("X\3X\3X\7X\u0aef\nX\fX\16X\u0af2\13X\5X\u0af4\nX\3Y\3")
        buf.write("Y\3Y\5Y\u0af9\nY\3Y\5Y\u0afc\nY\3Y\3Y\3Y\5Y\u0b01\nY\3")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b09\nY\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b11")
        buf.write("\nY\3Y\3Y\3Y\3Y\5Y\u0b17\nY\3Y\3Y\3Y\3Y\7Y\u0b1d\nY\f")
        buf.write("Y\16Y\u0b20\13Y\3Y\3Y\5Y\u0b24\nY\3Y\3Y\3Y\3Y\7Y\u0b2a")
        buf.write("\nY\fY\16Y\u0b2d\13Y\5Y\u0b2f\nY\3Z\3Z\5Z\u0b33\nZ\3Z")
        buf.write("\5Z\u0b36\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0b3e\nZ\3Z\3Z\3Z\3")
        buf.write("Z\5Z\u0b44\nZ\3Z\3Z\3Z\3Z\3Z\7Z\u0b4b\nZ\fZ\16Z\u0b4e")
        buf.write("\13Z\5Z\u0b50\nZ\3[\3[\5[\u0b54\n[\3[\3[\5[\u0b58\n[\3")
        buf.write("[\3[\6[\u0b5c\n[\r[\16[\u0b5d\3[\3[\5[\u0b62\n[\3[\3[")
        buf.write("\5[\u0b66\n[\5[\u0b68\n[\3[\5[\u0b6b\n[\3[\5[\u0b6e\n")
        buf.write("[\3[\5[\u0b71\n[\3[\3[\6[\u0b75\n[\r[\16[\u0b76\3[\3[")
        buf.write("\5[\u0b7b\n[\3[\5[\u0b7e\n[\3[\5[\u0b81\n[\3[\5[\u0b84")
        buf.write("\n[\3[\5[\u0b87\n[\5[\u0b89\n[\3\\\3\\\5\\\u0b8d\n\\\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\3]\3]\3]\7]\u0b99\n]\f]\16]\u0b9c")
        buf.write("\13]\5]\u0b9e\n]\3^\3^\3^\3^\5^\u0ba4\n^\3_\3_\5_\u0ba8")
        buf.write("\n_\3`\3`\3`\3`\3`\3`\5`\u0bb0\n`\3a\3a\5a\u0bb4\na\3")
        buf.write("a\5a\u0bb7\na\3a\5a\u0bba\na\3a\3a\3a\3a\3a\3a\3a\5a\u0bc3")
        buf.write("\na\3a\3a\5a\u0bc7\na\3a\5a\u0bca\na\3a\3a\5a\u0bce\n")
        buf.write("a\3b\3b\5b\u0bd2\nb\3b\5b\u0bd5\nb\3b\5b\u0bd8\nb\3b\3")
        buf.write("b\3b\5b\u0bdd\nb\3b\3b\3b\3b\5b\u0be3\nb\7b\u0be5\nb\f")
        buf.write("b\16b\u0be8\13b\3b\3b\3b\3b\3b\3b\3b\5b\u0bf1\nb\3b\3")
        buf.write("b\3b\3b\5b\u0bf7\nb\7b\u0bf9\nb\fb\16b\u0bfc\13b\3b\3")
        buf.write("b\3b\5b\u0c01\nb\3b\3b\5b\u0c05\nb\3c\3c\3c\3c\5c\u0c0b")
        buf.write("\nc\3c\5c\u0c0e\nc\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0c1a")
        buf.write("\nd\3d\3d\5d\u0c1e\nd\3d\3d\5d\u0c22\nd\3e\3e\3e\3e\3")
        buf.write("e\3e\5e\u0c2a\ne\3e\3e\5e\u0c2e\ne\3f\3f\3f\3f\3g\3g\5")
        buf.write("g\u0c36\ng\3g\5g\u0c39\ng\3g\3g\5g\u0c3d\ng\3g\5g\u0c40")
        buf.write("\ng\3g\3g\3g\3g\7g\u0c46\ng\fg\16g\u0c49\13g\3g\3g\5g")
        buf.write("\u0c4d\ng\3g\5g\u0c50\ng\3g\5g\u0c53\ng\3h\3h\5h\u0c57")
        buf.write("\nh\3h\5h\u0c5a\nh\3h\3h\3h\3h\3h\7h\u0c61\nh\fh\16h\u0c64")
        buf.write("\13h\3h\3h\5h\u0c68\nh\3i\3i\3i\3i\3i\7i\u0c6f\ni\fi\16")
        buf.write("i\u0c72\13i\3j\3j\5j\u0c76\nj\3k\3k\3k\7k\u0c7b\nk\fk")
        buf.write("\16k\u0c7e\13k\3l\3l\7l\u0c82\nl\fl\16l\u0c85\13l\3l\3")
        buf.write("l\3l\7l\u0c8a\nl\fl\16l\u0c8d\13l\3l\3l\5l\u0c91\nl\3")
        buf.write("m\3m\3m\3m\3m\3m\5m\u0c99\nm\3m\5m\u0c9c\nm\3m\5m\u0c9f")
        buf.write("\nm\3m\3m\3m\7m\u0ca4\nm\fm\16m\u0ca7\13m\5m\u0ca9\nm")
        buf.write("\3m\3m\3m\3m\3m\5m\u0cb0\nm\3m\5m\u0cb3\nm\3m\3m\3m\3")
        buf.write("m\3m\3m\5m\u0cbb\nm\3n\3n\3n\3n\5n\u0cc1\nn\3n\3n\3n\3")
        buf.write("n\3o\3o\3o\3o\3o\5o\u0ccc\no\3p\5p\u0ccf\np\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\5p\u0cda\np\3p\3p\3p\3p\5p\u0ce0\np\3")
        buf.write("p\3p\5p\u0ce4\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0cef\n")
        buf.write("p\3p\3p\3p\5p\u0cf4\np\5p\u0cf6\np\3p\3p\5p\u0cfa\np\3")
        buf.write("q\3q\3q\3q\3q\3q\3q\3q\5q\u0d04\nq\3r\3r\3r\3r\3r\3r\3")
        buf.write("r\3r\5r\u0d0e\nr\3s\3s\7s\u0d12\ns\fs\16s\u0d15\13s\3")
        buf.write("s\3s\5s\u0d19\ns\3s\5s\u0d1c\ns\3s\5s\u0d1f\ns\3s\5s\u0d22")
        buf.write("\ns\3s\3s\7s\u0d26\ns\fs\16s\u0d29\13s\3s\3s\5s\u0d2d")
        buf.write("\ns\3s\5s\u0d30\ns\3s\5s\u0d33\ns\3s\5s\u0d36\ns\3s\3")
        buf.write("s\7s\u0d3a\ns\fs\16s\u0d3d\13s\3s\3s\5s\u0d41\ns\3s\5")
        buf.write("s\u0d44\ns\3s\5s\u0d47\ns\5s\u0d49\ns\3t\3t\7t\u0d4d\n")
        buf.write("t\ft\16t\u0d50\13t\3t\3t\5t\u0d54\nt\3t\5t\u0d57\nt\3")
        buf.write("t\5t\u0d5a\nt\3u\3u\5u\u0d5e\nu\3u\3u\3v\3v\5v\u0d64\n")
        buf.write("v\3v\3v\5v\u0d68\nv\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0d72\n")
        buf.write("w\3x\3x\5x\u0d76\nx\3x\3x\7x\u0d7a\nx\fx\16x\u0d7d\13")
        buf.write("x\3y\3y\3y\3y\3y\3y\5y\u0d85\ny\3y\5y\u0d88\ny\3y\3y\5")
        buf.write("y\u0d8c\ny\3y\5y\u0d8f\ny\3y\3y\5y\u0d93\ny\3y\3y\5y\u0d97")
        buf.write("\ny\3y\5y\u0d9a\ny\5y\u0d9c\ny\3z\3z\3z\3{\3{\3{\3|\3")
        buf.write("|\3|\3|\7|\u0da8\n|\f|\16|\u0dab\13|\3|\3|\3|\3|\3|\3")
        buf.write("|\3|\3|\3|\5|\u0db6\n|\3|\3|\6|\u0dba\n|\r|\16|\u0dbb")
        buf.write("\5|\u0dbe\n|\3|\3|\6|\u0dc2\n|\r|\16|\u0dc3\5|\u0dc6\n")
        buf.write("|\5|\u0dc8\n|\3}\3}\3}\3}\5}\u0dce\n}\3}\3}\3}\3}\3}\3")
        buf.write("}\5}\u0dd6\n}\3~\3~\3~\3~\3~\3~\5~\u0dde\n~\3\177\3\177")
        buf.write("\3\177\3\177\5\177\u0de4\n\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\7\177\u0deb\n\177\f\177\16\177\u0dee\13\177\3\177")
        buf.write("\3\177\5\177\u0df2\n\177\5\177\u0df4\n\177\3\177\3\177")
        buf.write("\5\177\u0df8\n\177\3\u0080\3\u0080\5\u0080\u0dfc\n\u0080")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0e02\n\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0e09")
        buf.write("\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082")
        buf.write("\u0e10\n\u0082\f\u0082\16\u0082\u0e13\13\u0082\5\u0082")
        buf.write("\u0e15\n\u0082\3\u0083\3\u0083\5\u0083\u0e19\n\u0083\3")
        buf.write("\u0084\3\u0084\5\u0084\u0e1d\n\u0084\3\u0084\3\u0084\5")
        buf.write("\u0084\u0e21\n\u0084\3\u0084\5\u0084\u0e24\n\u0084\3\u0084")
        buf.write("\5\u0084\u0e27\n\u0084\3\u0084\5\u0084\u0e2a\n\u0084\3")
        buf.write("\u0085\3\u0085\5\u0085\u0e2e\n\u0085\3\u0085\3\u0085\5")
        buf.write("\u0085\u0e32\n\u0085\3\u0085\5\u0085\u0e35\n\u0085\3\u0085")
        buf.write("\5\u0085\u0e38\n\u0085\3\u0085\5\u0085\u0e3b\n\u0085\3")
        buf.write("\u0086\3\u0086\3\u0086\3\u0087\3\u0087\5\u0087\u0e42\n")
        buf.write("\u0087\3\u0087\3\u0087\5\u0087\u0e46\n\u0087\3\u0087\3")
        buf.write("\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\7\u0089\u0e53\n\u0089\f\u0089")
        buf.write("\16\u0089\u0e56\13\u0089\3\u008a\3\u008a\3\u008a\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\5\u008c")
        buf.write("\u0e62\n\u008c\3\u008c\3\u008c\3\u008c\3\u008c\7\u008c")
        buf.write("\u0e68\n\u008c\f\u008c\16\u008c\u0e6b\13\u008c\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d")
        buf.write("\u0e74\n\u008d\3\u008e\3\u008e\5\u008e\u0e78\n\u008e\3")
        buf.write("\u008e\5\u008e\u0e7b\n\u008e\3\u008e\3\u008e\3\u008f\3")
        buf.write("\u008f\5\u008f\u0e81\n\u008f\3\u008f\5\u008f\u0e84\n\u008f")
        buf.write("\3\u008f\5\u008f\u0e87\n\u008f\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0e90\n\u0090")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\5\u0091\u0e99\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\7\u0092\u0ea1\n\u0092\f\u0092\16\u0092")
        buf.write("\u0ea4\13\u0092\3\u0092\5\u0092\u0ea7\n\u0092\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\7\u0093\u0eaf")
        buf.write("\n\u0093\f\u0093\16\u0093\u0eb2\13\u0093\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ebb")
        buf.write("\n\u0094\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096")
        buf.write("\5\u0096\u0ec3\n\u0096\3\u0096\5\u0096\u0ec6\n\u0096\3")
        buf.write("\u0097\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0ecd\n")
        buf.write("\u0097\f\u0097\16\u0097\u0ed0\13\u0097\5\u0097\u0ed2\n")
        buf.write("\u0097\3\u0097\3\u0097\5\u0097\u0ed6\n\u0097\3\u0097\7")
        buf.write("\u0097\u0ed9\n\u0097\f\u0097\16\u0097\u0edc\13\u0097\3")
        buf.write("\u0097\5\u0097\u0edf\n\u0097\3\u0098\3\u0098\3\u0098\3")
        buf.write("\u0098\3\u0098\7\u0098\u0ee6\n\u0098\f\u0098\16\u0098")
        buf.write("\u0ee9\13\u0098\5\u0098\u0eeb\n\u0098\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\7\u009b\u0f08\n\u009b")
        buf.write("\f\u009b\16\u009b\u0f0b\13\u009b\5\u009b\u0f0d\n\u009b")
        buf.write("\3\u009b\5\u009b\u0f10\n\u009b\3\u009c\3\u009c\3\u009d")
        buf.write("\3\u009d\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\7\u00a0\u0f46\n\u00a0\f\u00a0\16\u00a0\u0f49\13\u00a0")
        buf.write("\3\u00a0\3\u00a0\5\u00a0\u0f4d\n\u00a0\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0f69\n\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f77\n\u00a4")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0f7c\n\u00a5\f\u00a5")
        buf.write("\16\u00a5\u0f7f\13\u00a5\3\u00a5\5\u00a5\u0f82\n\u00a5")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0f88\n\u00a6")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7")
        buf.write("\u0f90\n\u00a7\5\u00a7\u0f92\n\u00a7\3\u00a8\3\u00a8\3")
        buf.write("\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\5\u00a9\u0f9d\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0fa7\n\u00ab")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0fae")
        buf.write("\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fb4")
        buf.write("\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af")
        buf.write("\5\u00af\u0fbc\n\u00af\3\u00b0\3\u00b0\3\u00b0\5\u00b0")
        buf.write("\u0fc1\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0")
        buf.write("\u0fc7\n\u00b0\f\u00b0\16\u00b0\u0fca\13\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\7\u00b0\u0fcf\n\u00b0\f\u00b0\16\u00b0")
        buf.write("\u0fd2\13\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0fd7")
        buf.write("\n\u00b0\f\u00b0\16\u00b0\u0fda\13\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\7\u00b0\u0fdf\n\u00b0\f\u00b0\16\u00b0\u0fe2")
        buf.write("\13\u00b0\3\u00b0\6\u00b0\u0fe5\n\u00b0\r\u00b0\16\u00b0")
        buf.write("\u0fe6\5\u00b0\u0fe9\n\u00b0\3\u00b0\3\u00b0\5\u00b0\u0fed")
        buf.write("\n\u00b0\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0ff2\n\u00b1")
        buf.write("\3\u00b1\6\u00b1\u0ff5\n\u00b1\r\u00b1\16\u00b1\u0ff6")
        buf.write("\3\u00b1\3\u00b1\6\u00b1\u0ffb\n\u00b1\r\u00b1\16\u00b1")
        buf.write("\u0ffc\5\u00b1\u0fff\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\6\u00b2\u1008\n\u00b2\r")
        buf.write("\u00b2\16\u00b2\u1009\3\u00b2\7\u00b2\u100d\n\u00b2\f")
        buf.write("\u00b2\16\u00b2\u1010\13\u00b2\3\u00b2\3\u00b2\6\u00b2")
        buf.write("\u1014\n\u00b2\r\u00b2\16\u00b2\u1015\5\u00b2\u1018\n")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5")
        buf.write("\u1026\n\u00b5\3\u00b5\3\u00b5\6\u00b5\u102a\n\u00b5\r")
        buf.write("\u00b5\16\u00b5\u102b\3\u00b5\3\u00b5\3\u00b5\5\u00b5")
        buf.write("\u1031\n\u00b5\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u1036\n")
        buf.write("\u00b6\3\u00b6\3\u00b6\6\u00b6\u103a\n\u00b6\r\u00b6\16")
        buf.write("\u00b6\u103b\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5")
        buf.write("\u00b6\u1043\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b8\3")
        buf.write("\u00b8\3\u00b8\5\u00b8\u104b\n\u00b8\3\u00b8\3\u00b8\3")
        buf.write("\u00b8\3\u00b8\6\u00b8\u1051\n\u00b8\r\u00b8\16\u00b8")
        buf.write("\u1052\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u1058\n\u00b8\3")
        buf.write("\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u105e\n\u00b9\3")
        buf.write("\u00b9\5\u00b9\u1061\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3")
        buf.write("\u00b9\3\u00b9\3\u00b9\5\u00b9\u1069\n\u00b9\3\u00ba\3")
        buf.write("\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1070\n\u00ba\3")
        buf.write("\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\5\u00bb\u1079\n\u00bb\3\u00bb\5\u00bb\u107c\n\u00bb\3")
        buf.write("\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd")
        buf.write("\u108b\n\u00bd\f\u00bd\16\u00bd\u108e\13\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00be\3\u00be\3\u00be\5\u00be\u1095\n\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be")
        buf.write("\u109d\n\u00be\3\u00bf\3\u00bf\5\u00bf\u10a1\n\u00bf\3")
        buf.write("\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u10a8\n")
        buf.write("\u00c0\3\u00c0\3\u00c0\6\u00c0\u10ac\n\u00c0\r\u00c0\16")
        buf.write("\u00c0\u10ad\3\u00c1\3\u00c1\3\u00c1\3\u00c1\6\u00c1\u10b4")
        buf.write("\n\u00c1\r\u00c1\16\u00c1\u10b5\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\7\u00c2\u10bd\n\u00c2\f\u00c2\16\u00c2")
        buf.write("\u10c0\13\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u10c5")
        buf.write("\n\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u10ca\n\u00c2")
        buf.write("\f\u00c2\16\u00c2\u10cd\13\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\5\u00c2\u10d3\n\u00c2\3\u00c2\7\u00c2\u10d6\n")
        buf.write("\u00c2\f\u00c2\16\u00c2\u10d9\13\u00c2\5\u00c2\u10db\n")
        buf.write("\u00c2\5\u00c2\u10dd\n\u00c2\3\u00c2\3\u00c2\6\u00c2\u10e1")
        buf.write("\n\u00c2\r\u00c2\16\u00c2\u10e2\5\u00c2\u10e5\n\u00c2")
        buf.write("\3\u00c2\3\u00c2\7\u00c2\u10e9\n\u00c2\f\u00c2\16\u00c2")
        buf.write("\u10ec\13\u00c2\5\u00c2\u10ee\n\u00c2\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u10f5\n\u00c3\f\u00c3")
        buf.write("\16\u00c3\u10f8\13\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3")
        buf.write("\u10fd\n\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u1102\n")
        buf.write("\u00c3\f\u00c3\16\u00c3\u1105\13\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\5\u00c3\u110b\n\u00c3\3\u00c3\7\u00c3")
        buf.write("\u110e\n\u00c3\f\u00c3\16\u00c3\u1111\13\u00c3\5\u00c3")
        buf.write("\u1113\n\u00c3\5\u00c3\u1115\n\u00c3\3\u00c3\3\u00c3\6")
        buf.write("\u00c3\u1119\n\u00c3\r\u00c3\16\u00c3\u111a\5\u00c3\u111d")
        buf.write("\n\u00c3\3\u00c3\3\u00c3\7\u00c3\u1121\n\u00c3\f\u00c3")
        buf.write("\16\u00c3\u1124\13\u00c3\5\u00c3\u1126\n\u00c3\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\5\u00c4\u112b\n\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\7\u00c4\u1130\n\u00c4\f\u00c4\16\u00c4\u1133")
        buf.write("\13\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u1139")
        buf.write("\n\u00c5\f\u00c5\16\u00c5\u113c\13\u00c5\3\u00c5\3\u00c5")
        buf.write("\5\u00c5\u1140\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\7\u00c5\u1147\n\u00c5\f\u00c5\16\u00c5\u114a")
        buf.write("\13\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u1150")
        buf.write("\n\u00c5\3\u00c5\7\u00c5\u1153\n\u00c5\f\u00c5\16\u00c5")
        buf.write("\u1156\13\u00c5\5\u00c5\u1158\n\u00c5\5\u00c5\u115a\n")
        buf.write("\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u1160\n")
        buf.write("\u00c5\f\u00c5\16\u00c5\u1163\13\u00c5\5\u00c5\u1165\n")
        buf.write("\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\7\u00c6\u116f\n\u00c6\f\u00c6\16\u00c6")
        buf.write("\u1172\13\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u1177")
        buf.write("\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7")
        buf.write("\u117e\n\u00c7\f\u00c7\16\u00c7\u1181\13\u00c7\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u1187\n\u00c8\f\u00c8")
        buf.write("\16\u00c8\u118a\13\u00c8\3\u00c8\3\u00c8\5\u00c8\u118e")
        buf.write("\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8")
        buf.write("\u1195\n\u00c8\f\u00c8\16\u00c8\u1198\13\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\5\u00c8\u119d\n\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u11a6")
        buf.write("\n\u00c8\f\u00c8\16\u00c8\u11a9\13\u00c8\5\u00c8\u11ab")
        buf.write("\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\7\u00c9\u11b5\n\u00c9\f\u00c9\16\u00c9")
        buf.write("\u11b8\13\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca")
        buf.write("\u11be\n\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u11c3\n")
        buf.write("\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\5\u00cc\u11d2\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u11dd")
        buf.write("\n\u00cc\3\u00cc\5\u00cc\u11e0\n\u00cc\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd")
        buf.write("\u11ea\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u11f4\n\u00ce\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write("\5\u00cf\u11fe\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d1")
        buf.write("\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u1208\n\u00d1")
        buf.write("\3\u00d2\3\u00d2\5\u00d2\u120c\n\u00d2\3\u00d2\3\u00d2")
        buf.write("\5\u00d2\u1210\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u1219\n\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u1234\n\u00d2\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1243")
        buf.write("\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5")
        buf.write("\5\u00d5\u124b\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\7\u00d6\u1254\n\u00d6\f\u00d6")
        buf.write("\16\u00d6\u1257\13\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\5\u00d7\u125d\n\u00d7\3\u00d8\3\u00d8\5\u00d8\u1261\n")
        buf.write("\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\5\u00d9")
        buf.write("\u1268\n\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u126d\n")
        buf.write("\u00d9\3\u00d9\5\u00d9\u1270\n\u00d9\3\u00d9\5\u00d9\u1273")
        buf.write("\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da")
        buf.write("\3\u00da\5\u00da\u127c\n\u00da\3\u00db\3\u00db\5\u00db")
        buf.write("\u1280\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\7\u00de\u129c\n\u00de\f\u00de\16\u00de\u129f\13\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u12a5\n\u00de")
        buf.write("\3\u00de\3\u00de\5\u00de\u12a9\n\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\5\u00de\u12b0\n\u00de\3\u00de")
        buf.write("\5\u00de\u12b3\n\u00de\3\u00de\3\u00de\3\u00de\5\u00de")
        buf.write("\u12b8\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\5\u00df\u12c2\n\u00df\3\u00df")
        buf.write("\3\u00df\5\u00df\u12c6\n\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\5\u00df\u12cc\n\u00df\3\u00df\5\u00df\u12cf\n")
        buf.write("\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u12d4\n\u00df\3")
        buf.write("\u00df\3\u00df\5\u00df\u12d8\n\u00df\3\u00df\3\u00df\3")
        buf.write("\u00df\3\u00df\3\u00df\5\u00df\u12df\n\u00df\3\u00df\5")
        buf.write("\u00df\u12e2\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5")
        buf.write("\u00df\u12e8\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3")
        buf.write("\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1300\n\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u130d\n\u00df")
        buf.write("\3\u00df\5\u00df\u1310\n\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u131a")
        buf.write("\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\5\u00df\u1322\n\u00df\3\u00df\3\u00df\5\u00df\u1326\n")
        buf.write("\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df")
        buf.write("\u132d\n\u00df\3\u00df\5\u00df\u1330\n\u00df\3\u00df\3")
        buf.write("\u00df\3\u00df\3\u00df\3\u00df\7\u00df\u1337\n\u00df\f")
        buf.write("\u00df\16\u00df\u133a\13\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\5\u00df\u133f\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\5\u00df\u1345\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u134f\n\u00df")
        buf.write("\5\u00df\u1351\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write("\5\u00e0\u1357\n\u00e0\3\u00e0\5\u00e0\u135a\n\u00e0\3")
        buf.write("\u00e0\5\u00e0\u135d\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3")
        buf.write("\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\5\u00e1\u1369\n\u00e1\3\u00e1\5\u00e1\u136c\n\u00e1\3")
        buf.write("\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u1372\n\u00e2\3")
        buf.write("\u00e3\5\u00e3\u1375\n\u00e3\3\u00e3\3\u00e3\3\u00e3\3")
        buf.write("\u00e3\3\u00e3\3\u00e3\5\u00e3\u137d\n\u00e3\3\u00e3\3")
        buf.write("\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1385\n")
        buf.write("\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u138b\n")
        buf.write("\u00e4\3\u00e4\3\u00e4\5\u00e4\u138f\n\u00e4\3\u00e5\3")
        buf.write("\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u139d\n\u00e5")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7")
        buf.write("\3\u00e7\7\u00e7\u13a7\n\u00e7\f\u00e7\16\u00e7\u13aa")
        buf.write("\13\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u13b0")
        buf.write("\n\u00e7\3\u00e7\5\u00e7\u13b3\n\u00e7\3\u00e7\3\u00e7")
        buf.write("\3\u00e7\3\u00e8\3\u00e8\5\u00e8\u13ba\n\u00e8\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\7\u00e8\u13bf\n\u00e8\f\u00e8\16\u00e8")
        buf.write("\u13c2\13\u00e8\3\u00e9\3\u00e9\5\u00e9\u13c6\n\u00e9")
        buf.write("\3\u00e9\6\u00e9\u13c9\n\u00e9\r\u00e9\16\u00e9\u13ca")
        buf.write("\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\7\u00ea\u13d4\n\u00ea\f\u00ea\16\u00ea\u13d7\13\u00ea")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ed")
        buf.write("\3\u00ed\5\u00ed\u13e1\n\u00ed\3\u00ed\3\u00ed\3\u00ed")
        buf.write("\3\u00ed\5\u00ed\u13e7\n\u00ed\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\5\u00ee\u13ec\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\5\u00ee\u13f9\n\u00ee\5\u00ee\u13fb\n\u00ee\3\u00ee\3")
        buf.write("\u00ee\3\u00ee\5\u00ee\u1400\n\u00ee\3\u00ee\3\u00ee\3")
        buf.write("\u00ee\5\u00ee\u1405\n\u00ee\5\u00ee\u1407\n\u00ee\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u140e\n\u00ef")
        buf.write("\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u1415")
        buf.write("\n\u00f0\3\u00f0\5\u00f0\u1418\n\u00f0\3\u00f0\5\u00f0")
        buf.write("\u141b\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0")
        buf.write("\u1421\n\u00f0\3\u00f0\3\u00f0\5\u00f0\u1425\n\u00f0\3")
        buf.write("\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u142b\n\u00f1\3")
        buf.write("\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u1431\n\u00f2\3")
        buf.write("\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4")
        buf.write("\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5")
        buf.write("\u1440\n\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1445\n")
        buf.write("\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u144b\n")
        buf.write("\u00f6\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8\5\u00f8")
        buf.write("\u1452\n\u00f8\5\u00f8\u1454\n\u00f8\3\u00f9\3\u00f9\3")
        buf.write("\u00f9\3\u00f9\3\u00f9\5\u00f9\u145b\n\u00f9\3\u00f9\5")
        buf.write("\u00f9\u145e\n\u00f9\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3")
        buf.write("\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1468\n\u00fc\3")
        buf.write("\u00fd\3\u00fd\5\u00fd\u146c\n\u00fd\3\u00fe\3\u00fe\3")
        buf.write("\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\6\u00ff\u147e\n\u00ff\r\u00ff\16\u00ff\u147f\3\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u1487\n\u0100")
        buf.write("\5\u0100\u1489\n\u0100\3\u0101\3\u0101\3\u0101\6\u0101")
        buf.write("\u148e\n\u0101\r\u0101\16\u0101\u148f\5\u0101\u1492\n")
        buf.write("\u0101\3\u0102\3\u0102\5\u0102\u1496\n\u0102\3\u0103\3")
        buf.write("\u0103\3\u0103\5\u0103\u149b\n\u0103\3\u0104\3\u0104\3")
        buf.write("\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\5\u0104\u14a6\n\u0104\3\u0105\3\u0105\3\u0105\5\u0105")
        buf.write("\u14ab\n\u0105\3\u0106\3\u0106\3\u0107\3\u0107\5\u0107")
        buf.write("\u14b1\n\u0107\3\u0108\5\u0108\u14b4\n\u0108\3\u0108\3")
        buf.write("\u0108\5\u0108\u14b8\n\u0108\3\u0108\6\u0108\u14bb\n\u0108")
        buf.write("\r\u0108\16\u0108\u14bc\3\u0108\5\u0108\u14c0\n\u0108")
        buf.write("\3\u0108\3\u0108\5\u0108\u14c4\n\u0108\3\u0108\3\u0108")
        buf.write("\5\u0108\u14c8\n\u0108\5\u0108\u14ca\n\u0108\3\u0109\3")
        buf.write("\u0109\3\u010a\5\u010a\u14cf\n\u010a\3\u010a\3\u010a\3")
        buf.write("\u010b\5\u010b\u14d4\n\u010b\3\u010b\3\u010b\3\u010c\3")
        buf.write("\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c")
        buf.write("\3\u010c\5\u010c\u14e1\n\u010c\3\u010c\5\u010c\u14e4\n")
        buf.write("\u010c\3\u010d\3\u010d\5\u010d\u14e8\n\u010d\3\u010d\5")
        buf.write("\u010d\u14eb\n\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u14f0")
        buf.write("\n\u010d\3\u010d\3\u010d\5\u010d\u14f4\n\u010d\3\u010d")
        buf.write("\3\u010d\5\u010d\u14f8\n\u010d\3\u010d\5\u010d\u14fb\n")
        buf.write("\u010d\3\u010d\5\u010d\u14fe\n\u010d\3\u010d\3\u010d\5")
        buf.write("\u010d\u1502\n\u010d\3\u010d\5\u010d\u1505\n\u010d\3\u010d")
        buf.write("\5\u010d\u1508\n\u010d\3\u010d\3\u010d\5\u010d\u150c\n")
        buf.write("\u010d\3\u010d\5\u010d\u150f\n\u010d\3\u010d\5\u010d\u1512")
        buf.write("\n\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1517\n\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\7\u010d\u151e")
        buf.write("\n\u010d\f\u010d\16\u010d\u1521\13\u010d\3\u010d\3\u010d")
        buf.write("\5\u010d\u1525\n\u010d\3\u010d\3\u010d\3\u010d\5\u010d")
        buf.write("\u152a\n\u010d\3\u010d\3\u010d\5\u010d\u152e\n\u010d\3")
        buf.write("\u010d\5\u010d\u1531\n\u010d\3\u010e\3\u010e\5\u010e\u1535")
        buf.write("\n\u010e\3\u010e\3\u010e\5\u010e\u1539\n\u010e\3\u010e")
        buf.write("\3\u010e\3\u010e\5\u010e\u153e\n\u010e\3\u010e\3\u010e")
        buf.write("\3\u010e\5\u010e\u1543\n\u010e\3\u010e\3\u010e\5\u010e")
        buf.write("\u1547\n\u010e\5\u010e\u1549\n\u010e\3\u010f\3\u010f\3")
        buf.write("\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1559")
        buf.write("\n\u0111\3\u0111\3\u0111\3\u0112\3\u0112\3\u0112\7\u0112")
        buf.write("\u1560\n\u0112\f\u0112\16\u0112\u1563\13\u0112\3\u0113")
        buf.write("\3\u0113\3\u0113\7\u0113\u1568\n\u0113\f\u0113\16\u0113")
        buf.write("\u156b\13\u0113\3\u0114\3\u0114\3\u0114\3\u0114\7\u0114")
        buf.write("\u1571\n\u0114\f\u0114\16\u0114\u1574\13\u0114\3\u0114")
        buf.write("\3\u0114\3\u0115\3\u0115\3\u0115\7\u0115\u157b\n\u0115")
        buf.write("\f\u0115\16\u0115\u157e\13\u0115\3\u0116\3\u0116\3\u0116")
        buf.write("\7\u0116\u1583\n\u0116\f\u0116\16\u0116\u1586\13\u0116")
        buf.write("\3\u0117\3\u0117\3\u0117\7\u0117\u158b\n\u0117\f\u0117")
        buf.write("\16\u0117\u158e\13\u0117\3\u0118\3\u0118\3\u0118\7\u0118")
        buf.write("\u1593\n\u0118\f\u0118\16\u0118\u1596\13\u0118\3\u0119")
        buf.write("\3\u0119\3\u0119\7\u0119\u159b\n\u0119\f\u0119\16\u0119")
        buf.write("\u159e\13\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a")
        buf.write("\3\u011a\5\u011a\u15a6\n\u011a\5\u011a\u15a8\n\u011a\3")
        buf.write("\u011b\3\u011b\3\u011b\5\u011b\u15ad\n\u011b\3\u011b\5")
        buf.write("\u011b\u15b0\n\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u15b5")
        buf.write("\n\u011b\3\u011b\5\u011b\u15b8\n\u011b\3\u011c\3\u011c")
        buf.write("\5\u011c\u15bc\n\u011c\3\u011d\3\u011d\3\u011d\3\u011e")
        buf.write("\3\u011e\3\u011e\3\u011e\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\5\u011f\u15ca\n\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\3\u011f\5\u011f\u15d1\n\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\5\u011f\u15d6\n\u011f\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\6\u0120")
        buf.write("\u15f6\n\u0120\r\u0120\16\u0120\u15f7\3\u0120\3\u0120")
        buf.write("\5\u0120\u15fc\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\6\u0120\u1602\n\u0120\r\u0120\16\u0120\u1603\3\u0120")
        buf.write("\3\u0120\5\u0120\u1608\n\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1611\n\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120")
        buf.write("\u1619\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u161e\n")
        buf.write("\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\5\u0120\u1626\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120")
        buf.write("\u162b\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1630\n")
        buf.write("\u0120\5\u0120\u1632\n\u0120\3\u0120\3\u0120\3\u0120\3")
        buf.write("\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u163b\n\u0120\3")
        buf.write("\u0120\3\u0120\3\u0120\5\u0120\u1640\n\u0120\3\u0120\3")
        buf.write("\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1648\n")
        buf.write("\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u164d\n\u0120\3")
        buf.write("\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120")
        buf.write("\u1655\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\5\u0120\u165d\n\u0120\3\u0120\5\u0120\u1660\n")
        buf.write("\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\5\u0120\u166a\n\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\5\u0120\u1675\n\u0120\3\u0121\3\u0121\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u1680")
        buf.write("\n\u0122\f\u0122\16\u0122\u1683\13\u0122\3\u0122\3\u0122")
        buf.write("\3\u0122\3\u0122\3\u0122\5\u0122\u168a\n\u0122\3\u0123")
        buf.write("\3\u0123\5\u0123\u168e\n\u0123\3\u0124\3\u0124\3\u0124")
        buf.write("\5\u0124\u1693\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124")
        buf.write("\3\u0124\3\u0124\3\u0124\5\u0124\u169c\n\u0124\3\u0124")
        buf.write("\5\u0124\u169f\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124")
        buf.write("\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124")
        buf.write("\3\u0124\3\u0124\3\u0124\5\u0124\u16af\n\u0124\3\u0124")
        buf.write("\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u16b7")
        buf.write("\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124")
        buf.write("\7\u0124\u16bf\n\u0124\f\u0124\16\u0124\u16c2\13\u0124")
        buf.write("\5\u0124\u16c4\n\u0124\3\u0124\3\u0124\5\u0124\u16c8\n")
        buf.write("\u0124\3\u0124\3\u0124\5\u0124\u16cc\n\u0124\3\u0125\3")
        buf.write("\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write("\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write("\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write("\3\u0125\5\u0125\u16e5\n\u0125\3\u0126\3\u0126\3\u0126")
        buf.write("\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127")
        buf.write("\u16f0\n\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write("\5\u0127\u16f7\n\u0127\7\u0127\u16f9\n\u0127\f\u0127\16")
        buf.write("\u0127\u16fc\13\u0127\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\5\u0128\u1702\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write("\3\u0129\3\u0129\5\u0129\u170a\n\u0129\3\u0129\3\u0129")
        buf.write("\3\u0129\5\u0129\u170f\n\u0129\3\u0129\3\u0129\3\u0129")
        buf.write("\3\u0129\7\u0129\u1715\n\u0129\f\u0129\16\u0129\u1718")
        buf.write("\13\u0129\3\u012a\3\u012a\3\u012a\5\u012a\u171d\n\u012a")
        buf.write("\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a")
        buf.write("\3\u012a\5\u012a\u1727\n\u012a\3\u012a\3\u012a\3\u012a")
        buf.write("\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a")
        buf.write("\3\u012a\5\u012a\u1734\n\u012a\3\u012a\3\u012a\3\u012a")
        buf.write("\3\u012a\5\u012a\u173a\n\u012a\3\u012a\3\u012a\3\u012a")
        buf.write("\3\u012a\5\u012a\u1740\n\u012a\3\u012a\3\u012a\3\u012a")
        buf.write("\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a")
        buf.write("\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1750\n\u012a")
        buf.write("\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1756\n\u012a")
        buf.write("\7\u012a\u1758\n\u012a\f\u012a\16\u012a\u175b\13\u012a")
        buf.write("\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write("\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write("\7\u012b\u176b\n\u012b\f\u012b\16\u012b\u176e\13\u012b")
        buf.write("\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write("\6\u012b\u1777\n\u012b\r\u012b\16\u012b\u1778\3\u012b")
        buf.write("\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write("\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write("\5\u012b\u178a\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write("\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write("\7\u012b\u1797\n\u012b\f\u012b\16\u012b\u179a\13\u012b")
        buf.write("\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\5\u012d\u17ac\n\u012d\3\u012e\3\u012e")
        buf.write("\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u17b5")
        buf.write("\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write("\3\u012f\5\u012f\u17be\n\u012f\3\u0130\3\u0130\3\u0131")
        buf.write("\3\u0131\3\u0132\3\u0132\3\u0133\3\u0133\3\u0134\3\u0134")
        buf.write("\3\u0135\3\u0135\3\u0136\3\u0136\3\u0137\3\u0137\3\u0137")
        buf.write("\2\5\u0250\u0252\u0254\u0138\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write("\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6")
        buf.write("\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108")
        buf.write("\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a")
        buf.write("\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c")
        buf.write("\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e")
        buf.write("\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150")
        buf.write("\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162")
        buf.write("\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174")
        buf.write("\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186")
        buf.write("\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198")
        buf.write("\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa")
        buf.write("\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc")
        buf.write("\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce")
        buf.write("\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0")
        buf.write("\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2")
        buf.write("\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204")
        buf.write("\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216")
        buf.write("\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228")
        buf.write("\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a")
        buf.write("\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c")
        buf.write("\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e")
        buf.write("\u0260\u0262\u0264\u0266\u0268\u026a\u026c\2u\4\2&&\u0086")
        buf.write("\u0086\4\2\u01a7\u01a7\u01ac\u01ac\5\2@@\u008c\u008c\u00a0")
        buf.write("\u00a0\5\2))\u0128\u0128\u0166\u0166\6\2))\u0147\u0147")
        buf.write("\u01a6\u01a6\u01ea\u01ea\4\2\u019e\u019e\u03ca\u03ca\4")
        buf.write("\2GG\177\177\4\2\21\21\u00fe\u00fe\5\2++MM\u00a3\u00a3")
        buf.write("\4\2\u0154\u0154\u01be\u01be\5\2\u0197\u0197\u020e\u020e")
        buf.write("\u0214\u0214\4\2\u012e\u012e\u016a\u016a\4\2\u0110\u0110")
        buf.write("\u0178\u0178\4\2\u010e\u010e\u015d\u015d\5\2HHLLpp\5\2")
        buf.write("))\u0138\u0138\u0152\u0152\5\2))\u0134\u0134\u026e\u026e")
        buf.write("\4\2\u0204\u0204\u0222\u0222\4\2IISS\5\2\u0156\u0156\u01b5")
        buf.write("\u01b5\u01ec\u01ec\4\2@@\u008c\u008c\3\2\u03c0\u03c1\5")
        buf.write("\2\u0151\u0151\u0173\u0173\u01a4\u01a4\4\2))\u03c0\u03c1")
        buf.write("\b\2))\u011e\u011e\u0120\u0120\u0138\u0138\u0152\u0152")
        buf.write("\u01cb\u01cb\3\2\u03c1\u03c2\4\2\t\t\61\61\4\2\17\17\u009a")
        buf.write("\u009a\4\2\u00ab\u00ab\u0225\u0225\4\2\26\26\u0081\u0081")
        buf.write("\5\2**EE``\4\2``\u0122\u0122\4\2\u011a\u011a\u014e\u014e")
        buf.write("\4\2\\\\\u01e2\u01e2\4\2**``\4\2\n\n//\4\2\u00a7\u00a7")
        buf.write("\u021f\u021f\6\2\u0151\u0151\u0173\u0173\u01a3\u01a3\u01c1")
        buf.write("\u01c1\4\2\u0151\u0151\u01a3\u01a3\4\2\20\20,,\5\2==G")
        buf.write("G\u00a5\u00a5\4\2##KK\4\2XX\u0084\u0084\4\2\n\n/\60\3")
        buf.write("\2\u01f9\u01fa\4\2\u0159\u0159\u01e8\u01e8\4\2\u00c1\u00c1")
        buf.write("\u017b\u017b\7\2aa\u0180\u0181\u0183\u0183\u0187\u018f")
        buf.write("\u01cd\u01cd\6\2\u017d\u017e\u0182\u0182\u0184\u0185\u01ce")
        buf.write("\u01ce\5\2bb\u017c\u017c\u0186\u0186\4\2\u016c\u016c\u01fb")
        buf.write("\u01fb\4\2\u01f5\u01f5\u01f7\u01f7\4\2\u0108\u0108\u01fc")
        buf.write("\u01fc\4\2RR\u01dc\u01dc\4\2\61\61\u012c\u012c\5\2  8")
        buf.write("8\u009e\u009e\5\2uu\u0097\u0097\u0157\u0157\4\2^^\u00a1")
        buf.write("\u00a1\4\2\u0116\u0116\u01ed\u01ed\4\2\'\'\u0221\u0221")
        buf.write("\4\2hh\u0178\u0178\4\2\u014a\u014a\u01c7\u01c7\6\2\u00b3")
        buf.write("\u00b3\u00b5\u00b5\u00b8\u00b8\u0205\u0205\4\2\u0109\u0109")
        buf.write("\u01cf\u01cf\4\2??HH\b\2uu\u0097\u0097\u009c\u009c\u0143")
        buf.write("\u0143\u0157\u0157\u0221\u0221\4\2\u019d\u019d\u0201\u0201")
        buf.write("\4\2\u0140\u0140\u0224\u0224\4\2uu\u0157\u0157\5\2IIT")
        buf.write("T\u0164\u0164\4\2\u0201\u0201\u0220\u0220\4\2\u0123\u0123")
        buf.write("\u01c6\u01c6\b\2\u00c1\u00c1\u013d\u013d\u013f\u013f\u0158")
        buf.write("\u0158\u01cc\u01cc\u01ee\u01ee\4\2,-99\5\2\u014a\u014a")
        buf.write("\u01b7\u01b7\u02c6\u02c6\4\2\u0170\u0170\u0210\u0210\4")
        buf.write("\2\u03d2\u03d2\u03d4\u03d4\3\2\u03d5\u03d6\5\2\u0269\u0273")
        buf.write("\u03ca\u03ca\u03d3\u03d3\4\2\u03c0\u03c2\u03cb\u03cb\4")
        buf.write("\2::\u009d\u009d\4\2ii\u03ce\u03ce\4\2\u00bf\u00c0\u00c7")
        buf.write("\u00ca\3\2\u00af\u00b4\3\2\u00b5\u00b7\3\2\u00b8\u00b9")
        buf.write("\6\2\u00ba\u00ba\u00c3\u00c6\u00cc\u00cc\u010c\u010d\5")
        buf.write("\2\u00bb\u00be\u00c1\u00c2\u010a\u010a\4\2\u0089\u0089")
        buf.write("\u00cb\u00cb\3\2\u0278\u027e\4\2\u00c1\u00c1\u01a1\u01a1")
        buf.write("\4\2\u00ba\u00bb\u00bd\u00bd\4\2\u00a2\u00a2\u01eb\u01eb")
        buf.write("\4\2\u00eb\u00ec\u00f2\u00f2\4\2$$\u00e9\u00ec\3\2\u00f5")
        buf.write("\u00f6\5\2\23\23VV\u009b\u009b\4\2\u00bf\u00bf\u00c1\u00c1")
        buf.write("\5\2\20\20,,\u0332\u0332\5\2\u00d8\u00d8\u00de\u00df\u00e4")
        buf.write("\u00e4\5\2\u00d9\u00db\u00e0\u00e3\u00e5\u00e7\4\2\u01aa")
        buf.write("\u01aa\u01b8\u01b8\4\2gg\u03b5\u03b5\5\2::\u009d\u009d")
        buf.write("\u0218\u0218\4\2{{\u0085\u0085\5\2\n\n\u0101\u0101\u01f1")
        buf.write("\u01f1\6\2gg\u03ad\u03ad\u03af\u03af\u03b5\u03b6\3\2\u03aa")
        buf.write("\u03b1\3\2\u0241\u0268\3\2\u0274\u0277\3\2\u0238\u0240")
        buf.write("\3\2\u0230\u0237\5\2\u00ba\u00be\u00c8\u00c8\u00cb\u00cb")
        buf.write("!\2\u00cc\u00cc\u00fc\u010e\u0110\u0116\u0118\u012f\u0131")
        buf.write("\u013a\u013c\u0148\u014a\u0152\u0154\u0154\u0156\u0157")
        buf.write("\u0159\u015b\u015d\u015d\u015f\u015f\u0161\u0167\u0169")
        buf.write("\u016f\u0171\u019a\u019c\u01a2\u01a4\u01ad\u01af\u01b9")
        buf.write("\u01bb\u01cb\u01cd\u01da\u01dc\u01ed\u01ef\u01f1\u01f3")
        buf.write("\u0203\u0205\u020f\u0211\u0211\u0213\u0216\u0218\u0218")
        buf.write("\u021a\u021b\u021e\u0221\u0223\u022a\u026e\u026e\13\2")
        buf.write("&&XX\u0084\u0084\u00ba\u00bc\u00be\u00be\u00dc\u00dc\u00f4")
        buf.write("\u00f4\u0230\u0237\u0278\u03a0\2\u1bd6\2\u026f\3\2\2\2")
        buf.write("\4\u027f\3\2\2\2\6\u0293\3\2\2\2\b\u0295\3\2\2\2\n\u02ba")
        buf.write("\3\2\2\2\f\u02c6\3\2\2\2\16\u02d1\3\2\2\2\20\u02e2\3\2")
        buf.write("\2\2\22\u02e7\3\2\2\2\24\u02f3\3\2\2\2\26\u030e\3\2\2")
        buf.write("\2\30\u0314\3\2\2\2\32\u0316\3\2\2\2\34\u0322\3\2\2\2")
        buf.write("\36\u0340\3\2\2\2 \u0361\3\2\2\2\"\u0394\3\2\2\2$\u03ae")
        buf.write("\3\2\2\2&\u03ca\3\2\2\2(\u042b\3\2\2\2*\u042d\3\2\2\2")
        buf.write(",\u043f\3\2\2\2.\u047c\3\2\2\2\60\u048f\3\2\2\2\62\u04c7")
        buf.write("\3\2\2\2\64\u04c9\3\2\2\2\66\u04f5\3\2\2\28\u04fb\3\2")
        buf.write("\2\2:\u04fd\3\2\2\2<\u0512\3\2\2\2>\u0519\3\2\2\2@\u051b")
        buf.write("\3\2\2\2B\u0529\3\2\2\2D\u052b\3\2\2\2F\u052f\3\2\2\2")
        buf.write("H\u0549\3\2\2\2J\u0559\3\2\2\2L\u055b\3\2\2\2N\u056b\3")
        buf.write("\2\2\2P\u056d\3\2\2\2R\u0595\3\2\2\2T\u05d9\3\2\2\2V\u05db")
        buf.write("\3\2\2\2X\u05f5\3\2\2\2Z\u05fd\3\2\2\2\\\u061b\3\2\2\2")
        buf.write("^\u06a9\3\2\2\2`\u06ab\3\2\2\2b\u06ae\3\2\2\2d\u06f8\3")
        buf.write("\2\2\2f\u070f\3\2\2\2h\u077e\3\2\2\2j\u0783\3\2\2\2l\u0785")
        buf.write("\3\2\2\2n\u078f\3\2\2\2p\u07c4\3\2\2\2r\u07d8\3\2\2\2")
        buf.write("t\u07da\3\2\2\2v\u07fd\3\2\2\2x\u0806\3\2\2\2z\u080d\3")
        buf.write("\2\2\2|\u0824\3\2\2\2~\u082d\3\2\2\2\u0080\u083c\3\2\2")
        buf.write("\2\u0082\u0850\3\2\2\2\u0084\u0864\3\2\2\2\u0086\u09de")
        buf.write("\3\2\2\2\u0088\u09e0\3\2\2\2\u008a\u09e7\3\2\2\2\u008c")
        buf.write("\u09ee\3\2\2\2\u008e\u0a04\3\2\2\2\u0090\u0a0c\3\2\2\2")
        buf.write("\u0092\u0a13\3\2\2\2\u0094\u0a1a\3\2\2\2\u0096\u0a21\3")
        buf.write("\2\2\2\u0098\u0a2d\3\2\2\2\u009a\u0a37\3\2\2\2\u009c\u0a3e")
        buf.write("\3\2\2\2\u009e\u0a4e\3\2\2\2\u00a0\u0a58\3\2\2\2\u00a2")
        buf.write("\u0a5c\3\2\2\2\u00a4\u0a62\3\2\2\2\u00a6\u0a6e\3\2\2\2")
        buf.write("\u00a8\u0a70\3\2\2\2\u00aa\u0a77\3\2\2\2\u00ac\u0a79\3")
        buf.write("\2\2\2\u00ae\u0aab\3\2\2\2\u00b0\u0af5\3\2\2\2\u00b2\u0b30")
        buf.write("\3\2\2\2\u00b4\u0b88\3\2\2\2\u00b6\u0b8c\3\2\2\2\u00b8")
        buf.write("\u0b9d\3\2\2\2\u00ba\u0b9f\3\2\2\2\u00bc\u0ba7\3\2\2\2")
        buf.write("\u00be\u0baf\3\2\2\2\u00c0\u0bb1\3\2\2\2\u00c2\u0bcf\3")
        buf.write("\2\2\2\u00c4\u0c06\3\2\2\2\u00c6\u0c0f\3\2\2\2\u00c8\u0c23")
        buf.write("\3\2\2\2\u00ca\u0c2f\3\2\2\2\u00cc\u0c33\3\2\2\2\u00ce")
        buf.write("\u0c54\3\2\2\2\u00d0\u0c69\3\2\2\2\u00d2\u0c73\3\2\2\2")
        buf.write("\u00d4\u0c77\3\2\2\2\u00d6\u0c90\3\2\2\2\u00d8\u0cba\3")
        buf.write("\2\2\2\u00da\u0cbc\3\2\2\2\u00dc\u0ccb\3\2\2\2\u00de\u0cf9")
        buf.write("\3\2\2\2\u00e0\u0d03\3\2\2\2\u00e2\u0d0d\3\2\2\2\u00e4")
        buf.write("\u0d48\3\2\2\2\u00e6\u0d4a\3\2\2\2\u00e8\u0d5b\3\2\2\2")
        buf.write("\u00ea\u0d61\3\2\2\2\u00ec\u0d71\3\2\2\2\u00ee\u0d75\3")
        buf.write("\2\2\2\u00f0\u0d9b\3\2\2\2\u00f2\u0d9d\3\2\2\2\u00f4\u0da0")
        buf.write("\3\2\2\2\u00f6\u0dc7\3\2\2\2\u00f8\u0dd5\3\2\2\2\u00fa")
        buf.write("\u0ddd\3\2\2\2\u00fc\u0ddf\3\2\2\2\u00fe\u0df9\3\2\2\2")
        buf.write("\u0100\u0dfd\3\2\2\2\u0102\u0e0a\3\2\2\2\u0104\u0e16\3")
        buf.write("\2\2\2\u0106\u0e1a\3\2\2\2\u0108\u0e2b\3\2\2\2\u010a\u0e3c")
        buf.write("\3\2\2\2\u010c\u0e3f\3\2\2\2\u010e\u0e49\3\2\2\2\u0110")
        buf.write("\u0e4d\3\2\2\2\u0112\u0e57\3\2\2\2\u0114\u0e5a\3\2\2\2")
        buf.write("\u0116\u0e5f\3\2\2\2\u0118\u0e73\3\2\2\2\u011a\u0e75\3")
        buf.write("\2\2\2\u011c\u0e86\3\2\2\2\u011e\u0e8f\3\2\2\2\u0120\u0e98")
        buf.write("\3\2\2\2\u0122\u0e9a\3\2\2\2\u0124\u0ea8\3\2\2\2\u0126")
        buf.write("\u0eb3\3\2\2\2\u0128\u0ebc\3\2\2\2\u012a\u0ebf\3\2\2\2")
        buf.write("\u012c\u0ec7\3\2\2\2\u012e\u0ee0\3\2\2\2\u0130\u0eec\3")
        buf.write("\2\2\2\u0132\u0eef\3\2\2\2\u0134\u0f0f\3\2\2\2\u0136\u0f11")
        buf.write("\3\2\2\2\u0138\u0f13\3\2\2\2\u013a\u0f15\3\2\2\2\u013c")
        buf.write("\u0f17\3\2\2\2\u013e\u0f4c\3\2\2\2\u0140\u0f4e\3\2\2\2")
        buf.write("\u0142\u0f54\3\2\2\2\u0144\u0f68\3\2\2\2\u0146\u0f76\3")
        buf.write("\2\2\2\u0148\u0f81\3\2\2\2\u014a\u0f83\3\2\2\2\u014c\u0f89")
        buf.write("\3\2\2\2\u014e\u0f93\3\2\2\2\u0150\u0f97\3\2\2\2\u0152")
        buf.write("\u0f9e\3\2\2\2\u0154\u0fa2\3\2\2\2\u0156\u0fa8\3\2\2\2")
        buf.write("\u0158\u0faf\3\2\2\2\u015a\u0fb5\3\2\2\2\u015c\u0fbb\3")
        buf.write("\2\2\2\u015e\u0fc0\3\2\2\2\u0160\u0fee\3\2\2\2\u0162\u1003")
        buf.write("\3\2\2\2\u0164\u101c\3\2\2\2\u0166\u101f\3\2\2\2\u0168")
        buf.write("\u1025\3\2\2\2\u016a\u1035\3\2\2\2\u016c\u1044\3\2\2\2")
        buf.write("\u016e\u104a\3\2\2\2\u0170\u1068\3\2\2\2\u0172\u106a\3")
        buf.write("\2\2\2\u0174\u1071\3\2\2\2\u0176\u107d\3\2\2\2\u0178\u1083")
        buf.write("\3\2\2\2\u017a\u109c\3\2\2\2\u017c\u10a0\3\2\2\2\u017e")
        buf.write("\u10a4\3\2\2\2\u0180\u10af\3\2\2\2\u0182\u10ed\3\2\2\2")
        buf.write("\u0184\u1125\3\2\2\2\u0186\u1127\3\2\2\2\u0188\u1134\3")
        buf.write("\2\2\2\u018a\u1166\3\2\2\2\u018c\u1178\3\2\2\2\u018e\u11aa")
        buf.write("\3\2\2\2\u0190\u11ac\3\2\2\2\u0192\u11b9\3\2\2\2\u0194")
        buf.write("\u11c4\3\2\2\2\u0196\u11df\3\2\2\2\u0198\u11e9\3\2\2\2")
        buf.write("\u019a\u11f3\3\2\2\2\u019c\u11f5\3\2\2\2\u019e\u11ff\3")
        buf.write("\2\2\2\u01a0\u1202\3\2\2\2\u01a2\u1233\3\2\2\2\u01a4\u1242")
        buf.write("\3\2\2\2\u01a6\u1244\3\2\2\2\u01a8\u1248\3\2\2\2\u01aa")
        buf.write("\u124f\3\2\2\2\u01ac\u1258\3\2\2\2\u01ae\u125e\3\2\2\2")
        buf.write("\u01b0\u1265\3\2\2\2\u01b2\u127b\3\2\2\2\u01b4\u127d\3")
        buf.write("\2\2\2\u01b6\u1288\3\2\2\2\u01b8\u128e\3\2\2\2\u01ba\u12b7")
        buf.write("\3\2\2\2\u01bc\u1350\3\2\2\2\u01be\u135c\3\2\2\2\u01c0")
        buf.write("\u136b\3\2\2\2\u01c2\u1371\3\2\2\2\u01c4\u1384\3\2\2\2")
        buf.write("\u01c6\u138e\3\2\2\2\u01c8\u139c\3\2\2\2\u01ca\u139e\3")
        buf.write("\2\2\2\u01cc\u13a1\3\2\2\2\u01ce\u13b7\3\2\2\2\u01d0\u13c3")
        buf.write("\3\2\2\2\u01d2\u13cc\3\2\2\2\u01d4\u13d8\3\2\2\2\u01d6")
        buf.write("\u13dc\3\2\2\2\u01d8\u13de\3\2\2\2\u01da\u1406\3\2\2\2")
        buf.write("\u01dc\u140d\3\2\2\2\u01de\u140f\3\2\2\2\u01e0\u1426\3")
        buf.write("\2\2\2\u01e2\u142c\3\2\2\2\u01e4\u1434\3\2\2\2\u01e6\u1437")
        buf.write("\3\2\2\2\u01e8\u1444\3\2\2\2\u01ea\u1446\3\2\2\2\u01ec")
        buf.write("\u144c\3\2\2\2\u01ee\u144e\3\2\2\2\u01f0\u1455\3\2\2\2")
        buf.write("\u01f2\u145f\3\2\2\2\u01f4\u1461\3\2\2\2\u01f6\u1467\3")
        buf.write("\2\2\2\u01f8\u146b\3\2\2\2\u01fa\u146d\3\2\2\2\u01fc\u146f")
        buf.write("\3\2\2\2\u01fe\u1481\3\2\2\2\u0200\u1491\3\2\2\2\u0202")
        buf.write("\u1495\3\2\2\2\u0204\u149a\3\2\2\2\u0206\u14a5\3\2\2\2")
        buf.write("\u0208\u14aa\3\2\2\2\u020a\u14ac\3\2\2\2\u020c\u14b0\3")
        buf.write("\2\2\2\u020e\u14c9\3\2\2\2\u0210\u14cb\3\2\2\2\u0212\u14ce")
        buf.write("\3\2\2\2\u0214\u14d3\3\2\2\2\u0216\u14e3\3\2\2\2\u0218")
        buf.write("\u1530\3\2\2\2\u021a\u1548\3\2\2\2\u021c\u154a\3\2\2\2")
        buf.write("\u021e\u154e\3\2\2\2\u0220\u1554\3\2\2\2\u0222\u155c\3")
        buf.write("\2\2\2\u0224\u1564\3\2\2\2\u0226\u156c\3\2\2\2\u0228\u1577")
        buf.write("\3\2\2\2\u022a\u157f\3\2\2\2\u022c\u1587\3\2\2\2\u022e")
        buf.write("\u158f\3\2\2\2\u0230\u1597\3\2\2\2\u0232\u15a7\3\2\2\2")
        buf.write("\u0234\u15b7\3\2\2\2\u0236\u15bb\3\2\2\2\u0238\u15bd\3")
        buf.write("\2\2\2\u023a\u15c0\3\2\2\2\u023c\u15d5\3\2\2\2\u023e\u1674")
        buf.write("\3\2\2\2\u0240\u1676\3\2\2\2\u0242\u1689\3\2\2\2\u0244")
        buf.write("\u168b\3\2\2\2\u0246\u16cb\3\2\2\2\u0248\u16e4\3\2\2\2")
        buf.write("\u024a\u16e6\3\2\2\2\u024c\u16ef\3\2\2\2\u024e\u1701\3")
        buf.write("\2\2\2\u0250\u170e\3\2\2\2\u0252\u1719\3\2\2\2\u0254\u1789")
        buf.write("\3\2\2\2\u0256\u179b\3\2\2\2\u0258\u17ab\3\2\2\2\u025a")
        buf.write("\u17b4\3\2\2\2\u025c\u17bd\3\2\2\2\u025e\u17bf\3\2\2\2")
        buf.write("\u0260\u17c1\3\2\2\2\u0262\u17c3\3\2\2\2\u0264\u17c5\3")
        buf.write("\2\2\2\u0266\u17c7\3\2\2\2\u0268\u17c9\3\2\2\2\u026a\u17cb")
        buf.write("\3\2\2\2\u026c\u17cd\3\2\2\2\u026e\u0270\5\4\3\2\u026f")
        buf.write("\u026e\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0272\3\2\2\2")
        buf.write("\u0271\u0273\7\u03ae\2\2\u0272\u0271\3\2\2\2\u0272\u0273")
        buf.write("\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0275\7\2\2\3\u0275")
        buf.write("\3\3\2\2\2\u0276\u0278\5\6\4\2\u0277\u0279\7\u03ae\2\2")
        buf.write("\u0278\u0277\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027a\3")
        buf.write("\2\2\2\u027a\u027b\7\u03be\2\2\u027b\u027e\3\2\2\2\u027c")
        buf.write("\u027e\5\b\5\2\u027d\u0276\3\2\2\2\u027d\u027c\3\2\2\2")
        buf.write("\u027e\u0281\3\2\2\2\u027f\u027d\3\2\2\2\u027f\u0280\3")
        buf.write("\2\2\2\u0280\u028a\3\2\2\2\u0281\u027f\3\2\2\2\u0282\u0287")
        buf.write("\5\6\4\2\u0283\u0285\7\u03ae\2\2\u0284\u0283\3\2\2\2\u0284")
        buf.write("\u0285\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0288\7\u03be")
        buf.write("\2\2\u0287\u0284\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u028b")
        buf.write("\3\2\2\2\u0289\u028b\5\b\5\2\u028a\u0282\3\2\2\2\u028a")
        buf.write("\u0289\3\2\2\2\u028b\5\3\2\2\2\u028c\u0294\5\n\6\2\u028d")
        buf.write("\u0294\5\f\7\2\u028e\u0294\5\16\b\2\u028f\u0294\5\20\t")
        buf.write("\2\u0290\u0294\5\22\n\2\u0291\u0294\5\26\f\2\u0292\u0294")
        buf.write("\5\30\r\2\u0293\u028c\3\2\2\2\u0293\u028d\3\2\2\2\u0293")
        buf.write("\u028e\3\2\2\2\u0293\u028f\3\2\2\2\u0293\u0290\3\2\2\2")
        buf.write("\u0293\u0291\3\2\2\2\u0293\u0292\3\2\2\2\u0294\7\3\2\2")
        buf.write("\2\u0295\u0296\7\u03be\2\2\u0296\t\3\2\2\2\u0297\u02bb")
        buf.write("\5\32\16\2\u0298\u02bb\5\34\17\2\u0299\u02bb\5\36\20\2")
        buf.write("\u029a\u02bb\5 \21\2\u029b\u02bb\5\"\22\2\u029c\u02bb")
        buf.write("\5$\23\2\u029d\u02bb\5&\24\2\u029e\u02bb\5(\25\2\u029f")
        buf.write("\u02bb\5*\26\2\u02a0\u02bb\5,\27\2\u02a1\u02bb\5.\30\2")
        buf.write("\u02a2\u02bb\5\60\31\2\u02a3\u02bb\5r:\2\u02a4\u02bb\5")
        buf.write("t;\2\u02a5\u02bb\5v<\2\u02a6\u02bb\5x=\2\u02a7\u02bb\5")
        buf.write("z>\2\u02a8\u02bb\5|?\2\u02a9\u02bb\5~@\2\u02aa\u02bb\5")
        buf.write("\u0080A\2\u02ab\u02bb\5\u0082B\2\u02ac\u02bb\5\u0084C")
        buf.write("\2\u02ad\u02bb\5\u0088E\2\u02ae\u02bb\5\u008aF\2\u02af")
        buf.write("\u02bb\5\u008cG\2\u02b0\u02bb\5\u008eH\2\u02b1\u02bb\5")
        buf.write("\u0090I\2\u02b2\u02bb\5\u0092J\2\u02b3\u02bb\5\u0094K")
        buf.write("\2\u02b4\u02bb\5\u0096L\2\u02b5\u02bb\5\u0098M\2\u02b6")
        buf.write("\u02bb\5\u009aN\2\u02b7\u02bb\5\u009cO\2\u02b8\u02bb\5")
        buf.write("\u009eP\2\u02b9\u02bb\5\u00a2R\2\u02ba\u0297\3\2\2\2\u02ba")
        buf.write("\u0298\3\2\2\2\u02ba\u0299\3\2\2\2\u02ba\u029a\3\2\2\2")
        buf.write("\u02ba\u029b\3\2\2\2\u02ba\u029c\3\2\2\2\u02ba\u029d\3")
        buf.write("\2\2\2\u02ba\u029e\3\2\2\2\u02ba\u029f\3\2\2\2\u02ba\u02a0")
        buf.write("\3\2\2\2\u02ba\u02a1\3\2\2\2\u02ba\u02a2\3\2\2\2\u02ba")
        buf.write("\u02a3\3\2\2\2\u02ba\u02a4\3\2\2\2\u02ba\u02a5\3\2\2\2")
        buf.write("\u02ba\u02a6\3\2\2\2\u02ba\u02a7\3\2\2\2\u02ba\u02a8\3")
        buf.write("\2\2\2\u02ba\u02a9\3\2\2\2\u02ba\u02aa\3\2\2\2\u02ba\u02ab")
        buf.write("\3\2\2\2\u02ba\u02ac\3\2\2\2\u02ba\u02ad\3\2\2\2\u02ba")
        buf.write("\u02ae\3\2\2\2\u02ba\u02af\3\2\2\2\u02ba\u02b0\3\2\2\2")
        buf.write("\u02ba\u02b1\3\2\2\2\u02ba\u02b2\3\2\2\2\u02ba\u02b3\3")
        buf.write("\2\2\2\u02ba\u02b4\3\2\2\2\u02ba\u02b5\3\2\2\2\u02ba\u02b6")
        buf.write("\3\2\2\2\u02ba\u02b7\3\2\2\2\u02ba\u02b8\3\2\2\2\u02ba")
        buf.write("\u02b9\3\2\2\2\u02bb\13\3\2\2\2\u02bc\u02c7\5\u00b4[\2")
        buf.write("\u02bd\u02c7\5\u00acW\2\u02be\u02c7\5\u00b6\\\2\u02bf")
        buf.write("\u02c7\5\u00a6T\2\u02c0\u02c7\5\u00b2Z\2\u02c1\u02c7\5")
        buf.write("\u00a4S\2\u02c2\u02c7\5\u00aeX\2\u02c3\u02c7\5\u00b0Y")
        buf.write("\2\u02c4\u02c7\5\u00a8U\2\u02c5\u02c7\5\u00aaV\2\u02c6")
        buf.write("\u02bc\3\2\2\2\u02c6\u02bd\3\2\2\2\u02c6\u02be\3\2\2\2")
        buf.write("\u02c6\u02bf\3\2\2\2\u02c6\u02c0\3\2\2\2\u02c6\u02c1\3")
        buf.write("\2\2\2\u02c6\u02c2\3\2\2\2\u02c6\u02c3\3\2\2\2\u02c6\u02c4")
        buf.write("\3\2\2\2\u02c6\u02c5\3\2\2\2\u02c7\r\3\2\2\2\u02c8\u02d2")
        buf.write("\5\u0102\u0082\2\u02c9\u02d2\5\u0104\u0083\2\u02ca\u02d2")
        buf.write("\5\u0106\u0084\2\u02cb\u02d2\5\u0108\u0085\2\u02cc\u02d2")
        buf.write("\5\u010a\u0086\2\u02cd\u02d2\5\u010c\u0087\2\u02ce\u02d2")
        buf.write("\5\u010e\u0088\2\u02cf\u02d2\5\u0110\u0089\2\u02d0\u02d2")
        buf.write("\5\u0112\u008a\2\u02d1\u02c8\3\2\2\2\u02d1\u02c9\3\2\2")
        buf.write("\2\u02d1\u02ca\3\2\2\2\u02d1\u02cb\3\2\2\2\u02d1\u02cc")
        buf.write("\3\2\2\2\u02d1\u02cd\3\2\2\2\u02d1\u02ce\3\2\2\2\u02d1")
        buf.write("\u02cf\3\2\2\2\u02d1\u02d0\3\2\2\2\u02d2\17\3\2\2\2\u02d3")
        buf.write("\u02e3\5\u0122\u0092\2\u02d4\u02e3\5\u0124\u0093\2\u02d5")
        buf.write("\u02e3\5\u0126\u0094\2\u02d6\u02e3\5\u0128\u0095\2\u02d7")
        buf.write("\u02e3\5\u012a\u0096\2\u02d8\u02e3\5\u012c\u0097\2\u02d9")
        buf.write("\u02e3\5\u012e\u0098\2\u02da\u02e3\5\u0130\u0099\2\u02db")
        buf.write("\u02e3\5\u0132\u009a\2\u02dc\u02e3\5\u014a\u00a6\2\u02dd")
        buf.write("\u02e3\5\u014c\u00a7\2\u02de\u02e3\5\u014e\u00a8\2\u02df")
        buf.write("\u02e3\5\u0150\u00a9\2\u02e0\u02e3\5\u0152\u00aa\2\u02e1")
        buf.write("\u02e3\5\u0154\u00ab\2\u02e2\u02d3\3\2\2\2\u02e2\u02d4")
        buf.write("\3\2\2\2\u02e2\u02d5\3\2\2\2\u02e2\u02d6\3\2\2\2\u02e2")
        buf.write("\u02d7\3\2\2\2\u02e2\u02d8\3\2\2\2\u02e2\u02d9\3\2\2\2")
        buf.write("\u02e2\u02da\3\2\2\2\u02e2\u02db\3\2\2\2\u02e2\u02dc\3")
        buf.write("\2\2\2\u02e2\u02dd\3\2\2\2\u02e2\u02de\3\2\2\2\u02e2\u02df")
        buf.write("\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e1\3\2\2\2\u02e3")
        buf.write("\21\3\2\2\2\u02e4\u02e8\5\u0156\u00ac\2\u02e5\u02e8\5")
        buf.write("\u0158\u00ad\2\u02e6\u02e8\5\u015a\u00ae\2\u02e7\u02e4")
        buf.write("\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e6\3\2\2\2\u02e8")
        buf.write("\23\3\2\2\2\u02e9\u02f4\5\u015e\u00b0\2\u02ea\u02f4\5")
        buf.write("\u0160\u00b1\2\u02eb\u02f4\5\u0162\u00b2\2\u02ec\u02f4")
        buf.write("\5\u0166\u00b4\2\u02ed\u02f4\5\u0168\u00b5\2\u02ee\u02f4")
        buf.write("\5\u016a\u00b6\2\u02ef\u02f4\5\u016e\u00b8\2\u02f0\u02f4")
        buf.write("\5\u0164\u00b3\2\u02f1\u02f4\5\u016c\u00b7\2\u02f2\u02f4")
        buf.write("\5\u0170\u00b9\2\u02f3\u02e9\3\2\2\2\u02f3\u02ea\3\2\2")
        buf.write("\2\u02f3\u02eb\3\2\2\2\u02f3\u02ec\3\2\2\2\u02f3\u02ed")
        buf.write("\3\2\2\2\u02f3\u02ee\3\2\2\2\u02f3\u02ef\3\2\2\2\u02f3")
        buf.write("\u02f0\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f3\u02f2\3\2\2\2")
        buf.write("\u02f4\25\3\2\2\2\u02f5\u030f\5\u0182\u00c2\2\u02f6\u030f")
        buf.write("\5\u0184\u00c3\2\u02f7\u030f\5\u0186\u00c4\2\u02f8\u030f")
        buf.write("\5\u0188\u00c5\2\u02f9\u030f\5\u018a\u00c6\2\u02fa\u030f")
        buf.write("\5\u018c\u00c7\2\u02fb\u030f\5\u018e\u00c8\2\u02fc\u030f")
        buf.write("\5\u0190\u00c9\2\u02fd\u030f\5\u01a8\u00d5\2\u02fe\u030f")
        buf.write("\5\u01aa\u00d6\2\u02ff\u030f\5\u01ac\u00d7\2\u0300\u030f")
        buf.write("\5\u01ae\u00d8\2\u0301\u030f\5\u01b0\u00d9\2\u0302\u030f")
        buf.write("\5\u01b4\u00db\2\u0303\u030f\5\u01b6\u00dc\2\u0304\u030f")
        buf.write("\5\u01b8\u00dd\2\u0305\u030f\5\u01ba\u00de\2\u0306\u030f")
        buf.write("\5\u01bc\u00df\2\u0307\u030f\5\u01ca\u00e6\2\u0308\u030f")
        buf.write("\5\u01cc\u00e7\2\u0309\u030f\5\u01ce\u00e8\2\u030a\u030f")
        buf.write("\5\u01d0\u00e9\2\u030b\u030f\5\u01d2\u00ea\2\u030c\u030f")
        buf.write("\5\u01d4\u00eb\2\u030d\u030f\5\u01d6\u00ec\2\u030e\u02f5")
        buf.write("\3\2\2\2\u030e\u02f6\3\2\2\2\u030e\u02f7\3\2\2\2\u030e")
        buf.write("\u02f8\3\2\2\2\u030e\u02f9\3\2\2\2\u030e\u02fa\3\2\2\2")
        buf.write("\u030e\u02fb\3\2\2\2\u030e\u02fc\3\2\2\2\u030e\u02fd\3")
        buf.write("\2\2\2\u030e\u02fe\3\2\2\2\u030e\u02ff\3\2\2\2\u030e\u0300")
        buf.write("\3\2\2\2\u030e\u0301\3\2\2\2\u030e\u0302\3\2\2\2\u030e")
        buf.write("\u0303\3\2\2\2\u030e\u0304\3\2\2\2\u030e\u0305\3\2\2\2")
        buf.write("\u030e\u0306\3\2\2\2\u030e\u0307\3\2\2\2\u030e\u0308\3")
        buf.write("\2\2\2\u030e\u0309\3\2\2\2\u030e\u030a\3\2\2\2\u030e\u030b")
        buf.write("\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030d\3\2\2\2\u030f")
        buf.write("\27\3\2\2\2\u0310\u0315\5\u01e0\u00f1\2\u0311\u0315\5")
        buf.write("\u01e2\u00f2\2\u0312\u0315\5\u01e4\u00f3\2\u0313\u0315")
        buf.write("\5\u01e6\u00f4\2\u0314\u0310\3\2\2\2\u0314\u0311\3\2\2")
        buf.write("\2\u0314\u0312\3\2\2\2\u0314\u0313\3\2\2\2\u0315\31\3")
        buf.write("\2\2\2\u0316\u0317\7\"\2\2\u0317\u0319\t\2\2\2\u0318\u031a")
        buf.write("\5\u023a\u011e\2\u0319\u0318\3\2\2\2\u0319\u031a\3\2\2")
        buf.write("\2\u031a\u031b\3\2\2\2\u031b\u031f\5\u0204\u0103\2\u031c")
        buf.write("\u031e\5\62\32\2\u031d\u031c\3\2\2\2\u031e\u0321\3\2\2")
        buf.write("\2\u031f\u031d\3\2\2\2\u031f\u0320\3\2\2\2\u0320\33\3")
        buf.write("\2\2\2\u0321\u031f\3\2\2\2\u0322\u0324\7\"\2\2\u0323\u0325")
        buf.write("\5\64\33\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325")
        buf.write("\u0326\3\2\2\2\u0326\u0328\7\u0143\2\2\u0327\u0329\5\u023a")
        buf.write("\u011e\2\u0328\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329")
        buf.write("\u032a\3\2\2\2\u032a\u032b\5\u01ea\u00f6\2\u032b\u032c")
        buf.write("\7j\2\2\u032c\u032d\7\u01e5\2\2\u032d\u0334\5\66\34\2")
        buf.write("\u032e\u032f\7j\2\2\u032f\u0331\7\u011f\2\2\u0330\u0332")
        buf.write("\7g\2\2\u0331\u0330\3\2\2\2\u0331\u0332\3\2\2\2\u0332")
        buf.write("\u0333\3\2\2\2\u0333\u0335\7\u01c0\2\2\u0334\u032e\3\2")
        buf.write("\2\2\u0334\u0335\3\2\2\2\u0335\u0337\3\2\2\2\u0336\u0338")
        buf.write("\5> \2\u0337\u0336\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033b")
        buf.write("\3\2\2\2\u0339\u033a\7\u011c\2\2\u033a\u033c\7\u03ca\2")
        buf.write("\2\u033b\u0339\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d")
        buf.write("\3\2\2\2\u033d\u033e\7\u0135\2\2\u033e\u033f\5\u015c\u00af")
        buf.write("\2\u033f\35\3\2\2\2\u0340\u0342\7\"\2\2\u0341\u0343\t")
        buf.write("\3\2\2\u0342\u0341\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0345")
        buf.write("\3\2\2\2\u0344\u0346\t\4\2\2\u0345\u0344\3\2\2\2\u0345")
        buf.write("\u0346\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0348\7I\2\2")
        buf.write("\u0348\u034a\5\u0204\u0103\2\u0349\u034b\5@!\2\u034a\u0349")
        buf.write("\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034c\3\2\2\2\u034c")
        buf.write("\u034d\7j\2\2\u034d\u034e\5\u01ec\u00f7\2\u034e\u0352")
        buf.write("\5\u0226\u0114\2\u034f\u0351\5B\"\2\u0350\u034f\3\2\2")
        buf.write("\2\u0351\u0354\3\2\2\2\u0352\u0350\3\2\2\2\u0352\u0353")
        buf.write("\3\2\2\2\u0353\u035f\3\2\2\2\u0354\u0352\3\2\2\2\u0355")
        buf.write("\u0357\7\u0100\2\2\u0356\u0358\7\u03b2\2\2\u0357\u0356")
        buf.write("\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359\3\2\2\2\u0359")
        buf.write("\u0360\t\5\2\2\u035a\u035c\7^\2\2\u035b\u035d\7\u03b2")
        buf.write("\2\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e")
        buf.write("\3\2\2\2\u035e\u0360\t\6\2\2\u035f\u0355\3\2\2\2\u035f")
        buf.write("\u035a\3\2\2\2\u035f\u0360\3\2\2\2\u0360\37\3\2\2\2\u0361")
        buf.write("\u0362\7\"\2\2\u0362\u0363\7\u0179\2\2\u0363\u0364\7C")
        buf.write("\2\2\u0364\u0365\5\u0204\u0103\2\u0365\u0366\7\t\2\2\u0366")
        buf.write("\u0367\7\u0215\2\2\u0367\u036d\7\u03ca\2\2\u0368\u036a")
        buf.write("\7\u0165\2\2\u0369\u036b\7\u03b2\2\2\u036a\u0369\3\2\2")
        buf.write("\2\u036a\u036b\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036e")
        buf.write("\5\u020c\u0107\2\u036d\u0368\3\2\2\2\u036d\u036e\3\2\2")
        buf.write("\2\u036e\u0374\3\2\2\2\u036f\u0371\7\u0216\2\2\u0370\u0372")
        buf.write("\7\u03b2\2\2\u0371\u0370\3\2\2\2\u0371\u0372\3\2\2\2\u0372")
        buf.write("\u0373\3\2\2\2\u0373\u0375\5\u020c\u0107\2\u0374\u036f")
        buf.write("\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u037b\3\2\2\2\u0376")
        buf.write("\u0378\7\u01ca\2\2\u0377\u0379\7\u03b2\2\2\u0378\u0377")
        buf.write("\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\3\2\2\2\u037a")
        buf.write("\u037c\5\u020c\u0107\2\u037b\u0376\3\2\2\2\u037b\u037c")
        buf.write("\3\2\2\2\u037c\u0382\3\2\2\2\u037d\u037f\7\u01a5\2\2\u037e")
        buf.write("\u0380\7\u03b2\2\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2")
        buf.write("\2\2\u0380\u0381\3\2\2\2\u0381\u0383\5\u0204\u0103\2\u0382")
        buf.write("\u037d\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0385\3\2\2\2")
        buf.write("\u0384\u0386\7\u0223\2\2\u0385\u0384\3\2\2\2\u0385\u0386")
        buf.write("\3\2\2\2\u0386\u038c\3\2\2\2\u0387\u0389\7\u011c\2\2\u0388")
        buf.write("\u038a\7\u03b2\2\2\u0389\u0388\3\2\2\2\u0389\u038a\3\2")
        buf.write("\2\2\u038a\u038b\3\2\2\2\u038b\u038d\7\u03ca\2\2\u038c")
        buf.write("\u0387\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038e\3\2\2\2")
        buf.write("\u038e\u0390\7\u013d\2\2\u038f\u0391\7\u03b2\2\2\u0390")
        buf.write("\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0392\3\2\2\2")
        buf.write("\u0392\u0393\5\u01fa\u00fe\2\u0393!\3\2\2\2\u0394\u0396")
        buf.write("\7\"\2\2\u0395\u0397\5\64\33\2\u0396\u0395\3\2\2\2\u0396")
        buf.write("\u0397\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u0399\7u\2\2")
        buf.write("\u0399\u039a\5\u01ea\u00f6\2\u039a\u039c\7\u03bb\2\2\u039b")
        buf.write("\u039d\5D#\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u03a2\3\2\2\2\u039e\u039f\7\u03bd\2\2\u039f\u03a1\5D")
        buf.write("#\2\u03a0\u039e\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a0")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a5\3\2\2\2\u03a4")
        buf.write("\u03a2\3\2\2\2\u03a5\u03a9\7\u03bc\2\2\u03a6\u03a8\5H")
        buf.write("%\2\u03a7\u03a6\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9\u03a7")
        buf.write("\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ac\3\2\2\2\u03ab")
        buf.write("\u03a9\3\2\2\2\u03ac\u03ad\5\u015c\u00af\2\u03ad#\3\2")
        buf.write("\2\2\u03ae\u03b0\7\"\2\2\u03af\u03b1\5\64\33\2\u03b0\u03af")
        buf.write("\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2")
        buf.write("\u03b3\7\u0157\2\2\u03b3\u03b4\5\u01ea\u00f6\2\u03b4\u03b6")
        buf.write("\7\u03bb\2\2\u03b5\u03b7\5F$\2\u03b6\u03b5\3\2\2\2\u03b6")
        buf.write("\u03b7\3\2\2\2\u03b7\u03bc\3\2\2\2\u03b8\u03b9\7\u03bd")
        buf.write("\2\2\u03b9\u03bb\5F$\2\u03ba\u03b8\3\2\2\2\u03bb\u03be")
        buf.write("\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd")
        buf.write("\u03bf\3\2\2\2\u03be\u03bc\3\2\2\2\u03bf\u03c0\7\u03bc")
        buf.write("\2\2\u03c0\u03c1\7\u01dd\2\2\u03c1\u03c5\5\u0218\u010d")
        buf.write("\2\u03c2\u03c4\5H%\2\u03c3\u03c2\3\2\2\2\u03c4\u03c7\3")
        buf.write("\2\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c8")
        buf.write("\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c8\u03c9\5\u015c\u00af")
        buf.write("\2\u03c9%\3\2\2\2\u03ca\u03cb\7\"\2\2\u03cb\u03cc\7\u01e7")
        buf.write("\2\2\u03cc\u03cd\5\u0204\u0103\2\u03cd\u03ce\7>\2\2\u03ce")
        buf.write("\u03cf\7\u012a\2\2\u03cf\u03d0\7\u0227\2\2\u03d0\u03d1")
        buf.write("\t\7\2\2\u03d1\u03d2\7\u01b0\2\2\u03d2\u03d3\7\u03bb\2")
        buf.write("\2\u03d3\u03d8\5J&\2\u03d4\u03d5\7\u03bd\2\2\u03d5\u03d7")
        buf.write("\5J&\2\u03d6\u03d4\3\2\2\2\u03d7\u03da\3\2\2\2\u03d8\u03d6")
        buf.write("\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03db\3\2\2\2\u03da")
        buf.write("\u03d8\3\2\2\2\u03db\u03dc\7\u03bc\2\2\u03dc\'\3\2\2\2")
        buf.write("\u03dd\u03df\7\"\2\2\u03de\u03e0\7\u020d\2\2\u03df\u03de")
        buf.write("\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("\u03e3\7\u0097\2\2\u03e2\u03e4\5\u023a\u011e\2\u03e3\u03e2")
        buf.write("\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5")
        buf.write("\u03ed\5\u01ec\u00f7\2\u03e6\u03e7\7Y\2\2\u03e7\u03ee")
        buf.write("\5\u01ec\u00f7\2\u03e8\u03e9\7\u03bb\2\2\u03e9\u03ea\7")
        buf.write("Y\2\2\u03ea\u03eb\5\u01ec\u00f7\2\u03eb\u03ec\7\u03bc")
        buf.write("\2\2\u03ec\u03ee\3\2\2\2\u03ed\u03e6\3\2\2\2\u03ed\u03e8")
        buf.write("\3\2\2\2\u03ee\u042c\3\2\2\2\u03ef\u03f1\7\"\2\2\u03f0")
        buf.write("\u03f2\7\u020d\2\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2")
        buf.write("\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f5\7\u0097\2\2\u03f4")
        buf.write("\u03f6\5\u023a\u011e\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6")
        buf.write("\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f9\5\u01ec\u00f7")
        buf.write("\2\u03f8\u03fa\5L\'\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa")
        buf.write("\3\2\2\2\u03fa\u0405\3\2\2\2\u03fb\u0402\5^\60\2\u03fc")
        buf.write("\u03fe\7\u03bd\2\2\u03fd\u03fc\3\2\2\2\u03fd\u03fe\3\2")
        buf.write("\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0401\5^\60\2\u0400\u03fd")
        buf.write("\3\2\2\2\u0401\u0404\3\2\2\2\u0402\u0400\3\2\2\2\u0402")
        buf.write("\u0403\3\2\2\2\u0403\u0406\3\2\2\2\u0404\u0402\3\2\2\2")
        buf.write("\u0405\u03fb\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\3")
        buf.write("\2\2\2\u0407\u0409\5b\62\2\u0408\u0407\3\2\2\2\u0408\u0409")
        buf.write("\3\2\2\2\u0409\u040b\3\2\2\2\u040a\u040c\t\b\2\2\u040b")
        buf.write("\u040a\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040e\3\2\2\2")
        buf.write("\u040d\u040f\7\17\2\2\u040e\u040d\3\2\2\2\u040e\u040f")
        buf.write("\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411\5\u00b4[\2\u0411")
        buf.write("\u042c\3\2\2\2\u0412\u0414\7\"\2\2\u0413\u0415\7\u020d")
        buf.write("\2\2\u0414\u0413\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416\u0418\7\u0097\2\2\u0417\u0419\5\u023a\u011e")
        buf.write("\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041a")
        buf.write("\3\2\2\2\u041a\u041b\5\u01ec\u00f7\2\u041b\u0426\5L\'")
        buf.write("\2\u041c\u0423\5^\60\2\u041d\u041f\7\u03bd\2\2\u041e\u041d")
        buf.write("\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420\3\2\2\2\u0420")
        buf.write("\u0422\5^\60\2\u0421\u041e\3\2\2\2\u0422\u0425\3\2\2\2")
        buf.write("\u0423\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0427\3")
        buf.write("\2\2\2\u0425\u0423\3\2\2\2\u0426\u041c\3\2\2\2\u0426\u0427")
        buf.write("\3\2\2\2\u0427\u0429\3\2\2\2\u0428\u042a\5b\62\2\u0429")
        buf.write("\u0428\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042c\3\2\2\2")
        buf.write("\u042b\u03dd\3\2\2\2\u042b\u03ef\3\2\2\2\u042b\u0412\3")
        buf.write("\2\2\2\u042c)\3\2\2\2\u042d\u042e\7\"\2\2\u042e\u042f")
        buf.write("\7\u020c\2\2\u042f\u0430\5\u0204\u0103\2\u0430\u0431\7")
        buf.write("\t\2\2\u0431\u0432\7\u012b\2\2\u0432\u0436\7\u03ca\2\2")
        buf.write("\u0433\u0434\7\u014f\2\2\u0434\u0435\7\u03b2\2\2\u0435")
        buf.write("\u0437\5\u020c\u0107\2\u0436\u0433\3\2\2\2\u0436\u0437")
        buf.write("\3\2\2\2\u0437\u043d\3\2\2\2\u0438\u043a\7\u013d\2\2\u0439")
        buf.write("\u043b\7\u03b2\2\2\u043a\u0439\3\2\2\2\u043a\u043b\3\2")
        buf.write("\2\2\u043b\u043c\3\2\2\2\u043c\u043e\5\u01fa\u00fe\2\u043d")
        buf.write("\u0438\3\2\2\2\u043d\u043e\3\2\2\2\u043e+\3\2\2\2\u043f")
        buf.write("\u0440\7\"\2\2\u0440\u0441\7\u020c\2\2\u0441\u0442\5\u0204")
        buf.write("\u0103\2\u0442\u0443\7\t\2\2\u0443\u0444\7\u012b\2\2\u0444")
        buf.write("\u0445\7\u03ca\2\2\u0445\u0446\7\u00a5\2\2\u0446\u0447")
        buf.write("\7\u0179\2\2\u0447\u0448\7C\2\2\u0448\u044e\5\u0204\u0103")
        buf.write("\2\u0449\u044b\7\u014b\2\2\u044a\u044c\7\u03b2\2\2\u044b")
        buf.write("\u044a\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d\3\2\2\2")
        buf.write("\u044d\u044f\5\u020c\u0107\2\u044e\u0449\3\2\2\2\u044e")
        buf.write("\u044f\3\2\2\2\u044f\u0455\3\2\2\2\u0450\u0452\7\u0165")
        buf.write("\2\2\u0451\u0453\7\u03b2\2\2\u0452\u0451\3\2\2\2\u0452")
        buf.write("\u0453\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456\5\u020c")
        buf.write("\u0107\2\u0455\u0450\3\2\2\2\u0455\u0456\3\2\2\2\u0456")
        buf.write("\u045c\3\2\2\2\u0457\u0459\7\u0105\2\2\u0458\u045a\7\u03b2")
        buf.write("\2\2\u0459\u0458\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045b")
        buf.write("\3\2\2\2\u045b\u045d\5\u020c\u0107\2\u045c\u0457\3\2\2")
        buf.write("\2\u045c\u045d\3\2\2\2\u045d\u0463\3\2\2\2\u045e\u0460")
        buf.write("\7\u0193\2\2\u045f\u0461\7\u03b2\2\2\u0460\u045f\3\2\2")
        buf.write("\2\u0460\u0461\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0464")
        buf.write("\5\u020c\u0107\2\u0463\u045e\3\2\2\2\u0463\u0464\3\2\2")
        buf.write("\2\u0464\u046a\3\2\2\2\u0465\u0467\7\u01a5\2\2\u0466\u0468")
        buf.write("\7\u03b2\2\2\u0467\u0466\3\2\2\2\u0467\u0468\3\2\2\2\u0468")
        buf.write("\u0469\3\2\2\2\u0469\u046b\5\u0204\u0103\2\u046a\u0465")
        buf.write("\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046d\3\2\2\2\u046c")
        buf.write("\u046e\7\u0223\2\2\u046d\u046c\3\2\2\2\u046d\u046e\3\2")
        buf.write("\2\2\u046e\u0474\3\2\2\2\u046f\u0471\7\u011c\2\2\u0470")
        buf.write("\u0472\7\u03b2\2\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2")
        buf.write("\2\2\u0472\u0473\3\2\2\2\u0473\u0475\7\u03ca\2\2\u0474")
        buf.write("\u046f\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0476\3\2\2\2")
        buf.write("\u0476\u0478\7\u013d\2\2\u0477\u0479\7\u03b2\2\2\u0478")
        buf.write("\u0477\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a\3\2\2\2")
        buf.write("\u047a\u047b\5\u01fa\u00fe\2\u047b-\3\2\2\2\u047c\u047e")
        buf.write("\7\"\2\2\u047d\u047f\5\64\33\2\u047e\u047d\3\2\2\2\u047e")
        buf.write("\u047f\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0481\7\u009c")
        buf.write("\2\2\u0481\u0482\5\u01ea\u00f6\2\u0482\u0483\t\t\2\2\u0483")
        buf.write("\u0484\t\n\2\2\u0484\u0485\7j\2\2\u0485\u0486\5\u01ec")
        buf.write("\u00f7\2\u0486\u0487\7<\2\2\u0487\u0488\7\62\2\2\u0488")
        buf.write("\u048b\7\u01e1\2\2\u0489\u048a\t\13\2\2\u048a\u048c\5")
        buf.write("\u01ea\u00f6\2\u048b\u0489\3\2\2\2\u048b\u048c\3\2\2\2")
        buf.write("\u048c\u048d\3\2\2\2\u048d\u048e\5\u015c\u00af\2\u048e")
        buf.write("/\3\2\2\2\u048f\u0492\7\"\2\2\u0490\u0491\7n\2\2\u0491")
        buf.write("\u0493\7\177\2\2\u0492\u0490\3\2\2\2\u0492\u0493\3\2\2")
        buf.write("\2\u0493\u0497\3\2\2\2\u0494\u0495\7\u0100\2\2\u0495\u0496")
        buf.write("\7\u03b2\2\2\u0496\u0498\t\f\2\2\u0497\u0494\3\2\2\2\u0497")
        buf.write("\u0498\3\2\2\2\u0498\u049a\3\2\2\2\u0499\u049b\5\64\33")
        buf.write("\2\u049a\u0499\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049f")
        buf.write("\3\2\2\2\u049c\u049d\7\u008d\2\2\u049d\u049e\7\u01e6\2")
        buf.write("\2\u049e\u04a0\t\r\2\2\u049f\u049c\3\2\2\2\u049f\u04a0")
        buf.write("\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a2\7\u0221\2\2\u04a2")
        buf.write("\u04a7\5\u01ea\u00f6\2\u04a3\u04a4\7\u03bb\2\2\u04a4\u04a5")
        buf.write("\5\u0222\u0112\2\u04a5\u04a6\7\u03bc\2\2\u04a6\u04a8\3")
        buf.write("\2\2\2\u04a7\u04a3\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9")
        buf.write("\3\2\2\2\u04a9\u04aa\7\17\2\2\u04aa\u04b1\5\u00b4[\2\u04ab")
        buf.write("\u04ad\7\u00ab\2\2\u04ac\u04ae\t\16\2\2\u04ad\u04ac\3")
        buf.write("\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0")
        buf.write("\7\33\2\2\u04b0\u04b2\7l\2\2\u04b1\u04ab\3\2\2\2\u04b1")
        buf.write("\u04b2\3\2\2\2\u04b2\61\3\2\2\2\u04b3\u04b5\7)\2\2\u04b4")
        buf.write("\u04b3\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b9\3\2\2\2")
        buf.write("\u04b6\u04b7\7\32\2\2\u04b7\u04ba\7\u0089\2\2\u04b8\u04ba")
        buf.write("\7\u029b\2\2\u04b9\u04b6\3\2\2\2\u04b9\u04b8\3\2\2\2\u04ba")
        buf.write("\u04bc\3\2\2\2\u04bb\u04bd\7\u03b2\2\2\u04bc\u04bb\3\2")
        buf.write("\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04c8")
        buf.write("\5\u01f6\u00fc\2\u04bf\u04c1\7)\2\2\u04c0\u04bf\3\2\2")
        buf.write("\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c4")
        buf.write("\7\34\2\2\u04c3\u04c5\7\u03b2\2\2\u04c4\u04c3\3\2\2\2")
        buf.write("\u04c4\u04c5\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c8\5")
        buf.write("\u01f8\u00fd\2\u04c7\u04b4\3\2\2\2\u04c7\u04c0\3\2\2\2")
        buf.write("\u04c8\63\3\2\2\2\u04c9\u04ca\7\u012e\2\2\u04ca\u04d1")
        buf.write("\7\u03b2\2\2\u04cb\u04d2\5\u01f2\u00fa\2\u04cc\u04cf\7")
        buf.write("$\2\2\u04cd\u04ce\7\u03bb\2\2\u04ce\u04d0\7\u03bc\2\2")
        buf.write("\u04cf\u04cd\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d2\3")
        buf.write("\2\2\2\u04d1\u04cb\3\2\2\2\u04d1\u04cc\3\2\2\2\u04d2\65")
        buf.write("\3\2\2\2\u04d3\u04d4\7\u0102\2\2\u04d4\u04d8\58\35\2\u04d5")
        buf.write("\u04d7\5:\36\2\u04d6\u04d5\3\2\2\2\u04d7\u04da\3\2\2\2")
        buf.write("\u04d8\u04d6\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04f6\3")
        buf.write("\2\2\2\u04da\u04d8\3\2\2\2\u04db\u04de\7\u0145\2\2\u04dc")
        buf.write("\u04df\5\u020a\u0106\2\u04dd\u04df\5\u0250\u0129\2\u04de")
        buf.write("\u04dc\3\2\2\2\u04de\u04dd\3\2\2\2\u04df\u04e0\3\2\2\2")
        buf.write("\u04e0\u04e9\5<\37\2\u04e1\u04e2\7\u01fd\2\2\u04e2\u04e6")
        buf.write("\58\35\2\u04e3\u04e5\5:\36\2\u04e4\u04e3\3\2\2\2\u04e5")
        buf.write("\u04e8\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e6\u04e7\3\2\2\2")
        buf.write("\u04e7\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e9\u04e1\3")
        buf.write("\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04f3\3\2\2\2\u04eb\u04ec")
        buf.write("\7\u013c\2\2\u04ec\u04f0\58\35\2\u04ed\u04ef\5:\36\2\u04ee")
        buf.write("\u04ed\3\2\2\2\u04ef\u04f2\3\2\2\2\u04f0\u04ee\3\2\2\2")
        buf.write("\u04f0\u04f1\3\2\2\2\u04f1\u04f4\3\2\2\2\u04f2\u04f0\3")
        buf.write("\2\2\2\u04f3\u04eb\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f6")
        buf.write("\3\2\2\2\u04f5\u04d3\3\2\2\2\u04f5\u04db\3\2\2\2\u04f6")
        buf.write("\67\3\2\2\2\u04f7\u04fc\7\u00eb\2\2\u04f8\u04fc\5\u020e")
        buf.write("\u0108\2\u04f9\u04fc\5\u020a\u0106\2\u04fa\u04fc\5\u0250")
        buf.write("\u0129\2\u04fb\u04f7\3\2\2\2\u04fb\u04f8\3\2\2\2\u04fb")
        buf.write("\u04f9\3\2\2\2\u04fb\u04fa\3\2\2\2\u04fc9\3\2\2\2\u04fd")
        buf.write("\u04fe\7\u03ad\2\2\u04fe\u0501\7N\2\2\u04ff\u0502\5\u020a")
        buf.write("\u0106\2\u0500\u0502\5\u0250\u0129\2\u0501\u04ff\3\2\2")
        buf.write("\2\u0501\u0500\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0504")
        buf.write("\5<\37\2\u0504;\3\2\2\2\u0505\u0513\5\u0266\u0134\2\u0506")
        buf.write("\u0513\7\u00be\2\2\u0507\u0513\7\u00cd\2\2\u0508\u0513")
        buf.write("\7\u00ce\2\2\u0509\u0513\7\u00cf\2\2\u050a\u0513\7\u00d0")
        buf.write("\2\2\u050b\u0513\7\u00d1\2\2\u050c\u0513\7\u00d2\2\2\u050d")
        buf.write("\u0513\7\u00d3\2\2\u050e\u0513\7\u00d4\2\2\u050f\u0513")
        buf.write("\7\u00d5\2\2\u0510\u0513\7\u00d6\2\2\u0511\u0513\7\u00d7")
        buf.write("\2\2\u0512\u0505\3\2\2\2\u0512\u0506\3\2\2\2\u0512\u0507")
        buf.write("\3\2\2\2\u0512\u0508\3\2\2\2\u0512\u0509\3\2\2\2\u0512")
        buf.write("\u050a\3\2\2\2\u0512\u050b\3\2\2\2\u0512\u050c\3\2\2\2")
        buf.write("\u0512\u050d\3\2\2\2\u0512\u050e\3\2\2\2\u0512\u050f\3")
        buf.write("\2\2\2\u0512\u0510\3\2\2\2\u0512\u0511\3\2\2\2\u0513=")
        buf.write("\3\2\2\2\u0514\u051a\7\u0139\2\2\u0515\u051a\7\u0132\2")
        buf.write("\2\u0516\u0517\7\u0132\2\2\u0517\u0518\7j\2\2\u0518\u051a")
        buf.write("\7\u01ed\2\2\u0519\u0514\3\2\2\2\u0519\u0515\3\2\2\2\u0519")
        buf.write("\u0516\3\2\2\2\u051a?\3\2\2\2\u051b\u051c\7\u00a6\2\2")
        buf.write("\u051c\u051d\t\17\2\2\u051dA\3\2\2\2\u051e\u0520\7\u0171")
        buf.write("\2\2\u051f\u0521\7\u03b2\2\2\u0520\u051f\3\2\2\2\u0520")
        buf.write("\u0521\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u052a\5\u020c")
        buf.write("\u0107\2\u0523\u052a\5@!\2\u0524\u0525\7\u00ab\2\2\u0525")
        buf.write("\u0526\7\u01b4\2\2\u0526\u052a\5\u0204\u0103\2\u0527\u0528")
        buf.write("\7\u011c\2\2\u0528\u052a\7\u03ca\2\2\u0529\u051e\3\2\2")
        buf.write("\2\u0529\u0523\3\2\2\2\u0529\u0524\3\2\2\2\u0529\u0527")
        buf.write("\3\2\2\2\u052aC\3\2\2\2\u052b\u052c\t\20\2\2\u052c\u052d")
        buf.write("\5\u0204\u0103\2\u052d\u052e\5\u0218\u010d\2\u052eE\3")
        buf.write("\2\2\2\u052f\u0530\5\u0204\u0103\2\u0530\u0531\5\u0218")
        buf.write("\u010d\2\u0531G\3\2\2\2\u0532\u0533\7\u011c\2\2\u0533")
        buf.write("\u054a\7\u03ca\2\2\u0534\u0535\7\u0172\2\2\u0535\u054a")
        buf.write("\7\u008d\2\2\u0536\u0538\7g\2\2\u0537\u0536\3\2\2\2\u0537")
        buf.write("\u0538\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u054a\7.\2\2")
        buf.write("\u053a\u053b\7\u0125\2\2\u053b\u0545\7\u008d\2\2\u053c")
        buf.write("\u053d\7\u01a4\2\2\u053d\u0545\7\u008d\2\2\u053e\u053f")
        buf.write("\7y\2\2\u053f\u0540\7\u008d\2\2\u0540\u0545\7\u012a\2")
        buf.write("\2\u0541\u0542\7e\2\2\u0542\u0543\7\u008d\2\2\u0543\u0545")
        buf.write("\7\u012a\2\2\u0544\u053a\3\2\2\2\u0544\u053c\3\2\2\2\u0544")
        buf.write("\u053e\3\2\2\2\u0544\u0541\3\2\2\2\u0545\u054a\3\2\2\2")
        buf.write("\u0546\u0547\7\u008d\2\2\u0547\u0548\7\u01e6\2\2\u0548")
        buf.write("\u054a\t\r\2\2\u0549\u0532\3\2\2\2\u0549\u0534\3\2\2\2")
        buf.write("\u0549\u0537\3\2\2\2\u0549\u0544\3\2\2\2\u0549\u0546\3")
        buf.write("\2\2\2\u054aI\3\2\2\2\u054b\u054c\7\u015f\2\2\u054c\u055a")
        buf.write("\7\u03ca\2\2\u054d\u054e\7&\2\2\u054e\u055a\7\u03ca\2")
        buf.write("\2\u054f\u0550\7\u021b\2\2\u0550\u055a\7\u03ca\2\2\u0551")
        buf.write("\u0552\7\u01b8\2\2\u0552\u055a\7\u03ca\2\2\u0553\u0554")
        buf.write("\7\u01f0\2\2\u0554\u055a\7\u03ca\2\2\u0555\u0556\7\u01b1")
        buf.write("\2\2\u0556\u055a\7\u03ca\2\2\u0557\u0558\7\u01bd\2\2\u0558")
        buf.write("\u055a\5\u020a\u0106\2\u0559\u054b\3\2\2\2\u0559\u054d")
        buf.write("\3\2\2\2\u0559\u054f\3\2\2\2\u0559\u0551\3\2\2\2\u0559")
        buf.write("\u0553\3\2\2\2\u0559\u0555\3\2\2\2\u0559\u0557\3\2\2\2")
        buf.write("\u055aK\3\2\2\2\u055b\u055c\7\u03bb\2\2\u055c\u0561\5")
        buf.write("N(\2\u055d\u055e\7\u03bd\2\2\u055e\u0560\5N(\2\u055f\u055d")
        buf.write("\3\2\2\2\u0560\u0563\3\2\2\2\u0561\u055f\3\2\2\2\u0561")
        buf.write("\u0562\3\2\2\2\u0562\u0564\3\2\2\2\u0563\u0561\3\2\2\2")
        buf.write("\u0564\u0565\7\u03bc\2\2\u0565M\3\2\2\2\u0566\u0567\5")
        buf.write("\u0204\u0103\2\u0567\u0568\5P)\2\u0568\u056c\3\2\2\2\u0569")
        buf.write("\u056c\5T+\2\u056a\u056c\5\\/\2\u056b\u0566\3\2\2\2\u056b")
        buf.write("\u0569\3\2\2\2\u056b\u056a\3\2\2\2\u056cO\3\2\2\2\u056d")
        buf.write("\u0571\5\u0218\u010d\2\u056e\u0570\5R*\2\u056f\u056e\3")
        buf.write("\2\2\2\u0570\u0573\3\2\2\2\u0571\u056f\3\2\2\2\u0571\u0572")
        buf.write("\3\2\2\2\u0572Q\3\2\2\2\u0573\u0571\3\2\2\2\u0574\u0596")
        buf.write("\5\u0214\u010b\2\u0575\u0576\7)\2\2\u0576\u0596\5\u0232")
        buf.write("\u011a\2\u0577\u0596\7\u0106\2\2\u0578\u057a\7t\2\2\u0579")
        buf.write("\u0578\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057b\3\2\2\2")
        buf.write("\u057b\u0596\7S\2\2\u057c\u057e\7\u00a0\2\2\u057d\u057f")
        buf.write("\7S\2\2\u057e\u057d\3\2\2\2\u057e\u057f\3\2\2\2\u057f")
        buf.write("\u0596\3\2\2\2\u0580\u0581\7\u011c\2\2\u0581\u0596\7\u03ca")
        buf.write("\2\2\u0582\u0583\7\u011b\2\2\u0583\u0596\t\21\2\2\u0584")
        buf.write("\u0585\7\u0203\2\2\u0585\u0596\t\22\2\2\u0586\u0596\5")
        buf.write("V,\2\u0587\u0588\7A\2\2\u0588\u058a\7\f\2\2\u0589\u0587")
        buf.write("\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b\3\2\2\2\u058b")
        buf.write("\u058c\7\17\2\2\u058c\u058d\7\u03bb\2\2\u058d\u058e\5")
        buf.write("\u0250\u0129\2\u058e\u0590\7\u03bc\2\2\u058f\u0591\t\23")
        buf.write("\2\2\u0590\u058f\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0596")
        buf.write("\3\2\2\2\u0592\u0593\7\u00cc\2\2\u0593\u0594\7)\2\2\u0594")
        buf.write("\u0596\7\u021f\2\2\u0595\u0574\3\2\2\2\u0595\u0575\3\2")
        buf.write("\2\2\u0595\u0577\3\2\2\2\u0595\u0579\3\2\2\2\u0595\u057c")
        buf.write("\3\2\2\2\u0595\u0580\3\2\2\2\u0595\u0582\3\2\2\2\u0595")
        buf.write("\u0584\3\2\2\2\u0595\u0586\3\2\2\2\u0595\u0589\3\2\2\2")
        buf.write("\u0595\u0592\3\2\2\2\u0596S\3\2\2\2\u0597\u0599\7\37\2")
        buf.write("\2\u0598\u059a\5\u0204\u0103\2\u0599\u0598\3\2\2\2\u0599")
        buf.write("\u059a\3\2\2\2\u059a\u059c\3\2\2\2\u059b\u0597\3\2\2\2")
        buf.write("\u059b\u059c\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e\7")
        buf.write("t\2\2\u059e\u05a0\7S\2\2\u059f\u05a1\5@!\2\u05a0\u059f")
        buf.write("\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2")
        buf.write("\u05a6\5\u0226\u0114\2\u05a3\u05a5\5B\"\2\u05a4\u05a3")
        buf.write("\3\2\2\2\u05a5\u05a8\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a6")
        buf.write("\u05a7\3\2\2\2\u05a7\u05da\3\2\2\2\u05a8\u05a6\3\2\2\2")
        buf.write("\u05a9\u05ab\7\37\2\2\u05aa\u05ac\5\u0204\u0103\2\u05ab")
        buf.write("\u05aa\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ae\3\2\2\2")
        buf.write("\u05ad\u05a9\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05af\3")
        buf.write("\2\2\2\u05af\u05b1\7\u00a0\2\2\u05b0\u05b2\t\24\2\2\u05b1")
        buf.write("\u05b0\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b4\3\2\2\2")
        buf.write("\u05b3\u05b5\5\u0204\u0103\2\u05b4\u05b3\3\2\2\2\u05b4")
        buf.write("\u05b5\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6\u05b8\5@!\2\u05b7")
        buf.write("\u05b6\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05b9\3\2\2\2")
        buf.write("\u05b9\u05bd\5\u0226\u0114\2\u05ba\u05bc\5B\"\2\u05bb")
        buf.write("\u05ba\3\2\2\2\u05bc\u05bf\3\2\2\2\u05bd\u05bb\3\2\2\2")
        buf.write("\u05bd\u05be\3\2\2\2\u05be\u05da\3\2\2\2\u05bf\u05bd\3")
        buf.write("\2\2\2\u05c0\u05c2\7\37\2\2\u05c1\u05c3\5\u0204\u0103")
        buf.write("\2\u05c2\u05c1\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c5")
        buf.write("\3\2\2\2\u05c4\u05c0\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5")
        buf.write("\u05c6\3\2\2\2\u05c6\u05c7\7>\2\2\u05c7\u05c9\7S\2\2\u05c8")
        buf.write("\u05ca\5\u0204\u0103\2\u05c9\u05c8\3\2\2\2\u05c9\u05ca")
        buf.write("\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\5\u0226\u0114")
        buf.write("\2\u05cc\u05cd\5V,\2\u05cd\u05da\3\2\2\2\u05ce\u05d0\7")
        buf.write("\37\2\2\u05cf\u05d1\5\u0204\u0103\2\u05d0\u05cf\3\2\2")
        buf.write("\2\u05d0\u05d1\3\2\2\2\u05d1\u05d3\3\2\2\2\u05d2\u05ce")
        buf.write("\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4")
        buf.write("\u05d5\7\33\2\2\u05d5\u05d6\7\u03bb\2\2\u05d6\u05d7\5")
        buf.write("\u0250\u0129\2\u05d7\u05d8\7\u03bc\2\2\u05d8\u05da\3\2")
        buf.write("\2\2\u05d9\u059b\3\2\2\2\u05d9\u05ad\3\2\2\2\u05d9\u05c4")
        buf.write("\3\2\2\2\u05d9\u05d2\3\2\2\2\u05daU\3\2\2\2\u05db\u05dc")
        buf.write("\7z\2\2\u05dc\u05dd\5\u01ec\u00f7\2\u05dd\u05e0\5\u0226")
        buf.write("\u0114\2\u05de\u05df\7c\2\2\u05df\u05e1\t\25\2\2\u05e0")
        buf.write("\u05de\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e3\3\2\2\2")
        buf.write("\u05e2\u05e4\5X-\2\u05e3\u05e2\3\2\2\2\u05e3\u05e4\3\2")
        buf.write("\2\2\u05e4W\3\2\2\2\u05e5\u05e6\7j\2\2\u05e6\u05e7\7+")
        buf.write("\2\2\u05e7\u05eb\5Z.\2\u05e8\u05e9\7j\2\2\u05e9\u05ea")
        buf.write("\7\u00a3\2\2\u05ea\u05ec\5Z.\2\u05eb\u05e8\3\2\2\2\u05eb")
        buf.write("\u05ec\3\2\2\2\u05ec\u05f6\3\2\2\2\u05ed\u05ee\7j\2\2")
        buf.write("\u05ee\u05ef\7\u00a3\2\2\u05ef\u05f3\5Z.\2\u05f0\u05f1")
        buf.write("\7j\2\2\u05f1\u05f2\7+\2\2\u05f2\u05f4\5Z.\2\u05f3\u05f0")
        buf.write("\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f6\3\2\2\2\u05f5")
        buf.write("\u05e5\3\2\2\2\u05f5\u05ed\3\2\2\2\u05f6Y\3\2\2\2\u05f7")
        buf.write("\u05fe\7\u0081\2\2\u05f8\u05fe\7\26\2\2\u05f9\u05fa\7")
        buf.write("\u0089\2\2\u05fa\u05fe\7i\2\2\u05fb\u05fc\7\u01a4\2\2")
        buf.write("\u05fc\u05fe\7\u00fd\2\2\u05fd\u05f7\3\2\2\2\u05fd\u05f8")
        buf.write("\3\2\2\2\u05fd\u05f9\3\2\2\2\u05fd\u05fb\3\2\2\2\u05fe")
        buf.write("[\3\2\2\2\u05ff\u0601\t\24\2\2\u0600\u0602\5\u0204\u0103")
        buf.write("\2\u0601\u0600\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0604")
        buf.write("\3\2\2\2\u0603\u0605\5@!\2\u0604\u0603\3\2\2\2\u0604\u0605")
        buf.write("\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u060a\5\u0226\u0114")
        buf.write("\2\u0607\u0609\5B\"\2\u0608\u0607\3\2\2\2\u0609\u060c")
        buf.write("\3\2\2\2\u060a\u0608\3\2\2\2\u060a\u060b\3\2\2\2\u060b")
        buf.write("\u061c\3\2\2\2\u060c\u060a\3\2\2\2\u060d\u060f\t\26\2")
        buf.write("\2\u060e\u0610\t\24\2\2\u060f\u060e\3\2\2\2\u060f\u0610")
        buf.write("\3\2\2\2\u0610\u0612\3\2\2\2\u0611\u0613\5\u0204\u0103")
        buf.write("\2\u0612\u0611\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0614")
        buf.write("\3\2\2\2\u0614\u0618\5\u0226\u0114\2\u0615\u0617\5B\"")
        buf.write("\2\u0616\u0615\3\2\2\2\u0617\u061a\3\2\2\2\u0618\u0616")
        buf.write("\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061c\3\2\2\2\u061a")
        buf.write("\u0618\3\2\2\2\u061b\u05ff\3\2\2\2\u061b\u060d\3\2\2\2")
        buf.write("\u061c]\3\2\2\2\u061d\u061f\7\u013d\2\2\u061e\u0620\7")
        buf.write("\u03b2\2\2\u061f\u061e\3\2\2\2\u061f\u0620\3\2\2\2\u0620")
        buf.write("\u0621\3\2\2\2\u0621\u06aa\5\u01fa\u00fe\2\u0622\u0624")
        buf.write("\7\u0106\2\2\u0623\u0625\7\u03b2\2\2\u0624\u0623\3\2\2")
        buf.write("\2\u0624\u0625\3\2\2\2\u0625\u0626\3\2\2\2\u0626\u06aa")
        buf.write("\5\u020a\u0106\2\u0627\u0629\7\u0107\2\2\u0628\u062a\7")
        buf.write("\u03b2\2\2\u0629\u0628\3\2\2\2\u0629\u062a\3\2\2\2\u062a")
        buf.write("\u062b\3\2\2\2\u062b\u06aa\5\u020a\u0106\2\u062c\u062e")
        buf.write("\7)\2\2\u062d\u062c\3\2\2\2\u062d\u062e\3\2\2\2\u062e")
        buf.write("\u0632\3\2\2\2\u062f\u0630\7\32\2\2\u0630\u0633\7\u0089")
        buf.write("\2\2\u0631\u0633\7\u029b\2\2\u0632\u062f\3\2\2\2\u0632")
        buf.write("\u0631\3\2\2\2\u0633\u0635\3\2\2\2\u0634\u0636\7\u03b2")
        buf.write("\2\2\u0635\u0634\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0637")
        buf.write("\3\2\2\2\u0637\u06aa\5\u01f6\u00fc\2\u0638\u063a\7\u0114")
        buf.write("\2\2\u0639\u063b\7\u03b2\2\2\u063a\u0639\3\2\2\2\u063a")
        buf.write("\u063b\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u06aa\t\27\2")
        buf.write("\2\u063d\u063f\7)\2\2\u063e\u063d\3\2\2\2\u063e\u063f")
        buf.write("\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0642\7\34\2\2\u0641")
        buf.write("\u0643\7\u03b2\2\2\u0642\u0641\3\2\2\2\u0642\u0643\3\2")
        buf.write("\2\2\u0643\u0644\3\2\2\2\u0644\u06aa\5\u01f8\u00fd\2\u0645")
        buf.write("\u0647\7\u011c\2\2\u0646\u0648\7\u03b2\2\2\u0647\u0646")
        buf.write("\3\2\2\2\u0647\u0648\3\2\2\2\u0648\u0649\3\2\2\2\u0649")
        buf.write("\u06aa\7\u03ca\2\2\u064a\u064c\7\u0121\2\2\u064b\u064d")
        buf.write("\7\u03b2\2\2\u064c\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d")
        buf.write("\u064e\3\2\2\2\u064e\u06aa\7\u03ca\2\2\u064f\u0651\7\u0123")
        buf.write("\2\2\u0650\u0652\7\u03b2\2\2\u0651\u0650\3\2\2\2\u0651")
        buf.write("\u0652\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u06aa\7\u03ca")
        buf.write("\2\2\u0654\u0655\7\u012a\2\2\u0655\u0657\7\u0131\2\2\u0656")
        buf.write("\u0658\7\u03b2\2\2\u0657\u0656\3\2\2\2\u0657\u0658\3\2")
        buf.write("\2\2\u0658\u0659\3\2\2\2\u0659\u06aa\7\u03ca\2\2\u065a")
        buf.write("\u065c\7\u012f\2\2\u065b\u065d\7\u03b2\2\2\u065c\u065b")
        buf.write("\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u065e\3\2\2\2\u065e")
        buf.write("\u06aa\t\27\2\2\u065f\u0661\7\u013a\2\2\u0660\u0662\7")
        buf.write("\u03b2\2\2\u0661\u0660\3\2\2\2\u0661\u0662\3\2\2\2\u0662")
        buf.write("\u0663\3\2\2\2\u0663\u06aa\7\u03ca\2\2\u0664\u0665\7I")
        buf.write("\2\2\u0665\u0667\7\u0131\2\2\u0666\u0668\7\u03b2\2\2\u0667")
        buf.write("\u0666\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u0669\3\2\2\2")
        buf.write("\u0669\u06aa\7\u03ca\2\2\u066a\u066c\7\u0167\2\2\u066b")
        buf.write("\u066d\7\u03b2\2\2\u066c\u066b\3\2\2\2\u066c\u066d\3\2")
        buf.write("\2\2\u066d\u066e\3\2\2\2\u066e\u06aa\t\30\2\2\u066f\u0671")
        buf.write("\7\u0171\2\2\u0670\u0672\7\u03b2\2\2\u0671\u0670\3\2\2")
        buf.write("\2\u0671\u0672\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u06aa")
        buf.write("\5\u020c\u0107\2\u0674\u0676\7\u0192\2\2\u0675\u0677\7")
        buf.write("\u03b2\2\2\u0676\u0675\3\2\2\2\u0676\u0677\3\2\2\2\u0677")
        buf.write("\u0678\3\2\2\2\u0678\u06aa\5\u020a\u0106\2\u0679\u067b")
        buf.write("\7\u019a\2\2\u067a\u067c\7\u03b2\2\2\u067b\u067a\3\2\2")
        buf.write("\2\u067b\u067c\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u06aa")
        buf.write("\5\u020a\u0106\2\u067e\u0680\7\u01b2\2\2\u067f\u0681\7")
        buf.write("\u03b2\2\2\u0680\u067f\3\2\2\2\u0680\u0681\3\2\2\2\u0681")
        buf.write("\u0682\3\2\2\2\u0682\u06aa\t\31\2\2\u0683\u0685\7\u01b8")
        buf.write("\2\2\u0684\u0686\7\u03b2\2\2\u0685\u0684\3\2\2\2\u0685")
        buf.write("\u0686\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u06aa\7\u03ca")
        buf.write("\2\2\u0688\u068a\7\u01e3\2\2\u0689\u068b\7\u03b2\2\2\u068a")
        buf.write("\u0689\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u068c\3\2\2\2")
        buf.write("\u068c\u06aa\t\32\2\2\u068d\u068f\7\u01fe\2\2\u068e\u0690")
        buf.write("\7\u03b2\2\2\u068f\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690")
        buf.write("\u0691\3\2\2\2\u0691\u06aa\t\31\2\2\u0692\u0694\7\u01ff")
        buf.write("\2\2\u0693\u0695\7\u03b2\2\2\u0694\u0693\3\2\2\2\u0694")
        buf.write("\u0695\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u06aa\t\31\2")
        buf.write("\2\u0697\u0699\7\u0200\2\2\u0698\u069a\7\u03b2\2\2\u0699")
        buf.write("\u0698\3\2\2\2\u0699\u069a\3\2\2\2\u069a\u069b\3\2\2\2")
        buf.write("\u069b\u06aa\5\u020a\u0106\2\u069c\u069d\7\u020c\2\2\u069d")
        buf.write("\u069f\5\u0204\u0103\2\u069e\u06a0\5`\61\2\u069f\u069e")
        buf.write("\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u06aa\3\2\2\2\u06a1")
        buf.write("\u06a3\7\u009f\2\2\u06a2\u06a4\7\u03b2\2\2\u06a3\u06a2")
        buf.write("\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5")
        buf.write("\u06a6\7\u03bb\2\2\u06a6\u06a7\5\u0224\u0113\2\u06a7\u06a8")
        buf.write("\7\u03bc\2\2\u06a8\u06aa\3\2\2\2\u06a9\u061d\3\2\2\2\u06a9")
        buf.write("\u0622\3\2\2\2\u06a9\u0627\3\2\2\2\u06a9\u062d\3\2\2\2")
        buf.write("\u06a9\u0638\3\2\2\2\u06a9\u063e\3\2\2\2\u06a9\u0645\3")
        buf.write("\2\2\2\u06a9\u064a\3\2\2\2\u06a9\u064f\3\2\2\2\u06a9\u0654")
        buf.write("\3\2\2\2\u06a9\u065a\3\2\2\2\u06a9\u065f\3\2\2\2\u06a9")
        buf.write("\u0664\3\2\2\2\u06a9\u066a\3\2\2\2\u06a9\u066f\3\2\2\2")
        buf.write("\u06a9\u0674\3\2\2\2\u06a9\u0679\3\2\2\2\u06a9\u067e\3")
        buf.write("\2\2\2\u06a9\u0683\3\2\2\2\u06a9\u0688\3\2\2\2\u06a9\u068d")
        buf.write("\3\2\2\2\u06a9\u0692\3\2\2\2\u06a9\u0697\3\2\2\2\u06a9")
        buf.write("\u069c\3\2\2\2\u06a9\u06a1\3\2\2\2\u06aa_\3\2\2\2\u06ab")
        buf.write("\u06ac\7\u0203\2\2\u06ac\u06ad\t\22\2\2\u06ada\3\2\2\2")
        buf.write("\u06ae\u06af\7s\2\2\u06af\u06b0\7\24\2\2\u06b0\u06b3\5")
        buf.write("d\63\2\u06b1\u06b2\7\u01b7\2\2\u06b2\u06b4\5\u020a\u0106")
        buf.write("\2\u06b3\u06b1\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06bc")
        buf.write("\3\2\2\2\u06b5\u06b6\7\u0207\2\2\u06b6\u06b7\7\24\2\2")
        buf.write("\u06b7\u06ba\5f\64\2\u06b8\u06b9\7\u0208\2\2\u06b9\u06bb")
        buf.write("\5\u020a\u0106\2\u06ba\u06b8\3\2\2\2\u06ba\u06bb\3\2\2")
        buf.write("\2\u06bb\u06bd\3\2\2\2\u06bc\u06b5\3\2\2\2\u06bc\u06bd")
        buf.write("\3\2\2\2\u06bd\u06c9\3\2\2\2\u06be\u06bf\7\u03bb\2\2\u06bf")
        buf.write("\u06c4\5h\65\2\u06c0\u06c1\7\u03bd\2\2\u06c1\u06c3\5h")
        buf.write("\65\2\u06c2\u06c0\3\2\2\2\u06c3\u06c6\3\2\2\2\u06c4\u06c2")
        buf.write("\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c7\3\2\2\2\u06c6")
        buf.write("\u06c4\3\2\2\2\u06c7\u06c8\7\u03bc\2\2\u06c8\u06ca\3\2")
        buf.write("\2\2\u06c9\u06be\3\2\2\2\u06c9\u06ca\3\2\2\2\u06cac\3")
        buf.write("\2\2\2\u06cb\u06cd\7[\2\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd")
        buf.write("\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06cf\7\u015d\2\2\u06cf")
        buf.write("\u06d0\7\u03bb\2\2\u06d0\u06d1\5\u0250\u0129\2\u06d1\u06d2")
        buf.write("\7\u03bc\2\2\u06d2\u06f9\3\2\2\2\u06d3\u06d5\7[\2\2\u06d4")
        buf.write("\u06d3\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06d6\3\2\2\2")
        buf.write("\u06d6\u06da\7S\2\2\u06d7\u06d8\7\u0100\2\2\u06d8\u06d9")
        buf.write("\7\u03b2\2\2\u06d9\u06db\t\33\2\2\u06da\u06d7\3\2\2\2")
        buf.write("\u06da\u06db\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u06dd\7")
        buf.write("\u03bb\2\2\u06dd\u06de\5\u0222\u0112\2\u06de\u06df\7\u03bc")
        buf.write("\2\2\u06df\u06f9\3\2\2\2\u06e0\u06ea\7w\2\2\u06e1\u06e2")
        buf.write("\7\u03bb\2\2\u06e2\u06e3\5\u0250\u0129\2\u06e3\u06e4\7")
        buf.write("\u03bc\2\2\u06e4\u06eb\3\2\2\2\u06e5\u06e6\7\u011a\2\2")
        buf.write("\u06e6\u06e7\7\u03bb\2\2\u06e7\u06e8\5\u0222\u0112\2\u06e8")
        buf.write("\u06e9\7\u03bc\2\2\u06e9\u06eb\3\2\2\2\u06ea\u06e1\3\2")
        buf.write("\2\2\u06ea\u06e5\3\2\2\2\u06eb\u06f9\3\2\2\2\u06ec\u06f6")
        buf.write("\7\u0177\2\2\u06ed\u06ee\7\u03bb\2\2\u06ee\u06ef\5\u0250")
        buf.write("\u0129\2\u06ef\u06f0\7\u03bc\2\2\u06f0\u06f7\3\2\2\2\u06f1")
        buf.write("\u06f2\7\u011a\2\2\u06f2\u06f3\7\u03bb\2\2\u06f3\u06f4")
        buf.write("\5\u0222\u0112\2\u06f4\u06f5\7\u03bc\2\2\u06f5\u06f7\3")
        buf.write("\2\2\2\u06f6\u06ed\3\2\2\2\u06f6\u06f1\3\2\2\2\u06f7\u06f9")
        buf.write("\3\2\2\2\u06f8\u06cc\3\2\2\2\u06f8\u06d4\3\2\2\2\u06f8")
        buf.write("\u06e0\3\2\2\2\u06f8\u06ec\3\2\2\2\u06f9e\3\2\2\2\u06fa")
        buf.write("\u06fc\7[\2\2\u06fb\u06fa\3\2\2\2\u06fb\u06fc\3\2\2\2")
        buf.write("\u06fc\u06fd\3\2\2\2\u06fd\u06fe\7\u015d\2\2\u06fe\u06ff")
        buf.write("\7\u03bb\2\2\u06ff\u0700\5\u0250\u0129\2\u0700\u0701\7")
        buf.write("\u03bc\2\2\u0701\u0710\3\2\2\2\u0702\u0704\7[\2\2\u0703")
        buf.write("\u0702\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0705\3\2\2\2")
        buf.write("\u0705\u0709\7S\2\2\u0706\u0707\7\u0100\2\2\u0707\u0708")
        buf.write("\7\u03b2\2\2\u0708\u070a\t\33\2\2\u0709\u0706\3\2\2\2")
        buf.write("\u0709\u070a\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u070c\7")
        buf.write("\u03bb\2\2\u070c\u070d\5\u0222\u0112\2\u070d\u070e\7\u03bc")
        buf.write("\2\2\u070e\u0710\3\2\2\2\u070f\u06fb\3\2\2\2\u070f\u0703")
        buf.write("\3\2\2\2\u0710g\3\2\2\2\u0711\u0712\7s\2\2\u0712\u0713")
        buf.write("\5\u0204\u0103\2\u0713\u0714\7\u00a7\2\2\u0714\u0715\7")
        buf.write("\u0175\2\2\u0715\u0716\7\u020f\2\2\u0716\u0717\7\u03bb")
        buf.write("\2\2\u0717\u071c\5j\66\2\u0718\u0719\7\u03bd\2\2\u0719")
        buf.write("\u071b\5j\66\2\u071a\u0718\3\2\2\2\u071b\u071e\3\2\2\2")
        buf.write("\u071c\u071a\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071f\3")
        buf.write("\2\2\2\u071e\u071c\3\2\2\2\u071f\u0723\7\u03bc\2\2\u0720")
        buf.write("\u0722\5p9\2\u0721\u0720\3\2\2\2\u0722\u0725\3\2\2\2\u0723")
        buf.write("\u0721\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u072e\3\2\2\2")
        buf.write("\u0725\u0723\3\2\2\2\u0726\u072b\5n8\2\u0727\u0728\7\u03bd")
        buf.write("\2\2\u0728\u072a\5n8\2\u0729\u0727\3\2\2\2\u072a\u072d")
        buf.write("\3\2\2\2\u072b\u0729\3\2\2\2\u072b\u072c\3\2\2\2\u072c")
        buf.write("\u072f\3\2\2\2\u072d\u072b\3\2\2\2\u072e\u0726\3\2\2\2")
        buf.write("\u072e\u072f\3\2\2\2\u072f\u077f\3\2\2\2\u0730\u0731\7")
        buf.write("s\2\2\u0731\u0732\5\u0204\u0103\2\u0732\u0733\7\u00a7")
        buf.write("\2\2\u0733\u0734\7H\2\2\u0734\u0735\7\u03bb\2\2\u0735")
        buf.write("\u073a\5j\66\2\u0736\u0737\7\u03bd\2\2\u0737\u0739\5j")
        buf.write("\66\2\u0738\u0736\3\2\2\2\u0739\u073c\3\2\2\2\u073a\u0738")
        buf.write("\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u073d\3\2\2\2\u073c")
        buf.write("\u073a\3\2\2\2\u073d\u0741\7\u03bc\2\2\u073e\u0740\5p")
        buf.write("9\2\u073f\u073e\3\2\2\2\u0740\u0743\3\2\2\2\u0741\u073f")
        buf.write("\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u074c\3\2\2\2\u0743")
        buf.write("\u0741\3\2\2\2\u0744\u0749\5n8\2\u0745\u0746\7\u03bd\2")
        buf.write("\2\u0746\u0748\5n8\2\u0747\u0745\3\2\2\2\u0748\u074b\3")
        buf.write("\2\2\2\u0749\u0747\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074d")
        buf.write("\3\2\2\2\u074b\u0749\3\2\2\2\u074c\u0744\3\2\2\2\u074c")
        buf.write("\u074d\3\2\2\2\u074d\u077f\3\2\2\2\u074e\u074f\7s\2\2")
        buf.write("\u074f\u0750\5\u0204\u0103\2\u0750\u0751\7\u00a7\2\2\u0751")
        buf.write("\u0752\7H\2\2\u0752\u0753\7\u03bb\2\2\u0753\u0758\5l\67")
        buf.write("\2\u0754\u0755\7\u03bd\2\2\u0755\u0757\5l\67\2\u0756\u0754")
        buf.write("\3\2\2\2\u0757\u075a\3\2\2\2\u0758\u0756\3\2\2\2\u0758")
        buf.write("\u0759\3\2\2\2\u0759\u075b\3\2\2\2\u075a\u0758\3\2\2\2")
        buf.write("\u075b\u075f\7\u03bc\2\2\u075c\u075e\5p9\2\u075d\u075c")
        buf.write("\3\2\2\2\u075e\u0761\3\2\2\2\u075f\u075d\3\2\2\2\u075f")
        buf.write("\u0760\3\2\2\2\u0760\u076a\3\2\2\2\u0761\u075f\3\2\2\2")
        buf.write("\u0762\u0767\5n8\2\u0763\u0764\7\u03bd\2\2\u0764\u0766")
        buf.write("\5n8\2\u0765\u0763\3\2\2\2\u0766\u0769\3\2\2\2\u0767\u0765")
        buf.write("\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u076b\3\2\2\2\u0769")
        buf.write("\u0767\3\2\2\2\u076a\u0762\3\2\2\2\u076a\u076b\3\2\2\2")
        buf.write("\u076b\u077f\3\2\2\2\u076c\u076d\7s\2\2\u076d\u0771\5")
        buf.write("\u0204\u0103\2\u076e\u0770\5p9\2\u076f\u076e\3\2\2\2\u0770")
        buf.write("\u0773\3\2\2\2\u0771\u076f\3\2\2\2\u0771\u0772\3\2\2\2")
        buf.write("\u0772\u077c\3\2\2\2\u0773\u0771\3\2\2\2\u0774\u0779\5")
        buf.write("n8\2\u0775\u0776\7\u03bd\2\2\u0776\u0778\5n8\2\u0777\u0775")
        buf.write("\3\2\2\2\u0778\u077b\3\2\2\2\u0779\u0777\3\2\2\2\u0779")
        buf.write("\u077a\3\2\2\2\u077a\u077d\3\2\2\2\u077b\u0779\3\2\2\2")
        buf.write("\u077c\u0774\3\2\2\2\u077c\u077d\3\2\2\2\u077d\u077f\3")
        buf.write("\2\2\2\u077e\u0711\3\2\2\2\u077e\u0730\3\2\2\2\u077e\u074e")
        buf.write("\3\2\2\2\u077e\u076c\3\2\2\2\u077fi\3\2\2\2\u0780\u0784")
        buf.write("\5\u0216\u010c\2\u0781\u0784\7d\2\2\u0782\u0784\5\u0250")
        buf.write("\u0129\2\u0783\u0780\3\2\2\2\u0783\u0781\3\2\2\2\u0783")
        buf.write("\u0782\3\2\2\2\u0784k\3\2\2\2\u0785\u0786\7\u03bb\2\2")
        buf.write("\u0786\u0789\5j\66\2\u0787\u0788\7\u03bd\2\2\u0788\u078a")
        buf.write("\5j\66\2\u0789\u0787\3\2\2\2\u078a\u078b\3\2\2\2\u078b")
        buf.write("\u0789\3\2\2\2\u078b\u078c\3\2\2\2\u078c\u078d\3\2\2\2")
        buf.write("\u078d\u078e\7\u03bc\2\2\u078em\3\2\2\2\u078f\u0790\7")
        buf.write("\u0207\2\2\u0790\u0794\5\u0204\u0103\2\u0791\u0793\5p")
        buf.write("9\2\u0792\u0791\3\2\2\2\u0793\u0796\3\2\2\2\u0794\u0792")
        buf.write("\3\2\2\2\u0794\u0795\3\2\2\2\u0795o\3\2\2\2\u0796\u0794")
        buf.write("\3\2\2\2\u0797\u0799\7\u0203\2\2\u0798\u0797\3\2\2\2\u0798")
        buf.write("\u0799\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079c\7\u013d")
        buf.write("\2\2\u079b\u079d\7\u03b2\2\2\u079c\u079b\3\2\2\2\u079c")
        buf.write("\u079d\3\2\2\2\u079d\u079e\3\2\2\2\u079e\u07c5\5\u01fa")
        buf.write("\u00fe\2\u079f\u07a1\7\u011c\2\2\u07a0\u07a2\7\u03b2\2")
        buf.write("\2\u07a1\u07a0\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a3")
        buf.write("\3\2\2\2\u07a3\u07c5\7\u03ca\2\2\u07a4\u07a5\7\u012a\2")
        buf.write("\2\u07a5\u07a7\7\u0131\2\2\u07a6\u07a8\7\u03b2\2\2\u07a7")
        buf.write("\u07a6\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07a9\3\2\2\2")
        buf.write("\u07a9\u07c5\7\u03ca\2\2\u07aa\u07ab\7I\2\2\u07ab\u07ad")
        buf.write("\7\u0131\2\2\u07ac\u07ae\7\u03b2\2\2\u07ad\u07ac\3\2\2")
        buf.write("\2\u07ad\u07ae\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07c5")
        buf.write("\7\u03ca\2\2\u07b0\u07b2\7\u0192\2\2\u07b1\u07b3\7\u03b2")
        buf.write("\2\2\u07b2\u07b1\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b4")
        buf.write("\3\2\2\2\u07b4\u07c5\5\u020a\u0106\2\u07b5\u07b7\7\u019a")
        buf.write("\2\2\u07b6\u07b8\7\u03b2\2\2\u07b7\u07b6\3\2\2\2\u07b7")
        buf.write("\u07b8\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07c5\5\u020a")
        buf.write("\u0106\2\u07ba\u07bc\7\u020c\2\2\u07bb\u07bd\7\u03b2\2")
        buf.write("\2\u07bc\u07bb\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07be")
        buf.write("\3\2\2\2\u07be\u07c5\5\u0204\u0103\2\u07bf\u07c1\7\u01a5")
        buf.write("\2\2\u07c0\u07c2\7\u03b2\2\2\u07c1\u07c0\3\2\2\2\u07c1")
        buf.write("\u07c2\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c5\5\u0204")
        buf.write("\u0103\2\u07c4\u0798\3\2\2\2\u07c4\u079f\3\2\2\2\u07c4")
        buf.write("\u07a4\3\2\2\2\u07c4\u07aa\3\2\2\2\u07c4\u07b0\3\2\2\2")
        buf.write("\u07c4\u07b5\3\2\2\2\u07c4\u07ba\3\2\2\2\u07c4\u07bf\3")
        buf.write("\2\2\2\u07c5q\3\2\2\2\u07c6\u07c7\7\13\2\2\u07c7\u07c9")
        buf.write("\t\2\2\2\u07c8\u07ca\5\u0204\u0103\2\u07c9\u07c8\3\2\2")
        buf.write("\2\u07c9\u07ca\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07cd")
        buf.write("\5\62\32\2\u07cc\u07cb\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce")
        buf.write("\u07cc\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d9\3\2\2\2")
        buf.write("\u07d0\u07d1\7\13\2\2\u07d1\u07d2\t\2\2\2\u07d2\u07d3")
        buf.write("\5\u0204\u0103\2\u07d3\u07d4\7\u021a\2\2\u07d4\u07d5\7")
        buf.write("\u012a\2\2\u07d5\u07d6\7\u0131\2\2\u07d6\u07d7\7\u019f")
        buf.write("\2\2\u07d7\u07d9\3\2\2\2\u07d8\u07c6\3\2\2\2\u07d8\u07d0")
        buf.write("\3\2\2\2\u07d9s\3\2\2\2\u07da\u07dc\7\13\2\2\u07db\u07dd")
        buf.write("\5\64\33\2\u07dc\u07db\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd")
        buf.write("\u07de\3\2\2\2\u07de\u07df\7\u0143\2\2\u07df\u07e3\5\u01ea")
        buf.write("\u00f6\2\u07e0\u07e1\7j\2\2\u07e1\u07e2\7\u01e5\2\2\u07e2")
        buf.write("\u07e4\5\66\34\2\u07e3\u07e0\3\2\2\2\u07e3\u07e4\3\2\2")
        buf.write("\2\u07e4\u07eb\3\2\2\2\u07e5\u07e6\7j\2\2\u07e6\u07e8")
        buf.write("\7\u011f\2\2\u07e7\u07e9\7g\2\2\u07e8\u07e7\3\2\2\2\u07e8")
        buf.write("\u07e9\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec\7\u01c0")
        buf.write("\2\2\u07eb\u07e5\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07f0")
        buf.write("\3\2\2\2\u07ed\u07ee\7}\2\2\u07ee\u07ef\7\u009a\2\2\u07ef")
        buf.write("\u07f1\5\u01ea\u00f6\2\u07f0\u07ed\3\2\2\2\u07f0\u07f1")
        buf.write("\3\2\2\2\u07f1\u07f3\3\2\2\2\u07f2\u07f4\5> \2\u07f3\u07f2")
        buf.write("\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f7\3\2\2\2\u07f5")
        buf.write("\u07f6\7\u011c\2\2\u07f6\u07f8\7\u03ca\2\2\u07f7\u07f5")
        buf.write("\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u07fb\3\2\2\2\u07f9")
        buf.write("\u07fa\7\u0135\2\2\u07fa\u07fc\5\u015c\u00af\2\u07fb\u07f9")
        buf.write("\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fcu\3\2\2\2\u07fd\u07fe")
        buf.write("\7\13\2\2\u07fe\u07ff\7\u0157\2\2\u07ff\u0803\5\u01ea")
        buf.write("\u00f6\2\u0800\u0802\5H%\2\u0801\u0800\3\2\2\2\u0802\u0805")
        buf.write("\3\2\2\2\u0803\u0801\3\2\2\2\u0803\u0804\3\2\2\2\u0804")
        buf.write("w\3\2\2\2\u0805\u0803\3\2\2\2\u0806\u0807\7\13\2\2\u0807")
        buf.write("\u0808\7\u0169\2\2\u0808\u0809\7\u01e0\2\2\u0809\u080a")
        buf.write("\7\u026d\2\2\u080a\u080b\7\u017b\2\2\u080b\u080c\7S\2")
        buf.write("\2\u080cy\3\2\2\2\u080d\u080e\7\13\2\2\u080e\u080f\7\u0179")
        buf.write("\2\2\u080f\u0810\7C\2\2\u0810\u0811\5\u0204\u0103\2\u0811")
        buf.write("\u0812\7\t\2\2\u0812\u0813\7\u0215\2\2\u0813\u0819\7\u03ca")
        buf.write("\2\2\u0814\u0816\7\u0165\2\2\u0815\u0817\7\u03b2\2\2\u0816")
        buf.write("\u0815\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u0818\3\2\2\2")
        buf.write("\u0818\u081a\5\u020c\u0107\2\u0819\u0814\3\2\2\2\u0819")
        buf.write("\u081a\3\2\2\2\u081a\u081c\3\2\2\2\u081b\u081d\7\u0223")
        buf.write("\2\2\u081c\u081b\3\2\2\2\u081c\u081d\3\2\2\2\u081d\u081e")
        buf.write("\3\2\2\2\u081e\u0820\7\u013d\2\2\u081f\u0821\7\u03b2\2")
        buf.write("\2\u0820\u081f\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0822")
        buf.write("\3\2\2\2\u0822\u0823\5\u01fa\u00fe\2\u0823{\3\2\2\2\u0824")
        buf.write("\u0825\7\13\2\2\u0825\u0826\7u\2\2\u0826\u082a\5\u01ea")
        buf.write("\u00f6\2\u0827\u0829\5H%\2\u0828\u0827\3\2\2\2\u0829\u082c")
        buf.write("\3\2\2\2\u082a\u0828\3\2\2\2\u082a\u082b\3\2\2\2\u082b")
        buf.write("}\3\2\2\2\u082c\u082a\3\2\2\2\u082d\u082e\7\13\2\2\u082e")
        buf.write("\u082f\7\u01e7\2\2\u082f\u0830\5\u0204\u0103\2\u0830\u0831")
        buf.write("\7\u01b0\2\2\u0831\u0832\7\u03bb\2\2\u0832\u0837\5J&\2")
        buf.write("\u0833\u0834\7\u03bd\2\2\u0834\u0836\5J&\2\u0835\u0833")
        buf.write("\3\2\2\2\u0836\u0839\3\2\2\2\u0837\u0835\3\2\2\2\u0837")
        buf.write("\u0838\3\2\2\2\u0838\u083a\3\2\2\2\u0839\u0837\3\2\2\2")
        buf.write("\u083a\u083b\7\u03bc\2\2\u083b\177\3\2\2\2\u083c\u083e")
        buf.write("\7\13\2\2\u083d\u083f\t\3\2\2\u083e\u083d\3\2\2\2\u083e")
        buf.write("\u083f\3\2\2\2\u083f\u0841\3\2\2\2\u0840\u0842\7G\2\2")
        buf.write("\u0841\u0840\3\2\2\2\u0841\u0842\3\2\2\2\u0842\u0843\3")
        buf.write("\2\2\2\u0843\u0844\7\u0097\2\2\u0844\u0845\5\u01ec\u00f7")
        buf.write("\2\u0845\u084a\5\u0086D\2\u0846\u0847\7\u03bd\2\2\u0847")
        buf.write("\u0849\5\u0086D\2\u0848\u0846\3\2\2\2\u0849\u084c\3\2")
        buf.write("\2\2\u084a\u0848\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u084e")
        buf.write("\3\2\2\2\u084c\u084a\3\2\2\2\u084d\u084f\5b\62\2\u084e")
        buf.write("\u084d\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0081\3\2\2\2")
        buf.write("\u0850\u0851\7\13\2\2\u0851\u0852\7\u020c\2\2\u0852\u0853")
        buf.write("\5\u0204\u0103\2\u0853\u0854\t\34\2\2\u0854\u0855\7\u012b")
        buf.write("\2\2\u0855\u0859\7\u03ca\2\2\u0856\u0857\7\u0165\2\2\u0857")
        buf.write("\u0858\7\u03b2\2\2\u0858\u085a\5\u020c\u0107\2\u0859\u0856")
        buf.write("\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u085c\3\2\2\2\u085b")
        buf.write("\u085d\7\u0223\2\2\u085c\u085b\3\2\2\2\u085c\u085d\3\2")
        buf.write("\2\2\u085d\u085e\3\2\2\2\u085e\u0860\7\u013d\2\2\u085f")
        buf.write("\u0861\7\u03b2\2\2\u0860\u085f\3\2\2\2\u0860\u0861\3\2")
        buf.write("\2\2\u0861\u0862\3\2\2\2\u0862\u0863\5\u01fa\u00fe\2\u0863")
        buf.write("\u0083\3\2\2\2\u0864\u0868\7\13\2\2\u0865\u0866\7\u0100")
        buf.write("\2\2\u0866\u0867\7\u03b2\2\2\u0867\u0869\t\f\2\2\u0868")
        buf.write("\u0865\3\2\2\2\u0868\u0869\3\2\2\2\u0869\u086b\3\2\2\2")
        buf.write("\u086a\u086c\5\64\33\2\u086b\u086a\3\2\2\2\u086b\u086c")
        buf.write("\3\2\2\2\u086c\u0870\3\2\2\2\u086d\u086e\7\u008d\2\2\u086e")
        buf.write("\u086f\7\u01e6\2\2\u086f\u0871\t\r\2\2\u0870\u086d\3\2")
        buf.write("\2\2\u0870\u0871\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0873")
        buf.write("\7\u0221\2\2\u0873\u0878\5\u01ea\u00f6\2\u0874\u0875\7")
        buf.write("\u03bb\2\2\u0875\u0876\5\u0222\u0112\2\u0876\u0877\7\u03bc")
        buf.write("\2\2\u0877\u0879\3\2\2\2\u0878\u0874\3\2\2\2\u0878\u0879")
        buf.write("\3\2\2\2\u0879\u087a\3\2\2\2\u087a\u087b\7\17\2\2\u087b")
        buf.write("\u0882\5\u00b4[\2\u087c\u087e\7\u00ab\2\2\u087d\u087f")
        buf.write("\t\16\2\2\u087e\u087d\3\2\2\2\u087e\u087f\3\2\2\2\u087f")
        buf.write("\u0880\3\2\2\2\u0880\u0881\7\33\2\2\u0881\u0883\7l\2\2")
        buf.write("\u0882\u087c\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u0085\3")
        buf.write("\2\2\2\u0884\u088b\5^\60\2\u0885\u0887\7\u03bd\2\2\u0886")
        buf.write("\u0885\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888\3\2\2\2")
        buf.write("\u0888\u088a\5^\60\2\u0889\u0886\3\2\2\2\u088a\u088d\3")
        buf.write("\2\2\2\u088b\u0889\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u09df")
        buf.write("\3\2\2\2\u088d\u088b\3\2\2\2\u088e\u0890\7\t\2\2\u088f")
        buf.write("\u0891\7\35\2\2\u0890\u088f\3\2\2\2\u0890\u0891\3\2\2")
        buf.write("\2\u0891\u0892\3\2\2\2\u0892\u0893\5\u0204\u0103\2\u0893")
        buf.write("\u0897\5P)\2\u0894\u0898\7\u0151\2\2\u0895\u0896\7\u00fe")
        buf.write("\2\2\u0896\u0898\5\u0204\u0103\2\u0897\u0894\3\2\2\2\u0897")
        buf.write("\u0895\3\2\2\2\u0897\u0898\3\2\2\2\u0898\u09df\3\2\2\2")
        buf.write("\u0899\u089b\7\t\2\2\u089a\u089c\7\35\2\2\u089b\u089a")
        buf.write("\3\2\2\2\u089b\u089c\3\2\2\2\u089c\u089d\3\2\2\2\u089d")
        buf.write("\u089e\7\u03bb\2\2\u089e\u089f\5\u0204\u0103\2\u089f\u08a6")
        buf.write("\5P)\2\u08a0\u08a1\7\u03bd\2\2\u08a1\u08a2\5\u0204\u0103")
        buf.write("\2\u08a2\u08a3\5P)\2\u08a3\u08a5\3\2\2\2\u08a4\u08a0\3")
        buf.write("\2\2\2\u08a5\u08a8\3\2\2\2\u08a6\u08a4\3\2\2\2\u08a6\u08a7")
        buf.write("\3\2\2\2\u08a7\u08a9\3\2\2\2\u08a8\u08a6\3\2\2\2\u08a9")
        buf.write("\u08aa\7\u03bc\2\2\u08aa\u09df\3\2\2\2\u08ab\u08ac\7\t")
        buf.write("\2\2\u08ac\u08ae\t\24\2\2\u08ad\u08af\5\u0204\u0103\2")
        buf.write("\u08ae\u08ad\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b1\3")
        buf.write("\2\2\2\u08b0\u08b2\5@!\2\u08b1\u08b0\3\2\2\2\u08b1\u08b2")
        buf.write("\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b7\5\u0226\u0114")
        buf.write("\2\u08b4\u08b6\5B\"\2\u08b5\u08b4\3\2\2\2\u08b6\u08b9")
        buf.write("\3\2\2\2\u08b7\u08b5\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8")
        buf.write("\u09df\3\2\2\2\u08b9\u08b7\3\2\2\2\u08ba\u08bf\7\t\2\2")
        buf.write("\u08bb\u08bd\7\37\2\2\u08bc\u08be\5\u0204\u0103\2\u08bd")
        buf.write("\u08bc\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u08c0\3\2\2\2")
        buf.write("\u08bf\u08bb\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0\u08c1\3")
        buf.write("\2\2\2\u08c1\u08c2\7t\2\2\u08c2\u08c4\7S\2\2\u08c3\u08c5")
        buf.write("\5@!\2\u08c4\u08c3\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c6")
        buf.write("\3\2\2\2\u08c6\u08ca\5\u0226\u0114\2\u08c7\u08c9\5B\"")
        buf.write("\2\u08c8\u08c7\3\2\2\2\u08c9\u08cc\3\2\2\2\u08ca\u08c8")
        buf.write("\3\2\2\2\u08ca\u08cb\3\2\2\2\u08cb\u09df\3\2\2\2\u08cc")
        buf.write("\u08ca\3\2\2\2\u08cd\u08d2\7\t\2\2\u08ce\u08d0\7\37\2")
        buf.write("\2\u08cf\u08d1\5\u0204\u0103\2\u08d0\u08cf\3\2\2\2\u08d0")
        buf.write("\u08d1\3\2\2\2\u08d1\u08d3\3\2\2\2\u08d2\u08ce\3\2\2\2")
        buf.write("\u08d2\u08d3\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08d6\7")
        buf.write("\u00a0\2\2\u08d5\u08d7\t\24\2\2\u08d6\u08d5\3\2\2\2\u08d6")
        buf.write("\u08d7\3\2\2\2\u08d7\u08d9\3\2\2\2\u08d8\u08da\5\u0204")
        buf.write("\u0103\2\u08d9\u08d8\3\2\2\2\u08d9\u08da\3\2\2\2\u08da")
        buf.write("\u08dc\3\2\2\2\u08db\u08dd\5@!\2\u08dc\u08db\3\2\2\2\u08dc")
        buf.write("\u08dd\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08e2\5\u0226")
        buf.write("\u0114\2\u08df\u08e1\5B\"\2\u08e0\u08df\3\2\2\2\u08e1")
        buf.write("\u08e4\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e2\u08e3\3\2\2\2")
        buf.write("\u08e3\u09df\3\2\2\2\u08e4\u08e2\3\2\2\2\u08e5\u08e6\7")
        buf.write("\t\2\2\u08e6\u08e8\t\26\2\2\u08e7\u08e9\t\24\2\2\u08e8")
        buf.write("\u08e7\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08eb\3\2\2\2")
        buf.write("\u08ea\u08ec\5\u0204\u0103\2\u08eb\u08ea\3\2\2\2\u08eb")
        buf.write("\u08ec\3\2\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08f1\5\u0226")
        buf.write("\u0114\2\u08ee\u08f0\5B\"\2\u08ef\u08ee\3\2\2\2\u08f0")
        buf.write("\u08f3\3\2\2\2\u08f1\u08ef\3\2\2\2\u08f1\u08f2\3\2\2\2")
        buf.write("\u08f2\u09df\3\2\2\2\u08f3\u08f1\3\2\2\2\u08f4\u08f9\7")
        buf.write("\t\2\2\u08f5\u08f7\7\37\2\2\u08f6\u08f8\5\u0204\u0103")
        buf.write("\2\u08f7\u08f6\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08fa")
        buf.write("\3\2\2\2\u08f9\u08f5\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa")
        buf.write("\u08fb\3\2\2\2\u08fb\u08fc\7>\2\2\u08fc\u08fe\7S\2\2\u08fd")
        buf.write("\u08ff\5\u0204\u0103\2\u08fe\u08fd\3\2\2\2\u08fe\u08ff")
        buf.write("\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0901\5\u0226\u0114")
        buf.write("\2\u0901\u0902\5V,\2\u0902\u09df\3\2\2\2\u0903\u0908\7")
        buf.write("\t\2\2\u0904\u0906\7\37\2\2\u0905\u0907\5\u0204\u0103")
        buf.write("\2\u0906\u0905\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u0909")
        buf.write("\3\2\2\2\u0908\u0904\3\2\2\2\u0908\u0909\3\2\2\2\u0909")
        buf.write("\u090a\3\2\2\2\u090a\u090b\7\33\2\2\u090b\u090c\7\u03bb")
        buf.write("\2\2\u090c\u090d\5\u0250\u0129\2\u090d\u090e\7\u03bc\2")
        buf.write("\2\u090e\u09df\3\2\2\2\u090f\u0911\7\u0100\2\2\u0910\u0912")
        buf.write("\7\u03b2\2\2\u0911\u0910\3\2\2\2\u0911\u0912\3\2\2\2\u0912")
        buf.write("\u0913\3\2\2\2\u0913\u09df\t\5\2\2\u0914\u0916\7\13\2")
        buf.write("\2\u0915\u0917\7\35\2\2\u0916\u0915\3\2\2\2\u0916\u0917")
        buf.write("\3\2\2\2\u0917\u0918\3\2\2\2\u0918\u091e\5\u0204\u0103")
        buf.write("\2\u0919\u091a\7\u0089\2\2\u091a\u091b\7)\2\2\u091b\u091f")
        buf.write("\5\u0232\u011a\2\u091c\u091d\7\61\2\2\u091d\u091f\7)\2")
        buf.write("\2\u091e\u0919\3\2\2\2\u091e\u091c\3\2\2\2\u091f\u09df")
        buf.write("\3\2\2\2\u0920\u0922\7\31\2\2\u0921\u0923\7\35\2\2\u0922")
        buf.write("\u0921\3\2\2\2\u0922\u0923\3\2\2\2\u0923\u0924\3\2\2\2")
        buf.write("\u0924\u0925\5\u0204\u0103\2\u0925\u0926\5\u0204\u0103")
        buf.write("\2\u0926\u092a\5P)\2\u0927\u092b\7\u0151\2\2\u0928\u0929")
        buf.write("\7\u00fe\2\2\u0929\u092b\5\u0204\u0103\2\u092a\u0927\3")
        buf.write("\2\2\2\u092a\u0928\3\2\2\2\u092a\u092b\3\2\2\2\u092b\u09df")
        buf.write("\3\2\2\2\u092c\u092d\7}\2\2\u092d\u092e\7\35\2\2\u092e")
        buf.write("\u092f\5\u0204\u0103\2\u092f\u0930\7\u009a\2\2\u0930\u0931")
        buf.write("\5\u0204\u0103\2\u0931\u09df\3\2\2\2\u0932\u0934\7^\2")
        buf.write("\2\u0933\u0935\7\u03b2\2\2\u0934\u0933\3\2\2\2\u0934\u0935")
        buf.write("\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u09df\t\6\2\2\u0937")
        buf.write("\u0939\7\u019c\2\2\u0938\u093a\7\35\2\2\u0939\u0938\3")
        buf.write("\2\2\2\u0939\u093a\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u093c")
        buf.write("\5\u0204\u0103\2\u093c\u0940\5P)\2\u093d\u0941\7\u0151")
        buf.write("\2\2\u093e\u093f\7\u00fe\2\2\u093f\u0941\5\u0204\u0103")
        buf.write("\2\u0940\u093d\3\2\2\2\u0940\u093e\3\2\2\2\u0940\u0941")
        buf.write("\3\2\2\2\u0941\u09df\3\2\2\2\u0942\u0944\7\61\2\2\u0943")
        buf.write("\u0945\7\35\2\2\u0944\u0943\3\2\2\2\u0944\u0945\3\2\2")
        buf.write("\2\u0945\u0946\3\2\2\2\u0946\u09df\5\u0204\u0103\2\u0947")
        buf.write("\u0948\7\61\2\2\u0948\u0949\7t\2\2\u0949\u09df\7S\2\2")
        buf.write("\u094a\u094b\7\61\2\2\u094b\u094c\t\24\2\2\u094c\u09df")
        buf.write("\5\u0204\u0103\2\u094d\u094e\7\61\2\2\u094e\u094f\7>\2")
        buf.write("\2\u094f\u0950\7S\2\2\u0950\u09df\5\u0204\u0103\2\u0951")
        buf.write("\u0952\7\u0132\2\2\u0952\u09df\7T\2\2\u0953\u0954\7\u0139")
        buf.write("\2\2\u0954\u09df\7T\2\2\u0955\u0957\7}\2\2\u0956\u0958")
        buf.write("\t\35\2\2\u0957\u0956\3\2\2\2\u0957\u0958\3\2\2\2\u0958")
        buf.write("\u095b\3\2\2\2\u0959\u095c\5\u0204\u0103\2\u095a\u095c")
        buf.write("\5\u01ea\u00f6\2\u095b\u0959\3\2\2\2\u095b\u095a\3\2\2")
        buf.write("\2\u095c\u09df\3\2\2\2\u095d\u095e\7o\2\2\u095e\u095f")
        buf.write("\7\24\2\2\u095f\u09df\5\u0222\u0112\2\u0960\u0961\7!\2")
        buf.write("\2\u0961\u0962\7\u009a\2\2\u0962\u0963\7\32\2\2\u0963")
        buf.write("\u0964\7\u0089\2\2\u0964\u0967\5\u01f6\u00fc\2\u0965\u0966")
        buf.write("\7\34\2\2\u0966\u0968\5\u01f8\u00fd\2\u0967\u0965\3\2")
        buf.write("\2\2\u0967\u0968\3\2\2\2\u0968\u09df\3\2\2\2\u0969\u096b")
        buf.write("\7)\2\2\u096a\u0969\3\2\2\2\u096a\u096b\3\2\2\2\u096b")
        buf.write("\u096c\3\2\2\2\u096c\u096d\7\32\2\2\u096d\u096e\7\u0089")
        buf.write("\2\2\u096e\u096f\7\u03b2\2\2\u096f\u0973\5\u01f6\u00fc")
        buf.write("\2\u0970\u0971\7\34\2\2\u0971\u0972\7\u03b2\2\2\u0972")
        buf.write("\u0974\5\u01f8\u00fd\2\u0973\u0970\3\2\2\2\u0973\u0974")
        buf.write("\3\2\2\2\u0974\u09df\3\2\2\2\u0975\u0976\7\u0133\2\2\u0976")
        buf.write("\u09df\7\u020c\2\2\u0977\u0978\7\u0163\2\2\u0978\u09df")
        buf.write("\7\u020c\2\2\u0979\u09df\7=\2\2\u097a\u097b\t\36\2\2\u097b")
        buf.write("\u09df\7\u021e\2\2\u097c\u097d\7\t\2\2\u097d\u097e\7s")
        buf.write("\2\2\u097e\u097f\7\u03bb\2\2\u097f\u0984\5h\65\2\u0980")
        buf.write("\u0981\7\u03bd\2\2\u0981\u0983\5h\65\2\u0982\u0980\3\2")
        buf.write("\2\2\u0983\u0986\3\2\2\2\u0984\u0982\3\2\2\2\u0984\u0985")
        buf.write("\3\2\2\2\u0985\u0987\3\2\2\2\u0986\u0984\3\2\2\2\u0987")
        buf.write("\u0988\7\u03bc\2\2\u0988\u09df\3\2\2\2\u0989\u098a\7\61")
        buf.write("\2\2\u098a\u098b\7s\2\2\u098b\u09df\5\u0222\u0112\2\u098c")
        buf.write("\u098d\7\u0133\2\2\u098d\u0990\7s\2\2\u098e\u0991\5\u0222")
        buf.write("\u0112\2\u098f\u0991\7\n\2\2\u0990\u098e\3\2\2\2\u0990")
        buf.write("\u098f\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u09df\7\u020c")
        buf.write("\2\2\u0993\u0994\7\u0163\2\2\u0994\u0997\7s\2\2\u0995")
        buf.write("\u0998\5\u0222\u0112\2\u0996\u0998\7\n\2\2\u0997\u0995")
        buf.write("\3\2\2\2\u0997\u0996\3\2\2\2\u0998\u0999\3\2\2\2\u0999")
        buf.write("\u09df\7\u020c\2\2\u099a\u099b\7\u0213\2\2\u099b\u099e")
        buf.write("\7s\2\2\u099c\u099f\5\u0222\u0112\2\u099d\u099f\7\n\2")
        buf.write("\2\u099e\u099c\3\2\2\2\u099e\u099d\3\2\2\2\u099f\u09df")
        buf.write("\3\2\2\2\u09a0\u09a1\7\u0118\2\2\u09a1\u09a2\7s\2\2\u09a2")
        buf.write("\u09df\5\u020a\u0106\2\u09a3\u09a4\7\u01d1\2\2\u09a4\u09a5")
        buf.write("\7s\2\2\u09a5\u09a6\5\u0222\u0112\2\u09a6\u09a7\7O\2\2")
        buf.write("\u09a7\u09a8\7\u03bb\2\2\u09a8\u09ad\5h\65\2\u09a9\u09aa")
        buf.write("\7\u03bd\2\2\u09aa\u09ac\5h\65\2\u09ab\u09a9\3\2\2\2\u09ac")
        buf.write("\u09af\3\2\2\2\u09ad\u09ab\3\2\2\2\u09ad\u09ae\3\2\2\2")
        buf.write("\u09ae\u09b0\3\2\2\2\u09af\u09ad\3\2\2\2\u09b0\u09b1\7")
        buf.write("\u03bc\2\2\u09b1\u09df\3\2\2\2\u09b2\u09b3\7\u0146\2\2")
        buf.write("\u09b3\u09b4\7s\2\2\u09b4\u09b5\5\u0204\u0103\2\u09b5")
        buf.write("\u09b6\7\u00ab\2\2\u09b6\u09b7\7\u0097\2\2\u09b7\u09ba")
        buf.write("\5\u01ec\u00f7\2\u09b8\u09b9\t\36\2\2\u09b9\u09bb\7\u021e")
        buf.write("\2\2\u09ba\u09b8\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09df")
        buf.write("\3\2\2\2\u09bc\u09bd\7\r\2\2\u09bd\u09c0\7s\2\2\u09be")
        buf.write("\u09c1\5\u0222\u0112\2\u09bf\u09c1\7\n\2\2\u09c0\u09be")
        buf.write("\3\2\2\2\u09c0\u09bf\3\2\2\2\u09c1\u09df\3\2\2\2\u09c2")
        buf.write("\u09c3\7\33\2\2\u09c3\u09c6\7s\2\2\u09c4\u09c7\5\u0222")
        buf.write("\u0112\2\u09c5\u09c7\7\n\2\2\u09c6\u09c4\3\2\2\2\u09c6")
        buf.write("\u09c5\3\2\2\2\u09c7\u09df\3\2\2\2\u09c8\u09c9\7k\2\2")
        buf.write("\u09c9\u09cc\7s\2\2\u09ca\u09cd\5\u0222\u0112\2\u09cb")
        buf.write("\u09cd\7\n\2\2\u09cc\u09ca\3\2\2\2\u09cc\u09cb\3\2\2\2")
        buf.write("\u09cd\u09df\3\2\2\2\u09ce\u09cf\7\u01c8\2\2\u09cf\u09d2")
        buf.write("\7s\2\2\u09d0\u09d3\5\u0222\u0112\2\u09d1\u09d3\7\n\2")
        buf.write("\2\u09d2\u09d0\3\2\2\2\u09d2\u09d1\3\2\2\2\u09d3\u09df")
        buf.write("\3\2\2\2\u09d4\u09d5\7\u01d2\2\2\u09d5\u09d8\7s\2\2\u09d6")
        buf.write("\u09d9\5\u0222\u0112\2\u09d7\u09d9\7\n\2\2\u09d8\u09d6")
        buf.write("\3\2\2\2\u09d8\u09d7\3\2\2\2\u09d9\u09df\3\2\2\2\u09da")
        buf.write("\u09db\7\u01d0\2\2\u09db\u09df\7\u01b6\2\2\u09dc\u09dd")
        buf.write("\7\u021a\2\2\u09dd\u09df\7\u01b6\2\2\u09de\u0884\3\2\2")
        buf.write("\2\u09de\u088e\3\2\2\2\u09de\u0899\3\2\2\2\u09de\u08ab")
        buf.write("\3\2\2\2\u09de\u08ba\3\2\2\2\u09de\u08cd\3\2\2\2\u09de")
        buf.write("\u08e5\3\2\2\2\u09de\u08f4\3\2\2\2\u09de\u0903\3\2\2\2")
        buf.write("\u09de\u090f\3\2\2\2\u09de\u0914\3\2\2\2\u09de\u0920\3")
        buf.write("\2\2\2\u09de\u092c\3\2\2\2\u09de\u0932\3\2\2\2\u09de\u0937")
        buf.write("\3\2\2\2\u09de\u0942\3\2\2\2\u09de\u0947\3\2\2\2\u09de")
        buf.write("\u094a\3\2\2\2\u09de\u094d\3\2\2\2\u09de\u0951\3\2\2\2")
        buf.write("\u09de\u0953\3\2\2\2\u09de\u0955\3\2\2\2\u09de\u095d\3")
        buf.write("\2\2\2\u09de\u0960\3\2\2\2\u09de\u096a\3\2\2\2\u09de\u0975")
        buf.write("\3\2\2\2\u09de\u0977\3\2\2\2\u09de\u0979\3\2\2\2\u09de")
        buf.write("\u097a\3\2\2\2\u09de\u097c\3\2\2\2\u09de\u0989\3\2\2\2")
        buf.write("\u09de\u098c\3\2\2\2\u09de\u0993\3\2\2\2\u09de\u099a\3")
        buf.write("\2\2\2\u09de\u09a0\3\2\2\2\u09de\u09a3\3\2\2\2\u09de\u09b2")
        buf.write("\3\2\2\2\u09de\u09bc\3\2\2\2\u09de\u09c2\3\2\2\2\u09de")
        buf.write("\u09c8\3\2\2\2\u09de\u09ce\3\2\2\2\u09de\u09d4\3\2\2\2")
        buf.write("\u09de\u09da\3\2\2\2\u09de\u09dc\3\2\2\2\u09df\u0087\3")
        buf.write("\2\2\2\u09e0\u09e1\7\61\2\2\u09e1\u09e3\t\2\2\2\u09e2")
        buf.write("\u09e4\5\u0238\u011d\2\u09e3\u09e2\3\2\2\2\u09e3\u09e4")
        buf.write("\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09e6\5\u0204\u0103")
        buf.write("\2\u09e6\u0089\3\2\2\2\u09e7\u09e8\7\61\2\2\u09e8\u09ea")
        buf.write("\7\u0143\2\2\u09e9\u09eb\5\u0238\u011d\2\u09ea\u09e9\3")
        buf.write("\2\2\2\u09ea\u09eb\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec\u09ed")
        buf.write("\5\u01ea\u00f6\2\u09ed\u008b\3\2\2\2\u09ee\u09ef\7\61")
        buf.write("\2\2\u09ef\u09f1\7I\2\2\u09f0\u09f2\t\3\2\2\u09f1\u09f0")
        buf.write("\3\2\2\2\u09f1\u09f2\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3")
        buf.write("\u09f4\5\u0204\u0103\2\u09f4\u09f5\7j\2\2\u09f5\u09fb")
        buf.write("\5\u01ec\u00f7\2\u09f6\u09f8\7\u0100\2\2\u09f7\u09f9\7")
        buf.write("\u03b2\2\2\u09f8\u09f7\3\2\2\2\u09f8\u09f9\3\2\2\2\u09f9")
        buf.write("\u09fa\3\2\2\2\u09fa\u09fc\t\5\2\2\u09fb\u09f6\3\2\2\2")
        buf.write("\u09fb\u09fc\3\2\2\2\u09fc\u0a02\3\2\2\2\u09fd\u09ff\7")
        buf.write("^\2\2\u09fe\u0a00\7\u03b2\2\2\u09ff\u09fe\3\2\2\2\u09ff")
        buf.write("\u0a00\3\2\2\2\u0a00\u0a01\3\2\2\2\u0a01\u0a03\t\6\2\2")
        buf.write("\u0a02\u09fd\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u008d\3")
        buf.write("\2\2\2\u0a04\u0a05\7\61\2\2\u0a05\u0a06\7\u0179\2\2\u0a06")
        buf.write("\u0a07\7C\2\2\u0a07\u0a08\5\u0204\u0103\2\u0a08\u0a09")
        buf.write("\7\u013d\2\2\u0a09\u0a0a\7\u03b2\2\2\u0a0a\u0a0b\5\u01fa")
        buf.write("\u00fe\2\u0a0b\u008f\3\2\2\2\u0a0c\u0a0d\7\61\2\2\u0a0d")
        buf.write("\u0a0f\7u\2\2\u0a0e\u0a10\5\u0238\u011d\2\u0a0f\u0a0e")
        buf.write("\3\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11")
        buf.write("\u0a12\5\u01ea\u00f6\2\u0a12\u0091\3\2\2\2\u0a13\u0a14")
        buf.write("\7\61\2\2\u0a14\u0a16\7\u0157\2\2\u0a15\u0a17\5\u0238")
        buf.write("\u011d\2\u0a16\u0a15\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17")
        buf.write("\u0a18\3\2\2\2\u0a18\u0a19\5\u01ea\u00f6\2\u0a19\u0093")
        buf.write("\3\2\2\2\u0a1a\u0a1b\7\61\2\2\u0a1b\u0a1d\7\u01e7\2\2")
        buf.write("\u0a1c\u0a1e\5\u0238\u011d\2\u0a1d\u0a1c\3\2\2\2\u0a1d")
        buf.write("\u0a1e\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a20\5\u0204")
        buf.write("\u0103\2\u0a20\u0095\3\2\2\2\u0a21\u0a23\7\61\2\2\u0a22")
        buf.write("\u0a24\7\u020d\2\2\u0a23\u0a22\3\2\2\2\u0a23\u0a24\3\2")
        buf.write("\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a27\7\u0097\2\2\u0a26")
        buf.write("\u0a28\5\u0238\u011d\2\u0a27\u0a26\3\2\2\2\u0a27\u0a28")
        buf.write("\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2b\5\u0224\u0113")
        buf.write("\2\u0a2a\u0a2c\t\37\2\2\u0a2b\u0a2a\3\2\2\2\u0a2b\u0a2c")
        buf.write("\3\2\2\2\u0a2c\u0097\3\2\2\2\u0a2d\u0a2e\7\61\2\2\u0a2e")
        buf.write("\u0a2f\7\u020c\2\2\u0a2f\u0a35\5\u0204\u0103\2\u0a30\u0a32")
        buf.write("\7\u013d\2\2\u0a31\u0a33\7\u03b2\2\2\u0a32\u0a31\3\2\2")
        buf.write("\2\u0a32\u0a33\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a36")
        buf.write("\5\u01fa\u00fe\2\u0a35\u0a30\3\2\2\2\u0a35\u0a36\3\2\2")
        buf.write("\2\u0a36\u0099\3\2\2\2\u0a37\u0a38\7\61\2\2\u0a38\u0a3a")
        buf.write("\7\u009c\2\2\u0a39\u0a3b\5\u0238\u011d\2\u0a3a\u0a39\3")
        buf.write("\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c\u0a3d")
        buf.write("\5\u01ea\u00f6\2\u0a3d\u009b\3\2\2\2\u0a3e\u0a3f\7\61")
        buf.write("\2\2\u0a3f\u0a41\7\u0221\2\2\u0a40\u0a42\5\u0238\u011d")
        buf.write("\2\u0a41\u0a40\3\2\2\2\u0a41\u0a42\3\2\2\2\u0a42\u0a43")
        buf.write("\3\2\2\2\u0a43\u0a48\5\u01ea\u00f6\2\u0a44\u0a45\7\u03bd")
        buf.write("\2\2\u0a45\u0a47\5\u01ea\u00f6\2\u0a46\u0a44\3\2\2\2\u0a47")
        buf.write("\u0a4a\3\2\2\2\u0a48\u0a46\3\2\2\2\u0a48\u0a49\3\2\2\2")
        buf.write("\u0a49\u0a4c\3\2\2\2\u0a4a\u0a48\3\2\2\2\u0a4b\u0a4d\t")
        buf.write("\37\2\2\u0a4c\u0a4b\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d")
        buf.write("\u009d\3\2\2\2\u0a4e\u0a4f\7}\2\2\u0a4f\u0a50\7\u0097")
        buf.write("\2\2\u0a50\u0a55\5\u00a0Q\2\u0a51\u0a52\7\u03bd\2\2\u0a52")
        buf.write("\u0a54\5\u00a0Q\2\u0a53\u0a51\3\2\2\2\u0a54\u0a57\3\2")
        buf.write("\2\2\u0a55\u0a53\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56\u009f")
        buf.write("\3\2\2\2\u0a57\u0a55\3\2\2\2\u0a58\u0a59\5\u01ec\u00f7")
        buf.write("\2\u0a59\u0a5a\7\u009a\2\2\u0a5a\u0a5b\5\u01ec\u00f7\2")
        buf.write("\u0a5b\u00a1\3\2\2\2\u0a5c\u0a5e\7\u0213\2\2\u0a5d\u0a5f")
        buf.write("\7\u0097\2\2\u0a5e\u0a5d\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f")
        buf.write("\u0a60\3\2\2\2\u0a60\u0a61\5\u01ec\u00f7\2\u0a61\u00a3")
        buf.write("\3\2\2\2\u0a62\u0a63\7\25\2\2\u0a63\u0a6a\5\u01ea\u00f6")
        buf.write("\2\u0a64\u0a67\7\u03bb\2\2\u0a65\u0a68\5\u022c\u0117\2")
        buf.write("\u0a66\u0a68\5\u0228\u0115\2\u0a67\u0a65\3\2\2\2\u0a67")
        buf.write("\u0a66\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68\u0a69\3\2\2\2")
        buf.write("\u0a69\u0a6b\7\u03bc\2\2\u0a6a\u0a64\3\2\2\2\u0a6a\u0a6b")
        buf.write("\3\2\2\2\u0a6b\u00a5\3\2\2\2\u0a6c\u0a6f\5\u00c0a\2\u0a6d")
        buf.write("\u0a6f\5\u00c2b\2\u0a6e\u0a6c\3\2\2\2\u0a6e\u0a6d\3\2")
        buf.write("\2\2\u0a6f\u00a7\3\2\2\2\u0a70\u0a71\7\u0135\2\2\u0a71")
        buf.write("\u0a72\5\u0228\u0115\2\u0a72\u00a9\3\2\2\2\u0a73\u0a78")
        buf.write("\5\u00c4c\2\u0a74\u0a78\5\u00c6d\2\u0a75\u0a78\5\u00c8")
        buf.write("e\2\u0a76\u0a78\5\u00caf\2\u0a77\u0a73\3\2\2\2\u0a77\u0a74")
        buf.write("\3\2\2\2\u0a77\u0a75\3\2\2\2\u0a77\u0a76\3\2\2\2\u0a78")
        buf.write("\u00ab\3\2\2\2\u0a79\u0a7b\7M\2\2\u0a7a\u0a7c\t \2\2\u0a7b")
        buf.write("\u0a7a\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7e\3\2\2\2")
        buf.write("\u0a7d\u0a7f\7G\2\2\u0a7e\u0a7d\3\2\2\2\u0a7e\u0a7f\3")
        buf.write("\2\2\2\u0a7f\u0a81\3\2\2\2\u0a80\u0a82\7O\2\2\u0a81\u0a80")
        buf.write("\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83")
        buf.write("\u0a89\5\u01ec\u00f7\2\u0a84\u0a85\7s\2\2\u0a85\u0a86")
        buf.write("\7\u03bb\2\2\u0a86\u0a87\5\u0222\u0112\2\u0a87\u0a88\7")
        buf.write("\u03bc\2\2\u0a88\u0a8a\3\2\2\2\u0a89\u0a84\3\2\2\2\u0a89")
        buf.write("\u0a8a\3\2\2\2\u0a8a\u0a9b\3\2\2\2\u0a8b\u0a8c\7\u03bb")
        buf.write("\2\2\u0a8c\u0a8d\5\u0222\u0112\2\u0a8d\u0a8e\7\u03bc\2")
        buf.write("\2\u0a8e\u0a90\3\2\2\2\u0a8f\u0a8b\3\2\2\2\u0a8f\u0a90")
        buf.write("\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a9c\5\u00b8]\2\u0a92")
        buf.write("\u0a93\7\u0089\2\2\u0a93\u0a98\5\u00ba^\2\u0a94\u0a95")
        buf.write("\7\u03bd\2\2\u0a95\u0a97\5\u00ba^\2\u0a96\u0a94\3\2\2")
        buf.write("\2\u0a97\u0a9a\3\2\2\2\u0a98\u0a96\3\2\2\2\u0a98\u0a99")
        buf.write("\3\2\2\2\u0a99\u0a9c\3\2\2\2\u0a9a\u0a98\3\2\2\2\u0a9b")
        buf.write("\u0a8f\3\2\2\2\u0a9b\u0a92\3\2\2\2\u0a9c\u0aa9\3\2\2\2")
        buf.write("\u0a9d\u0a9e\7j\2\2\u0a9e\u0a9f\7\u0137\2\2\u0a9f\u0aa0")
        buf.write("\7S\2\2\u0aa0\u0aa1\7\u00a3\2\2\u0aa1\u0aa6\5\u00ba^\2")
        buf.write("\u0aa2\u0aa3\7\u03bd\2\2\u0aa3\u0aa5\5\u00ba^\2\u0aa4")
        buf.write("\u0aa2\3\2\2\2\u0aa5\u0aa8\3\2\2\2\u0aa6\u0aa4\3\2\2\2")
        buf.write("\u0aa6\u0aa7\3\2\2\2\u0aa7\u0aaa\3\2\2\2\u0aa8\u0aa6\3")
        buf.write("\2\2\2\u0aa9\u0a9d\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u00ad")
        buf.write("\3\2\2\2\u0aab\u0aac\7]\2\2\u0aac\u0aae\7\u012a\2\2\u0aad")
        buf.write("\u0aaf\t!\2\2\u0aae\u0aad\3\2\2\2\u0aae\u0aaf\3\2\2\2")
        buf.write("\u0aaf\u0ab1\3\2\2\2\u0ab0\u0ab2\7\u0178\2\2\u0ab1\u0ab0")
        buf.write("\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3")
        buf.write("\u0ab4\7J\2\2\u0ab4\u0ab6\7\u03ca\2\2\u0ab5\u0ab7\t\b")
        buf.write("\2\2\u0ab6\u0ab5\3\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0ab8")
        buf.write("\3\2\2\2\u0ab8\u0ab9\7O\2\2\u0ab9\u0aba\7\u0097\2\2\u0aba")
        buf.write("\u0ac0\5\u01ec\u00f7\2\u0abb\u0abc\7s\2\2\u0abc\u0abd")
        buf.write("\7\u03bb\2\2\u0abd\u0abe\5\u0222\u0112\2\u0abe\u0abf\7")
        buf.write("\u03bc\2\2\u0abf\u0ac1\3\2\2\2\u0ac0\u0abb\3\2\2\2\u0ac0")
        buf.write("\u0ac1\3\2\2\2\u0ac1\u0ac5\3\2\2\2\u0ac2\u0ac3\7\32\2")
        buf.write("\2\u0ac3\u0ac4\7\u0089\2\2\u0ac4\u0ac6\5\u01f6\u00fc\2")
        buf.write("\u0ac5\u0ac2\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6\u0acd\3")
        buf.write("\2\2\2\u0ac7\u0ac9\t\"\2\2\u0ac8\u0aca\5\u00f8}\2\u0ac9")
        buf.write("\u0ac8\3\2\2\2\u0aca\u0acb\3\2\2\2\u0acb\u0ac9\3\2\2\2")
        buf.write("\u0acb\u0acc\3\2\2\2\u0acc\u0ace\3\2\2\2\u0acd\u0ac7\3")
        buf.write("\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0ad5\3\2\2\2\u0acf\u0ad1")
        buf.write("\7\\\2\2\u0ad0\u0ad2\5\u00fa~\2\u0ad1\u0ad0\3\2\2\2\u0ad2")
        buf.write("\u0ad3\3\2\2\2\u0ad3\u0ad1\3\2\2\2\u0ad3\u0ad4\3\2\2\2")
        buf.write("\u0ad4\u0ad6\3\2\2\2\u0ad5\u0acf\3\2\2\2\u0ad5\u0ad6\3")
        buf.write("\2\2\2\u0ad6\u0adb\3\2\2\2\u0ad7\u0ad8\7G\2\2\u0ad8\u0ad9")
        buf.write("\5\u020a\u0106\2\u0ad9\u0ada\t#\2\2\u0ada\u0adc\3\2\2")
        buf.write("\2\u0adb\u0ad7\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u0ae8")
        buf.write("\3\2\2\2\u0add\u0ade\7\u03bb\2\2\u0ade\u0ae3\5\u00bc_")
        buf.write("\2\u0adf\u0ae0\7\u03bd\2\2\u0ae0\u0ae2\5\u00bc_\2\u0ae1")
        buf.write("\u0adf\3\2\2\2\u0ae2\u0ae5\3\2\2\2\u0ae3\u0ae1\3\2\2\2")
        buf.write("\u0ae3\u0ae4\3\2\2\2\u0ae4\u0ae6\3\2\2\2\u0ae5\u0ae3\3")
        buf.write("\2\2\2\u0ae6\u0ae7\7\u03bc\2\2\u0ae7\u0ae9\3\2\2\2\u0ae8")
        buf.write("\u0add\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u0af3\3\2\2\2")
        buf.write("\u0aea\u0aeb\7\u0089\2\2\u0aeb\u0af0\5\u00ba^\2\u0aec")
        buf.write("\u0aed\7\u03bd\2\2\u0aed\u0aef\5\u00ba^\2\u0aee\u0aec")
        buf.write("\3\2\2\2\u0aef\u0af2\3\2\2\2\u0af0\u0aee\3\2\2\2\u0af0")
        buf.write("\u0af1\3\2\2\2\u0af1\u0af4\3\2\2\2\u0af2\u0af0\3\2\2\2")
        buf.write("\u0af3\u0aea\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4\u00af\3")
        buf.write("\2\2\2\u0af5\u0af6\7]\2\2\u0af6\u0af8\7\u022a\2\2\u0af7")
        buf.write("\u0af9\t!\2\2\u0af8\u0af7\3\2\2\2\u0af8\u0af9\3\2\2\2")
        buf.write("\u0af9\u0afb\3\2\2\2\u0afa\u0afc\7\u0178\2\2\u0afb\u0afa")
        buf.write("\3\2\2\2\u0afb\u0afc\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd")
        buf.write("\u0afe\7J\2\2\u0afe\u0b00\7\u03ca\2\2\u0aff\u0b01\t\b")
        buf.write("\2\2\u0b00\u0aff\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b02")
        buf.write("\3\2\2\2\u0b02\u0b03\7O\2\2\u0b03\u0b04\7\u0097\2\2\u0b04")
        buf.write("\u0b08\5\u01ec\u00f7\2\u0b05\u0b06\7\32\2\2\u0b06\u0b07")
        buf.write("\7\u0089\2\2\u0b07\u0b09\5\u01f6\u00fc\2\u0b08\u0b05\3")
        buf.write("\2\2\2\u0b08\u0b09\3\2\2\2\u0b09\u0b10\3\2\2\2\u0b0a\u0b0b")
        buf.write("\7\u01e2\2\2\u0b0b\u0b0c\7\u0161\2\2\u0b0c\u0b0d\7\24")
        buf.write("\2\2\u0b0d\u0b0e\7\u03b4\2\2\u0b0e\u0b0f\7\u03ca\2\2\u0b0f")
        buf.write("\u0b11\7\u03b3\2\2\u0b10\u0b0a\3\2\2\2\u0b10\u0b11\3\2")
        buf.write("\2\2\u0b11\u0b16\3\2\2\2\u0b12\u0b13\7G\2\2\u0b13\u0b14")
        buf.write("\5\u020a\u0106\2\u0b14\u0b15\t#\2\2\u0b15\u0b17\3\2\2")
        buf.write("\2\u0b16\u0b12\3\2\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b23")
        buf.write("\3\2\2\2\u0b18\u0b19\7\u03bb\2\2\u0b19\u0b1e\5\u00bc_")
        buf.write("\2\u0b1a\u0b1b\7\u03bd\2\2\u0b1b\u0b1d\5\u00bc_\2\u0b1c")
        buf.write("\u0b1a\3\2\2\2\u0b1d\u0b20\3\2\2\2\u0b1e\u0b1c\3\2\2\2")
        buf.write("\u0b1e\u0b1f\3\2\2\2\u0b1f\u0b21\3\2\2\2\u0b20\u0b1e\3")
        buf.write("\2\2\2\u0b21\u0b22\7\u03bc\2\2\u0b22\u0b24\3\2\2\2\u0b23")
        buf.write("\u0b18\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b2e\3\2\2\2")
        buf.write("\u0b25\u0b26\7\u0089\2\2\u0b26\u0b2b\5\u00ba^\2\u0b27")
        buf.write("\u0b28\7\u03bd\2\2\u0b28\u0b2a\5\u00ba^\2\u0b29\u0b27")
        buf.write("\3\2\2\2\u0b2a\u0b2d\3\2\2\2\u0b2b\u0b29\3\2\2\2\u0b2b")
        buf.write("\u0b2c\3\2\2\2\u0b2c\u0b2f\3\2\2\2\u0b2d\u0b2b\3\2\2\2")
        buf.write("\u0b2e\u0b25\3\2\2\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u00b1\3")
        buf.write("\2\2\2\u0b30\u0b32\7\177\2\2\u0b31\u0b33\t$\2\2\u0b32")
        buf.write("\u0b31\3\2\2\2\u0b32\u0b33\3\2\2\2\u0b33\u0b35\3\2\2\2")
        buf.write("\u0b34\u0b36\7O\2\2\u0b35\u0b34\3\2\2\2\u0b35\u0b36\3")
        buf.write("\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b3d\5\u01ec\u00f7\2")
        buf.write("\u0b38\u0b39\7s\2\2\u0b39\u0b3a\7\u03bb\2\2\u0b3a\u0b3b")
        buf.write("\5\u0222\u0112\2\u0b3b\u0b3c\7\u03bc\2\2\u0b3c\u0b3e\3")
        buf.write("\2\2\2\u0b3d\u0b38\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b4f")
        buf.write("\3\2\2\2\u0b3f\u0b40\7\u03bb\2\2\u0b40\u0b41\5\u0222\u0112")
        buf.write("\2\u0b41\u0b42\7\u03bc\2\2\u0b42\u0b44\3\2\2\2\u0b43\u0b3f")
        buf.write("\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45")
        buf.write("\u0b50\5\u00b8]\2\u0b46\u0b47\7\u0089\2\2\u0b47\u0b4c")
        buf.write("\5\u00ba^\2\u0b48\u0b49\7\u03bd\2\2\u0b49\u0b4b\5\u00ba")
        buf.write("^\2\u0b4a\u0b48\3\2\2\2\u0b4b\u0b4e\3\2\2\2\u0b4c\u0b4a")
        buf.write("\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u0b50\3\2\2\2\u0b4e")
        buf.write("\u0b4c\3\2\2\2\u0b4f\u0b43\3\2\2\2\u0b4f\u0b46\3\2\2\2")
        buf.write("\u0b50\u00b3\3\2\2\2\u0b51\u0b53\5\u00e4s\2\u0b52\u0b54")
        buf.write("\5\u00be`\2\u0b53\u0b52\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54")
        buf.write("\u0b89\3\2\2\2\u0b55\u0b57\5\u00e0q\2\u0b56\u0b58\5\u00be")
        buf.write("`\2\u0b57\u0b56\3\2\2\2\u0b57\u0b58\3\2\2\2\u0b58\u0b89")
        buf.write("\3\2\2\2\u0b59\u0b5b\5\u00e6t\2\u0b5a\u0b5c\5\u00eav\2")
        buf.write("\u0b5b\u0b5a\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b5b\3")
        buf.write("\2\2\2\u0b5d\u0b5e\3\2\2\2\u0b5e\u0b67\3\2\2\2\u0b5f\u0b61")
        buf.write("\7\u009f\2\2\u0b60\u0b62\t%\2\2\u0b61\u0b60\3\2\2\2\u0b61")
        buf.write("\u0b62\3\2\2\2\u0b62\u0b65\3\2\2\2\u0b63\u0b66\5\u00e4")
        buf.write("s\2\u0b64\u0b66\5\u00e0q\2\u0b65\u0b63\3\2\2\2\u0b65\u0b64")
        buf.write("\3\2\2\2\u0b66\u0b68\3\2\2\2\u0b67\u0b5f\3\2\2\2\u0b67")
        buf.write("\u0b68\3\2\2\2\u0b68\u0b6a\3\2\2\2\u0b69\u0b6b\5\u00d0")
        buf.write("i\2\u0b6a\u0b69\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u0b6d")
        buf.write("\3\2\2\2\u0b6c\u0b6e\5\u0100\u0081\2\u0b6d\u0b6c\3\2\2")
        buf.write("\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u0b70\3\2\2\2\u0b6f\u0b71")
        buf.write("\5\u00be`\2\u0b70\u0b6f\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71")
        buf.write("\u0b89\3\2\2\2\u0b72\u0b74\5\u00e2r\2\u0b73\u0b75\5\u00e8")
        buf.write("u\2\u0b74\u0b73\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0b74")
        buf.write("\3\2\2\2\u0b76\u0b77\3\2\2\2\u0b77\u0b7d\3\2\2\2\u0b78")
        buf.write("\u0b7a\7\u009f\2\2\u0b79\u0b7b\t%\2\2\u0b7a\u0b79\3\2")
        buf.write("\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7e")
        buf.write("\5\u00e0q\2\u0b7d\u0b78\3\2\2\2\u0b7d\u0b7e\3\2\2\2\u0b7e")
        buf.write("\u0b80\3\2\2\2\u0b7f\u0b81\5\u00d0i\2\u0b80\u0b7f\3\2")
        buf.write("\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b83\3\2\2\2\u0b82\u0b84")
        buf.write("\5\u0100\u0081\2\u0b83\u0b82\3\2\2\2\u0b83\u0b84\3\2\2")
        buf.write("\2\u0b84\u0b86\3\2\2\2\u0b85\u0b87\5\u00be`\2\u0b86\u0b85")
        buf.write("\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0b89\3\2\2\2\u0b88")
        buf.write("\u0b51\3\2\2\2\u0b88\u0b55\3\2\2\2\u0b88\u0b59\3\2\2\2")
        buf.write("\u0b88\u0b72\3\2\2\2\u0b89\u00b5\3\2\2\2\u0b8a\u0b8d\5")
        buf.write("\u00ccg\2\u0b8b\u0b8d\5\u00ceh\2\u0b8c\u0b8a\3\2\2\2\u0b8c")
        buf.write("\u0b8b\3\2\2\2\u0b8d\u00b7\3\2\2\2\u0b8e\u0b9e\5\u00b4")
        buf.write("[\2\u0b8f\u0b90\t&\2\2\u0b90\u0b91\7\u03bb\2\2\u0b91\u0b92")
        buf.write("\5\u022a\u0116\2\u0b92\u0b9a\7\u03bc\2\2\u0b93\u0b94\7")
        buf.write("\u03bd\2\2\u0b94\u0b95\7\u03bb\2\2\u0b95\u0b96\5\u022a")
        buf.write("\u0116\2\u0b96\u0b97\7\u03bc\2\2\u0b97\u0b99\3\2\2\2\u0b98")
        buf.write("\u0b93\3\2\2\2\u0b99\u0b9c\3\2\2\2\u0b9a\u0b98\3\2\2\2")
        buf.write("\u0b9a\u0b9b\3\2\2\2\u0b9b\u0b9e\3\2\2\2\u0b9c\u0b9a\3")
        buf.write("\2\2\2\u0b9d\u0b8e\3\2\2\2\u0b9d\u0b8f\3\2\2\2\u0b9e\u00b9")
        buf.write("\3\2\2\2\u0b9f\u0ba0\5\u01ee\u00f8\2\u0ba0\u0ba3\7\u03b2")
        buf.write("\2\2\u0ba1\u0ba4\5\u0250\u0129\2\u0ba2\u0ba4\7)\2\2\u0ba3")
        buf.write("\u0ba1\3\2\2\2\u0ba3\u0ba2\3\2\2\2\u0ba4\u00bb\3\2\2\2")
        buf.write("\u0ba5\u0ba8\5\u0204\u0103\2\u0ba6\u0ba8\7\u03d5\2\2\u0ba7")
        buf.write("\u0ba5\3\2\2\2\u0ba7\u0ba6\3\2\2\2\u0ba8\u00bd\3\2\2\2")
        buf.write("\u0ba9\u0baa\7<\2\2\u0baa\u0bb0\7\u00a3\2\2\u0bab\u0bac")
        buf.write("\7^\2\2\u0bac\u0bad\7H\2\2\u0bad\u0bae\7\u01e9\2\2\u0bae")
        buf.write("\u0bb0\7\u019b\2\2\u0baf\u0ba9\3\2\2\2\u0baf\u0bab\3\2")
        buf.write("\2\2\u0bb0\u00bf\3\2\2\2\u0bb1\u0bb3\7+\2\2\u0bb2\u0bb4")
        buf.write("\7`\2\2\u0bb3\u0bb2\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4")
        buf.write("\u0bb6\3\2\2\2\u0bb5\u0bb7\7\u01c7\2\2\u0bb6\u0bb5\3\2")
        buf.write("\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7\u0bb9\3\2\2\2\u0bb8\u0bba")
        buf.write("\7G\2\2\u0bb9\u0bb8\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba")
        buf.write("\u0bbb\3\2\2\2\u0bbb\u0bbc\7?\2\2\u0bbc\u0bc2\5\u01ec")
        buf.write("\u00f7\2\u0bbd\u0bbe\7s\2\2\u0bbe\u0bbf\7\u03bb\2\2\u0bbf")
        buf.write("\u0bc0\5\u0222\u0112\2\u0bc0\u0bc1\7\u03bc\2\2\u0bc1\u0bc3")
        buf.write("\3\2\2\2\u0bc2\u0bbd\3\2\2\2\u0bc2\u0bc3\3\2\2\2\u0bc3")
        buf.write("\u0bc6\3\2\2\2\u0bc4\u0bc5\7\u00a9\2\2\u0bc5\u0bc7\5\u0250")
        buf.write("\u0129\2\u0bc6\u0bc4\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7")
        buf.write("\u0bc9\3\2\2\2\u0bc8\u0bca\5\u00d0i\2\u0bc9\u0bc8\3\2")
        buf.write("\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bcd\3\2\2\2\u0bcb\u0bcc")
        buf.write("\7Z\2\2\u0bcc\u0bce\5\u020a\u0106\2\u0bcd\u0bcb\3\2\2")
        buf.write("\2\u0bcd\u0bce\3\2\2\2\u0bce\u00c1\3\2\2\2\u0bcf\u0bd1")
        buf.write("\7+\2\2\u0bd0\u0bd2\7`\2\2\u0bd1\u0bd0\3\2\2\2\u0bd1\u0bd2")
        buf.write("\3\2\2\2\u0bd2\u0bd4\3\2\2\2\u0bd3\u0bd5\7\u01c7\2\2\u0bd4")
        buf.write("\u0bd3\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bd7\3\2\2\2")
        buf.write("\u0bd6\u0bd8\7G\2\2\u0bd7\u0bd6\3\2\2\2\u0bd7\u0bd8\3")
        buf.write("\2\2\2\u0bd8\u0c00\3\2\2\2\u0bd9\u0bdc\5\u01ec\u00f7\2")
        buf.write("\u0bda\u0bdb\7\u03ba\2\2\u0bdb\u0bdd\7\u03aa\2\2\u0bdc")
        buf.write("\u0bda\3\2\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0be6\3\2\2\2")
        buf.write("\u0bde\u0bdf\7\u03bd\2\2\u0bdf\u0be2\5\u01ec\u00f7\2\u0be0")
        buf.write("\u0be1\7\u03ba\2\2\u0be1\u0be3\7\u03aa\2\2\u0be2\u0be0")
        buf.write("\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be5\3\2\2\2\u0be4")
        buf.write("\u0bde\3\2\2\2\u0be5\u0be8\3\2\2\2\u0be6\u0be4\3\2\2\2")
        buf.write("\u0be6\u0be7\3\2\2\2\u0be7\u0be9\3\2\2\2\u0be8\u0be6\3")
        buf.write("\2\2\2\u0be9\u0bea\7?\2\2\u0bea\u0beb\5\u00d4k\2\u0beb")
        buf.write("\u0c01\3\2\2\2\u0bec\u0bed\7?\2\2\u0bed\u0bf0\5\u01ec")
        buf.write("\u00f7\2\u0bee\u0bef\7\u03ba\2\2\u0bef\u0bf1\7\u03aa\2")
        buf.write("\2\u0bf0\u0bee\3\2\2\2\u0bf0\u0bf1\3\2\2\2\u0bf1\u0bfa")
        buf.write("\3\2\2\2\u0bf2\u0bf3\7\u03bd\2\2\u0bf3\u0bf6\5\u01ec\u00f7")
        buf.write("\2\u0bf4\u0bf5\7\u03ba\2\2\u0bf5\u0bf7\7\u03aa\2\2\u0bf6")
        buf.write("\u0bf4\3\2\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7\u0bf9\3\2\2\2")
        buf.write("\u0bf8\u0bf2\3\2\2\2\u0bf9\u0bfc\3\2\2\2\u0bfa\u0bf8\3")
        buf.write("\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bfd\3\2\2\2\u0bfc\u0bfa")
        buf.write("\3\2\2\2\u0bfd\u0bfe\7\u00a6\2\2\u0bfe\u0bff\5\u00d4k")
        buf.write("\2\u0bff\u0c01\3\2\2\2\u0c00\u0bd9\3\2\2\2\u0c00\u0bec")
        buf.write("\3\2\2\2\u0c01\u0c04\3\2\2\2\u0c02\u0c03\7\u00a9\2\2\u0c03")
        buf.write("\u0c05\5\u0250\u0129\2\u0c04\u0c02\3\2\2\2\u0c04\u0c05")
        buf.write("\3\2\2\2\u0c05\u00c3\3\2\2\2\u0c06\u0c07\7\u015c\2\2\u0c07")
        buf.write("\u0c08\5\u01ec\u00f7\2\u0c08\u0c0d\7\u01ae\2\2\u0c09\u0c0b")
        buf.write("\7\17\2\2\u0c0a\u0c09\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b")
        buf.write("\u0c0c\3\2\2\2\u0c0c\u0c0e\5\u0204\u0103\2\u0c0d\u0c0a")
        buf.write("\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e\u00c5\3\2\2\2\u0c0f")
        buf.write("\u0c10\7\u015c\2\2\u0c10\u0c11\5\u01ec\u00f7\2\u0c11\u0c12")
        buf.write("\7x\2\2\u0c12\u0c19\5\u0204\u0103\2\u0c13\u0c14\5\u0258")
        buf.write("\u012d\2\u0c14\u0c15\7\u03bb\2\2\u0c15\u0c16\5\u022c\u0117")
        buf.write("\2\u0c16\u0c17\7\u03bc\2\2\u0c17\u0c1a\3\2\2\2\u0c18\u0c1a")
        buf.write("\t\'\2\2\u0c19\u0c13\3\2\2\2\u0c19\u0c18\3\2\2\2\u0c1a")
        buf.write("\u0c1d\3\2\2\2\u0c1b\u0c1c\7\u00a9\2\2\u0c1c\u0c1e\5\u0250")
        buf.write("\u0129\2\u0c1d\u0c1b\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e")
        buf.write("\u0c21\3\2\2\2\u0c1f\u0c20\7Z\2\2\u0c20\u0c22\5\u020a")
        buf.write("\u0106\2\u0c21\u0c1f\3\2\2\2\u0c21\u0c22\3\2\2\2\u0c22")
        buf.write("\u00c7\3\2\2\2\u0c23\u0c24\7\u015c\2\2\u0c24\u0c25\5\u01ec")
        buf.write("\u00f7\2\u0c25\u0c26\7x\2\2\u0c26\u0c29\t(\2\2\u0c27\u0c28")
        buf.write("\7\u00a9\2\2\u0c28\u0c2a\5\u0250\u0129\2\u0c29\u0c27\3")
        buf.write("\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u0c2d\3\2\2\2\u0c2b\u0c2c")
        buf.write("\7Z\2\2\u0c2c\u0c2e\5\u020a\u0106\2\u0c2d\u0c2b\3\2\2")
        buf.write("\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u00c9\3\2\2\2\u0c2f\u0c30")
        buf.write("\7\u015c\2\2\u0c30\u0c31\5\u01ec\u00f7\2\u0c31\u0c32\7")
        buf.write("\u0117\2\2\u0c32\u00cb\3\2\2\2\u0c33\u0c35\7\u00a3\2\2")
        buf.write("\u0c34\u0c36\7`\2\2\u0c35\u0c34\3\2\2\2\u0c35\u0c36\3")
        buf.write("\2\2\2\u0c36\u0c38\3\2\2\2\u0c37\u0c39\7G\2\2\u0c38\u0c37")
        buf.write("\3\2\2\2\u0c38\u0c39\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a")
        buf.write("\u0c3f\5\u01ec\u00f7\2\u0c3b\u0c3d\7\17\2\2\u0c3c\u0c3b")
        buf.write("\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e")
        buf.write("\u0c40\5\u0204\u0103\2\u0c3f\u0c3c\3\2\2\2\u0c3f\u0c40")
        buf.write("\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41\u0c42\7\u0089\2\2\u0c42")
        buf.write("\u0c47\5\u00ba^\2\u0c43\u0c44\7\u03bd\2\2\u0c44\u0c46")
        buf.write("\5\u00ba^\2\u0c45\u0c43\3\2\2\2\u0c46\u0c49\3\2\2\2\u0c47")
        buf.write("\u0c45\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48\u0c4c\3\2\2\2")
        buf.write("\u0c49\u0c47\3\2\2\2\u0c4a\u0c4b\7\u00a9\2\2\u0c4b\u0c4d")
        buf.write("\5\u0250\u0129\2\u0c4c\u0c4a\3\2\2\2\u0c4c\u0c4d\3\2\2")
        buf.write("\2\u0c4d\u0c4f\3\2\2\2\u0c4e\u0c50\5\u00d0i\2\u0c4f\u0c4e")
        buf.write("\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c52\3\2\2\2\u0c51")
        buf.write("\u0c53\5\u0100\u0081\2\u0c52\u0c51\3\2\2\2\u0c52\u0c53")
        buf.write("\3\2\2\2\u0c53\u00cd\3\2\2\2\u0c54\u0c56\7\u00a3\2\2\u0c55")
        buf.write("\u0c57\7`\2\2\u0c56\u0c55\3\2\2\2\u0c56\u0c57\3\2\2\2")
        buf.write("\u0c57\u0c59\3\2\2\2\u0c58\u0c5a\7G\2\2\u0c59\u0c58\3")
        buf.write("\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u0c5c")
        buf.write("\5\u00d4k\2\u0c5c\u0c5d\7\u0089\2\2\u0c5d\u0c62\5\u00ba")
        buf.write("^\2\u0c5e\u0c5f\7\u03bd\2\2\u0c5f\u0c61\5\u00ba^\2\u0c60")
        buf.write("\u0c5e\3\2\2\2\u0c61\u0c64\3\2\2\2\u0c62\u0c60\3\2\2\2")
        buf.write("\u0c62\u0c63\3\2\2\2\u0c63\u0c67\3\2\2\2\u0c64\u0c62\3")
        buf.write("\2\2\2\u0c65\u0c66\7\u00a9\2\2\u0c66\u0c68\5\u0250\u0129")
        buf.write("\2\u0c67\u0c65\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u00cf")
        buf.write("\3\2\2\2\u0c69\u0c6a\7o\2\2\u0c6a\u0c6b\7\24\2\2\u0c6b")
        buf.write("\u0c70\5\u00d2j\2\u0c6c\u0c6d\7\u03bd\2\2\u0c6d\u0c6f")
        buf.write("\5\u00d2j\2\u0c6e\u0c6c\3\2\2\2\u0c6f\u0c72\3\2\2\2\u0c70")
        buf.write("\u0c6e\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u00d1\3\2\2\2")
        buf.write("\u0c72\u0c70\3\2\2\2\u0c73\u0c75\5\u0250\u0129\2\u0c74")
        buf.write("\u0c76\t)\2\2\u0c75\u0c74\3\2\2\2\u0c75\u0c76\3\2\2\2")
        buf.write("\u0c76\u00d3\3\2\2\2\u0c77\u0c7c\5\u00d6l\2\u0c78\u0c79")
        buf.write("\7\u03bd\2\2\u0c79\u0c7b\5\u00d6l\2\u0c7a\u0c78\3\2\2")
        buf.write("\2\u0c7b\u0c7e\3\2\2\2\u0c7c\u0c7a\3\2\2\2\u0c7c\u0c7d")
        buf.write("\3\2\2\2\u0c7d\u00d5\3\2\2\2\u0c7e\u0c7c\3\2\2\2\u0c7f")
        buf.write("\u0c83\5\u00d8m\2\u0c80\u0c82\5\u00dep\2\u0c81\u0c80\3")
        buf.write("\2\2\2\u0c82\u0c85\3\2\2\2\u0c83\u0c81\3\2\2\2\u0c83\u0c84")
        buf.write("\3\2\2\2\u0c84\u0c91\3\2\2\2\u0c85\u0c83\3\2\2\2\u0c86")
        buf.write("\u0c87\7\u03bb\2\2\u0c87\u0c8b\5\u00d8m\2\u0c88\u0c8a")
        buf.write("\5\u00dep\2\u0c89\u0c88\3\2\2\2\u0c8a\u0c8d\3\2\2\2\u0c8b")
        buf.write("\u0c89\3\2\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c\u0c8e\3\2\2\2")
        buf.write("\u0c8d\u0c8b\3\2\2\2\u0c8e\u0c8f\7\u03bc\2\2\u0c8f\u0c91")
        buf.write("\3\2\2\2\u0c90\u0c7f\3\2\2\2\u0c90\u0c86\3\2\2\2\u0c91")
        buf.write("\u00d7\3\2\2\2\u0c92\u0c98\5\u01ec\u00f7\2\u0c93\u0c94")
        buf.write("\7s\2\2\u0c94\u0c95\7\u03bb\2\2\u0c95\u0c96\5\u0222\u0112")
        buf.write("\2\u0c96\u0c97\7\u03bc\2\2\u0c97\u0c99\3\2\2\2\u0c98\u0c93")
        buf.write("\3\2\2\2\u0c98\u0c99\3\2\2\2\u0c99\u0c9e\3\2\2\2\u0c9a")
        buf.write("\u0c9c\7\17\2\2\u0c9b\u0c9a\3\2\2\2\u0c9b\u0c9c\3\2\2")
        buf.write("\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9f\5\u0204\u0103\2\u0c9e")
        buf.write("\u0c9b\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca8\3\2\2\2")
        buf.write("\u0ca0\u0ca5\5\u00dan\2\u0ca1\u0ca2\7\u03bd\2\2\u0ca2")
        buf.write("\u0ca4\5\u00dan\2\u0ca3\u0ca1\3\2\2\2\u0ca4\u0ca7\3\2")
        buf.write("\2\2\u0ca5\u0ca3\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0ca9")
        buf.write("\3\2\2\2\u0ca7\u0ca5\3\2\2\2\u0ca8\u0ca0\3\2\2\2\u0ca8")
        buf.write("\u0ca9\3\2\2\2\u0ca9\u0cbb\3\2\2\2\u0caa\u0cb0\5\u00b4")
        buf.write("[\2\u0cab\u0cac\7\u03bb\2\2\u0cac\u0cad\5\u00b4[\2\u0cad")
        buf.write("\u0cae\7\u03bc\2\2\u0cae\u0cb0\3\2\2\2\u0caf\u0caa\3\2")
        buf.write("\2\2\u0caf\u0cab\3\2\2\2\u0cb0\u0cb2\3\2\2\2\u0cb1\u0cb3")
        buf.write("\7\17\2\2\u0cb2\u0cb1\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3")
        buf.write("\u0cb4\3\2\2\2\u0cb4\u0cb5\5\u0204\u0103\2\u0cb5\u0cbb")
        buf.write("\3\2\2\2\u0cb6\u0cb7\7\u03bb\2\2\u0cb7\u0cb8\5\u00d4k")
        buf.write("\2\u0cb8\u0cb9\7\u03bc\2\2\u0cb9\u0cbb\3\2\2\2\u0cba\u0c92")
        buf.write("\3\2\2\2\u0cba\u0caf\3\2\2\2\u0cba\u0cb6\3\2\2\2\u0cbb")
        buf.write("\u00d9\3\2\2\2\u0cbc\u0cbd\t*\2\2\u0cbd\u0cc0\t\24\2\2")
        buf.write("\u0cbe\u0cbf\7<\2\2\u0cbf\u0cc1\5\u00dco\2\u0cc0\u0cbe")
        buf.write("\3\2\2\2\u0cc0\u0cc1\3\2\2\2\u0cc1\u0cc2\3\2\2\2\u0cc2")
        buf.write("\u0cc3\7\u03bb\2\2\u0cc3\u0cc4\5\u0222\u0112\2\u0cc4\u0cc5")
        buf.write("\7\u03bc\2\2\u0cc5\u00db\3\2\2\2\u0cc6\u0ccc\7R\2\2\u0cc7")
        buf.write("\u0cc8\7o\2\2\u0cc8\u0ccc\7\24\2\2\u0cc9\u0cca\7C\2\2")
        buf.write("\u0cca\u0ccc\7\24\2\2\u0ccb\u0cc6\3\2\2\2\u0ccb\u0cc7")
        buf.write("\3\2\2\2\u0ccb\u0cc9\3\2\2\2\u0ccc\u00dd\3\2\2\2\u0ccd")
        buf.write("\u0ccf\t+\2\2\u0cce\u0ccd\3\2\2\2\u0cce\u0ccf\3\2\2\2")
        buf.write("\u0ccf\u0cd0\3\2\2\2\u0cd0\u0cd1\7R\2\2\u0cd1\u0cd9\5")
        buf.write("\u00d8m\2\u0cd2\u0cd3\7j\2\2\u0cd3\u0cda\5\u0250\u0129")
        buf.write("\2\u0cd4\u0cd5\7\u00a6\2\2\u0cd5\u0cd6\7\u03bb\2\2\u0cd6")
        buf.write("\u0cd7\5\u0222\u0112\2\u0cd7\u0cd8\7\u03bc\2\2\u0cd8\u0cda")
        buf.write("\3\2\2\2\u0cd9\u0cd2\3\2\2\2\u0cd9\u0cd4\3\2\2\2\u0cd9")
        buf.write("\u0cda\3\2\2\2\u0cda\u0cfa\3\2\2\2\u0cdb\u0cdc\7\u0096")
        buf.write("\2\2\u0cdc\u0cdf\5\u00d8m\2\u0cdd\u0cde\7j\2\2\u0cde\u0ce0")
        buf.write("\5\u0250\u0129\2\u0cdf\u0cdd\3\2\2\2\u0cdf\u0ce0\3\2\2")
        buf.write("\2\u0ce0\u0cfa\3\2\2\2\u0ce1\u0ce3\t,\2\2\u0ce2\u0ce4")
        buf.write("\7q\2\2\u0ce3\u0ce2\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4")
        buf.write("\u0ce5\3\2\2\2\u0ce5\u0ce6\7R\2\2\u0ce6\u0cee\5\u00d8")
        buf.write("m\2\u0ce7\u0ce8\7j\2\2\u0ce8\u0cef\5\u0250\u0129\2\u0ce9")
        buf.write("\u0cea\7\u00a6\2\2\u0cea\u0ceb\7\u03bb\2\2\u0ceb\u0cec")
        buf.write("\5\u0222\u0112\2\u0cec\u0ced\7\u03bc\2\2\u0ced\u0cef\3")
        buf.write("\2\2\2\u0cee\u0ce7\3\2\2\2\u0cee\u0ce9\3\2\2\2\u0cef\u0cfa")
        buf.write("\3\2\2\2\u0cf0\u0cf5\7f\2\2\u0cf1\u0cf3\t,\2\2\u0cf2\u0cf4")
        buf.write("\7q\2\2\u0cf3\u0cf2\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4")
        buf.write("\u0cf6\3\2\2\2\u0cf5\u0cf1\3\2\2\2\u0cf5\u0cf6\3\2\2\2")
        buf.write("\u0cf6\u0cf7\3\2\2\2\u0cf7\u0cf8\7R\2\2\u0cf8\u0cfa\5")
        buf.write("\u00d8m\2\u0cf9\u0cce\3\2\2\2\u0cf9\u0cdb\3\2\2\2\u0cf9")
        buf.write("\u0ce1\3\2\2\2\u0cf9\u0cf0\3\2\2\2\u0cfa\u00df\3\2\2\2")
        buf.write("\u0cfb\u0cfc\7\u03bb\2\2\u0cfc\u0cfd\5\u00e4s\2\u0cfd")
        buf.write("\u0cfe\7\u03bc\2\2\u0cfe\u0d04\3\2\2\2\u0cff\u0d00\7\u03bb")
        buf.write("\2\2\u0d00\u0d01\5\u00e0q\2\u0d01\u0d02\7\u03bc\2\2\u0d02")
        buf.write("\u0d04\3\2\2\2\u0d03\u0cfb\3\2\2\2\u0d03\u0cff\3\2\2\2")
        buf.write("\u0d04\u00e1\3\2\2\2\u0d05\u0d06\7\u03bb\2\2\u0d06\u0d07")
        buf.write("\5\u00e6t\2\u0d07\u0d08\7\u03bc\2\2\u0d08\u0d0e\3\2\2")
        buf.write("\2\u0d09\u0d0a\7\u03bb\2\2\u0d0a\u0d0b\5\u00e2r\2\u0d0b")
        buf.write("\u0d0c\7\u03bc\2\2\u0d0c\u0d0e\3\2\2\2\u0d0d\u0d05\3\2")
        buf.write("\2\2\u0d0d\u0d09\3\2\2\2\u0d0e\u00e3\3\2\2\2\u0d0f\u0d13")
        buf.write("\7\u0088\2\2\u0d10\u0d12\5\u00ecw\2\u0d11\u0d10\3\2\2")
        buf.write("\2\u0d12\u0d15\3\2\2\2\u0d13\u0d11\3\2\2\2\u0d13\u0d14")
        buf.write("\3\2\2\2\u0d14\u0d16\3\2\2\2\u0d15\u0d13\3\2\2\2\u0d16")
        buf.write("\u0d18\5\u00eex\2\u0d17\u0d19\5\u00f6|\2\u0d18\u0d17\3")
        buf.write("\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1b\3\2\2\2\u0d1a\u0d1c")
        buf.write("\5\u00fc\177\2\u0d1b\u0d1a\3\2\2\2\u0d1b\u0d1c\3\2\2\2")
        buf.write("\u0d1c\u0d1e\3\2\2\2\u0d1d\u0d1f\5\u00d0i\2\u0d1e\u0d1d")
        buf.write("\3\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f\u0d21\3\2\2\2\u0d20")
        buf.write("\u0d22\5\u0100\u0081\2\u0d21\u0d20\3\2\2\2\u0d21\u0d22")
        buf.write("\3\2\2\2\u0d22\u0d49\3\2\2\2\u0d23\u0d27\7\u0088\2\2\u0d24")
        buf.write("\u0d26\5\u00ecw\2\u0d25\u0d24\3\2\2\2\u0d26\u0d29\3\2")
        buf.write("\2\2\u0d27\u0d25\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d2a")
        buf.write("\3\2\2\2\u0d29\u0d27\3\2\2\2\u0d2a\u0d2c\5\u00eex\2\u0d2b")
        buf.write("\u0d2d\5\u00fc\177\2\u0d2c\u0d2b\3\2\2\2\u0d2c\u0d2d\3")
        buf.write("\2\2\2\u0d2d\u0d2f\3\2\2\2\u0d2e\u0d30\5\u00d0i\2\u0d2f")
        buf.write("\u0d2e\3\2\2\2\u0d2f\u0d30\3\2\2\2\u0d30\u0d32\3\2\2\2")
        buf.write("\u0d31\u0d33\5\u0100\u0081\2\u0d32\u0d31\3\2\2\2\u0d32")
        buf.write("\u0d33\3\2\2\2\u0d33\u0d35\3\2\2\2\u0d34\u0d36\5\u00f6")
        buf.write("|\2\u0d35\u0d34\3\2\2\2\u0d35\u0d36\3\2\2\2\u0d36\u0d49")
        buf.write("\3\2\2\2\u0d37\u0d3b\7\u0088\2\2\u0d38\u0d3a\5\u00ecw")
        buf.write("\2\u0d39\u0d38\3\2\2\2\u0d3a\u0d3d\3\2\2\2\u0d3b\u0d39")
        buf.write("\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0d3e\3\2\2\2\u0d3d")
        buf.write("\u0d3b\3\2\2\2\u0d3e\u0d40\5\u00eex\2\u0d3f\u0d41\5\u00fc")
        buf.write("\177\2\u0d40\u0d3f\3\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d43")
        buf.write("\3\2\2\2\u0d42\u0d44\5\u00f2z\2\u0d43\u0d42\3\2\2\2\u0d43")
        buf.write("\u0d44\3\2\2\2\u0d44\u0d46\3\2\2\2\u0d45\u0d47\5\u00f4")
        buf.write("{\2\u0d46\u0d45\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d49")
        buf.write("\3\2\2\2\u0d48\u0d0f\3\2\2\2\u0d48\u0d23\3\2\2\2\u0d48")
        buf.write("\u0d37\3\2\2\2\u0d49\u00e5\3\2\2\2\u0d4a\u0d4e\7\u0088")
        buf.write("\2\2\u0d4b\u0d4d\5\u00ecw\2\u0d4c\u0d4b\3\2\2\2\u0d4d")
        buf.write("\u0d50\3\2\2\2\u0d4e\u0d4c\3\2\2\2\u0d4e\u0d4f\3\2\2\2")
        buf.write("\u0d4f\u0d51\3\2\2\2\u0d50\u0d4e\3\2\2\2\u0d51\u0d53\5")
        buf.write("\u00eex\2\u0d52\u0d54\5\u00fc\177\2\u0d53\u0d52\3\2\2")
        buf.write("\2\u0d53\u0d54\3\2\2\2\u0d54\u0d56\3\2\2\2\u0d55\u0d57")
        buf.write("\5\u00d0i\2\u0d56\u0d55\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57")
        buf.write("\u0d59\3\2\2\2\u0d58\u0d5a\5\u0100\u0081\2\u0d59\u0d58")
        buf.write("\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u00e7\3\2\2\2\u0d5b")
        buf.write("\u0d5d\7\u009f\2\2\u0d5c\u0d5e\t%\2\2\u0d5d\u0d5c\3\2")
        buf.write("\2\2\u0d5d\u0d5e\3\2\2\2\u0d5e\u0d5f\3\2\2\2\u0d5f\u0d60")
        buf.write("\5\u00e2r\2\u0d60\u00e9\3\2\2\2\u0d61\u0d63\7\u009f\2")
        buf.write("\2\u0d62\u0d64\t%\2\2\u0d63\u0d62\3\2\2\2\u0d63\u0d64")
        buf.write("\3\2\2\2\u0d64\u0d67\3\2\2\2\u0d65\u0d68\5\u00e6t\2\u0d66")
        buf.write("\u0d68\5\u00e2r\2\u0d67\u0d65\3\2\2\2\u0d67\u0d66\3\2")
        buf.write("\2\2\u0d68\u00eb\3\2\2\2\u0d69\u0d72\t-\2\2\u0d6a\u0d72")
        buf.write("\7E\2\2\u0d6b\u0d72\7\u0096\2\2\u0d6c\u0d72\7\u0093\2")
        buf.write("\2\u0d6d\u0d72\7\u0091\2\2\u0d6e\u0d72\7\u01f8\2\2\u0d6f")
        buf.write("\u0d72\t.\2\2\u0d70\u0d72\7\u0092\2\2\u0d71\u0d69\3\2")
        buf.write("\2\2\u0d71\u0d6a\3\2\2\2\u0d71\u0d6b\3\2\2\2\u0d71\u0d6c")
        buf.write("\3\2\2\2\u0d71\u0d6d\3\2\2\2\u0d71\u0d6e\3\2\2\2\u0d71")
        buf.write("\u0d6f\3\2\2\2\u0d71\u0d70\3\2\2\2\u0d72\u00ed\3\2\2\2")
        buf.write("\u0d73\u0d76\7\u03aa\2\2\u0d74\u0d76\5\u00f0y\2\u0d75")
        buf.write("\u0d73\3\2\2\2\u0d75\u0d74\3\2\2\2\u0d76\u0d7b\3\2\2\2")
        buf.write("\u0d77\u0d78\7\u03bd\2\2\u0d78\u0d7a\5\u00f0y\2\u0d79")
        buf.write("\u0d77\3\2\2\2\u0d7a\u0d7d\3\2\2\2\u0d7b\u0d79\3\2\2\2")
        buf.write("\u0d7b\u0d7c\3\2\2\2\u0d7c\u00ef\3\2\2\2\u0d7d\u0d7b\3")
        buf.write("\2\2\2\u0d7e\u0d7f\5\u01ea\u00f6\2\u0d7f\u0d80\7\u03ba")
        buf.write("\2\2\u0d80\u0d81\7\u03aa\2\2\u0d81\u0d9c\3\2\2\2\u0d82")
        buf.write("\u0d87\5\u01ee\u00f8\2\u0d83\u0d85\7\17\2\2\u0d84\u0d83")
        buf.write("\3\2\2\2\u0d84\u0d85\3\2\2\2\u0d85\u0d86\3\2\2\2\u0d86")
        buf.write("\u0d88\5\u0204\u0103\2\u0d87\u0d84\3\2\2\2\u0d87\u0d88")
        buf.write("\3\2\2\2\u0d88\u0d9c\3\2\2\2\u0d89\u0d8e\5\u023c\u011f")
        buf.write("\2\u0d8a\u0d8c\7\17\2\2\u0d8b\u0d8a\3\2\2\2\u0d8b\u0d8c")
        buf.write("\3\2\2\2\u0d8c\u0d8d\3\2\2\2\u0d8d\u0d8f\5\u0204\u0103")
        buf.write("\2\u0d8e\u0d8b\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0d9c")
        buf.write("\3\2\2\2\u0d90\u0d91\7\u03d5\2\2\u0d91\u0d93\7\u03a1\2")
        buf.write("\2\u0d92\u0d90\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d94")
        buf.write("\3\2\2\2\u0d94\u0d99\5\u0250\u0129\2\u0d95\u0d97\7\17")
        buf.write("\2\2\u0d96\u0d95\3\2\2\2\u0d96\u0d97\3\2\2\2\u0d97\u0d98")
        buf.write("\3\2\2\2\u0d98\u0d9a\5\u0204\u0103\2\u0d99\u0d96\3\2\2")
        buf.write("\2\u0d99\u0d9a\3\2\2\2\u0d9a\u0d9c\3\2\2\2\u0d9b\u0d7e")
        buf.write("\3\2\2\2\u0d9b\u0d82\3\2\2\2\u0d9b\u0d89\3\2\2\2\u0d9b")
        buf.write("\u0d92\3\2\2\2\u0d9c\u00f1\3\2\2\2\u0d9d\u0d9e\7\7\2\2")
        buf.write("\u0d9e\u0d9f\7\u03cd\2\2\u0d9f\u00f3\3\2\2\2\u0da0\u0da1")
        buf.write("\7\b\2\2\u0da1\u0da2\7\u03cd\2\2\u0da2\u00f5\3\2\2\2\u0da3")
        buf.write("\u0da4\7O\2\2\u0da4\u0da9\5\u00bc_\2\u0da5\u0da6\7\u03bd")
        buf.write("\2\2\u0da6\u0da8\5\u00bc_\2\u0da7\u0da5\3\2\2\2\u0da8")
        buf.write("\u0dab\3\2\2\2\u0da9\u0da7\3\2\2\2\u0da9\u0daa\3\2\2\2")
        buf.write("\u0daa\u0dc8\3\2\2\2\u0dab\u0da9\3\2\2\2\u0dac\u0dad\7")
        buf.write("O\2\2\u0dad\u0dae\7\u0136\2\2\u0dae\u0dc8\7\u03ca\2\2")
        buf.write("\u0daf\u0db0\7O\2\2\u0db0\u0db1\7r\2\2\u0db1\u0db5\7\u03ca")
        buf.write("\2\2\u0db2\u0db3\7\32\2\2\u0db3\u0db4\7\u0089\2\2\u0db4")
        buf.write("\u0db6\5\u01f6\u00fc\2\u0db5\u0db2\3\2\2\2\u0db5\u0db6")
        buf.write("\3\2\2\2\u0db6\u0dbd\3\2\2\2\u0db7\u0db9\t\"\2\2\u0db8")
        buf.write("\u0dba\5\u00f8}\2\u0db9\u0db8\3\2\2\2\u0dba\u0dbb\3\2")
        buf.write("\2\2\u0dbb\u0db9\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc\u0dbe")
        buf.write("\3\2\2\2\u0dbd\u0db7\3\2\2\2\u0dbd\u0dbe\3\2\2\2\u0dbe")
        buf.write("\u0dc5\3\2\2\2\u0dbf\u0dc1\7\\\2\2\u0dc0\u0dc2\5\u00fa")
        buf.write("~\2\u0dc1\u0dc0\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u0dc1")
        buf.write("\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4\u0dc6\3\2\2\2\u0dc5")
        buf.write("\u0dbf\3\2\2\2\u0dc5\u0dc6\3\2\2\2\u0dc6\u0dc8\3\2\2\2")
        buf.write("\u0dc7\u0da3\3\2\2\2\u0dc7\u0dac\3\2\2\2\u0dc7\u0daf\3")
        buf.write("\2\2\2\u0dc8\u00f7\3\2\2\2\u0dc9\u0dca\7\u0098\2\2\u0dca")
        buf.write("\u0dcb\7\24\2\2\u0dcb\u0dd6\7\u03ca\2\2\u0dcc\u0dce\7")
        buf.write("m\2\2\u0dcd\u0dcc\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u0dcf")
        buf.write("\3\2\2\2\u0dcf\u0dd0\7\65\2\2\u0dd0\u0dd1\7\24\2\2\u0dd1")
        buf.write("\u0dd6\7\u03ca\2\2\u0dd2\u0dd3\7\66\2\2\u0dd3\u0dd4\7")
        buf.write("\24\2\2\u0dd4\u0dd6\7\u03ca\2\2\u0dd5\u0dc9\3\2\2\2\u0dd5")
        buf.write("\u0dcd\3\2\2\2\u0dd5\u0dd2\3\2\2\2\u0dd6\u00f9\3\2\2\2")
        buf.write("\u0dd7\u0dd8\7\u0095\2\2\u0dd8\u0dd9\7\24\2\2\u0dd9\u0dde")
        buf.write("\7\u03ca\2\2\u0dda\u0ddb\7\u0098\2\2\u0ddb\u0ddc\7\24")
        buf.write("\2\2\u0ddc\u0dde\7\u03ca\2\2\u0ddd\u0dd7\3\2\2\2\u0ddd")
        buf.write("\u0dda\3\2\2\2\u0dde\u00fb\3\2\2\2\u0ddf\u0de0\7?\2\2")
        buf.write("\u0de0\u0de3\5\u00d4k\2\u0de1\u0de2\7\u00a9\2\2\u0de2")
        buf.write("\u0de4\5\u0250\u0129\2\u0de3\u0de1\3\2\2\2\u0de3\u0de4")
        buf.write("\3\2\2\2\u0de4\u0df3\3\2\2\2\u0de5\u0de6\7C\2\2\u0de6")
        buf.write("\u0de7\7\24\2\2\u0de7\u0dec\5\u00fe\u0080\2\u0de8\u0de9")
        buf.write("\7\u03bd\2\2\u0de9\u0deb\5\u00fe\u0080\2\u0dea\u0de8\3")
        buf.write("\2\2\2\u0deb\u0dee\3\2\2\2\u0dec\u0dea\3\2\2\2\u0dec\u0ded")
        buf.write("\3\2\2\2\u0ded\u0df1\3\2\2\2\u0dee\u0dec\3\2\2\2\u0def")
        buf.write("\u0df0\7\u00ab\2\2\u0df0\u0df2\7\u01df\2\2\u0df1\u0def")
        buf.write("\3\2\2\2\u0df1\u0df2\3\2\2\2\u0df2\u0df4\3\2\2\2\u0df3")
        buf.write("\u0de5\3\2\2\2\u0df3\u0df4\3\2\2\2\u0df4\u0df7\3\2\2\2")
        buf.write("\u0df5\u0df6\7D\2\2\u0df6\u0df8\5\u0250\u0129\2\u0df7")
        buf.write("\u0df5\3\2\2\2\u0df7\u0df8\3\2\2\2\u0df8\u00fd\3\2\2\2")
        buf.write("\u0df9\u0dfb\5\u0250\u0129\2\u0dfa\u0dfc\t)\2\2\u0dfb")
        buf.write("\u0dfa\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u00ff\3\2\2\2")
        buf.write("\u0dfd\u0e08\7Z\2\2\u0dfe\u0dff\5\u020a\u0106\2\u0dff")
        buf.write("\u0e00\7\u03bd\2\2\u0e00\u0e02\3\2\2\2\u0e01\u0dfe\3\2")
        buf.write("\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u0e09")
        buf.write("\5\u020a\u0106\2\u0e04\u0e05\5\u020a\u0106\2\u0e05\u0e06")
        buf.write("\7\u01a8\2\2\u0e06\u0e07\5\u020a\u0106\2\u0e07\u0e09\3")
        buf.write("\2\2\2\u0e08\u0e01\3\2\2\2\u0e08\u0e04\3\2\2\2\u0e09\u0101")
        buf.write("\3\2\2\2\u0e0a\u0e0b\7\u01fc\2\2\u0e0b\u0e14\7\u0211\2")
        buf.write("\2\u0e0c\u0e11\5\u0118\u008d\2\u0e0d\u0e0e\7\u03bd\2\2")
        buf.write("\u0e0e\u0e10\5\u0118\u008d\2\u0e0f\u0e0d\3\2\2\2\u0e10")
        buf.write("\u0e13\3\2\2\2\u0e11\u0e0f\3\2\2\2\u0e11\u0e12\3\2\2\2")
        buf.write("\u0e12\u0e15\3\2\2\2\u0e13\u0e11\3\2\2\2\u0e14\u0e0c\3")
        buf.write("\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u0103\3\2\2\2\u0e16\u0e18")
        buf.write("\7\u0108\2\2\u0e17\u0e19\7\u0226\2\2\u0e18\u0e17\3\2\2")
        buf.write("\2\u0e18\u0e19\3\2\2\2\u0e19\u0105\3\2\2\2\u0e1a\u0e1c")
        buf.write("\7\u011d\2\2\u0e1b\u0e1d\7\u0226\2\2\u0e1c\u0e1b\3\2\2")
        buf.write("\2\u0e1c\u0e1d\3\2\2\2\u0e1d\u0e23\3\2\2\2\u0e1e\u0e20")
        buf.write("\7\16\2\2\u0e1f\u0e21\7\u01a4\2\2\u0e20\u0e1f\3\2\2\2")
        buf.write("\u0e20\u0e21\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e24\7")
        buf.write("\u0111\2\2\u0e23\u0e1e\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24")
        buf.write("\u0e29\3\2\2\2\u0e25\u0e27\7\u01a4\2\2\u0e26\u0e25\3\2")
        buf.write("\2\2\u0e26\u0e27\3\2\2\2\u0e27\u0e28\3\2\2\2\u0e28\u0e2a")
        buf.write("\7|\2\2\u0e29\u0e26\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a")
        buf.write("\u0107\3\2\2\2\u0e2b\u0e2d\7\u01de\2\2\u0e2c\u0e2e\7\u0226")
        buf.write("\2\2\u0e2d\u0e2c\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e34")
        buf.write("\3\2\2\2\u0e2f\u0e31\7\16\2\2\u0e30\u0e32\7\u01a4\2\2")
        buf.write("\u0e31\u0e30\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32\u0e33\3")
        buf.write("\2\2\2\u0e33\u0e35\7\u0111\2\2\u0e34\u0e2f\3\2\2\2\u0e34")
        buf.write("\u0e35\3\2\2\2\u0e35\u0e3a\3\2\2\2\u0e36\u0e38\7\u01a4")
        buf.write("\2\2\u0e37\u0e36\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u0e39")
        buf.write("\3\2\2\2\u0e39\u0e3b\7|\2\2\u0e3a\u0e37\3\2\2\2\u0e3a")
        buf.write("\u0e3b\3\2\2\2\u0e3b\u0109\3\2\2\2\u0e3c\u0e3d\7\u01e4")
        buf.write("\2\2\u0e3d\u0e3e\5\u0204\u0103\2\u0e3e\u010b\3\2\2\2\u0e3f")
        buf.write("\u0e41\7\u01de\2\2\u0e40\u0e42\7\u0226\2\2\u0e41\u0e40")
        buf.write("\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43")
        buf.write("\u0e45\7\u009a\2\2\u0e44\u0e46\7\u01e4\2\2\u0e45\u0e44")
        buf.write("\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0e47\3\2\2\2\u0e47")
        buf.write("\u0e48\5\u0204\u0103\2\u0e48\u010d\3\2\2\2\u0e49\u0e4a")
        buf.write("\7|\2\2\u0e4a\u0e4b\7\u01e4\2\2\u0e4b\u0e4c\5\u0204\u0103")
        buf.write("\2\u0e4c\u010f\3\2\2\2\u0e4d\u0e4e\7^\2\2\u0e4e\u0e4f")
        buf.write("\7\u0238\2\2\u0e4f\u0e54\5\u011a\u008e\2\u0e50\u0e51\7")
        buf.write("\u03bd\2\2\u0e51\u0e53\5\u011a\u008e\2\u0e52\u0e50\3\2")
        buf.write("\2\2\u0e53\u0e56\3\2\2\2\u0e54\u0e52\3\2\2\2\u0e54\u0e55")
        buf.write("\3\2\2\2\u0e55\u0111\3\2\2\2\u0e56\u0e54\3\2\2\2\u0e57")
        buf.write("\u0e58\7\u00a1\2\2\u0e58\u0e59\7\u0238\2\2\u0e59\u0113")
        buf.write("\3\2\2\2\u0e5a\u0e5b\7\u0089\2\2\u0e5b\u0e5c\7\u0104\2")
        buf.write("\2\u0e5c\u0e5d\7\u03b2\2\2\u0e5d\u0e5e\t\27\2\2\u0e5e")
        buf.write("\u0115\3\2\2\2\u0e5f\u0e61\7\u0089\2\2\u0e60\u0e62\t/")
        buf.write("\2\2\u0e61\u0e60\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e63")
        buf.write("\3\2\2\2\u0e63\u0e64\7\u0211\2\2\u0e64\u0e69\5\u011e\u0090")
        buf.write("\2\u0e65\u0e66\7\u03bd\2\2\u0e66\u0e68\5\u011e\u0090\2")
        buf.write("\u0e67\u0e65\3\2\2\2\u0e68\u0e6b\3\2\2\2\u0e69\u0e67\3")
        buf.write("\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0117\3\2\2\2\u0e6b\u0e69")
        buf.write("\3\2\2\2\u0e6c\u0e6d\7\u00ab\2\2\u0e6d\u0e6e\7\u0124\2")
        buf.write("\2\u0e6e\u0e74\7\u01ef\2\2\u0e6f\u0e70\7x\2\2\u0e70\u0e74")
        buf.write("\7\u00ac\2\2\u0e71\u0e72\7x\2\2\u0e72\u0e74\7\u01ad\2")
        buf.write("\2\u0e73\u0e6c\3\2\2\2\u0e73\u0e6f\3\2\2\2\u0e73\u0e71")
        buf.write("\3\2\2\2\u0e74\u0119\3\2\2\2\u0e75\u0e7a\5\u01ec\u00f7")
        buf.write("\2\u0e76\u0e78\7\17\2\2\u0e77\u0e76\3\2\2\2\u0e77\u0e78")
        buf.write("\3\2\2\2\u0e78\u0e79\3\2\2\2\u0e79\u0e7b\5\u0204\u0103")
        buf.write("\2\u0e7a\u0e77\3\2\2\2\u0e7a\u0e7b\3\2\2\2\u0e7b\u0e7c")
        buf.write("\3\2\2\2\u0e7c\u0e7d\5\u011c\u008f\2\u0e7d\u011b\3\2\2")
        buf.write("\2\u0e7e\u0e80\7x\2\2\u0e7f\u0e81\7\u0178\2\2\u0e80\u0e7f")
        buf.write("\3\2\2\2\u0e80\u0e81\3\2\2\2\u0e81\u0e87\3\2\2\2\u0e82")
        buf.write("\u0e84\7`\2\2\u0e83\u0e82\3\2\2\2\u0e83\u0e84\3\2\2\2")
        buf.write("\u0e84\u0e85\3\2\2\2\u0e85\u0e87\7\u00ac\2\2\u0e86\u0e7e")
        buf.write("\3\2\2\2\u0e86\u0e83\3\2\2\2\u0e87\u011d\3\2\2\2\u0e88")
        buf.write("\u0e89\7\u016e\2\2\u0e89\u0e8a\7\u0176\2\2\u0e8a\u0e90")
        buf.write("\5\u0120\u0091\2\u0e8b\u0e8c\7x\2\2\u0e8c\u0e90\7\u00ac")
        buf.write("\2\2\u0e8d\u0e8e\7x\2\2\u0e8e\u0e90\7\u01ad\2\2\u0e8f")
        buf.write("\u0e88\3\2\2\2\u0e8f\u0e8b\3\2\2\2\u0e8f\u0e8d\3\2\2\2")
        buf.write("\u0e90\u011f\3\2\2\2\u0e91\u0e92\7\u0274\2\2\u0e92\u0e99")
        buf.write("\7x\2\2\u0e93\u0e94\7x\2\2\u0e94\u0e99\7\u0275\2\2\u0e95")
        buf.write("\u0e96\7x\2\2\u0e96\u0e99\7\u0276\2\2\u0e97\u0e99\7\u0277")
        buf.write("\2\2\u0e98\u0e91\3\2\2\2\u0e98\u0e93\3\2\2\2\u0e98\u0e95")
        buf.write("\3\2\2\2\u0e98\u0e97\3\2\2\2\u0e99\u0121\3\2\2\2\u0e9a")
        buf.write("\u0e9b\7\31\2\2\u0e9b\u0e9c\7\u017b\2\2\u0e9c\u0e9d\7")
        buf.write("\u009a\2\2\u0e9d\u0ea2\5\u0134\u009b\2\u0e9e\u0e9f\7\u03bd")
        buf.write("\2\2\u0e9f\u0ea1\5\u0134\u009b\2\u0ea0\u0e9e\3\2\2\2\u0ea1")
        buf.write("\u0ea4\3\2\2\2\u0ea2\u0ea0\3\2\2\2\u0ea2\u0ea3\3\2\2\2")
        buf.write("\u0ea3\u0ea6\3\2\2\2\u0ea4\u0ea2\3\2\2\2\u0ea5\u0ea7\5")
        buf.write("\u013c\u009f\2\u0ea6\u0ea5\3\2\2\2\u0ea6\u0ea7\3\2\2\2")
        buf.write("\u0ea7\u0123\3\2\2\2\u0ea8\u0ea9\7\31\2\2\u0ea9\u0eaa")
        buf.write("\7\u01da\2\2\u0eaa\u0eab\7\u0150\2\2\u0eab\u0eb0\5\u013e")
        buf.write("\u00a0\2\u0eac\u0ead\7\u03bd\2\2\u0ead\u0eaf\5\u013e\u00a0")
        buf.write("\2\u0eae\u0eac\3\2\2\2\u0eaf\u0eb2\3\2\2\2\u0eb0\u0eae")
        buf.write("\3\2\2\2\u0eb0\u0eb1\3\2\2\2\u0eb1\u0125\3\2\2\2\u0eb2")
        buf.write("\u0eb0\3\2\2\2\u0eb3\u0eb4\7v\2\2\u0eb4\u0eb5\t\60\2\2")
        buf.write("\u0eb5\u0eba\7\u017a\2\2\u0eb6\u0eb7\7\u009a\2\2\u0eb7")
        buf.write("\u0ebb\7\u03ca\2\2\u0eb8\u0eb9\7\21\2\2\u0eb9\u0ebb\7")
        buf.write("\u03ca\2\2\u0eba\u0eb6\3\2\2\2\u0eba\u0eb8\3\2\2\2\u0ebb")
        buf.write("\u0127\3\2\2\2\u0ebc\u0ebd\7\u01db\2\2\u0ebd\u0ebe\7\u017b")
        buf.write("\2\2\u0ebe\u0129\3\2\2\2\u0ebf\u0ec0\7\u01db\2\2\u0ec0")
        buf.write("\u0ec2\7\u01ed\2\2\u0ec1\u0ec3\7\n\2\2\u0ec2\u0ec1\3\2")
        buf.write("\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3\u0ec5\3\2\2\2\u0ec4\u0ec6")
        buf.write("\5\u013c\u009f\2\u0ec5\u0ec4\3\2\2\2\u0ec5\u0ec6\3\2\2")
        buf.write("\2\u0ec6\u012b\3\2\2\2\u0ec7\u0ec8\7\u01fc\2\2\u0ec8\u0ed1")
        buf.write("\7\u01ed\2\2\u0ec9\u0ece\5\u0142\u00a2\2\u0eca\u0ecb\7")
        buf.write("\u03bd\2\2\u0ecb\u0ecd\5\u0142\u00a2\2\u0ecc\u0eca\3\2")
        buf.write("\2\2\u0ecd\u0ed0\3\2\2\2\u0ece\u0ecc\3\2\2\2\u0ece\u0ecf")
        buf.write("\3\2\2\2\u0ecf\u0ed2\3\2\2\2\u0ed0\u0ece\3\2\2\2\u0ed1")
        buf.write("\u0ec9\3\2\2\2\u0ed1\u0ed2\3\2\2\2\u0ed2\u0ed5\3\2\2\2")
        buf.write("\u0ed3\u0ed4\7\u0219\2\2\u0ed4\u0ed6\5\u0144\u00a3\2\u0ed5")
        buf.write("\u0ed3\3\2\2\2\u0ed5\u0ed6\3\2\2\2\u0ed6\u0eda\3\2\2\2")
        buf.write("\u0ed7\u0ed9\5\u0146\u00a4\2\u0ed8\u0ed7\3\2\2\2\u0ed9")
        buf.write("\u0edc\3\2\2\2\u0eda\u0ed8\3\2\2\2\u0eda\u0edb\3\2\2\2")
        buf.write("\u0edb\u0ede\3\2\2\2\u0edc\u0eda\3\2\2\2\u0edd\u0edf\5")
        buf.write("\u013c\u009f\2\u0ede\u0edd\3\2\2\2\u0ede\u0edf\3\2\2\2")
        buf.write("\u0edf\u012d\3\2\2\2\u0ee0\u0ee1\7\u0202\2\2\u0ee1\u0eea")
        buf.write("\7\u01ed\2\2\u0ee2\u0ee7\5\u0142\u00a2\2\u0ee3\u0ee4\7")
        buf.write("\u03bd\2\2\u0ee4\u0ee6\5\u0142\u00a2\2\u0ee5\u0ee3\3\2")
        buf.write("\2\2\u0ee6\u0ee9\3\2\2\2\u0ee7\u0ee5\3\2\2\2\u0ee7\u0ee8")
        buf.write("\3\2\2\2\u0ee8\u0eeb\3\2\2\2\u0ee9\u0ee7\3\2\2\2\u0eea")
        buf.write("\u0ee2\3\2\2\2\u0eea\u0eeb\3\2\2\2\u0eeb\u012f\3\2\2\2")
        buf.write("\u0eec\u0eed\7\u01fc\2\2\u0eed\u0eee\7\u015b\2\2\u0eee")
        buf.write("\u0131\3\2\2\2\u0eef\u0ef0\7\u0202\2\2\u0ef0\u0ef1\7\u015b")
        buf.write("\2\2\u0ef1\u0133\3\2\2\2\u0ef2\u0ef3\5\u0136\u009c\2\u0ef3")
        buf.write("\u0ef4\7\u03b2\2\2\u0ef4\u0ef5\7\u03ca\2\2\u0ef5\u0f10")
        buf.write("\3\2\2\2\u0ef6\u0ef7\5\u0138\u009d\2\u0ef7\u0ef8\7\u03b2")
        buf.write("\2\2\u0ef8\u0ef9\5\u020a\u0106\2\u0ef9\u0f10\3\2\2\2\u0efa")
        buf.write("\u0efb\5\u013a\u009e\2\u0efb\u0efc\7\u03b2\2\2\u0efc\u0efd")
        buf.write("\t\27\2\2\u0efd\u0f10\3\2\2\2\u0efe\u0eff\7\u017f\2\2")
        buf.write("\u0eff\u0f00\7\u03b2\2\2\u0f00\u0f10\7\u03cd\2\2\u0f01")
        buf.write("\u0f02\7\u0162\2\2\u0f02\u0f03\7\u03b2\2\2\u0f03\u0f0c")
        buf.write("\7\u03bb\2\2\u0f04\u0f09\5\u0204\u0103\2\u0f05\u0f06\7")
        buf.write("\u03bd\2\2\u0f06\u0f08\5\u0204\u0103\2\u0f07\u0f05\3\2")
        buf.write("\2\2\u0f08\u0f0b\3\2\2\2\u0f09\u0f07\3\2\2\2\u0f09\u0f0a")
        buf.write("\3\2\2\2\u0f0a\u0f0d\3\2\2\2\u0f0b\u0f09\3\2\2\2\u0f0c")
        buf.write("\u0f04\3\2\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u0f0e\3\2\2\2")
        buf.write("\u0f0e\u0f10\7\u03bc\2\2\u0f0f\u0ef2\3\2\2\2\u0f0f\u0ef6")
        buf.write("\3\2\2\2\u0f0f\u0efa\3\2\2\2\u0f0f\u0efe\3\2\2\2\u0f0f")
        buf.write("\u0f01\3\2\2\2\u0f10\u0135\3\2\2\2\u0f11\u0f12\t\61\2")
        buf.write("\2\u0f12\u0137\3\2\2\2\u0f13\u0f14\t\62\2\2\u0f14\u0139")
        buf.write("\3\2\2\2\u0f15\u0f16\t\63\2\2\u0f16\u013b\3\2\2\2\u0f17")
        buf.write("\u0f18\7<\2\2\u0f18\u0f19\7\u0113\2\2\u0f19\u0f1a\7\u03ca")
        buf.write("\2\2\u0f1a\u013d\3\2\2\2\u0f1b\u0f1c\7\u01d3\2\2\u0f1c")
        buf.write("\u0f1d\7\u03b2\2\2\u0f1d\u0f1e\7\u03bb\2\2\u0f1e\u0f1f")
        buf.write("\5\u0222\u0112\2\u0f1f\u0f20\7\u03bc\2\2\u0f20\u0f4d\3")
        buf.write("\2\2\2\u0f21\u0f22\7\u01d5\2\2\u0f22\u0f23\7\u03b2\2\2")
        buf.write("\u0f23\u0f24\7\u03bb\2\2\u0f24\u0f25\5\u0222\u0112\2\u0f25")
        buf.write("\u0f26\7\u03bc\2\2\u0f26\u0f4d\3\2\2\2\u0f27\u0f28\7\u01d4")
        buf.write("\2\2\u0f28\u0f29\7\u03b2\2\2\u0f29\u0f2a\7\u03bb\2\2\u0f2a")
        buf.write("\u0f2b\5\u0224\u0113\2\u0f2b\u0f2c\7\u03bc\2\2\u0f2c\u0f4d")
        buf.write("\3\2\2\2\u0f2d\u0f2e\7\u01d6\2\2\u0f2e\u0f2f\7\u03b2\2")
        buf.write("\2\u0f2f\u0f30\7\u03bb\2\2\u0f30\u0f31\5\u0224\u0113\2")
        buf.write("\u0f31\u0f32\7\u03bc\2\2\u0f32\u0f4d\3\2\2\2\u0f33\u0f34")
        buf.write("\7\u01d8\2\2\u0f34\u0f35\7\u03b2\2\2\u0f35\u0f36\7\u03bb")
        buf.write("\2\2\u0f36\u0f37\5\u022e\u0118\2\u0f37\u0f38\7\u03bc\2")
        buf.write("\2\u0f38\u0f4d\3\2\2\2\u0f39\u0f3a\7\u01d9\2\2\u0f3a\u0f3b")
        buf.write("\7\u03b2\2\2\u0f3b\u0f3c\7\u03bb\2\2\u0f3c\u0f3d\5\u022e")
        buf.write("\u0118\2\u0f3d\u0f3e\7\u03bc\2\2\u0f3e\u0f4d\3\2\2\2\u0f3f")
        buf.write("\u0f40\7\u01d7\2\2\u0f40\u0f41\7\u03b2\2\2\u0f41\u0f42")
        buf.write("\7\u03bb\2\2\u0f42\u0f47\5\u0140\u00a1\2\u0f43\u0f44\7")
        buf.write("\u03bd\2\2\u0f44\u0f46\5\u0140\u00a1\2\u0f45\u0f43\3\2")
        buf.write("\2\2\u0f46\u0f49\3\2\2\2\u0f47\u0f45\3\2\2\2\u0f47\u0f48")
        buf.write("\3\2\2\2\u0f48\u0f4a\3\2\2\2\u0f49\u0f47\3\2\2\2\u0f4a")
        buf.write("\u0f4b\7\u03bc\2\2\u0f4b\u0f4d\3\2\2\2\u0f4c\u0f1b\3\2")
        buf.write("\2\2\u0f4c\u0f21\3\2\2\2\u0f4c\u0f27\3\2\2\2\u0f4c\u0f2d")
        buf.write("\3\2\2\2\u0f4c\u0f33\3\2\2\2\u0f4c\u0f39\3\2\2\2\u0f4c")
        buf.write("\u0f3f\3\2\2\2\u0f4d\u013f\3\2\2\2\u0f4e\u0f4f\7\u03bb")
        buf.write("\2\2\u0f4f\u0f50\5\u01ec\u00f7\2\u0f50\u0f51\7\u03bd\2")
        buf.write("\2\u0f51\u0f52\5\u01ec\u00f7\2\u0f52\u0f53\7\u03bc\2\2")
        buf.write("\u0f53\u0141\3\2\2\2\u0f54\u0f55\t\64\2\2\u0f55\u0143")
        buf.write("\3\2\2\2\u0f56\u0f57\t\65\2\2\u0f57\u0f58\7\u03b2\2\2")
        buf.write("\u0f58\u0f69\5\u0148\u00a5\2\u0f59\u0f5a\7\u0181\2\2\u0f5a")
        buf.write("\u0f5b\7\u03b2\2\2\u0f5b\u0f5c\7\u03ca\2\2\u0f5c\u0f5d")
        buf.write("\7\u03bd\2\2\u0f5d\u0f5e\7\u0182\2\2\u0f5e\u0f5f\7\u03b2")
        buf.write("\2\2\u0f5f\u0f69\5\u020a\u0106\2\u0f60\u0f61\7\u01cd\2")
        buf.write("\2\u0f61\u0f62\7\u03b2\2\2\u0f62\u0f63\7\u03ca\2\2\u0f63")
        buf.write("\u0f64\7\u03bd\2\2\u0f64\u0f65\7\u01ce\2\2\u0f65\u0f66")
        buf.write("\7\u03b2\2\2\u0f66\u0f69\5\u020a\u0106\2\u0f67\u0f69\7")
        buf.write("\u01f6\2\2\u0f68\u0f56\3\2\2\2\u0f68\u0f59\3\2\2\2\u0f68")
        buf.write("\u0f60\3\2\2\2\u0f68\u0f67\3\2\2\2\u0f69\u0145\3\2\2\2")
        buf.write("\u0f6a\u0f6b\7\u021b\2\2\u0f6b\u0f6c\7\u03b2\2\2\u0f6c")
        buf.write("\u0f77\7\u03ca\2\2\u0f6d\u0f6e\7\u01b8\2\2\u0f6e\u0f6f")
        buf.write("\7\u03b2\2\2\u0f6f\u0f77\7\u03ca\2\2\u0f70\u0f71\7\u012d")
        buf.write("\2\2\u0f71\u0f72\7\u03b2\2\2\u0f72\u0f77\7\u03ca\2\2\u0f73")
        buf.write("\u0f74\7\u01bb\2\2\u0f74\u0f75\7\u03b2\2\2\u0f75\u0f77")
        buf.write("\7\u03ca\2\2\u0f76\u0f6a\3\2\2\2\u0f76\u0f6d\3\2\2\2\u0f76")
        buf.write("\u0f70\3\2\2\2\u0f76\u0f73\3\2\2\2\u0f77\u0147\3\2\2\2")
        buf.write("\u0f78\u0f7d\5\u01fc\u00ff\2\u0f79\u0f7a\7\u03bd\2\2\u0f7a")
        buf.write("\u0f7c\5\u01fc\u00ff\2\u0f7b\u0f79\3\2\2\2\u0f7c\u0f7f")
        buf.write("\3\2\2\2\u0f7d\u0f7b\3\2\2\2\u0f7d\u0f7e\3\2\2\2\u0f7e")
        buf.write("\u0f82\3\2\2\2\u0f7f\u0f7d\3\2\2\2\u0f80\u0f82\7\u03ca")
        buf.write("\2\2\u0f81\u0f78\3\2\2\2\u0f81\u0f80\3\2\2\2\u0f82\u0149")
        buf.write("\3\2\2\2\u0f83\u0f84\7\u0229\2\2\u0f84\u0f85\t\66\2\2")
        buf.write("\u0f85\u0f87\5\u01fe\u0100\2\u0f86\u0f88\t\67\2\2\u0f87")
        buf.write("\u0f86\3\2\2\2\u0f87\u0f88\3\2\2\2\u0f88\u014b\3\2\2\2")
        buf.write("\u0f89\u0f8a\7\u0229\2\2\u0f8a\u0f8b\7\u013b\2\2\u0f8b")
        buf.write("\u0f91\5\u01fe\u0100\2\u0f8c\u0f8f\7\u0209\2\2\u0f8d\u0f8e")
        buf.write("\7<\2\2\u0f8e\u0f90\7\u0199\2\2\u0f8f\u0f8d\3\2\2\2\u0f8f")
        buf.write("\u0f90\3\2\2\2\u0f90\u0f92\3\2\2\2\u0f91\u0f8c\3\2\2\2")
        buf.write("\u0f91\u0f92\3\2\2\2\u0f92\u014d\3\2\2\2\u0f93\u0f94\7")
        buf.write("\u0229\2\2\u0f94\u0f95\7\u01bf\2\2\u0f95\u0f96\5\u01fe")
        buf.write("\u0100\2\u0f96\u014f\3\2\2\2\u0f97\u0f98\7\u0229\2\2\u0f98")
        buf.write("\u0f99\7\u011d\2\2\u0f99\u0f9c\5\u01fe\u0100\2\u0f9a\u0f9b")
        buf.write("\7\u01ab\2\2\u0f9b\u0f9d\7\u01b9\2\2\u0f9c\u0f9a\3\2\2")
        buf.write("\2\u0f9c\u0f9d\3\2\2\2\u0f9d\u0151\3\2\2\2\u0f9e\u0f9f")
        buf.write("\7\u0229\2\2\u0f9f\u0fa0\7\u01de\2\2\u0fa0\u0fa1\5\u01fe")
        buf.write("\u0100\2\u0fa1\u0153\3\2\2\2\u0fa2\u0fa3\7\u0229\2\2\u0fa3")
        buf.write("\u0fa6\7\u01c9\2\2\u0fa4\u0fa5\7!\2\2\u0fa5\u0fa7\5\u01fe")
        buf.write("\u0100\2\u0fa6\u0fa4\3\2\2\2\u0fa6\u0fa7\3\2\2\2\u0fa7")
        buf.write("\u0155\3\2\2\2\u0fa8\u0fa9\7\u01bf\2\2\u0fa9\u0faa\5\u0204")
        buf.write("\u0103\2\u0faa\u0fad\7?\2\2\u0fab\u0fae\7\u03ca\2\2\u0fac")
        buf.write("\u0fae\7\u03d5\2\2\u0fad\u0fab\3\2\2\2\u0fad\u0fac\3\2")
        buf.write("\2\2\u0fae\u0157\3\2\2\2\u0faf\u0fb0\7\u023a\2\2\u0fb0")
        buf.write("\u0fb3\5\u0204\u0103\2\u0fb1\u0fb2\7\u00a6\2\2\u0fb2\u0fb4")
        buf.write("\5\u0230\u0119\2\u0fb3\u0fb1\3\2\2\2\u0fb3\u0fb4\3\2\2")
        buf.write("\2\u0fb4\u0159\3\2\2\2\u0fb5\u0fb6\t8\2\2\u0fb6\u0fb7")
        buf.write("\7\u01bf\2\2\u0fb7\u0fb8\5\u0204\u0103\2\u0fb8\u015b\3")
        buf.write("\2\2\2\u0fb9\u0fbc\5\u015e\u00b0\2\u0fba\u0fbc\5\6\4\2")
        buf.write("\u0fbb\u0fb9\3\2\2\2\u0fbb\u0fba\3\2\2\2\u0fbc\u015d\3")
        buf.write("\2\2\2\u0fbd\u0fbe\5\u0204\u0103\2\u0fbe\u0fbf\7\u03c6")
        buf.write("\2\2\u0fbf\u0fc1\3\2\2\2\u0fc0\u0fbd\3\2\2\2\u0fc0\u0fc1")
        buf.write("\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fe8\7\u0108\2\2\u0fc3")
        buf.write("\u0fc4\5\u0172\u00ba\2\u0fc4\u0fc5\7\u03be\2\2\u0fc5\u0fc7")
        buf.write("\3\2\2\2\u0fc6\u0fc3\3\2\2\2\u0fc7\u0fca\3\2\2\2\u0fc8")
        buf.write("\u0fc6\3\2\2\2\u0fc8\u0fc9\3\2\2\2\u0fc9\u0fd0\3\2\2\2")
        buf.write("\u0fca\u0fc8\3\2\2\2\u0fcb\u0fcc\5\u0174\u00bb\2\u0fcc")
        buf.write("\u0fcd\7\u03be\2\2\u0fcd\u0fcf\3\2\2\2\u0fce\u0fcb\3\2")
        buf.write("\2\2\u0fcf\u0fd2\3\2\2\2\u0fd0\u0fce\3\2\2\2\u0fd0\u0fd1")
        buf.write("\3\2\2\2\u0fd1\u0fd8\3\2\2\2\u0fd2\u0fd0\3\2\2\2\u0fd3")
        buf.write("\u0fd4\5\u0176\u00bc\2\u0fd4\u0fd5\7\u03be\2\2\u0fd5\u0fd7")
        buf.write("\3\2\2\2\u0fd6\u0fd3\3\2\2\2\u0fd7\u0fda\3\2\2\2\u0fd8")
        buf.write("\u0fd6\3\2\2\2\u0fd8\u0fd9\3\2\2\2\u0fd9\u0fe0\3\2\2\2")
        buf.write("\u0fda\u0fd8\3\2\2\2\u0fdb\u0fdc\5\u0178\u00bd\2\u0fdc")
        buf.write("\u0fdd\7\u03be\2\2\u0fdd\u0fdf\3\2\2\2\u0fde\u0fdb\3\2")
        buf.write("\2\2\u0fdf\u0fe2\3\2\2\2\u0fe0\u0fde\3\2\2\2\u0fe0\u0fe1")
        buf.write("\3\2\2\2\u0fe1\u0fe4\3\2\2\2\u0fe2\u0fe0\3\2\2\2\u0fe3")
        buf.write("\u0fe5\5\u017c\u00bf\2\u0fe4\u0fe3\3\2\2\2\u0fe5\u0fe6")
        buf.write("\3\2\2\2\u0fe6\u0fe4\3\2\2\2\u0fe6\u0fe7\3\2\2\2\u0fe7")
        buf.write("\u0fe9\3\2\2\2\u0fe8\u0fc8\3\2\2\2\u0fe8\u0fe9\3\2\2\2")
        buf.write("\u0fe9\u0fea\3\2\2\2\u0fea\u0fec\7\u013b\2\2\u0feb\u0fed")
        buf.write("\5\u0204\u0103\2\u0fec\u0feb\3\2\2\2\u0fec\u0fed\3\2\2")
        buf.write("\2\u0fed\u015f\3\2\2\2\u0fee\u0ff1\7\27\2\2\u0fef\u0ff2")
        buf.write("\5\u0204\u0103\2\u0ff0\u0ff2\5\u0250\u0129\2\u0ff1\u0fef")
        buf.write("\3\2\2\2\u0ff1\u0ff0\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2")
        buf.write("\u0ff4\3\2\2\2\u0ff3\u0ff5\5\u017e\u00c0\2\u0ff4\u0ff3")
        buf.write("\3\2\2\2\u0ff5\u0ff6\3\2\2\2\u0ff6\u0ff4\3\2\2\2\u0ff6")
        buf.write("\u0ff7\3\2\2\2\u0ff7\u0ffe\3\2\2\2\u0ff8\u0ffa\7\63\2")
        buf.write("\2\u0ff9\u0ffb\5\u017c\u00bf\2\u0ffa\u0ff9\3\2\2\2\u0ffb")
        buf.write("\u0ffc\3\2\2\2\u0ffc\u0ffa\3\2\2\2\u0ffc\u0ffd\3\2\2\2")
        buf.write("\u0ffd\u0fff\3\2\2\2\u0ffe\u0ff8\3\2\2\2\u0ffe\u0fff\3")
        buf.write("\2\2\2\u0fff\u1000\3\2\2\2\u1000\u1001\7\u013b\2\2\u1001")
        buf.write("\u1002\7\27\2\2\u1002\u0161\3\2\2\2\u1003\u1004\7F\2\2")
        buf.write("\u1004\u1005\5\u0250\u0129\2\u1005\u1007\7\u0099\2\2\u1006")
        buf.write("\u1008\5\u017c\u00bf\2\u1007\u1006\3\2\2\2\u1008\u1009")
        buf.write("\3\2\2\2\u1009\u1007\3\2\2\2\u1009\u100a\3\2\2\2\u100a")
        buf.write("\u100e\3\2\2\2\u100b\u100d\5\u0180\u00c1\2\u100c\u100b")
        buf.write("\3\2\2\2\u100d\u1010\3\2\2\2\u100e\u100c\3\2\2\2\u100e")
        buf.write("\u100f\3\2\2\2\u100f\u1017\3\2\2\2\u1010\u100e\3\2\2\2")
        buf.write("\u1011\u1013\7\63\2\2\u1012\u1014\5\u017c\u00bf\2\u1013")
        buf.write("\u1012\3\2\2\2\u1014\u1015\3\2\2\2\u1015\u1013\3\2\2\2")
        buf.write("\u1015\u1016\3\2\2\2\u1016\u1018\3\2\2\2\u1017\u1011\3")
        buf.write("\2\2\2\u1017\u1018\3\2\2\2\u1018\u1019\3\2\2\2\u1019\u101a")
        buf.write("\7\u013b\2\2\u101a\u101b\7F\2\2\u101b\u0163\3\2\2\2\u101c")
        buf.write("\u101d\7Q\2\2\u101d\u101e\5\u0204\u0103\2\u101e\u0165")
        buf.write("\3\2\2\2\u101f\u1020\7W\2\2\u1020\u1021\5\u0204\u0103")
        buf.write("\2\u1021\u0167\3\2\2\2\u1022\u1023\5\u0204\u0103\2\u1023")
        buf.write("\u1024\7\u03c6\2\2\u1024\u1026\3\2\2\2\u1025\u1022\3\2")
        buf.write("\2\2\u1025\u1026\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u1029")
        buf.write("\7_\2\2\u1028\u102a\5\u017c\u00bf\2\u1029\u1028\3\2\2")
        buf.write("\2\u102a\u102b\3\2\2\2\u102b\u1029\3\2\2\2\u102b\u102c")
        buf.write("\3\2\2\2\u102c\u102d\3\2\2\2\u102d\u102e\7\u013b\2\2\u102e")
        buf.write("\u1030\7_\2\2\u102f\u1031\5\u0204\u0103\2\u1030\u102f")
        buf.write("\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u0169\3\2\2\2\u1032")
        buf.write("\u1033\5\u0204\u0103\2\u1033\u1034\7\u03c6\2\2\u1034\u1036")
        buf.write("\3\2\2\2\u1035\u1032\3\2\2\2\u1035\u1036\3\2\2\2\u1036")
        buf.write("\u1037\3\2\2\2\u1037\u1039\7~\2\2\u1038\u103a\5\u017c")
        buf.write("\u00bf\2\u1039\u1038\3\2\2\2\u103a\u103b\3\2\2\2\u103b")
        buf.write("\u1039\3\2\2\2\u103b\u103c\3\2\2\2\u103c\u103d\3\2\2\2")
        buf.write("\u103d\u103e\7\u0219\2\2\u103e\u103f\5\u0250\u0129\2\u103f")
        buf.write("\u1040\7\u013b\2\2\u1040\u1042\7~\2\2\u1041\u1043\5\u0204")
        buf.write("\u0103\2\u1042\u1041\3\2\2\2\u1042\u1043\3\2\2\2\u1043")
        buf.write("\u016b\3\2\2\2\u1044\u1045\7\u0082\2\2\u1045\u1046\5\u0250")
        buf.write("\u0129\2\u1046\u016d\3\2\2\2\u1047\u1048\5\u0204\u0103")
        buf.write("\2\u1048\u1049\7\u03c6\2\2\u1049\u104b\3\2\2\2\u104a\u1047")
        buf.write("\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104c\3\2\2\2\u104c")
        buf.write("\u104d\7\u00aa\2\2\u104d\u104e\5\u0250\u0129\2\u104e\u1050")
        buf.write("\7\u0135\2\2\u104f\u1051\5\u017c\u00bf\2\u1050\u104f\3")
        buf.write("\2\2\2\u1051\u1052\3\2\2\2\u1052\u1050\3\2\2\2\u1052\u1053")
        buf.write("\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1055\7\u013b\2\2\u1055")
        buf.write("\u1057\7\u00aa\2\2\u1056\u1058\5\u0204\u0103\2\u1057\u1056")
        buf.write("\3\2\2\2\u1057\u1058\3\2\2\2\u1058\u016f\3\2\2\2\u1059")
        buf.write("\u105a\7\u0117\2\2\u105a\u1069\5\u0204\u0103\2\u105b\u1060")
        buf.write("\7;\2\2\u105c\u105e\7\u01a3\2\2\u105d\u105c\3\2\2\2\u105d")
        buf.write("\u105e\3\2\2\2\u105e\u105f\3\2\2\2\u105f\u1061\7?\2\2")
        buf.write("\u1060\u105d\3\2\2\2\u1060\u1061\3\2\2\2\u1061\u1062\3")
        buf.write("\2\2\2\u1062\u1063\5\u0204\u0103\2\u1063\u1064\7O\2\2")
        buf.write("\u1064\u1065\5\u0222\u0112\2\u1065\u1069\3\2\2\2\u1066")
        buf.write("\u1067\7\u01ae\2\2\u1067\u1069\5\u0204\u0103\2\u1068\u1059")
        buf.write("\3\2\2\2\u1068\u105b\3\2\2\2\u1068\u1066\3\2\2\2\u1069")
        buf.write("\u0171\3\2\2\2\u106a\u106b\7(\2\2\u106b\u106c\5\u0222")
        buf.write("\u0112\2\u106c\u106f\5\u0218\u010d\2\u106d\u106e\7)\2")
        buf.write("\2\u106e\u1070\5\u0232\u011a\2\u106f\u106d\3\2\2\2\u106f")
        buf.write("\u1070\3\2\2\2\u1070\u0173\3\2\2\2\u1071\u1072\7(\2\2")
        buf.write("\u1072\u1073\5\u0204\u0103\2\u1073\u1074\7\36\2\2\u1074")
        buf.write("\u107b\7<\2\2\u1075\u107c\5\u020a\u0106\2\u1076\u1078")
        buf.write("\7\u008f\2\2\u1077\u1079\7\u021f\2\2\u1078\u1077\3\2\2")
        buf.write("\2\u1078\u1079\3\2\2\2\u1079\u107a\3\2\2\2\u107a\u107c")
        buf.write("\7\u03ca\2\2\u107b\u1075\3\2\2\2\u107b\u1076\3\2\2\2\u107c")
        buf.write("\u0175\3\2\2\2\u107d\u107e\7(\2\2\u107e\u107f\5\u0204")
        buf.write("\u0103\2\u107f\u1080\7%\2\2\u1080\u1081\7<\2\2\u1081\u1082")
        buf.write("\5\u00b4[\2\u1082\u0177\3\2\2\2\u1083\u1084\7(\2\2\u1084")
        buf.write("\u1085\t9\2\2\u1085\u1086\7\u015c\2\2\u1086\u1087\7<\2")
        buf.write("\2\u1087\u108c\5\u017a\u00be\2\u1088\u1089\7\u03bd\2\2")
        buf.write("\u1089\u108b\5\u017a\u00be\2\u108a\u1088\3\2\2\2\u108b")
        buf.write("\u108e\3\2\2\2\u108c\u108a\3\2\2\2\u108c\u108d\3\2\2\2")
        buf.write("\u108d\u108f\3\2\2\2\u108e\u108c\3\2\2\2\u108f\u1090\5")
        buf.write("\u015c\u00af\2\u1090\u0179\3\2\2\2\u1091\u109d\5\u020a")
        buf.write("\u0106\2\u1092\u1094\7\u008f\2\2\u1093\u1095\7\u021f\2")
        buf.write("\2\u1094\u1093\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u1096")
        buf.write("\3\2\2\2\u1096\u109d\7\u03ca\2\2\u1097\u109d\5\u0204\u0103")
        buf.write("\2\u1098\u109d\7\u0090\2\2\u1099\u109a\7g\2\2\u109a\u109d")
        buf.write("\7\u0155\2\2\u109b\u109d\7\u008e\2\2\u109c\u1091\3\2\2")
        buf.write("\2\u109c\u1092\3\2\2\2\u109c\u1097\3\2\2\2\u109c\u1098")
        buf.write("\3\2\2\2\u109c\u1099\3\2\2\2\u109c\u109b\3\2\2\2\u109d")
        buf.write("\u017b\3\2\2\2\u109e\u10a1\5\24\13\2\u109f\u10a1\5\6\4")
        buf.write("\2\u10a0\u109e\3\2\2\2\u10a0\u109f\3\2\2\2\u10a1\u10a2")
        buf.write("\3\2\2\2\u10a2\u10a3\7\u03be\2\2\u10a3\u017d\3\2\2\2\u10a4")
        buf.write("\u10a7\7\u00a8\2\2\u10a5\u10a8\5\u0216\u010c\2\u10a6\u10a8")
        buf.write("\5\u0250\u0129\2\u10a7\u10a5\3\2\2\2\u10a7\u10a6\3\2\2")
        buf.write("\2\u10a8\u10a9\3\2\2\2\u10a9\u10ab\7\u0099\2\2\u10aa\u10ac")
        buf.write("\5\u017c\u00bf\2\u10ab\u10aa\3\2\2\2\u10ac\u10ad\3\2\2")
        buf.write("\2\u10ad\u10ab\3\2\2\2\u10ad\u10ae\3\2\2\2\u10ae\u017f")
        buf.write("\3\2\2\2\u10af\u10b0\7\64\2\2\u10b0\u10b1\5\u0250\u0129")
        buf.write("\2\u10b1\u10b3\7\u0099\2\2\u10b2\u10b4\5\u017c\u00bf\2")
        buf.write("\u10b3\u10b2\3\2\2\2\u10b4\u10b5\3\2\2\2\u10b5\u10b3\3")
        buf.write("\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u0181\3\2\2\2\u10b7\u10b8")
        buf.write("\7\13\2\2\u10b8\u10b9\7\u021b\2\2\u10b9\u10be\5\u0194")
        buf.write("\u00cb\2\u10ba\u10bb\7\u03bd\2\2\u10bb\u10bd\5\u0194\u00cb")
        buf.write("\2\u10bc\u10ba\3\2\2\2\u10bd\u10c0\3\2\2\2\u10be\u10bc")
        buf.write("\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u10ee\3\2\2\2\u10c0")
        buf.write("\u10be\3\2\2\2\u10c1\u10c2\7\13\2\2\u10c2\u10c4\7\u021b")
        buf.write("\2\2\u10c3\u10c5\5\u0238\u011d\2\u10c4\u10c3\3\2\2\2\u10c4")
        buf.write("\u10c5\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6\u10cb\5\u0196")
        buf.write("\u00cc\2\u10c7\u10c8\7\u03bd\2\2\u10c8\u10ca\5\u0196\u00cc")
        buf.write("\2\u10c9\u10c7\3\2\2\2\u10ca\u10cd\3\2\2\2\u10cb\u10c9")
        buf.write("\3\2\2\2\u10cb\u10cc\3\2\2\2\u10cc\u10dc\3\2\2\2\u10cd")
        buf.write("\u10cb\3\2\2\2\u10ce\u10da\7\u0080\2\2\u10cf\u10db\7\u01a6")
        buf.write("\2\2\u10d0\u10d7\5\u0198\u00cd\2\u10d1\u10d3\7\16\2\2")
        buf.write("\u10d2\u10d1\3\2\2\2\u10d2\u10d3\3\2\2\2\u10d3\u10d4\3")
        buf.write("\2\2\2\u10d4\u10d6\5\u0198\u00cd\2\u10d5\u10d2\3\2\2\2")
        buf.write("\u10d6\u10d9\3\2\2\2\u10d7\u10d5\3\2\2\2\u10d7\u10d8\3")
        buf.write("\2\2\2\u10d8\u10db\3\2\2\2\u10d9\u10d7\3\2\2\2\u10da\u10cf")
        buf.write("\3\2\2\2\u10da\u10d0\3\2\2\2\u10db\u10dd\3\2\2\2\u10dc")
        buf.write("\u10ce\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10e4\3\2\2\2")
        buf.write("\u10de\u10e0\7\u00ab\2\2\u10df\u10e1\5\u019a\u00ce\2\u10e0")
        buf.write("\u10df\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e0\3\2\2\2")
        buf.write("\u10e2\u10e3\3\2\2\2\u10e3\u10e5\3\2\2\2\u10e4\u10de\3")
        buf.write("\2\2\2\u10e4\u10e5\3\2\2\2\u10e5\u10ea\3\2\2\2\u10e6\u10e9")
        buf.write("\5\u019c\u00cf\2\u10e7\u10e9\5\u019e\u00d0\2\u10e8\u10e6")
        buf.write("\3\2\2\2\u10e8\u10e7\3\2\2\2\u10e9\u10ec\3\2\2\2\u10ea")
        buf.write("\u10e8\3\2\2\2\u10ea\u10eb\3\2\2\2\u10eb\u10ee\3\2\2\2")
        buf.write("\u10ec\u10ea\3\2\2\2\u10ed\u10b7\3\2\2\2\u10ed\u10c1\3")
        buf.write("\2\2\2\u10ee\u0183\3\2\2\2\u10ef\u10f0\7\"\2\2\u10f0\u10f1")
        buf.write("\7\u021b\2\2\u10f1\u10f6\5\u0196\u00cc\2\u10f2\u10f3\7")
        buf.write("\u03bd\2\2\u10f3\u10f5\5\u0196\u00cc\2\u10f4\u10f2\3\2")
        buf.write("\2\2\u10f5\u10f8\3\2\2\2\u10f6\u10f4\3\2\2\2\u10f6\u10f7")
        buf.write("\3\2\2\2\u10f7\u1126\3\2\2\2\u10f8\u10f6\3\2\2\2\u10f9")
        buf.write("\u10fa\7\"\2\2\u10fa\u10fc\7\u021b\2\2\u10fb\u10fd\5\u023a")
        buf.write("\u011e\2\u10fc\u10fb\3\2\2\2\u10fc\u10fd\3\2\2\2\u10fd")
        buf.write("\u10fe\3\2\2\2\u10fe\u1103\5\u0196\u00cc\2\u10ff\u1100")
        buf.write("\7\u03bd\2\2\u1100\u1102\5\u0196\u00cc\2\u1101\u10ff\3")
        buf.write("\2\2\2\u1102\u1105\3\2\2\2\u1103\u1101\3\2\2\2\u1103\u1104")
        buf.write("\3\2\2\2\u1104\u1114\3\2\2\2\u1105\u1103\3\2\2\2\u1106")
        buf.write("\u1112\7\u0080\2\2\u1107\u1113\7\u01a6\2\2\u1108\u110f")
        buf.write("\5\u0198\u00cd\2\u1109\u110b\7\16\2\2\u110a\u1109\3\2")
        buf.write("\2\2\u110a\u110b\3\2\2\2\u110b\u110c\3\2\2\2\u110c\u110e")
        buf.write("\5\u0198\u00cd\2\u110d\u110a\3\2\2\2\u110e\u1111\3\2\2")
        buf.write("\2\u110f\u110d\3\2\2\2\u110f\u1110\3\2\2\2\u1110\u1113")
        buf.write("\3\2\2\2\u1111\u110f\3\2\2\2\u1112\u1107\3\2\2\2\u1112")
        buf.write("\u1108\3\2\2\2\u1113\u1115\3\2\2\2\u1114\u1106\3\2\2\2")
        buf.write("\u1114\u1115\3\2\2\2\u1115\u111c\3\2\2\2\u1116\u1118\7")
        buf.write("\u00ab\2\2\u1117\u1119\5\u019a\u00ce\2\u1118\u1117\3\2")
        buf.write("\2\2\u1119\u111a\3\2\2\2\u111a\u1118\3\2\2\2\u111a\u111b")
        buf.write("\3\2\2\2\u111b\u111d\3\2\2\2\u111c\u1116\3\2\2\2\u111c")
        buf.write("\u111d\3\2\2\2\u111d\u1122\3\2\2\2\u111e\u1121\5\u019c")
        buf.write("\u00cf\2\u111f\u1121\5\u019e\u00d0\2\u1120\u111e\3\2\2")
        buf.write("\2\u1120\u111f\3\2\2\2\u1121\u1124\3\2\2\2\u1122\u1120")
        buf.write("\3\2\2\2\u1122\u1123\3\2\2\2\u1123\u1126\3\2\2\2\u1124")
        buf.write("\u1122\3\2\2\2\u1125\u10ef\3\2\2\2\u1125\u10f9\3\2\2\2")
        buf.write("\u1126\u0185\3\2\2\2\u1127\u1128\7\61\2\2\u1128\u112a")
        buf.write("\7\u021b\2\2\u1129\u112b\5\u0238\u011d\2\u112a\u1129\3")
        buf.write("\2\2\2\u112a\u112b\3\2\2\2\u112b\u112c\3\2\2\2\u112c\u1131")
        buf.write("\5\u01f2\u00fa\2\u112d\u112e\7\u03bd\2\2\u112e\u1130\5")
        buf.write("\u01f2\u00fa\2\u112f\u112d\3\2\2\2\u1130\u1133\3\2\2\2")
        buf.write("\u1131\u112f\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u0187\3")
        buf.write("\2\2\2\u1133\u1131\3\2\2\2\u1134\u1135\7B\2\2\u1135\u113a")
        buf.write("\5\u01a0\u00d1\2\u1136\u1137\7\u03bd\2\2\u1137\u1139\5")
        buf.write("\u01a0\u00d1\2\u1138\u1136\3\2\2\2\u1139\u113c\3\2\2\2")
        buf.write("\u113a\u1138\3\2\2\2\u113a\u113b\3\2\2\2\u113b\u113d\3")
        buf.write("\2\2\2\u113c\u113a\3\2\2\2\u113d\u113f\7j\2\2\u113e\u1140")
        buf.write("\t:\2\2\u113f\u113e\3\2\2\2\u113f\u1140\3\2\2\2\u1140")
        buf.write("\u1141\3\2\2\2\u1141\u1142\5\u01a4\u00d3\2\u1142\u1143")
        buf.write("\7\u009a\2\2\u1143\u1148\5\u0196\u00cc\2\u1144\u1145\7")
        buf.write("\u03bd\2\2\u1145\u1147\5\u0196\u00cc\2\u1146\u1144\3\2")
        buf.write("\2\2\u1147\u114a\3\2\2\2\u1148\u1146\3\2\2\2\u1148\u1149")
        buf.write("\3\2\2\2\u1149\u1159\3\2\2\2\u114a\u1148\3\2\2\2\u114b")
        buf.write("\u1157\7\u0080\2\2\u114c\u1158\7\u01a6\2\2\u114d\u1154")
        buf.write("\5\u0198\u00cd\2\u114e\u1150\7\16\2\2\u114f\u114e\3\2")
        buf.write("\2\2\u114f\u1150\3\2\2\2\u1150\u1151\3\2\2\2\u1151\u1153")
        buf.write("\5\u0198\u00cd\2\u1152\u114f\3\2\2\2\u1153\u1156\3\2\2")
        buf.write("\2\u1154\u1152\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u1158")
        buf.write("\3\2\2\2\u1156\u1154\3\2\2\2\u1157\u114c\3\2\2\2\u1157")
        buf.write("\u114d\3\2\2\2\u1158\u115a\3\2\2\2\u1159\u114b\3\2\2\2")
        buf.write("\u1159\u115a\3\2\2\2\u115a\u1164\3\2\2\2\u115b\u1161\7")
        buf.write("\u00ab\2\2\u115c\u115d\7B\2\2\u115d\u1160\7l\2\2\u115e")
        buf.write("\u1160\5\u019a\u00ce\2\u115f\u115c\3\2\2\2\u115f\u115e")
        buf.write("\3\2\2\2\u1160\u1163\3\2\2\2\u1161\u115f\3\2\2\2\u1161")
        buf.write("\u1162\3\2\2\2\u1162\u1165\3\2\2\2\u1163\u1161\3\2\2\2")
        buf.write("\u1164\u115b\3\2\2\2\u1164\u1165\3\2\2\2\u1165\u0189\3")
        buf.write("\2\2\2\u1166\u1167\7B\2\2\u1167\u1168\7\u01c5\2\2\u1168")
        buf.write("\u1169\7j\2\2\u1169\u116a\5\u01f2\u00fa\2\u116a\u116b")
        buf.write("\7\u009a\2\2\u116b\u1170\5\u01f2\u00fa\2\u116c\u116d\7")
        buf.write("\u03bd\2\2\u116d\u116f\5\u01f2\u00fa\2\u116e\u116c\3\2")
        buf.write("\2\2\u116f\u1172\3\2\2\2\u1170\u116e\3\2\2\2\u1170\u1171")
        buf.write("\3\2\2\2\u1171\u1176\3\2\2\2\u1172\u1170\3\2\2\2\u1173")
        buf.write("\u1174\7\u00ab\2\2\u1174\u1175\7B\2\2\u1175\u1177\7l\2")
        buf.write("\2\u1176\u1173\3\2\2\2\u1176\u1177\3\2\2\2\u1177\u018b")
        buf.write("\3\2\2\2\u1178\u1179\7}\2\2\u1179\u117a\7\u021b\2\2\u117a")
        buf.write("\u117f\5\u01a6\u00d4\2\u117b\u117c\7\u03bd\2\2\u117c\u117e")
        buf.write("\5\u01a6\u00d4\2\u117d\u117b\3\2\2\2\u117e\u1181\3\2\2")
        buf.write("\2\u117f\u117d\3\2\2\2\u117f\u1180\3\2\2\2\u1180\u018d")
        buf.write("\3\2\2\2\u1181\u117f\3\2\2\2\u1182\u1183\7\u0083\2\2\u1183")
        buf.write("\u1188\5\u01a0\u00d1\2\u1184\u1185\7\u03bd\2\2\u1185\u1187")
        buf.write("\5\u01a0\u00d1\2\u1186\u1184\3\2\2\2\u1187\u118a\3\2\2")
        buf.write("\2\u1188\u1186\3\2\2\2\u1188\u1189\3\2\2\2\u1189\u118b")
        buf.write("\3\2\2\2\u118a\u1188\3\2\2\2\u118b\u118d\7j\2\2\u118c")
        buf.write("\u118e\t:\2\2\u118d\u118c\3\2\2\2\u118d\u118e\3\2\2\2")
        buf.write("\u118e\u118f\3\2\2\2\u118f\u1190\5\u01a4\u00d3\2\u1190")
        buf.write("\u1191\7?\2\2\u1191\u1196\5\u01f2\u00fa\2\u1192\u1193")
        buf.write("\7\u03bd\2\2\u1193\u1195\5\u01f2\u00fa\2\u1194\u1192\3")
        buf.write("\2\2\2\u1195\u1198\3\2\2\2\u1196\u1194\3\2\2\2\u1196\u1197")
        buf.write("\3\2\2\2\u1197\u11ab\3\2\2\2\u1198\u1196\3\2\2\2\u1199")
        buf.write("\u119a\7\u0083\2\2\u119a\u119c\7\n\2\2\u119b\u119d\7\u0240")
        buf.write("\2\2\u119c\u119b\3\2\2\2\u119c\u119d\3\2\2\2\u119d\u119e")
        buf.write("\3\2\2\2\u119e\u119f\7\u03bd\2\2\u119f\u11a0\7B\2\2\u11a0")
        buf.write("\u11a1\7l\2\2\u11a1\u11a2\7?\2\2\u11a2\u11a7\5\u01f2\u00fa")
        buf.write("\2\u11a3\u11a4\7\u03bd\2\2\u11a4\u11a6\5\u01f2\u00fa\2")
        buf.write("\u11a5\u11a3\3\2\2\2\u11a6\u11a9\3\2\2\2\u11a7\u11a5\3")
        buf.write("\2\2\2\u11a7\u11a8\3\2\2\2\u11a8\u11ab\3\2\2\2\u11a9\u11a7")
        buf.write("\3\2\2\2\u11aa\u1182\3\2\2\2\u11aa\u1199\3\2\2\2\u11ab")
        buf.write("\u018f\3\2\2\2\u11ac\u11ad\7\u0083\2\2\u11ad\u11ae\7\u01c5")
        buf.write("\2\2\u11ae\u11af\7j\2\2\u11af\u11b0\5\u01f2\u00fa\2\u11b0")
        buf.write("\u11b1\7?\2\2\u11b1\u11b6\5\u01f2\u00fa\2\u11b2\u11b3")
        buf.write("\7\u03bd\2\2\u11b3\u11b5\5\u01f2\u00fa\2\u11b4\u11b2\3")
        buf.write("\2\2\2\u11b5\u11b8\3\2\2\2\u11b6\u11b4\3\2\2\2\u11b6\u11b7")
        buf.write("\3\2\2\2\u11b7\u0191\3\2\2\2\u11b8\u11b6\3\2\2\2\u11b9")
        buf.write("\u11ba\7\u0089\2\2\u11ba\u11bd\7\u01b8\2\2\u11bb\u11bc")
        buf.write("\7<\2\2\u11bc\u11be\5\u01f2\u00fa\2\u11bd\u11bb\3\2\2")
        buf.write("\2\u11bd\u11be\3\2\2\2\u11be\u11bf\3\2\2\2\u11bf\u11c2")
        buf.write("\7\u03b2\2\2\u11c0\u11c3\5\u024a\u0126\2\u11c1\u11c3\7")
        buf.write("\u03ca\2\2\u11c2\u11c0\3\2\2\2\u11c2\u11c1\3\2\2\2\u11c3")
        buf.write("\u0193\3\2\2\2\u11c4\u11c5\5\u01f2\u00fa\2\u11c5\u11c6")
        buf.write("\5\u019c\u00cf\2\u11c6\u0195\3\2\2\2\u11c7\u11c8\5\u01f2")
        buf.write("\u00fa\2\u11c8\u11c9\7\u0161\2\2\u11c9\u11ca\7\24\2\2")
        buf.write("\u11ca\u11cb\7\u01b8\2\2\u11cb\u11cc\7\u03ca\2\2\u11cc")
        buf.write("\u11e0\3\2\2\2\u11cd\u11ce\5\u01f2\u00fa\2\u11ce\u11d1")
        buf.write("\7\u0161\2\2\u11cf\u11d0\7\u00ab\2\2\u11d0\u11d2\5\u0202")
        buf.write("\u0102\2\u11d1\u11cf\3\2\2\2\u11d1\u11d2\3\2\2\2\u11d2")
        buf.write("\u11d3\3\2\2\2\u11d3\u11d4\7\24\2\2\u11d4\u11d5\7\u03ca")
        buf.write("\2\2\u11d5\u11e0\3\2\2\2\u11d6\u11d7\5\u01f2\u00fa\2\u11d7")
        buf.write("\u11d8\7\u0161\2\2\u11d8\u11d9\7\u00ab\2\2\u11d9\u11dc")
        buf.write("\5\u0202\u0102\2\u11da\u11db\7\17\2\2\u11db\u11dd\7\u03ca")
        buf.write("\2\2\u11dc\u11da\3\2\2\2\u11dc\u11dd\3\2\2\2\u11dd\u11e0")
        buf.write("\3\2\2\2\u11de\u11e0\5\u01f2\u00fa\2\u11df\u11c7\3\2\2")
        buf.write("\2\u11df\u11cd\3\2\2\2\u11df\u11d6\3\2\2\2\u11df\u11de")
        buf.write("\3\2\2\2\u11e0\u0197\3\2\2\2\u11e1\u11ea\7\u0094\2\2\u11e2")
        buf.write("\u11ea\7\u0228\2\2\u11e3\u11e4\7\u0115\2\2\u11e4\u11ea")
        buf.write("\7\u03ca\2\2\u11e5\u11e6\7\u016f\2\2\u11e6\u11ea\7\u03ca")
        buf.write("\2\2\u11e7\u11e8\7\u0206\2\2\u11e8\u11ea\7\u03ca\2\2\u11e9")
        buf.write("\u11e1\3\2\2\2\u11e9\u11e2\3\2\2\2\u11e9\u11e3\3\2\2\2")
        buf.write("\u11e9\u11e5\3\2\2\2\u11e9\u11e7\3\2\2\2\u11ea\u0199\3")
        buf.write("\2\2\2\u11eb\u11ec\7\u0191\2\2\u11ec\u11f4\5\u020a\u0106")
        buf.write("\2\u11ed\u11ee\7\u0194\2\2\u11ee\u11f4\5\u020a\u0106\2")
        buf.write("\u11ef\u11f0\7\u0190\2\2\u11f0\u11f4\5\u020a\u0106\2\u11f1")
        buf.write("\u11f2\7\u0195\2\2\u11f2\u11f4\5\u020a\u0106\2\u11f3\u11eb")
        buf.write("\3\2\2\2\u11f3\u11ed\3\2\2\2\u11f3\u11ef\3\2\2\2\u11f3")
        buf.write("\u11f1\3\2\2\2\u11f4\u019b\3\2\2\2\u11f5\u11f6\7\u01b8")
        buf.write("\2\2\u11f6\u11fd\7\u0148\2\2\u11f7\u11fe\7)\2\2\u11f8")
        buf.write("\u11fe\7\u01a2\2\2\u11f9\u11fa\7N\2\2\u11fa\u11fb\5\u020a")
        buf.write("\u0106\2\u11fb\u11fc\7\u0232\2\2\u11fc\u11fe\3\2\2\2\u11fd")
        buf.write("\u11f7\3\2\2\2\u11fd\u11f8\3\2\2\2\u11fd\u11f9\3\2\2\2")
        buf.write("\u11fd\u11fe\3\2\2\2\u11fe\u019d\3\2\2\2\u11ff\u1200\7")
        buf.write("\u00fc\2\2\u1200\u1201\t;\2\2\u1201\u019f\3\2\2\2\u1202")
        buf.write("\u1207\5\u01a2\u00d2\2\u1203\u1204\7\u03bb\2\2\u1204\u1205")
        buf.write("\5\u0222\u0112\2\u1205\u1206\7\u03bc\2\2\u1206\u1208\3")
        buf.write("\2\2\2\u1207\u1203\3\2\2\2\u1207\u1208\3\2\2\2\u1208\u01a1")
        buf.write("\3\2\2\2\u1209\u120b\7\n\2\2\u120a\u120c\7\u0240\2\2\u120b")
        buf.write("\u120a\3\2\2\2\u120b\u120c\3\2\2\2\u120c\u1234\3\2\2\2")
        buf.write("\u120d\u120f\7\13\2\2\u120e\u1210\7\u0239\2\2\u120f\u120e")
        buf.write("\3\2\2\2\u120f\u1210\3\2\2\2\u1210\u1234\3\2\2\2\u1211")
        buf.write("\u1218\7\"\2\2\u1212\u1213\7\u020d\2\2\u1213\u1219\7\u0238")
        buf.write("\2\2\u1214\u1219\7\u0239\2\2\u1215\u1219\7\u0221\2\2\u1216")
        buf.write("\u1219\7\u021b\2\2\u1217\u1219\7\u020c\2\2\u1218\u1212")
        buf.write("\3\2\2\2\u1218\u1214\3\2\2\2\u1218\u1215\3\2\2\2\u1218")
        buf.write("\u1216\3\2\2\2\u1218\u1217\3\2\2\2\u1218\u1219\3\2\2\2")
        buf.write("\u1219\u1234\3\2\2\2\u121a\u1234\7+\2\2\u121b\u1234\7")
        buf.write("\61\2\2\u121c\u1234\7\u0143\2\2\u121d\u1234\7\u023a\2")
        buf.write("\2\u121e\u1234\7\u023b\2\2\u121f\u1220\7B\2\2\u1220\u1234")
        buf.write("\7l\2\2\u1221\u1234\7I\2\2\u1222\u1234\7M\2\2\u1223\u1224")
        buf.write("\7^\2\2\u1224\u1234\7\u0238\2\2\u1225\u1234\7\u023c\2")
        buf.write("\2\u1226\u1234\7\u01c5\2\2\u1227\u1234\7z\2\2\u1228\u1234")
        buf.write("\7\u023d\2\2\u1229\u122a\7\u01da\2\2\u122a\u1234\t<\2")
        buf.write("\2\u122b\u1234\7\u0088\2\2\u122c\u122d\7\u008b\2\2\u122d")
        buf.write("\u1234\t=\2\2\u122e\u1234\7\u023e\2\2\u122f\u1234\7\u023f")
        buf.write("\2\2\u1230\u1234\7\u009c\2\2\u1231\u1234\7\u00a3\2\2\u1232")
        buf.write("\u1234\7\u00a4\2\2\u1233\u1209\3\2\2\2\u1233\u120d\3\2")
        buf.write("\2\2\u1233\u1211\3\2\2\2\u1233\u121a\3\2\2\2\u1233\u121b")
        buf.write("\3\2\2\2\u1233\u121c\3\2\2\2\u1233\u121d\3\2\2\2\u1233")
        buf.write("\u121e\3\2\2\2\u1233\u121f\3\2\2\2\u1233\u1221\3\2\2\2")
        buf.write("\u1233\u1222\3\2\2\2\u1233\u1223\3\2\2\2\u1233\u1225\3")
        buf.write("\2\2\2\u1233\u1226\3\2\2\2\u1233\u1227\3\2\2\2\u1233\u1228")
        buf.write("\3\2\2\2\u1233\u1229\3\2\2\2\u1233\u122b\3\2\2\2\u1233")
        buf.write("\u122c\3\2\2\2\u1233\u122e\3\2\2\2\u1233\u122f\3\2\2\2")
        buf.write("\u1233\u1230\3\2\2\2\u1233\u1231\3\2\2\2\u1233\u1232\3")
        buf.write("\2\2\2\u1234\u01a3\3\2\2\2\u1235\u1243\7\u03aa\2\2\u1236")
        buf.write("\u1237\7\u03aa\2\2\u1237\u1238\7\u03ba\2\2\u1238\u1243")
        buf.write("\7\u03aa\2\2\u1239\u123a\5\u0204\u0103\2\u123a\u123b\7")
        buf.write("\u03ba\2\2\u123b\u123c\7\u03aa\2\2\u123c\u1243\3\2\2\2")
        buf.write("\u123d\u123e\5\u0204\u0103\2\u123e\u123f\7\u03ba\2\2\u123f")
        buf.write("\u1240\5\u0204\u0103\2\u1240\u1243\3\2\2\2\u1241\u1243")
        buf.write("\5\u0204\u0103\2\u1242\u1235\3\2\2\2\u1242\u1236\3\2\2")
        buf.write("\2\u1242\u1239\3\2\2\2\u1242\u123d\3\2\2\2\u1242\u1241")
        buf.write("\3\2\2\2\u1243\u01a5\3\2\2\2\u1244\u1245\5\u01f2\u00fa")
        buf.write("\2\u1245\u1246\7\u009a\2\2\u1246\u1247\5\u01f2\u00fa\2")
        buf.write("\u1247\u01a7\3\2\2\2\u1248\u124a\7\r\2\2\u1249\u124b\t")
        buf.write(">\2\2\u124a\u1249\3\2\2\2\u124a\u124b\3\2\2\2\u124b\u124c")
        buf.write("\3\2\2\2\u124c\u124d\7\u0097\2\2\u124d\u124e\5\u0224\u0113")
        buf.write("\2\u124e\u01a9\3\2\2\2\u124f\u1250\7\33\2\2\u1250\u1251")
        buf.write("\7\u0097\2\2\u1251\u1255\5\u0224\u0113\2\u1252\u1254\5")
        buf.write("\u01b2\u00da\2\u1253\u1252\3\2\2\2\u1254\u1257\3\2\2\2")
        buf.write("\u1255\u1253\3\2\2\2\u1255\u1256\3\2\2\2\u1256\u01ab\3")
        buf.write("\2\2\2\u1257\u1255\3\2\2\2\u1258\u1259\7\u0114\2\2\u1259")
        buf.write("\u125a\7\u0097\2\2\u125a\u125c\5\u0224\u0113\2\u125b\u125d")
        buf.write("\t?\2\2\u125c\u125b\3\2\2\2\u125c\u125d\3\2\2\2\u125d")
        buf.write("\u01ad\3\2\2\2\u125e\u1260\7k\2\2\u125f\u1261\t>\2\2\u1260")
        buf.write("\u125f\3\2\2\2\u1260\u1261\3\2\2\2\u1261\u1262\3\2\2\2")
        buf.write("\u1262\u1263\7\u0097\2\2\u1263\u1264\5\u0224\u0113\2\u1264")
        buf.write("\u01af\3\2\2\2\u1265\u1267\7\u01d2\2\2\u1266\u1268\t>")
        buf.write("\2\2\u1267\u1266\3\2\2\2\u1267\u1268\3\2\2\2\u1268\u1269")
        buf.write("\3\2\2\2\u1269\u126a\7\u0097\2\2\u126a\u126c\5\u0224\u0113")
        buf.write("\2\u126b\u126d\7\u01c7\2\2\u126c\u126b\3\2\2\2\u126c\u126d")
        buf.write("\3\2\2\2\u126d\u126f\3\2\2\2\u126e\u1270\7\u014a\2\2\u126f")
        buf.write("\u126e\3\2\2\2\u126f\u1270\3\2\2\2\u1270\u1272\3\2\2\2")
        buf.write("\u1271\u1273\7\u021c\2\2\u1272\u1271\3\2\2\2\u1272\u1273")
        buf.write("\3\2\2\2\u1273\u01b1\3\2\2\2\u1274\u1275\7<\2\2\u1275")
        buf.write("\u127c\7\u021a\2\2\u1276\u127c\7\u01c7\2\2\u1277\u127c")
        buf.write("\7\u014c\2\2\u1278\u127c\7\u0196\2\2\u1279\u127c\7\u014a")
        buf.write("\2\2\u127a\u127c\7\u0112\2\2\u127b\u1274\3\2\2\2\u127b")
        buf.write("\u1276\3\2\2\2\u127b\u1277\3\2\2\2\u127b\u1278\3\2\2\2")
        buf.write("\u127b\u1279\3\2\2\2\u127b\u127a\3\2\2\2\u127c\u01b3\3")
        buf.write("\2\2\2\u127d\u127f\7\"\2\2\u127e\u1280\7\u00ff\2\2\u127f")
        buf.write("\u127e\3\2\2\2\u127f\u1280\3\2\2\2\u1280\u1281\3\2\2\2")
        buf.write("\u1281\u1282\7\u0157\2\2\u1282\u1283\5\u0204\u0103\2\u1283")
        buf.write("\u1284\7\u01dd\2\2\u1284\u1285\t@\2\2\u1285\u1286\7\u01f2")
        buf.write("\2\2\u1286\u1287\7\u03ca\2\2\u1287\u01b5\3\2\2\2\u1288")
        buf.write("\u1289\7\u0168\2\2\u1289\u128a\7\u01ba\2\2\u128a\u128b")
        buf.write("\5\u0204\u0103\2\u128b\u128c\7\u01f2\2\2\u128c\u128d\7")
        buf.write("\u03ca\2\2\u128d\u01b7\3\2\2\2\u128e\u128f\7\u0217\2\2")
        buf.write("\u128f\u1290\7\u01ba\2\2\u1290\u1291\5\u0204\u0103\2\u1291")
        buf.write("\u01b9\3\2\2\2\u1292\u1293\7\u0089\2\2\u1293\u1294\5\u01be")
        buf.write("\u00e0\2\u1294\u1295\7\u03b2\2\2\u1295\u129d\5\u0250\u0129")
        buf.write("\2\u1296\u1297\7\u03bd\2\2\u1297\u1298\5\u01be\u00e0\2")
        buf.write("\u1298\u1299\7\u03b2\2\2\u1299\u129a\5\u0250\u0129\2\u129a")
        buf.write("\u129c\3\2\2\2\u129b\u1296\3\2\2\2\u129c\u129f\3\2\2\2")
        buf.write("\u129d\u129b\3\2\2\2\u129d\u129e\3\2\2\2\u129e\u12b8\3")
        buf.write("\2\2\2\u129f\u129d\3\2\2\2\u12a0\u12a4\7\u0089\2\2\u12a1")
        buf.write("\u12a2\7\32\2\2\u12a2\u12a5\7\u0089\2\2\u12a3\u12a5\7")
        buf.write("\u029b\2\2\u12a4\u12a1\3\2\2\2\u12a4\u12a3\3\2\2\2\u12a5")
        buf.write("\u12a8\3\2\2\2\u12a6\u12a9\5\u01f6\u00fc\2\u12a7\u12a9")
        buf.write("\7)\2\2\u12a8\u12a6\3\2\2\2\u12a8\u12a7\3\2\2\2\u12a9")
        buf.write("\u12b8\3\2\2\2\u12aa\u12ab\7\u0089\2\2\u12ab\u12b2\7\u01a0")
        buf.write("\2\2\u12ac\u12af\5\u01f6\u00fc\2\u12ad\u12ae\7\34\2\2")
        buf.write("\u12ae\u12b0\5\u01f8\u00fd\2\u12af\u12ad\3\2\2\2\u12af")
        buf.write("\u12b0\3\2\2\2\u12b0\u12b3\3\2\2\2\u12b1\u12b3\7)\2\2")
        buf.write("\u12b2\u12ac\3\2\2\2\u12b2\u12b1\3\2\2\2\u12b3\u12b8\3")
        buf.write("\2\2\2\u12b4\u12b8\5\u0192\u00ca\2\u12b5\u12b8\5\u0116")
        buf.write("\u008c\2\u12b6\u12b8\5\u0114\u008b\2\u12b7\u1292\3\2\2")
        buf.write("\2\u12b7\u12a0\3\2\2\2\u12b7\u12aa\3\2\2\2\u12b7\u12b4")
        buf.write("\3\2\2\2\u12b7\u12b5\3\2\2\2\u12b7\u12b6\3\2\2\2\u12b8")
        buf.write("\u01bb\3\2\2\2\u12b9\u12ba\7\u008b\2\2\u12ba\u12bb\t\60")
        buf.write("\2\2\u12bb\u1351\7\u017a\2\2\u12bc\u12bd\7\u008b\2\2\u12bd")
        buf.write("\u12be\tA\2\2\u12be\u12c1\7\u0144\2\2\u12bf\u12c0\7H\2")
        buf.write("\2\u12c0\u12c2\7\u03ca\2\2\u12c1\u12bf\3\2\2\2\u12c1\u12c2")
        buf.write("\3\2\2\2\u12c2\u12c5\3\2\2\2\u12c3\u12c4\7?\2\2\u12c4")
        buf.write("\u12c6\5\u020a\u0106\2\u12c5\u12c3\3\2\2\2\u12c5\u12c6")
        buf.write("\3\2\2\2\u12c6\u12ce\3\2\2\2\u12c7\u12cb\7Z\2\2\u12c8")
        buf.write("\u12c9\5\u020a\u0106\2\u12c9\u12ca\7\u03bd\2\2\u12ca\u12cc")
        buf.write("\3\2\2\2\u12cb\u12c8\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc")
        buf.write("\u12cd\3\2\2\2\u12cd\u12cf\5\u020a\u0106\2\u12ce\u12c7")
        buf.write("\3\2\2\2\u12ce\u12cf\3\2\2\2\u12cf\u1351\3\2\2\2\u12d0")
        buf.write("\u12d1\7\u008b\2\2\u12d1\u12d3\5\u01c0\u00e1\2\u12d2\u12d4")
        buf.write("\5\u01c2\u00e2\2\u12d3\u12d2\3\2\2\2\u12d3\u12d4\3\2\2")
        buf.write("\2\u12d4\u1351\3\2\2\2\u12d5\u12d7\7\u008b\2\2\u12d6\u12d8")
        buf.write("\7\u0156\2\2\u12d7\u12d6\3\2\2\2\u12d7\u12d8\3\2\2\2\u12d8")
        buf.write("\u12d9\3\2\2\2\u12d9\u12da\t\"\2\2\u12da\u12db\tB\2\2")
        buf.write("\u12db\u12de\5\u01ec\u00f7\2\u12dc\u12dd\tB\2\2\u12dd")
        buf.write("\u12df\5\u0204\u0103\2\u12de\u12dc\3\2\2\2\u12de\u12df")
        buf.write("\3\2\2\2\u12df\u12e1\3\2\2\2\u12e0\u12e2\5\u01c2\u00e2")
        buf.write("\2\u12e1\u12e0\3\2\2\2\u12e1\u12e2\3\2\2\2\u12e2\u1351")
        buf.write("\3\2\2\2\u12e3\u12e4\7\u008b\2\2\u12e4\u12e5\7\"\2\2\u12e5")
        buf.write("\u12e7\t\2\2\2\u12e6\u12e8\5\u023a\u011e\2\u12e7\u12e6")
        buf.write("\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9")
        buf.write("\u1351\5\u0204\u0103\2\u12ea\u12eb\7\u008b\2\2\u12eb\u12ec")
        buf.write("\7\"\2\2\u12ec\u12ed\tC\2\2\u12ed\u1351\5\u01ea\u00f6")
        buf.write("\2\u12ee\u12ef\7\u008b\2\2\u12ef\u12f0\7\"\2\2\u12f0\u12f1")
        buf.write("\7\u021b\2\2\u12f1\u1351\5\u01f2\u00fa\2\u12f2\u12f3\7")
        buf.write("\u008b\2\2\u12f3\u12f4\7\u013d\2\2\u12f4\u12f5\5\u01fa")
        buf.write("\u00fe\2\u12f5\u12f6\tD\2\2\u12f6\u1351\3\2\2\2\u12f7")
        buf.write("\u12f8\7\u008b\2\2\u12f8\u1351\5\u01c4\u00e3\2\u12f9\u12fa")
        buf.write("\7\u008b\2\2\u12fa\u12fb\tE\2\2\u12fb\u12ff\7Z\2\2\u12fc")
        buf.write("\u12fd\5\u020a\u0106\2\u12fd\u12fe\7\u03bd\2\2\u12fe\u1300")
        buf.write("\3\2\2\2\u12ff\u12fc\3\2\2\2\u12ff\u1300\3\2\2\2\u1300")
        buf.write("\u1301\3\2\2\2\u1301\u1351\5\u020a\u0106\2\u1302\u1303")
        buf.write("\7\u008b\2\2\u1303\u1304\7\u00dc\2\2\u1304\u1305\7\u03bb")
        buf.write("\2\2\u1305\u1306\7\u03aa\2\2\u1306\u1307\7\u03bc\2\2\u1307")
        buf.write("\u1351\tE\2\2\u1308\u1309\7\u008b\2\2\u1309\u130c\5\u01c6")
        buf.write("\u00e4\2\u130a\u130b\tB\2\2\u130b\u130d\5\u0204\u0103")
        buf.write("\2\u130c\u130a\3\2\2\2\u130c\u130d\3\2\2\2\u130d\u130f")
        buf.write("\3\2\2\2\u130e\u1310\5\u01c2\u00e2\2\u130f\u130e\3\2\2")
        buf.write("\2\u130f\u1310\3\2\2\2\u1310\u1351\3\2\2\2\u1311\u1312")
        buf.write("\7\u008b\2\2\u1312\u1313\tF\2\2\u1313\u1314\7\u0119\2")
        buf.write("\2\u1314\u1351\5\u01ea\u00f6\2\u1315\u1316\7\u008b\2\2")
        buf.write("\u1316\u1319\7\u015a\2\2\u1317\u1318\7<\2\2\u1318\u131a")
        buf.write("\5\u01f2\u00fa\2\u1319\u1317\3\2\2\2\u1319\u131a\3\2\2")
        buf.write("\2\u131a\u1351\3\2\2\2\u131b\u131c\7\u008b\2\2\u131c\u131d")
        buf.write("\tG\2\2\u131d\u131e\tB\2\2\u131e\u1321\5\u01ec\u00f7\2")
        buf.write("\u131f\u1320\tB\2\2\u1320\u1322\5\u0204\u0103\2\u1321")
        buf.write("\u131f\3\2\2\2\u1321\u1322\3\2\2\2\u1322\u1325\3\2\2\2")
        buf.write("\u1323\u1324\7\u00a9\2\2\u1324\u1326\5\u0250\u0129\2\u1325")
        buf.write("\u1323\3\2\2\2\u1325\u1326\3\2\2\2\u1326\u1351\3\2\2\2")
        buf.write("\u1327\u1328\7\u008b\2\2\u1328\u1329\7\u01ae\2\2\u1329")
        buf.write("\u132c\7\u0238\2\2\u132a\u132b\tB\2\2\u132b\u132d\5\u0204")
        buf.write("\u0103\2\u132c\u132a\3\2\2\2\u132c\u132d\3\2\2\2\u132d")
        buf.write("\u132f\3\2\2\2\u132e\u1330\5\u01c2\u00e2\2\u132f\u132e")
        buf.write("\3\2\2\2\u132f\u1330\3\2\2\2\u1330\u1351\3\2\2\2\u1331")
        buf.write("\u1332\7\u008b\2\2\u1332\u1333\7\u01c3\2\2\u1333\u1338")
        buf.write("\5\u01c8\u00e5\2\u1334\u1335\7\u03bd\2\2\u1335\u1337\5")
        buf.write("\u01c8\u00e5\2\u1336\u1334\3\2\2\2\u1337\u133a\3\2\2\2")
        buf.write("\u1338\u1336\3\2\2\2\u1338\u1339\3\2\2\2\u1339\u133e\3")
        buf.write("\2\2\2\u133a\u1338\3\2\2\2\u133b\u133c\7<\2\2\u133c\u133d")
        buf.write("\7\u01c6\2\2\u133d\u133f\5\u020a\u0106\2\u133e\u133b\3")
        buf.write("\2\2\2\u133e\u133f\3\2\2\2\u133f\u1340\3\2\2\2\u1340\u1344")
        buf.write("\7Z\2\2\u1341\u1342\5\u020a\u0106\2\u1342\u1343\7\u03bd")
        buf.write("\2\2\u1343\u1345\3\2\2\2\u1344\u1341\3\2\2\2\u1344\u1345")
        buf.write("\3\2\2\2\u1345\u1346\3\2\2\2\u1346\u1347\5\u020a\u0106")
        buf.write("\2\u1347\u1351\3\2\2\2\u1348\u1349\7\u008b\2\2\u1349\u134a")
        buf.write("\7\u01ed\2\2\u134a\u134e\7\u0201\2\2\u134b\u134c\7<\2")
        buf.write("\2\u134c\u134d\7\u0113\2\2\u134d\u134f\7\u03ca\2\2\u134e")
        buf.write("\u134b\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1351\3\2\2\2")
        buf.write("\u1350\u12b9\3\2\2\2\u1350\u12bc\3\2\2\2\u1350\u12d0\3")
        buf.write("\2\2\2\u1350\u12d5\3\2\2\2\u1350\u12e3\3\2\2\2\u1350\u12ea")
        buf.write("\3\2\2\2\u1350\u12ee\3\2\2\2\u1350\u12f2\3\2\2\2\u1350")
        buf.write("\u12f7\3\2\2\2\u1350\u12f9\3\2\2\2\u1350\u1302\3\2\2\2")
        buf.write("\u1350\u1308\3\2\2\2\u1350\u1311\3\2\2\2\u1350\u1315\3")
        buf.write("\2\2\2\u1350\u131b\3\2\2\2\u1350\u1327\3\2\2\2\u1350\u1331")
        buf.write("\3\2\2\2\u1350\u1348\3\2\2\2\u1351\u01bd\3\2\2\2\u1352")
        buf.write("\u135d\7\u03d5\2\2\u1353\u135d\7\u03d6\2\2\u1354\u1355")
        buf.write("\7\u03bf\2\2\u1355\u1357\7\u03bf\2\2\u1356\u1354\3\2\2")
        buf.write("\2\u1356\u1357\3\2\2\2\u1357\u1358\3\2\2\2\u1358\u135a")
        buf.write("\t/\2\2\u1359\u1356\3\2\2\2\u1359\u135a\3\2\2\2\u135a")
        buf.write("\u135b\3\2\2\2\u135b\u135d\5\u0204\u0103\2\u135c\u1352")
        buf.write("\3\2\2\2\u135c\u1353\3\2\2\2\u135c\u1359\3\2\2\2\u135d")
        buf.write("\u01bf\3\2\2\2\u135e\u135f\7\32\2\2\u135f\u136c\7\u0089")
        buf.write("\2\2\u1360\u136c\7\u029e\2\2\u1361\u136c\7\'\2\2\u1362")
        buf.write("\u136c\7\u0087\2\2\u1363\u1364\7\u0157\2\2\u1364\u136c")
        buf.write("\7\u0201\2\2\u1365\u1366\7u\2\2\u1366\u136c\7\u0201\2")
        buf.write("\2\u1367\u1369\t/\2\2\u1368\u1367\3\2\2\2\u1368\u1369")
        buf.write("\3\2\2\2\u1369\u136a\3\2\2\2\u136a\u136c\tH\2\2\u136b")
        buf.write("\u135e\3\2\2\2\u136b\u1360\3\2\2\2\u136b\u1361\3\2\2\2")
        buf.write("\u136b\u1362\3\2\2\2\u136b\u1363\3\2\2\2\u136b\u1365\3")
        buf.write("\2\2\2\u136b\u1368\3\2\2\2\u136c\u01c1\3\2\2\2\u136d\u136e")
        buf.write("\7Y\2\2\u136e\u1372\7\u03ca\2\2\u136f\u1370\7\u00a9\2")
        buf.write("\2\u1370\u1372\5\u0250\u0129\2\u1371\u136d\3\2\2\2\u1371")
        buf.write("\u136f\3\2\2\2\u1372\u01c3\3\2\2\2\u1373\u1375\7\u0203")
        buf.write("\2\2\u1374\u1373\3\2\2\2\u1374\u1375\3\2\2\2\u1375\u1376")
        buf.write("\3\2\2\2\u1376\u1385\7\u013e\2\2\u1377\u1378\7\u017b\2")
        buf.write("\2\u1378\u1385\7\u0201\2\2\u1379\u1385\7\u01bc\2\2\u137a")
        buf.write("\u1385\7\u0240\2\2\u137b\u137d\7\u0156\2\2\u137c\u137b")
        buf.write("\3\2\2\2\u137c\u137d\3\2\2\2\u137d\u137e\3\2\2\2\u137e")
        buf.write("\u1385\7\u01c2\2\2\u137f\u1385\7\u01c4\2\2\u1380\u1381")
        buf.write("\7\u01ed\2\2\u1381\u1385\7\u0160\2\2\u1382\u1385\7\u0103")
        buf.write("\2\2\u1383\u1385\7\u0127\2\2\u1384\u1374\3\2\2\2\u1384")
        buf.write("\u1377\3\2\2\2\u1384\u1379\3\2\2\2\u1384\u137a\3\2\2\2")
        buf.write("\u1384\u137c\3\2\2\2\u1384\u137f\3\2\2\2\u1384\u1380\3")
        buf.write("\2\2\2\u1384\u1382\3\2\2\2\u1384\u1383\3\2\2\2\u1385\u01c5")
        buf.write("\3\2\2\2\u1386\u138f\7\u0144\2\2\u1387\u1388\7\u0097\2")
        buf.write("\2\u1388\u138f\7\u0201\2\2\u1389\u138b\7\u0156\2\2\u138a")
        buf.write("\u1389\3\2\2\2\u138a\u138b\3\2\2\2\u138b\u138c\3\2\2\2")
        buf.write("\u138c\u138f\7\u0238\2\2\u138d\u138f\7\u0212\2\2\u138e")
        buf.write("\u1386\3\2\2\2\u138e\u1387\3\2\2\2\u138e\u138a\3\2\2\2")
        buf.write("\u138e\u138d\3\2\2\2\u138f\u01c7\3\2\2\2\u1390\u139d\7")
        buf.write("\n\2\2\u1391\u1392\7\u010b\2\2\u1392\u139d\7\u016b\2\2")
        buf.write("\u1393\u1394\7\u0126\2\2\u1394\u139d\7\u020b\2\2\u1395")
        buf.write("\u139d\7\u0129\2\2\u1396\u139d\7\u016d\2\2\u1397\u139d")
        buf.write("\7\u026e\2\2\u1398\u1399\7\u01b3\2\2\u1399\u139d\7\u014d")
        buf.write("\2\2\u139a\u139d\7\u01f4\2\2\u139b\u139d\7\u020a\2\2\u139c")
        buf.write("\u1390\3\2\2\2\u139c\u1391\3\2\2\2\u139c\u1393\3\2\2\2")
        buf.write("\u139c\u1395\3\2\2\2\u139c\u1396\3\2\2\2\u139c\u1397\3")
        buf.write("\2\2\2\u139c\u1398\3\2\2\2\u139c\u139a\3\2\2\2\u139c\u139b")
        buf.write("\3\2\2\2\u139d\u01c9\3\2\2\2\u139e\u139f\7\u0109\2\2\u139f")
        buf.write("\u13a0\7\u03ca\2\2\u13a0\u01cb\3\2\2\2\u13a1\u13a2\7\u010f")
        buf.write("\2\2\u13a2\u13a3\7I\2\2\u13a3\u13a8\5\u01d8\u00ed\2\u13a4")
        buf.write("\u13a5\7\u03bd\2\2\u13a5\u13a7\5\u01d8\u00ed\2\u13a6\u13a4")
        buf.write("\3\2\2\2\u13a7\u13aa\3\2\2\2\u13a8\u13a6\3\2\2\2\u13a8")
        buf.write("\u13a9\3\2\2\2\u13a9\u13b2\3\2\2\2\u13aa\u13a8\3\2\2\2")
        buf.write("\u13ab\u13ac\7s\2\2\u13ac\u13af\7\u03bb\2\2\u13ad\u13b0")
        buf.write("\5\u0222\u0112\2\u13ae\u13b0\7\n\2\2\u13af\u13ad\3\2\2")
        buf.write("\2\u13af\u13ae\3\2\2\2\u13b0\u13b1\3\2\2\2\u13b1\u13b3")
        buf.write("\7\u03bc\2\2\u13b2\u13ab\3\2\2\2\u13b2\u13b3\3\2\2\2\u13b3")
        buf.write("\u13b4\3\2\2\2\u13b4\u13b5\7H\2\2\u13b5\u13b6\5\u0204")
        buf.write("\u0103\2\u13b6\u01cd\3\2\2\2\u13b7\u13b9\7\u0153\2\2\u13b8")
        buf.write("\u13ba\t>\2\2\u13b9\u13b8\3\2\2\2\u13b9\u13ba\3\2\2\2")
        buf.write("\u13ba\u13bb\3\2\2\2\u13bb\u13c0\5\u01da\u00ee\2\u13bc")
        buf.write("\u13bd\7\u03bd\2\2\u13bd\u13bf\5\u01da\u00ee\2\u13be\u13bc")
        buf.write("\3\2\2\2\u13bf\u13c2\3\2\2\2\u13c0\u13be\3\2\2\2\u13c0")
        buf.write("\u13c1\3\2\2\2\u13c1\u01cf\3\2\2\2\u13c2\u13c0\3\2\2\2")
        buf.write("\u13c3\u13c5\7U\2\2\u13c4\u13c6\tI\2\2\u13c5\u13c4\3\2")
        buf.write("\2\2\u13c5\u13c6\3\2\2\2\u13c6\u13c8\3\2\2\2\u13c7\u13c9")
        buf.write("\5\u020a\u0106\2\u13c8\u13c7\3\2\2\2\u13c9\u13ca\3\2\2")
        buf.write("\2\u13ca\u13c8\3\2\2\2\u13ca\u13cb\3\2\2\2\u13cb\u01d1")
        buf.write("\3\2\2\2\u13cc\u13cd\7]\2\2\u13cd\u13ce\7I\2\2\u13ce\u13cf")
        buf.write("\7O\2\2\u13cf\u13d0\7\u010f\2\2\u13d0\u13d5\5\u01de\u00f0")
        buf.write("\2\u13d1\u13d2\7\u03bd\2\2\u13d2\u13d4\5\u01de\u00f0\2")
        buf.write("\u13d3\u13d1\3\2\2\2\u13d4\u13d7\3\2\2\2\u13d5\u13d3\3")
        buf.write("\2\2\2\u13d5\u13d6\3\2\2\2\u13d6\u01d3\3\2\2\2\u13d7\u13d5")
        buf.write("\3\2\2\2\u13d8\u13d9\7\u01db\2\2\u13d9\u13da\7\u01c6\2")
        buf.write("\2\u13da\u13db\7\u010f\2\2\u13db\u01d5\3\2\2\2\u13dc\u13dd")
        buf.write("\7\u023e\2\2\u13dd\u01d7\3\2\2\2\u13de\u13e6\5\u01ec\u00f7")
        buf.write("\2\u13df\u13e1\t\24\2\2\u13e0\u13df\3\2\2\2\u13e0\u13e1")
        buf.write("\3\2\2\2\u13e1\u13e2\3\2\2\2\u13e2\u13e3\7\u03bb\2\2\u13e3")
        buf.write("\u13e4\5\u0222\u0112\2\u13e4\u13e5\7\u03bc\2\2\u13e5\u13e7")
        buf.write("\3\2\2\2\u13e6\u13e0\3\2\2\2\u13e6\u13e7\3\2\2\2\u13e7")
        buf.write("\u01d9\3\2\2\2\u13e8\u13fb\7\u0130\2\2\u13e9\u13fb\7\u0160")
        buf.write("\2\2\u13ea\u13ec\tJ\2\2\u13eb\u13ea\3\2\2\2\u13eb\u13ec")
        buf.write("\3\2\2\2\u13ec\u13ed\3\2\2\2\u13ed\u13fb\7\u017a\2\2\u13ee")
        buf.write("\u13fb\7\u01af\2\2\u13ef\u13fb\7\u0240\2\2\u13f0\u13f1")
        buf.write("\7\u01c6\2\2\u13f1\u13fb\7\u010f\2\2\u13f2\u13fb\7\u0201")
        buf.write("\2\2\u13f3\u13fb\7\u021d\2\2\u13f4\u13f8\7\u0238\2\2\u13f5")
        buf.write("\u13f6\7\u00ab\2\2\u13f6\u13f7\7x\2\2\u13f7\u13f9\7^\2")
        buf.write("\2\u13f8\u13f5\3\2\2\2\u13f8\u13f9\3\2\2\2\u13f9\u13fb")
        buf.write("\3\2\2\2\u13fa\u13e8\3\2\2\2\u13fa\u13e9\3\2\2\2\u13fa")
        buf.write("\u13eb\3\2\2\2\u13fa\u13ee\3\2\2\2\u13fa\u13ef\3\2\2\2")
        buf.write("\u13fa\u13f0\3\2\2\2\u13fa\u13f2\3\2\2\2\u13fa\u13f3\3")
        buf.write("\2\2\2\u13fa\u13f4\3\2\2\2\u13fb\u1407\3\2\2\2\u13fc\u13fd")
        buf.write("\7\u01cc\2\2\u13fd\u13ff\7\u017a\2\2\u13fe\u1400\5\u013c")
        buf.write("\u009f\2\u13ff\u13fe\3\2\2\2\u13ff\u1400\3\2\2\2\u1400")
        buf.write("\u1407\3\2\2\2\u1401\u1402\7\u0238\2\2\u1402\u1404\5\u0224")
        buf.write("\u0113\2\u1403\u1405\5\u01dc\u00ef\2\u1404\u1403\3\2\2")
        buf.write("\2\u1404\u1405\3\2\2\2\u1405\u1407\3\2\2\2\u1406\u13fa")
        buf.write("\3\2\2\2\u1406\u13fc\3\2\2\2\u1406\u1401\3\2\2\2\u1407")
        buf.write("\u01db\3\2\2\2\u1408\u1409\7\u00ab\2\2\u1409\u140a\7x")
        buf.write("\2\2\u140a\u140e\7^\2\2\u140b\u140c\7<\2\2\u140c\u140e")
        buf.write("\7\u0149\2\2\u140d\u1408\3\2\2\2\u140d\u140b\3\2\2\2\u140e")
        buf.write("\u01dd\3\2\2\2\u140f\u1417\5\u01ec\u00f7\2\u1410\u1411")
        buf.write("\7s\2\2\u1411\u1414\7\u03bb\2\2\u1412\u1415\5\u0222\u0112")
        buf.write("\2\u1413\u1415\7\n\2\2\u1414\u1412\3\2\2\2\u1414\u1413")
        buf.write("\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u1418\7\u03bc\2\2\u1417")
        buf.write("\u1410\3\2\2\2\u1417\u1418\3\2\2\2\u1418\u1420\3\2\2\2")
        buf.write("\u1419\u141b\t\24\2\2\u141a\u1419\3\2\2\2\u141a\u141b")
        buf.write("\3\2\2\2\u141b\u141c\3\2\2\2\u141c\u141d\7\u03bb\2\2\u141d")
        buf.write("\u141e\5\u0222\u0112\2\u141e\u141f\7\u03bc\2\2\u141f\u1421")
        buf.write("\3\2\2\2\u1420\u141a\3\2\2\2\u1420\u1421\3\2\2\2\u1421")
        buf.write("\u1424\3\2\2\2\u1422\u1423\7G\2\2\u1423\u1425\7\u0174")
        buf.write("\2\2\u1424\u1422\3\2\2\2\u1424\u1425\3\2\2\2\u1425\u01df")
        buf.write("\3\2\2\2\u1426\u1427\tK\2\2\u1427\u142a\5\u01ec\u00f7")
        buf.write("\2\u1428\u142b\5\u0204\u0103\2\u1429\u142b\7\u03ca\2\2")
        buf.write("\u142a\u1428\3\2\2\2\u142a\u1429\3\2\2\2\u142a\u142b\3")
        buf.write("\2\2\2\u142b\u01e1\3\2\2\2\u142c\u1430\tK\2\2\u142d\u142e")
        buf.write("\tL\2\2\u142e\u142f\7\u03b2\2\2\u142f\u1431\tM\2\2\u1430")
        buf.write("\u142d\3\2\2\2\u1430\u1431\3\2\2\2\u1431\u1432\3\2\2\2")
        buf.write("\u1432\u1433\5\u01e8\u00f5\2\u1433\u01e3\3\2\2\2\u1434")
        buf.write("\u1435\7\u015e\2\2\u1435\u1436\7\u03ca\2\2\u1436\u01e5")
        buf.write("\3\2\2\2\u1437\u1438\7\u00a5\2\2\u1438\u1439\5\u0204\u0103")
        buf.write("\2\u1439\u01e7\3\2\2\2\u143a\u1440\5\u00b4[\2\u143b\u1440")
        buf.write("\5\u00a6T\2\u143c\u1440\5\u00acW\2\u143d\u1440\5\u00b2")
        buf.write("Z\2\u143e\u1440\5\u00b6\\\2\u143f\u143a\3\2\2\2\u143f")
        buf.write("\u143b\3\2\2\2\u143f\u143c\3\2\2\2\u143f\u143d\3\2\2\2")
        buf.write("\u143f\u143e\3\2\2\2\u1440\u1445\3\2\2\2\u1441\u1442\7")
        buf.write("<\2\2\u1442\u1443\7\u0123\2\2\u1443\u1445\5\u0204\u0103")
        buf.write("\2\u1444\u143f\3\2\2\2\u1444\u1441\3\2\2\2\u1445\u01e9")
        buf.write("\3\2\2\2\u1446\u144a\5\u0204\u0103\2\u1447\u144b\7\u03d1")
        buf.write("\2\2\u1448\u1449\7\u03ba\2\2\u1449\u144b\5\u0204\u0103")
        buf.write("\2\u144a\u1447\3\2\2\2\u144a\u1448\3\2\2\2\u144a\u144b")
        buf.write("\3\2\2\2\u144b\u01eb\3\2\2\2\u144c\u144d\5\u01ea\u00f6")
        buf.write("\2\u144d\u01ed\3\2\2\2\u144e\u1453\5\u0204\u0103\2\u144f")
        buf.write("\u1451\5\u0208\u0105\2\u1450\u1452\5\u0208\u0105\2\u1451")
        buf.write("\u1450\3\2\2\2\u1451\u1452\3\2\2\2\u1452\u1454\3\2\2\2")
        buf.write("\u1453\u144f\3\2\2\2\u1453\u1454\3\2\2\2\u1454\u01ef\3")
        buf.write("\2\2\2\u1455\u145a\5\u0204\u0103\2\u1456\u1457\7\u03bb")
        buf.write("\2\2\u1457\u1458\5\u020a\u0106\2\u1458\u1459\7\u03bc\2")
        buf.write("\2\u1459\u145b\3\2\2\2\u145a\u1456\3\2\2\2\u145a\u145b")
        buf.write("\3\2\2\2\u145b\u145d\3\2\2\2\u145c\u145e\t)\2\2\u145d")
        buf.write("\u145c\3\2\2\2\u145d\u145e\3\2\2\2\u145e\u01f1\3\2\2\2")
        buf.write("\u145f\u1460\tN\2\2\u1460\u01f3\3\2\2\2\u1461\u1462\t")
        buf.write("O\2\2\u1462\u01f5\3\2\2\2\u1463\u1468\7\u00c1\2\2\u1464")
        buf.write("\u1468\5\u0260\u0131\2\u1465\u1468\7\u03ca\2\2\u1466\u1468")
        buf.write("\7\u03c7\2\2\u1467\u1463\3\2\2\2\u1467\u1464\3\2\2\2\u1467")
        buf.write("\u1465\3\2\2\2\u1467\u1466\3\2\2\2\u1468\u01f7\3\2\2\2")
        buf.write("\u1469\u146c\5\u0204\u0103\2\u146a\u146c\7\u03ca\2\2\u146b")
        buf.write("\u1469\3\2\2\2\u146b\u146a\3\2\2\2\u146c\u01f9\3\2\2\2")
        buf.write("\u146d\u146e\tP\2\2\u146e\u01fb\3\2\2\2\u146f\u1470\5")
        buf.write("\u020a\u0106\2\u1470\u1471\7\u03af\2\2\u1471\u1472\5\u020a")
        buf.write("\u0106\2\u1472\u1473\7\u03af\2\2\u1473\u1474\5\u020a\u0106")
        buf.write("\2\u1474\u1475\7\u03af\2\2\u1475\u1476\5\u020a\u0106\2")
        buf.write("\u1476\u1477\7\u03af\2\2\u1477\u147d\5\u020a\u0106\2\u1478")
        buf.write("\u1479\7\u03c6\2\2\u1479\u147a\5\u020a\u0106\2\u147a\u147b")
        buf.write("\7\u03af\2\2\u147b\u147c\5\u020a\u0106\2\u147c\u147e\3")
        buf.write("\2\2\2\u147d\u1478\3\2\2\2\u147e\u147f\3\2\2\2\u147f\u147d")
        buf.write("\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u01fd\3\2\2\2\u1481")
        buf.write("\u1488\5\u0200\u0101\2\u1482\u1483\7\u03bd\2\2\u1483\u1486")
        buf.write("\5\u0200\u0101\2\u1484\u1485\7\u03bd\2\2\u1485\u1487\5")
        buf.write("\u020a\u0106\2\u1486\u1484\3\2\2\2\u1486\u1487\3\2\2\2")
        buf.write("\u1487\u1489\3\2\2\2\u1488\u1482\3\2\2\2\u1488\u1489\3")
        buf.write("\2\2\2\u1489\u01ff\3\2\2\2\u148a\u1492\7\u03ca\2\2\u148b")
        buf.write("\u1492\7\u03cf\2\2\u148c\u148e\7\u03cc\2\2\u148d\u148c")
        buf.write("\3\2\2\2\u148e\u148f\3\2\2\2\u148f\u148d\3\2\2\2\u148f")
        buf.write("\u1490\3\2\2\2\u1490\u1492\3\2\2\2\u1491\u148a\3\2\2\2")
        buf.write("\u1491\u148b\3\2\2\2\u1491\u148d\3\2\2\2\u1492\u0201\3")
        buf.write("\2\2\2\u1493\u1496\5\u0204\u0103\2\u1494\u1496\7\u03ca")
        buf.write("\2\2\u1495\u1493\3\2\2\2\u1495\u1494\3\2\2\2\u1496\u0203")
        buf.write("\3\2\2\2\u1497\u149b\5\u0206\u0104\2\u1498\u149b\7\u03d3")
        buf.write("\2\2\u1499\u149b\7\u03c7\2\2\u149a\u1497\3\2\2\2\u149a")
        buf.write("\u1498\3\2\2\2\u149a\u1499\3\2\2\2\u149b\u0205\3\2\2\2")
        buf.write("\u149c\u14a6\7\u03d2\2\2\u149d\u14a6\5\u0260\u0131\2\u149e")
        buf.write("\u14a6\5\u0262\u0132\2\u149f\u14a6\5\u01fa\u00fe\2\u14a0")
        buf.write("\u14a6\5\u0264\u0133\2\u14a1\u14a6\5\u0266\u0134\2\u14a2")
        buf.write("\u14a6\5\u0268\u0135\2\u14a3\u14a6\5\u026a\u0136\2\u14a4")
        buf.write("\u14a6\5\u026c\u0137\2\u14a5\u149c\3\2\2\2\u14a5\u149d")
        buf.write("\3\2\2\2\u14a5\u149e\3\2\2\2\u14a5\u149f\3\2\2\2\u14a5")
        buf.write("\u14a0\3\2\2\2\u14a5\u14a1\3\2\2\2\u14a5\u14a2\3\2\2\2")
        buf.write("\u14a5\u14a3\3\2\2\2\u14a5\u14a4\3\2\2\2\u14a6\u0207\3")
        buf.write("\2\2\2\u14a7\u14ab\7\u03d1\2\2\u14a8\u14a9\7\u03ba\2\2")
        buf.write("\u14a9\u14ab\5\u0204\u0103\2\u14aa\u14a7\3\2\2\2\u14aa")
        buf.write("\u14a8\3\2\2\2\u14ab\u0209\3\2\2\2\u14ac\u14ad\tQ\2\2")
        buf.write("\u14ad\u020b\3\2\2\2\u14ae\u14b1\7\u03c8\2\2\u14af\u14b1")
        buf.write("\5\u020a\u0106\2\u14b0\u14ae\3\2\2\2\u14b0\u14af\3\2\2")
        buf.write("\2\u14b1\u020d\3\2\2\2\u14b2\u14b4\7\u03d0\2\2\u14b3\u14b2")
        buf.write("\3\2\2\2\u14b3\u14b4\3\2\2\2\u14b4\u14b5\3\2\2\2\u14b5")
        buf.write("\u14b8\7\u03ca\2\2\u14b6\u14b8\7\u03c9\2\2\u14b7\u14b3")
        buf.write("\3\2\2\2\u14b7\u14b6\3\2\2\2\u14b8\u14ba\3\2\2\2\u14b9")
        buf.write("\u14bb\7\u03ca\2\2\u14ba\u14b9\3\2\2\2\u14bb\u14bc\3\2")
        buf.write("\2\2\u14bc\u14ba\3\2\2\2\u14bc\u14bd\3\2\2\2\u14bd\u14ca")
        buf.write("\3\2\2\2\u14be\u14c0\7\u03d0\2\2\u14bf\u14be\3\2\2\2\u14bf")
        buf.write("\u14c0\3\2\2\2\u14c0\u14c1\3\2\2\2\u14c1\u14c4\7\u03ca")
        buf.write("\2\2\u14c2\u14c4\7\u03c9\2\2\u14c3\u14bf\3\2\2\2\u14c3")
        buf.write("\u14c2\3\2\2\2\u14c4\u14c7\3\2\2\2\u14c5\u14c6\7\34\2")
        buf.write("\2\u14c6\u14c8\5\u01f8\u00fd\2\u14c7\u14c5\3\2\2\2\u14c7")
        buf.write("\u14c8\3\2\2\2\u14c8\u14ca\3\2\2\2\u14c9\u14b7\3\2\2\2")
        buf.write("\u14c9\u14c3\3\2\2\2\u14ca\u020f\3\2\2\2\u14cb\u14cc\t")
        buf.write("R\2\2\u14cc\u0211\3\2\2\2\u14cd\u14cf\7\u03d0\2\2\u14ce")
        buf.write("\u14cd\3\2\2\2\u14ce\u14cf\3\2\2\2\u14cf\u14d0\3\2\2\2")
        buf.write("\u14d0\u14d1\7\u03cc\2\2\u14d1\u0213\3\2\2\2\u14d2\u14d4")
        buf.write("\7g\2\2\u14d3\u14d2\3\2\2\2\u14d3\u14d4\3\2\2\2\u14d4")
        buf.write("\u14d5\3\2\2\2\u14d5\u14d6\tS\2\2\u14d6\u0215\3\2\2\2")
        buf.write("\u14d7\u14e4\5\u020e\u0108\2\u14d8\u14e4\5\u020a\u0106")
        buf.write("\2\u14d9\u14da\7\u03af\2\2\u14da\u14e4\5\u020a\u0106\2")
        buf.write("\u14db\u14e4\5\u0212\u010a\2\u14dc\u14e4\5\u0210\u0109")
        buf.write("\2\u14dd\u14e4\7\u03cd\2\2\u14de\u14e4\7\u03cf\2\2\u14df")
        buf.write("\u14e1\7g\2\2\u14e0\u14df\3\2\2\2\u14e0\u14e1\3\2\2\2")
        buf.write("\u14e1\u14e2\3\2\2\2\u14e2\u14e4\tS\2\2\u14e3\u14d7\3")
        buf.write("\2\2\2\u14e3\u14d8\3\2\2\2\u14e3\u14d9\3\2\2\2\u14e3\u14db")
        buf.write("\3\2\2\2\u14e3\u14dc\3\2\2\2\u14e3\u14dd\3\2\2\2\u14e3")
        buf.write("\u14de\3\2\2\2\u14e3\u14e0\3\2\2\2\u14e4\u0217\3\2\2\2")
        buf.write("\u14e5\u14e7\tT\2\2\u14e6\u14e8\5\u021c\u010f\2\u14e7")
        buf.write("\u14e6\3\2\2\2\u14e7\u14e8\3\2\2\2\u14e8\u14ea\3\2\2\2")
        buf.write("\u14e9\u14eb\7\u00c1\2\2\u14ea\u14e9\3\2\2\2\u14ea\u14eb")
        buf.write("\3\2\2\2\u14eb\u14ef\3\2\2\2\u14ec\u14ed\7\32\2\2\u14ed")
        buf.write("\u14ee\7\u0089\2\2\u14ee\u14f0\5\u01f6\u00fc\2\u14ef\u14ec")
        buf.write("\3\2\2\2\u14ef\u14f0\3\2\2\2\u14f0\u14f3\3\2\2\2\u14f1")
        buf.write("\u14f2\7\34\2\2\u14f2\u14f4\5\u01f8\u00fd\2\u14f3\u14f1")
        buf.write("\3\2\2\2\u14f3\u14f4\3\2\2\2\u14f4\u1531\3\2\2\2\u14f5")
        buf.write("\u14f7\tU\2\2\u14f6\u14f8\5\u021c\u010f\2\u14f7\u14f6")
        buf.write("\3\2\2\2\u14f7\u14f8\3\2\2\2\u14f8\u14fa\3\2\2\2\u14f9")
        buf.write("\u14fb\7\u00a2\2\2\u14fa\u14f9\3\2\2\2\u14fa\u14fb\3\2")
        buf.write("\2\2\u14fb\u14fd\3\2\2\2\u14fc\u14fe\7\u00ae\2\2\u14fd")
        buf.write("\u14fc\3\2\2\2\u14fd\u14fe\3\2\2\2\u14fe\u1531\3\2\2\2")
        buf.write("\u14ff\u1501\tV\2\2\u1500\u1502\5\u021e\u0110\2\u1501")
        buf.write("\u1500\3\2\2\2\u1501\u1502\3\2\2\2\u1502\u1504\3\2\2\2")
        buf.write("\u1503\u1505\7\u00a2\2\2\u1504\u1503\3\2\2\2\u1504\u1505")
        buf.write("\3\2\2\2\u1505\u1507\3\2\2\2\u1506\u1508\7\u00ae\2\2\u1507")
        buf.write("\u1506\3\2\2\2\u1507\u1508\3\2\2\2\u1508\u1531\3\2\2\2")
        buf.write("\u1509\u150b\tW\2\2\u150a\u150c\5\u0220\u0111\2\u150b")
        buf.write("\u150a\3\2\2\2\u150b\u150c\3\2\2\2\u150c\u150e\3\2\2\2")
        buf.write("\u150d\u150f\7\u00a2\2\2\u150e\u150d\3\2\2\2\u150e\u150f")
        buf.write("\3\2\2\2\u150f\u1511\3\2\2\2\u1510\u1512\7\u00ae\2\2\u1511")
        buf.write("\u1510\3\2\2\2\u1511\u1512\3\2\2\2\u1512\u1531\3\2\2\2")
        buf.write("\u1513\u1531\tX\2\2\u1514\u1516\tY\2\2\u1515\u1517\5\u021c")
        buf.write("\u010f\2\u1516\u1515\3\2\2\2\u1516\u1517\3\2\2\2\u1517")
        buf.write("\u1531\3\2\2\2\u1518\u1519\tZ\2\2\u1519\u151a\7\u03bb")
        buf.write("\2\2\u151a\u151f\7\u03ca\2\2\u151b\u151c\7\u03bd\2\2\u151c")
        buf.write("\u151e\7\u03ca\2\2\u151d\u151b\3\2\2\2\u151e\u1521\3\2")
        buf.write("\2\2\u151f\u151d\3\2\2\2\u151f\u1520\3\2\2\2\u1520\u1522")
        buf.write("\3\2\2\2\u1521\u151f\3\2\2\2\u1522\u1524\7\u03bc\2\2\u1523")
        buf.write("\u1525\7\u00c1\2\2\u1524\u1523\3\2\2\2\u1524\u1525\3\2")
        buf.write("\2\2\u1525\u1529\3\2\2\2\u1526\u1527\7\32\2\2\u1527\u1528")
        buf.write("\7\u0089\2\2\u1528\u152a\5\u01f6\u00fc\2\u1529\u1526\3")
        buf.write("\2\2\2\u1529\u152a\3\2\2\2\u152a\u152d\3\2\2\2\u152b\u152c")
        buf.write("\7\34\2\2\u152c\u152e\5\u01f8\u00fd\2\u152d\u152b\3\2")
        buf.write("\2\2\u152d\u152e\3\2\2\2\u152e\u1531\3\2\2\2\u152f\u1531")
        buf.write("\t[\2\2\u1530\u14e5\3\2\2\2\u1530\u14f5\3\2\2\2\u1530")
        buf.write("\u14ff\3\2\2\2\u1530\u1509\3\2\2\2\u1530\u1513\3\2\2\2")
        buf.write("\u1530\u1514\3\2\2\2\u1530\u1518\3\2\2\2\u1530\u152f\3")
        buf.write("\2\2\2\u1531\u0219\3\2\2\2\u1532\u1534\t\\\2\2\u1533\u1535")
        buf.write("\5\u021c\u010f\2\u1534\u1533\3\2\2\2\u1534\u1535\3\2\2")
        buf.write("\2\u1535\u1549\3\2\2\2\u1536\u1538\7\u00bf\2\2\u1537\u1539")
        buf.write("\5\u021c\u010f\2\u1538\u1537\3\2\2\2\u1538\u1539\3\2\2")
        buf.write("\2\u1539\u153d\3\2\2\2\u153a\u153b\7\32\2\2\u153b\u153c")
        buf.write("\7\u0089\2\2\u153c\u153e\5\u01f6\u00fc\2\u153d\u153a\3")
        buf.write("\2\2\2\u153d\u153e\3\2\2\2\u153e\u1549\3\2\2\2\u153f\u1549")
        buf.write("\t]\2\2\u1540\u1542\7\u00b8\2\2\u1541\u1543\5\u021e\u0110")
        buf.write("\2\u1542\u1541\3\2\2\2\u1542\u1543\3\2\2\2\u1543\u1549")
        buf.write("\3\2\2\2\u1544\u1546\t^\2\2\u1545\u1547\7\u00b3\2\2\u1546")
        buf.write("\u1545\3\2\2\2\u1546\u1547\3\2\2\2\u1547\u1549\3\2\2\2")
        buf.write("\u1548\u1532\3\2\2\2\u1548\u1536\3\2\2\2\u1548\u153f\3")
        buf.write("\2\2\2\u1548\u1540\3\2\2\2\u1548\u1544\3\2\2\2\u1549\u021b")
        buf.write("\3\2\2\2\u154a\u154b\7\u03bb\2\2\u154b\u154c\5\u020a\u0106")
        buf.write("\2\u154c\u154d\7\u03bc\2\2\u154d\u021d\3\2\2\2\u154e\u154f")
        buf.write("\7\u03bb\2\2\u154f\u1550\5\u020a\u0106\2\u1550\u1551\7")
        buf.write("\u03bd\2\2\u1551\u1552\5\u020a\u0106\2\u1552\u1553\7\u03bc")
        buf.write("\2\2\u1553\u021f\3\2\2\2\u1554\u1555\7\u03bb\2\2\u1555")
        buf.write("\u1558\5\u020a\u0106\2\u1556\u1557\7\u03bd\2\2\u1557\u1559")
        buf.write("\5\u020a\u0106\2\u1558\u1556\3\2\2\2\u1558\u1559\3\2\2")
        buf.write("\2\u1559\u155a\3\2\2\2\u155a\u155b\7\u03bc\2\2\u155b\u0221")
        buf.write("\3\2\2\2\u155c\u1561\5\u0204\u0103\2\u155d\u155e\7\u03bd")
        buf.write("\2\2\u155e\u1560\5\u0204\u0103\2\u155f\u155d\3\2\2\2\u1560")
        buf.write("\u1563\3\2\2\2\u1561\u155f\3\2\2\2\u1561\u1562\3\2\2\2")
        buf.write("\u1562\u0223\3\2\2\2\u1563\u1561\3\2\2\2\u1564\u1569\5")
        buf.write("\u01ec\u00f7\2\u1565\u1566\7\u03bd\2\2\u1566\u1568\5\u01ec")
        buf.write("\u00f7\2\u1567\u1565\3\2\2\2\u1568\u156b\3\2\2\2\u1569")
        buf.write("\u1567\3\2\2\2\u1569\u156a\3\2\2\2\u156a\u0225\3\2\2\2")
        buf.write("\u156b\u1569\3\2\2\2\u156c\u156d\7\u03bb\2\2\u156d\u1572")
        buf.write("\5\u01f0\u00f9\2\u156e\u156f\7\u03bd\2\2\u156f\u1571\5")
        buf.write("\u01f0\u00f9\2\u1570\u156e\3\2\2\2\u1571\u1574\3\2\2\2")
        buf.write("\u1572\u1570\3\2\2\2\u1572\u1573\3\2\2\2\u1573\u1575\3")
        buf.write("\2\2\2\u1574\u1572\3\2\2\2\u1575\u1576\7\u03bc\2\2\u1576")
        buf.write("\u0227\3\2\2\2\u1577\u157c\5\u0250\u0129\2\u1578\u1579")
        buf.write("\7\u03bd\2\2\u1579\u157b\5\u0250\u0129\2\u157a\u1578\3")
        buf.write("\2\2\2\u157b\u157e\3\2\2\2\u157c\u157a\3\2\2\2\u157c\u157d")
        buf.write("\3\2\2\2\u157d\u0229\3\2\2\2\u157e\u157c\3\2\2\2\u157f")
        buf.write("\u1584\5\u0236\u011c\2\u1580\u1581\7\u03bd\2\2\u1581\u1583")
        buf.write("\5\u0236\u011c\2\u1582\u1580\3\2\2\2\u1583\u1586\3\2\2")
        buf.write("\2\u1584\u1582\3\2\2\2\u1584\u1585\3\2\2\2\u1585\u022b")
        buf.write("\3\2\2\2\u1586\u1584\3\2\2\2\u1587\u158c\5\u0216\u010c")
        buf.write("\2\u1588\u1589\7\u03bd\2\2\u1589\u158b\5\u0216\u010c\2")
        buf.write("\u158a\u1588\3\2\2\2\u158b\u158e\3\2\2\2\u158c\u158a\3")
        buf.write("\2\2\2\u158c\u158d\3\2\2\2\u158d\u022d\3\2\2\2\u158e\u158c")
        buf.write("\3\2\2\2\u158f\u1594\7\u03ca\2\2\u1590\u1591\7\u03bd\2")
        buf.write("\2\u1591\u1593\7\u03ca\2\2\u1592\u1590\3\2\2\2\u1593\u1596")
        buf.write("\3\2\2\2\u1594\u1592\3\2\2\2\u1594\u1595\3\2\2\2\u1595")
        buf.write("\u022f\3\2\2\2\u1596\u1594\3\2\2\2\u1597\u159c\7\u03d5")
        buf.write("\2\2\u1598\u1599\7\u03bd\2\2\u1599\u159b\7\u03d5\2\2\u159a")
        buf.write("\u1598\3\2\2\2\u159b\u159e\3\2\2\2\u159c\u159a\3\2\2\2")
        buf.write("\u159c\u159d\3\2\2\2\u159d\u0231\3\2\2\2\u159e\u159c\3")
        buf.write("\2\2\2\u159f\u15a8\7i\2\2\u15a0\u15a8\5\u0216\u010c\2")
        buf.write("\u15a1\u15a5\5\u0234\u011b\2\u15a2\u15a3\7j\2\2\u15a3")
        buf.write("\u15a4\7\u00a3\2\2\u15a4\u15a6\5\u0234\u011b\2\u15a5\u15a2")
        buf.write("\3\2\2\2\u15a5\u15a6\3\2\2\2\u15a6\u15a8\3\2\2\2\u15a7")
        buf.write("\u159f\3\2\2\2\u15a7\u15a0\3\2\2\2\u15a7\u15a1\3\2\2\2")
        buf.write("\u15a8\u0233\3\2\2\2\u15a9\u15af\t_\2\2\u15aa\u15ac\7")
        buf.write("\u03bb\2\2\u15ab\u15ad\5\u020a\u0106\2\u15ac\u15ab\3\2")
        buf.write("\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15ae\3\2\2\2\u15ae\u15b0")
        buf.write("\7\u03bc\2\2\u15af\u15aa\3\2\2\2\u15af\u15b0\3\2\2\2\u15b0")
        buf.write("\u15b8\3\2\2\2\u15b1\u15b2\7\u00f3\2\2\u15b2\u15b4\7\u03bb")
        buf.write("\2\2\u15b3\u15b5\5\u020a\u0106\2\u15b4\u15b3\3\2\2\2\u15b4")
        buf.write("\u15b5\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6\u15b8\7\u03bc")
        buf.write("\2\2\u15b7\u15a9\3\2\2\2\u15b7\u15b1\3\2\2\2\u15b8\u0235")
        buf.write("\3\2\2\2\u15b9\u15bc\5\u0250\u0129\2\u15ba\u15bc\7)\2")
        buf.write("\2\u15bb\u15b9\3\2\2\2\u15bb\u15ba\3\2\2\2\u15bc\u0237")
        buf.write("\3\2\2\2\u15bd\u15be\7F\2\2\u15be\u15bf\7\67\2\2\u15bf")
        buf.write("\u0239\3\2\2\2\u15c0\u15c1\7F\2\2\u15c1\u15c2\7g\2\2\u15c2")
        buf.write("\u15c3\7\67\2\2\u15c3\u023b\3\2\2\2\u15c4\u15d6\5\u023e")
        buf.write("\u0120\2\u15c5\u15d6\5\u0246\u0124\2\u15c6\u15c7\5\u0248")
        buf.write("\u0125\2\u15c7\u15c9\7\u03bb\2\2\u15c8\u15ca\5\u024c\u0127")
        buf.write("\2\u15c9\u15c8\3\2\2\2\u15c9\u15ca\3\2\2\2\u15ca\u15cb")
        buf.write("\3\2\2\2\u15cb\u15cc\7\u03bc\2\2\u15cc\u15d6\3\2\2\2\u15cd")
        buf.write("\u15ce\5\u01ea\u00f6\2\u15ce\u15d0\7\u03bb\2\2\u15cf\u15d1")
        buf.write("\5\u024c\u0127\2\u15d0\u15cf\3\2\2\2\u15d0\u15d1\3\2\2")
        buf.write("\2\u15d1\u15d2\3\2\2\2\u15d2\u15d3\7\u03bc\2\2\u15d3\u15d6")
        buf.write("\3\2\2\2\u15d4\u15d6\5\u024a\u0126\2\u15d5\u15c4\3\2\2")
        buf.write("\2\u15d5\u15c5\3\2\2\2\u15d5\u15c6\3\2\2\2\u15d5\u15cd")
        buf.write("\3\2\2\2\u15d5\u15d4\3\2\2\2\u15d6\u023d\3\2\2\2\u15d7")
        buf.write("\u1675\t`\2\2\u15d8\u15d9\7!\2\2\u15d9\u15da\7\u03bb\2")
        buf.write("\2\u15da\u15db\5\u0250\u0129\2\u15db\u15dc\7\u03bd\2\2")
        buf.write("\u15dc\u15dd\5\u021a\u010e\2\u15dd\u15de\7\u03bc\2\2\u15de")
        buf.write("\u1675\3\2\2\2\u15df\u15e0\7!\2\2\u15e0\u15e1\7\u03bb")
        buf.write("\2\2\u15e1\u15e2\5\u0250\u0129\2\u15e2\u15e3\7\u00a6\2")
        buf.write("\2\u15e3\u15e4\5\u01f6\u00fc\2\u15e4\u15e5\7\u03bc\2\2")
        buf.write("\u15e5\u1675\3\2\2\2\u15e6\u15e7\7\30\2\2\u15e7\u15e8")
        buf.write("\7\u03bb\2\2\u15e8\u15e9\5\u0250\u0129\2\u15e9\u15ea\7")
        buf.write("\17\2\2\u15ea\u15eb\5\u021a\u010e\2\u15eb\u15ec\7\u03bc")
        buf.write("\2\2\u15ec\u1675\3\2\2\2\u15ed\u15ee\7\u00a7\2\2\u15ee")
        buf.write("\u15ef\7\u03bb\2\2\u15ef\u15f0\5\u01ee\u00f8\2\u15f0\u15f1")
        buf.write("\7\u03bc\2\2\u15f1\u1675\3\2\2\2\u15f2\u15f3\7\27\2\2")
        buf.write("\u15f3\u15f5\5\u0250\u0129\2\u15f4\u15f6\5\u0240\u0121")
        buf.write("\2\u15f5\u15f4\3\2\2\2\u15f6\u15f7\3\2\2\2\u15f7\u15f5")
        buf.write("\3\2\2\2\u15f7\u15f8\3\2\2\2\u15f8\u15fb\3\2\2\2\u15f9")
        buf.write("\u15fa\7\63\2\2\u15fa\u15fc\5\u024e\u0128\2\u15fb\u15f9")
        buf.write("\3\2\2\2\u15fb\u15fc\3\2\2\2\u15fc\u15fd\3\2\2\2\u15fd")
        buf.write("\u15fe\7\u013b\2\2\u15fe\u1675\3\2\2\2\u15ff\u1601\7\27")
        buf.write("\2\2\u1600\u1602\5\u0240\u0121\2\u1601\u1600\3\2\2\2\u1602")
        buf.write("\u1603\3\2\2\2\u1603\u1601\3\2\2\2\u1603\u1604\3\2\2\2")
        buf.write("\u1604\u1607\3\2\2\2\u1605\u1606\7\63\2\2\u1606\u1608")
        buf.write("\5\u024e\u0128\2\u1607\u1605\3\2\2\2\u1607\u1608\3\2\2")
        buf.write("\2\u1608\u1609\3\2\2\2\u1609\u160a\7\u013b\2\2\u160a\u1675")
        buf.write("\3\2\2\2\u160b\u160c\7\u00bf\2\2\u160c\u160d\7\u03bb\2")
        buf.write("\2\u160d\u1610\5\u024c\u0127\2\u160e\u160f\7\u00a6\2\2")
        buf.write("\u160f\u1611\5\u01f6\u00fc\2\u1610\u160e\3\2\2\2\u1610")
        buf.write("\u1611\3\2\2\2\u1611\u1612\3\2\2\2\u1612\u1613\7\u03bc")
        buf.write("\2\2\u1613\u1675\3\2\2\2\u1614\u1615\7\u00f4\2\2\u1615")
        buf.write("\u1618\7\u03bb\2\2\u1616\u1619\5\u020e\u0108\2\u1617\u1619")
        buf.write("\5\u0250\u0129\2\u1618\u1616\3\2\2\2\u1618\u1617\3\2\2")
        buf.write("\2\u1619\u161a\3\2\2\2\u161a\u161d\7H\2\2\u161b\u161e")
        buf.write("\5\u020e\u0108\2\u161c\u161e\5\u0250\u0129\2\u161d\u161b")
        buf.write("\3\2\2\2\u161d\u161c\3\2\2\2\u161e\u161f\3\2\2\2\u161f")
        buf.write("\u1620\7\u03bc\2\2\u1620\u1675\3\2\2\2\u1621\u1622\ta")
        buf.write("\2\2\u1622\u1625\7\u03bb\2\2\u1623\u1626\5\u020e\u0108")
        buf.write("\2\u1624\u1626\5\u0250\u0129\2\u1625\u1623\3\2\2\2\u1625")
        buf.write("\u1624\3\2\2\2\u1626\u1627\3\2\2\2\u1627\u162a\7?\2\2")
        buf.write("\u1628\u162b\5\u020a\u0106\2\u1629\u162b\5\u0250\u0129")
        buf.write("\2\u162a\u1628\3\2\2\2\u162a\u1629\3\2\2\2\u162b\u1631")
        buf.write("\3\2\2\2\u162c\u162f\7<\2\2\u162d\u1630\5\u020a\u0106")
        buf.write("\2\u162e\u1630\5\u0250\u0129\2\u162f\u162d\3\2\2\2\u162f")
        buf.write("\u162e\3\2\2\2\u1630\u1632\3\2\2\2\u1631\u162c\3\2\2\2")
        buf.write("\u1631\u1632\3\2\2\2\u1632\u1633\3\2\2\2\u1633\u1634\7")
        buf.write("\u03bc\2\2\u1634\u1675\3\2\2\2\u1635\u1636\7\u00f8\2\2")
        buf.write("\u1636\u1637\7\u03bb\2\2\u1637\u163a\tb\2\2\u1638\u163b")
        buf.write("\5\u020e\u0108\2\u1639\u163b\5\u0250\u0129\2\u163a\u1638")
        buf.write("\3\2\2\2\u163a\u1639\3\2\2\2\u163a\u163b\3\2\2\2\u163b")
        buf.write("\u163c\3\2\2\2\u163c\u163f\7?\2\2\u163d\u1640\5\u020e")
        buf.write("\u0108\2\u163e\u1640\5\u0250\u0129\2\u163f\u163d\3\2\2")
        buf.write("\2\u163f\u163e\3\2\2\2\u1640\u1641\3\2\2\2\u1641\u1642")
        buf.write("\7\u03bc\2\2\u1642\u1675\3\2\2\2\u1643\u1644\7\u00f8\2")
        buf.write("\2\u1644\u1647\7\u03bb\2\2\u1645\u1648\5\u020e\u0108\2")
        buf.write("\u1646\u1648\5\u0250\u0129\2\u1647\u1645\3\2\2\2\u1647")
        buf.write("\u1646\3\2\2\2\u1648\u1649\3\2\2\2\u1649\u164c\7?\2\2")
        buf.write("\u164a\u164d\5\u020e\u0108\2\u164b\u164d\5\u0250\u0129")
        buf.write("\2\u164c\u164a\3\2\2\2\u164c\u164b\3\2\2\2\u164d\u164e")
        buf.write("\3\2\2\2\u164e\u164f\7\u03bc\2\2\u164f\u1675\3\2\2\2\u1650")
        buf.write("\u1651\7\u039c\2\2\u1651\u1654\7\u03bb\2\2\u1652\u1655")
        buf.write("\5\u020e\u0108\2\u1653\u1655\5\u0250\u0129\2\u1654\u1652")
        buf.write("\3\2\2\2\u1654\u1653\3\2\2\2\u1655\u165c\3\2\2\2\u1656")
        buf.write("\u1657\7\17\2\2\u1657\u1658\tc\2\2\u1658\u1659\7\u03bb")
        buf.write("\2\2\u1659\u165a\5\u020a\u0106\2\u165a\u165b\7\u03bc\2")
        buf.write("\2\u165b\u165d\3\2\2\2\u165c\u1656\3\2\2\2\u165c\u165d")
        buf.write("\3\2\2\2\u165d\u165f\3\2\2\2\u165e\u1660\5\u0242\u0122")
        buf.write("\2\u165f\u165e\3\2\2\2\u165f\u1660\3\2\2\2\u1660\u1661")
        buf.write("\3\2\2\2\u1661\u1662\7\u03bc\2\2\u1662\u1675\3\2\2\2\u1663")
        buf.write("\u1664\7\u00f1\2\2\u1664\u1665\7\u03bb\2\2\u1665\u1666")
        buf.write("\5<\37\2\u1666\u1669\7?\2\2\u1667\u166a\5\u020e\u0108")
        buf.write("\2\u1668\u166a\5\u0250\u0129\2\u1669\u1667\3\2\2\2\u1669")
        buf.write("\u1668\3\2\2\2\u166a\u166b\3\2\2\2\u166b\u166c\7\u03bc")
        buf.write("\2\2\u166c\u1675\3\2\2\2\u166d\u166e\7\u02d5\2\2\u166e")
        buf.write("\u166f\7\u03bb\2\2\u166f\u1670\t]\2\2\u1670\u1671\7\u03bd")
        buf.write("\2\2\u1671\u1672\5\u020e\u0108\2\u1672\u1673\7\u03bc\2")
        buf.write("\2\u1673\u1675\3\2\2\2\u1674\u15d7\3\2\2\2\u1674\u15d8")
        buf.write("\3\2\2\2\u1674\u15df\3\2\2\2\u1674\u15e6\3\2\2\2\u1674")
        buf.write("\u15ed\3\2\2\2\u1674\u15f2\3\2\2\2\u1674\u15ff\3\2\2\2")
        buf.write("\u1674\u160b\3\2\2\2\u1674\u1614\3\2\2\2\u1674\u1621\3")
        buf.write("\2\2\2\u1674\u1635\3\2\2\2\u1674\u1643\3\2\2\2\u1674\u1650")
        buf.write("\3\2\2\2\u1674\u1663\3\2\2\2\u1674\u166d\3\2\2\2\u1675")
        buf.write("\u023f\3\2\2\2\u1676\u1677\7\u00a8\2\2\u1677\u1678\5\u024e")
        buf.write("\u0128\2\u1678\u1679\7\u0099\2\2\u1679\u167a\5\u024e\u0128")
        buf.write("\2\u167a\u0241\3\2\2\2\u167b\u167c\7\u0176\2\2\u167c\u1681")
        buf.write("\5\u0244\u0123\2\u167d\u167e\7\u03bd\2\2\u167e\u1680\5")
        buf.write("\u0244\u0123\2\u167f\u167d\3\2\2\2\u1680\u1683\3\2\2\2")
        buf.write("\u1681\u167f\3\2\2\2\u1681\u1682\3\2\2\2\u1682\u168a\3")
        buf.write("\2\2\2\u1683\u1681\3\2\2\2\u1684\u1685\7\u0176\2\2\u1685")
        buf.write("\u1686\5\u020a\u0106\2\u1686\u1687\7\u03af\2\2\u1687\u1688")
        buf.write("\5\u020a\u0106\2\u1688\u168a\3\2\2\2\u1689\u167b\3\2\2")
        buf.write("\2\u1689\u1684\3\2\2\2\u168a\u0243\3\2\2\2\u168b\u168d")
        buf.write("\5\u020a\u0106\2\u168c\u168e\td\2\2\u168d\u168c\3\2\2")
        buf.write("\2\u168d\u168e\3\2\2\2\u168e\u0245\3\2\2\2\u168f\u1690")
        buf.write("\te\2\2\u1690\u1692\7\u03bb\2\2\u1691\u1693\t%\2\2\u1692")
        buf.write("\u1691\3\2\2\2\u1692\u1693\3\2\2\2\u1693\u1694\3\2\2\2")
        buf.write("\u1694\u1695\5\u024e\u0128\2\u1695\u1696\7\u03bc\2\2\u1696")
        buf.write("\u16cc\3\2\2\2\u1697\u1698\7\u00dc\2\2\u1698\u169e\7\u03bb")
        buf.write("\2\2\u1699\u169f\7\u03aa\2\2\u169a\u169c\7\n\2\2\u169b")
        buf.write("\u169a\3\2\2\2\u169b\u169c\3\2\2\2\u169c\u169d\3\2\2\2")
        buf.write("\u169d\u169f\5\u024e\u0128\2\u169e\u1699\3\2\2\2\u169e")
        buf.write("\u169b\3\2\2\2\u169f\u16a0\3\2\2\2\u16a0\u16cc\7\u03bc")
        buf.write("\2\2\u16a1\u16a2\7\u00dc\2\2\u16a2\u16a3\7\u03bb\2\2\u16a3")
        buf.write("\u16a4\7/\2\2\u16a4\u16a5\5\u024c\u0127\2\u16a5\u16a6")
        buf.write("\7\u03bc\2\2\u16a6\u16cc\3\2\2\2\u16a7\u16a8\7\u00e8\2")
        buf.write("\2\u16a8\u16a9\7\u03bb\2\2\u16a9\u16aa\7\u03aa\2\2\u16aa")
        buf.write("\u16cc\7\u03bc\2\2\u16ab\u16ac\tf\2\2\u16ac\u16ae\7\u03bb")
        buf.write("\2\2\u16ad\u16af\7\n\2\2\u16ae\u16ad\3\2\2\2\u16ae\u16af")
        buf.write("\3\2\2\2\u16af\u16b0\3\2\2\2\u16b0\u16b1\5\u024e\u0128")
        buf.write("\2\u16b1\u16b2\7\u03bc\2\2\u16b2\u16cc\3\2\2\2\u16b3\u16b4")
        buf.write("\7\u00dd\2\2\u16b4\u16b6\7\u03bb\2\2\u16b5\u16b7\7/\2")
        buf.write("\2\u16b6\u16b5\3\2\2\2\u16b6\u16b7\3\2\2\2\u16b7\u16b8")
        buf.write("\3\2\2\2\u16b8\u16c3\5\u024c\u0127\2\u16b9\u16ba\7o\2")
        buf.write("\2\u16ba\u16bb\7\24\2\2\u16bb\u16c0\5\u00d2j\2\u16bc\u16bd")
        buf.write("\7\u03bd\2\2\u16bd\u16bf\5\u00d2j\2\u16be\u16bc\3\2\2")
        buf.write("\2\u16bf\u16c2\3\2\2\2\u16c0\u16be\3\2\2\2\u16c0\u16c1")
        buf.write("\3\2\2\2\u16c1\u16c4\3\2\2\2\u16c2\u16c0\3\2\2\2\u16c3")
        buf.write("\u16b9\3\2\2\2\u16c3\u16c4\3\2\2\2\u16c4\u16c7\3\2\2\2")
        buf.write("\u16c5\u16c6\7\u008a\2\2\u16c6\u16c8\7\u03ca\2\2\u16c7")
        buf.write("\u16c5\3\2\2\2\u16c7\u16c8\3\2\2\2\u16c8\u16c9\3\2\2\2")
        buf.write("\u16c9\u16ca\7\u03bc\2\2\u16ca\u16cc\3\2\2\2\u16cb\u168f")
        buf.write("\3\2\2\2\u16cb\u1697\3\2\2\2\u16cb\u16a1\3\2\2\2\u16cb")
        buf.write("\u16a7\3\2\2\2\u16cb\u16ab\3\2\2\2\u16cb\u16b3\3\2\2\2")
        buf.write("\u16cc\u0247\3\2\2\2\u16cd\u16e5\5\u026c\u0137\2\u16ce")
        buf.write("\u16e5\7\u0242\2\2\u16cf\u16e5\7\u00ed\2\2\u16d0\u16e5")
        buf.write("\7\u00e9\2\2\u16d1\u16e5\7\u00ea\2\2\u16d2\u16e5\7\u00eb")
        buf.write("\2\2\u16d3\u16e5\7\u00ee\2\2\u16d4\u16e5\7\u00ef\2\2\u16d5")
        buf.write("\u16e5\7\u00f0\2\2\u16d6\u16e5\7F\2\2\u16d7\u16e5\7M\2")
        buf.write("\2\u16d8\u16e5\7\u00ec\2\2\u16d9\u16e5\7\u00f2\2\2\u16da")
        buf.write("\u16e5\7\u0198\2\2\u16db\u16e5\7\u00f3\2\2\u16dc\u16e5")
        buf.write("\7\177\2\2\u16dd\u16e5\7\u00f5\2\2\u16de\u16e5\7\u00f6")
        buf.write("\2\2\u16df\u16e5\7\u00f7\2\2\u16e0\u16e5\7\u00f8\2\2\u16e1")
        buf.write("\u16e5\7\u00f9\2\2\u16e2\u16e5\7\u00fa\2\2\u16e3\u16e5")
        buf.write("\7\u00fb\2\2\u16e4\u16cd\3\2\2\2\u16e4\u16ce\3\2\2\2\u16e4")
        buf.write("\u16cf\3\2\2\2\u16e4\u16d0\3\2\2\2\u16e4\u16d1\3\2\2\2")
        buf.write("\u16e4\u16d2\3\2\2\2\u16e4\u16d3\3\2\2\2\u16e4\u16d4\3")
        buf.write("\2\2\2\u16e4\u16d5\3\2\2\2\u16e4\u16d6\3\2\2\2\u16e4\u16d7")
        buf.write("\3\2\2\2\u16e4\u16d8\3\2\2\2\u16e4\u16d9\3\2\2\2\u16e4")
        buf.write("\u16da\3\2\2\2\u16e4\u16db\3\2\2\2\u16e4\u16dc\3\2\2\2")
        buf.write("\u16e4\u16dd\3\2\2\2\u16e4\u16de\3\2\2\2\u16e4\u16df\3")
        buf.write("\2\2\2\u16e4\u16e0\3\2\2\2\u16e4\u16e1\3\2\2\2\u16e4\u16e2")
        buf.write("\3\2\2\2\u16e4\u16e3\3\2\2\2\u16e5\u0249\3\2\2\2\u16e6")
        buf.write("\u16e7\tg\2\2\u16e7\u16e8\7\u03bb\2\2\u16e8\u16e9\5\u024e")
        buf.write("\u0128\2\u16e9\u16ea\7\u03bc\2\2\u16ea\u024b\3\2\2\2\u16eb")
        buf.write("\u16f0\5\u0216\u010c\2\u16ec\u16f0\5\u01ee\u00f8\2\u16ed")
        buf.write("\u16f0\5\u023c\u011f\2\u16ee\u16f0\5\u0250\u0129\2\u16ef")
        buf.write("\u16eb\3\2\2\2\u16ef\u16ec\3\2\2\2\u16ef\u16ed\3\2\2\2")
        buf.write("\u16ef\u16ee\3\2\2\2\u16f0\u16fa\3\2\2\2\u16f1\u16f6\7")
        buf.write("\u03bd\2\2\u16f2\u16f7\5\u0216\u010c\2\u16f3\u16f7\5\u01ee")
        buf.write("\u00f8\2\u16f4\u16f7\5\u023c\u011f\2\u16f5\u16f7\5\u0250")
        buf.write("\u0129\2\u16f6\u16f2\3\2\2\2\u16f6\u16f3\3\2\2\2\u16f6")
        buf.write("\u16f4\3\2\2\2\u16f6\u16f5\3\2\2\2\u16f7\u16f9\3\2\2\2")
        buf.write("\u16f8\u16f1\3\2\2\2\u16f9\u16fc\3\2\2\2\u16fa\u16f8\3")
        buf.write("\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u024d\3\2\2\2\u16fc\u16fa")
        buf.write("\3\2\2\2\u16fd\u1702\5\u0216\u010c\2\u16fe\u1702\5\u01ee")
        buf.write("\u00f8\2\u16ff\u1702\5\u023c\u011f\2\u1700\u1702\5\u0250")
        buf.write("\u0129\2\u1701\u16fd\3\2\2\2\u1701\u16fe\3\2\2\2\u1701")
        buf.write("\u16ff\3\2\2\2\u1701\u1700\3\2\2\2\u1702\u024f\3\2\2\2")
        buf.write("\u1703\u1704\b\u0129\1\2\u1704\u1705\th\2\2\u1705\u170f")
        buf.write("\5\u0250\u0129\6\u1706\u1707\5\u0252\u012a\2\u1707\u1709")
        buf.write("\7P\2\2\u1708\u170a\7g\2\2\u1709\u1708\3\2\2\2\u1709\u170a")
        buf.write("\3\2\2\2\u170a\u170b\3\2\2\2\u170b\u170c\ti\2\2\u170c")
        buf.write("\u170f\3\2\2\2\u170d\u170f\5\u0252\u012a\2\u170e\u1703")
        buf.write("\3\2\2\2\u170e\u1706\3\2\2\2\u170e\u170d\3\2\2\2\u170f")
        buf.write("\u1716\3\2\2\2\u1710\u1711\f\5\2\2\u1711\u1712\5\u025a")
        buf.write("\u012e\2\u1712\u1713\5\u0250\u0129\6\u1713\u1715\3\2\2")
        buf.write("\2\u1714\u1710\3\2\2\2\u1715\u1718\3\2\2\2\u1716\u1714")
        buf.write("\3\2\2\2\u1716\u1717\3\2\2\2\u1717\u0251\3\2\2\2\u1718")
        buf.write("\u1716\3\2\2\2\u1719\u171c\b\u012a\1\2\u171a\u171b\7\u03d5")
        buf.write("\2\2\u171b\u171d\7\u03a1\2\2\u171c\u171a\3\2\2\2\u171c")
        buf.write("\u171d\3\2\2\2\u171d\u171e\3\2\2\2\u171e\u171f\5\u0254")
        buf.write("\u012b\2\u171f\u1759\3\2\2\2\u1720\u1721\f\t\2\2\u1721")
        buf.write("\u1722\5\u0258\u012d\2\u1722\u1723\5\u0252\u012a\n\u1723")
        buf.write("\u1758\3\2\2\2\u1724\u1726\f\7\2\2\u1725\u1727\7g\2\2")
        buf.write("\u1726\u1725\3\2\2\2\u1726\u1727\3\2\2\2\u1727\u1728\3")
        buf.write("\2\2\2\u1728\u1729\7\22\2\2\u1729\u172a\5\u0252\u012a")
        buf.write("\2\u172a\u172b\7\16\2\2\u172b\u172c\5\u0252\u012a\b\u172c")
        buf.write("\u1758\3\2\2\2\u172d\u172e\f\6\2\2\u172e\u172f\7\u01f3")
        buf.write("\2\2\u172f\u1730\7Y\2\2\u1730\u1758\5\u0252\u012a\7\u1731")
        buf.write("\u1733\f\4\2\2\u1732\u1734\7g\2\2\u1733\u1732\3\2\2\2")
        buf.write("\u1733\u1734\3\2\2\2\u1734\u1735\3\2\2\2\u1735\u1736\t")
        buf.write("j\2\2\u1736\u1758\5\u0252\u012a\5\u1737\u1739\f\13\2\2")
        buf.write("\u1738\u173a\7g\2\2\u1739\u1738\3\2\2\2\u1739\u173a\3")
        buf.write("\2\2\2\u173a\u173b\3\2\2\2\u173b\u173c\7H\2\2\u173c\u173f")
        buf.write("\7\u03bb\2\2\u173d\u1740\5\u00b4[\2\u173e\u1740\5\u0228")
        buf.write("\u0115\2\u173f\u173d\3\2\2\2\u173f\u173e\3\2\2\2\u1740")
        buf.write("\u1741\3\2\2\2\u1741\u1742\7\u03bc\2\2\u1742\u1758\3\2")
        buf.write("\2\2\u1743\u1744\f\n\2\2\u1744\u1745\7P\2\2\u1745\u1758")
        buf.write("\5\u0214\u010b\2\u1746\u1747\f\b\2\2\u1747\u1748\5\u0258")
        buf.write("\u012d\2\u1748\u1749\tk\2\2\u1749\u174a\7\u03bb\2\2\u174a")
        buf.write("\u174b\5\u00b4[\2\u174b\u174c\7\u03bc\2\2\u174c\u1758")
        buf.write("\3\2\2\2\u174d\u174f\f\5\2\2\u174e\u1750\7g\2\2\u174f")
        buf.write("\u174e\3\2\2\2\u174f\u1750\3\2\2\2\u1750\u1751\3\2\2\2")
        buf.write("\u1751\u1752\7Y\2\2\u1752\u1755\5\u0252\u012a\2\u1753")
        buf.write("\u1754\7\u0141\2\2\u1754\u1756\7\u03ca\2\2\u1755\u1753")
        buf.write("\3\2\2\2\u1755\u1756\3\2\2\2\u1756\u1758\3\2\2\2\u1757")
        buf.write("\u1720\3\2\2\2\u1757\u1724\3\2\2\2\u1757\u172d\3\2\2\2")
        buf.write("\u1757\u1731\3\2\2\2\u1757\u1737\3\2\2\2\u1757\u1743\3")
        buf.write("\2\2\2\u1757\u1746\3\2\2\2\u1757\u174d\3\2\2\2\u1758\u175b")
        buf.write("\3\2\2\2\u1759\u1757\3\2\2\2\u1759\u175a\3\2\2\2\u175a")
        buf.write("\u0253\3\2\2\2\u175b\u1759\3\2\2\2\u175c\u175d\b\u012b")
        buf.write("\1\2\u175d\u178a\5\u0216\u010c\2\u175e\u178a\5\u01ee\u00f8")
        buf.write("\2\u175f\u178a\5\u023c\u011f\2\u1760\u178a\5\u01f4\u00fb")
        buf.write("\2\u1761\u1762\5\u0256\u012c\2\u1762\u1763\5\u0254\u012b")
        buf.write("\13\u1763\u178a\3\2\2\2\u1764\u1765\7\u00c1\2\2\u1765")
        buf.write("\u178a\5\u0254\u012b\n\u1766\u1767\7\u03bb\2\2\u1767\u176c")
        buf.write("\5\u0250\u0129\2\u1768\u1769\7\u03bd\2\2\u1769\u176b\5")
        buf.write("\u0250\u0129\2\u176a\u1768\3\2\2\2\u176b\u176e\3\2\2\2")
        buf.write("\u176c\u176a\3\2\2\2\u176c\u176d\3\2\2\2\u176d\u176f\3")
        buf.write("\2\2\2\u176e\u176c\3\2\2\2\u176f\u1770\7\u03bc\2\2\u1770")
        buf.write("\u178a\3\2\2\2\u1771\u1772\7\u01e1\2\2\u1772\u1773\7\u03bb")
        buf.write("\2\2\u1773\u1776\5\u0250\u0129\2\u1774\u1775\7\u03bd\2")
        buf.write("\2\u1775\u1777\5\u0250\u0129\2\u1776\u1774\3\2\2\2\u1777")
        buf.write("\u1778\3\2\2\2\u1778\u1776\3\2\2\2\u1778\u1779\3\2\2\2")
        buf.write("\u1779\u177a\3\2\2\2\u177a\u177b\7\u03bc\2\2\u177b\u178a")
        buf.write("\3\2\2\2\u177c\u177d\7\67\2\2\u177d\u177e\7\u03bb\2\2")
        buf.write("\u177e\u177f\5\u00b4[\2\u177f\u1780\7\u03bc\2\2\u1780")
        buf.write("\u178a\3\2\2\2\u1781\u1782\7\u03bb\2\2\u1782\u1783\5\u00b4")
        buf.write("[\2\u1783\u1784\7\u03bc\2\2\u1784\u178a\3\2\2\2\u1785")
        buf.write("\u1786\7N\2\2\u1786\u1787\5\u0250\u0129\2\u1787\u1788")
        buf.write("\5<\37\2\u1788\u178a\3\2\2\2\u1789\u175c\3\2\2\2\u1789")
        buf.write("\u175e\3\2\2\2\u1789\u175f\3\2\2\2\u1789\u1760\3\2\2\2")
        buf.write("\u1789\u1761\3\2\2\2\u1789\u1764\3\2\2\2\u1789\u1766\3")
        buf.write("\2\2\2\u1789\u1771\3\2\2\2\u1789\u177c\3\2\2\2\u1789\u1781")
        buf.write("\3\2\2\2\u1789\u1785\3\2\2\2\u178a\u1798\3\2\2\2\u178b")
        buf.write("\u178c\f\4\2\2\u178c\u178d\5\u025c\u012f\2\u178d\u178e")
        buf.write("\5\u0254\u012b\5\u178e\u1797\3\2\2\2\u178f\u1790\f\3\2")
        buf.write("\2\u1790\u1791\5\u025e\u0130\2\u1791\u1792\5\u0254\u012b")
        buf.write("\4\u1792\u1797\3\2\2\2\u1793\u1794\f\r\2\2\u1794\u1795")
        buf.write("\7\34\2\2\u1795\u1797\5\u01f8\u00fd\2\u1796\u178b\3\2")
        buf.write("\2\2\u1796\u178f\3\2\2\2\u1796\u1793\3\2\2\2\u1797\u179a")
        buf.write("\3\2\2\2\u1798\u1796\3\2\2\2\u1798\u1799\3\2\2\2\u1799")
        buf.write("\u0255\3\2\2\2\u179a\u1798\3\2\2\2\u179b\u179c\tl\2\2")
        buf.write("\u179c\u0257\3\2\2\2\u179d\u17ac\7\u03b2\2\2\u179e\u17ac")
        buf.write("\7\u03b3\2\2\u179f\u17ac\7\u03b4\2\2\u17a0\u17a1\7\u03b4")
        buf.write("\2\2\u17a1\u17ac\7\u03b2\2\2\u17a2\u17a3\7\u03b3\2\2\u17a3")
        buf.write("\u17ac\7\u03b2\2\2\u17a4\u17a5\7\u03b4\2\2\u17a5\u17ac")
        buf.write("\7\u03b3\2\2\u17a6\u17a7\7\u03b5\2\2\u17a7\u17ac\7\u03b2")
        buf.write("\2\2\u17a8\u17a9\7\u03b4\2\2\u17a9\u17aa\7\u03b2\2\2\u17aa")
        buf.write("\u17ac\7\u03b3\2\2\u17ab\u179d\3\2\2\2\u17ab\u179e\3\2")
        buf.write("\2\2\u17ab\u179f\3\2\2\2\u17ab\u17a0\3\2\2\2\u17ab\u17a2")
        buf.write("\3\2\2\2\u17ab\u17a4\3\2\2\2\u17ab\u17a6\3\2\2\2\u17ab")
        buf.write("\u17a8\3\2\2\2\u17ac\u0259\3\2\2\2\u17ad\u17b5\7\16\2")
        buf.write("\2\u17ae\u17af\7\u03b8\2\2\u17af\u17b5\7\u03b8\2\2\u17b0")
        buf.write("\u17b5\7\u00ad\2\2\u17b1\u17b5\7n\2\2\u17b2\u17b3\7\u03b7")
        buf.write("\2\2\u17b3\u17b5\7\u03b7\2\2\u17b4\u17ad\3\2\2\2\u17b4")
        buf.write("\u17ae\3\2\2\2\u17b4\u17b0\3\2\2\2\u17b4\u17b1\3\2\2\2")
        buf.write("\u17b4\u17b2\3\2\2\2\u17b5\u025b\3\2\2\2\u17b6\u17b7\7")
        buf.write("\u03b4\2\2\u17b7\u17be\7\u03b4\2\2\u17b8\u17b9\7\u03b3")
        buf.write("\2\2\u17b9\u17be\7\u03b3\2\2\u17ba\u17be\7\u03b8\2\2\u17bb")
        buf.write("\u17be\7\u03b9\2\2\u17bc\u17be\7\u03b7\2\2\u17bd\u17b6")
        buf.write("\3\2\2\2\u17bd\u17b8\3\2\2\2\u17bd\u17ba\3\2\2\2\u17bd")
        buf.write("\u17bb\3\2\2\2\u17bd\u17bc\3\2\2\2\u17be\u025d\3\2\2\2")
        buf.write("\u17bf\u17c0\tm\2\2\u17c0\u025f\3\2\2\2\u17c1\u17c2\t")
        buf.write("n\2\2\u17c2\u0261\3\2\2\2\u17c3\u17c4\to\2\2\u17c4\u0263")
        buf.write("\3\2\2\2\u17c5\u17c6\tp\2\2\u17c6\u0265\3\2\2\2\u17c7")
        buf.write("\u17c8\tq\2\2\u17c8\u0267\3\2\2\2\u17c9\u17ca\tr\2\2\u17ca")
        buf.write("\u0269\3\2\2\2\u17cb\u17cc\ts\2\2\u17cc\u026b\3\2\2\2")
        buf.write("\u17cd\u17ce\tt\2\2\u17ce\u026d\3\2\2\2\u036e\u026f\u0272")
        buf.write("\u0278\u027d\u027f\u0284\u0287\u028a\u0293\u02ba\u02c6")
        buf.write("\u02d1\u02e2\u02e7\u02f3\u030e\u0314\u0319\u031f\u0324")
        buf.write("\u0328\u0331\u0334\u0337\u033b\u0342\u0345\u034a\u0352")
        buf.write("\u0357\u035c\u035f\u036a\u036d\u0371\u0374\u0378\u037b")
        buf.write("\u037f\u0382\u0385\u0389\u038c\u0390\u0396\u039c\u03a2")
        buf.write("\u03a9\u03b0\u03b6\u03bc\u03c5\u03d8\u03df\u03e3\u03ed")
        buf.write("\u03f1\u03f5\u03f9\u03fd\u0402\u0405\u0408\u040b\u040e")
        buf.write("\u0414\u0418\u041e\u0423\u0426\u0429\u042b\u0436\u043a")
        buf.write("\u043d\u044b\u044e\u0452\u0455\u0459\u045c\u0460\u0463")
        buf.write("\u0467\u046a\u046d\u0471\u0474\u0478\u047e\u048b\u0492")
        buf.write("\u0497\u049a\u049f\u04a7\u04ad\u04b1\u04b4\u04b9\u04bc")
        buf.write("\u04c0\u04c4\u04c7\u04cf\u04d1\u04d8\u04de\u04e6\u04e9")
        buf.write("\u04f0\u04f3\u04f5\u04fb\u0501\u0512\u0519\u0520\u0529")
        buf.write("\u0537\u0544\u0549\u0559\u0561\u056b\u0571\u0579\u057e")
        buf.write("\u0589\u0590\u0595\u0599\u059b\u05a0\u05a6\u05ab\u05ad")
        buf.write("\u05b1\u05b4\u05b7\u05bd\u05c2\u05c4\u05c9\u05d0\u05d2")
        buf.write("\u05d9\u05e0\u05e3\u05eb\u05f3\u05f5\u05fd\u0601\u0604")
        buf.write("\u060a\u060f\u0612\u0618\u061b\u061f\u0624\u0629\u062d")
        buf.write("\u0632\u0635\u063a\u063e\u0642\u0647\u064c\u0651\u0657")
        buf.write("\u065c\u0661\u0667\u066c\u0671\u0676\u067b\u0680\u0685")
        buf.write("\u068a\u068f\u0694\u0699\u069f\u06a3\u06a9\u06b3\u06ba")
        buf.write("\u06bc\u06c4\u06c9\u06cc\u06d4\u06da\u06ea\u06f6\u06f8")
        buf.write("\u06fb\u0703\u0709\u070f\u071c\u0723\u072b\u072e\u073a")
        buf.write("\u0741\u0749\u074c\u0758\u075f\u0767\u076a\u0771\u0779")
        buf.write("\u077c\u077e\u0783\u078b\u0794\u0798\u079c\u07a1\u07a7")
        buf.write("\u07ad\u07b2\u07b7\u07bc\u07c1\u07c4\u07c9\u07ce\u07d8")
        buf.write("\u07dc\u07e3\u07e8\u07eb\u07f0\u07f3\u07f7\u07fb\u0803")
        buf.write("\u0816\u0819\u081c\u0820\u082a\u0837\u083e\u0841\u084a")
        buf.write("\u084e\u0859\u085c\u0860\u0868\u086b\u0870\u0878\u087e")
        buf.write("\u0882\u0886\u088b\u0890\u0897\u089b\u08a6\u08ae\u08b1")
        buf.write("\u08b7\u08bd\u08bf\u08c4\u08ca\u08d0\u08d2\u08d6\u08d9")
        buf.write("\u08dc\u08e2\u08e8\u08eb\u08f1\u08f7\u08f9\u08fe\u0906")
        buf.write("\u0908\u0911\u0916\u091e\u0922\u092a\u0934\u0939\u0940")
        buf.write("\u0944\u0957\u095b\u0967\u096a\u0973\u0984\u0990\u0997")
        buf.write("\u099e\u09ad\u09ba\u09c0\u09c6\u09cc\u09d2\u09d8\u09de")
        buf.write("\u09e3\u09ea\u09f1\u09f8\u09fb\u09ff\u0a02\u0a0f\u0a16")
        buf.write("\u0a1d\u0a23\u0a27\u0a2b\u0a32\u0a35\u0a3a\u0a41\u0a48")
        buf.write("\u0a4c\u0a55\u0a5e\u0a67\u0a6a\u0a6e\u0a77\u0a7b\u0a7e")
        buf.write("\u0a81\u0a89\u0a8f\u0a98\u0a9b\u0aa6\u0aa9\u0aae\u0ab1")
        buf.write("\u0ab6\u0ac0\u0ac5\u0acb\u0acd\u0ad3\u0ad5\u0adb\u0ae3")
        buf.write("\u0ae8\u0af0\u0af3\u0af8\u0afb\u0b00\u0b08\u0b10\u0b16")
        buf.write("\u0b1e\u0b23\u0b2b\u0b2e\u0b32\u0b35\u0b3d\u0b43\u0b4c")
        buf.write("\u0b4f\u0b53\u0b57\u0b5d\u0b61\u0b65\u0b67\u0b6a\u0b6d")
        buf.write("\u0b70\u0b76\u0b7a\u0b7d\u0b80\u0b83\u0b86\u0b88\u0b8c")
        buf.write("\u0b9a\u0b9d\u0ba3\u0ba7\u0baf\u0bb3\u0bb6\u0bb9\u0bc2")
        buf.write("\u0bc6\u0bc9\u0bcd\u0bd1\u0bd4\u0bd7\u0bdc\u0be2\u0be6")
        buf.write("\u0bf0\u0bf6\u0bfa\u0c00\u0c04\u0c0a\u0c0d\u0c19\u0c1d")
        buf.write("\u0c21\u0c29\u0c2d\u0c35\u0c38\u0c3c\u0c3f\u0c47\u0c4c")
        buf.write("\u0c4f\u0c52\u0c56\u0c59\u0c62\u0c67\u0c70\u0c75\u0c7c")
        buf.write("\u0c83\u0c8b\u0c90\u0c98\u0c9b\u0c9e\u0ca5\u0ca8\u0caf")
        buf.write("\u0cb2\u0cba\u0cc0\u0ccb\u0cce\u0cd9\u0cdf\u0ce3\u0cee")
        buf.write("\u0cf3\u0cf5\u0cf9\u0d03\u0d0d\u0d13\u0d18\u0d1b\u0d1e")
        buf.write("\u0d21\u0d27\u0d2c\u0d2f\u0d32\u0d35\u0d3b\u0d40\u0d43")
        buf.write("\u0d46\u0d48\u0d4e\u0d53\u0d56\u0d59\u0d5d\u0d63\u0d67")
        buf.write("\u0d71\u0d75\u0d7b\u0d84\u0d87\u0d8b\u0d8e\u0d92\u0d96")
        buf.write("\u0d99\u0d9b\u0da9\u0db5\u0dbb\u0dbd\u0dc3\u0dc5\u0dc7")
        buf.write("\u0dcd\u0dd5\u0ddd\u0de3\u0dec\u0df1\u0df3\u0df7\u0dfb")
        buf.write("\u0e01\u0e08\u0e11\u0e14\u0e18\u0e1c\u0e20\u0e23\u0e26")
        buf.write("\u0e29\u0e2d\u0e31\u0e34\u0e37\u0e3a\u0e41\u0e45\u0e54")
        buf.write("\u0e61\u0e69\u0e73\u0e77\u0e7a\u0e80\u0e83\u0e86\u0e8f")
        buf.write("\u0e98\u0ea2\u0ea6\u0eb0\u0eba\u0ec2\u0ec5\u0ece\u0ed1")
        buf.write("\u0ed5\u0eda\u0ede\u0ee7\u0eea\u0f09\u0f0c\u0f0f\u0f47")
        buf.write("\u0f4c\u0f68\u0f76\u0f7d\u0f81\u0f87\u0f8f\u0f91\u0f9c")
        buf.write("\u0fa6\u0fad\u0fb3\u0fbb\u0fc0\u0fc8\u0fd0\u0fd8\u0fe0")
        buf.write("\u0fe6\u0fe8\u0fec\u0ff1\u0ff6\u0ffc\u0ffe\u1009\u100e")
        buf.write("\u1015\u1017\u1025\u102b\u1030\u1035\u103b\u1042\u104a")
        buf.write("\u1052\u1057\u105d\u1060\u1068\u106f\u1078\u107b\u108c")
        buf.write("\u1094\u109c\u10a0\u10a7\u10ad\u10b5\u10be\u10c4\u10cb")
        buf.write("\u10d2\u10d7\u10da\u10dc\u10e2\u10e4\u10e8\u10ea\u10ed")
        buf.write("\u10f6\u10fc\u1103\u110a\u110f\u1112\u1114\u111a\u111c")
        buf.write("\u1120\u1122\u1125\u112a\u1131\u113a\u113f\u1148\u114f")
        buf.write("\u1154\u1157\u1159\u115f\u1161\u1164\u1170\u1176\u117f")
        buf.write("\u1188\u118d\u1196\u119c\u11a7\u11aa\u11b6\u11bd\u11c2")
        buf.write("\u11d1\u11dc\u11df\u11e9\u11f3\u11fd\u1207\u120b\u120f")
        buf.write("\u1218\u1233\u1242\u124a\u1255\u125c\u1260\u1267\u126c")
        buf.write("\u126f\u1272\u127b\u127f\u129d\u12a4\u12a8\u12af\u12b2")
        buf.write("\u12b7\u12c1\u12c5\u12cb\u12ce\u12d3\u12d7\u12de\u12e1")
        buf.write("\u12e7\u12ff\u130c\u130f\u1319\u1321\u1325\u132c\u132f")
        buf.write("\u1338\u133e\u1344\u134e\u1350\u1356\u1359\u135c\u1368")
        buf.write("\u136b\u1371\u1374\u137c\u1384\u138a\u138e\u139c\u13a8")
        buf.write("\u13af\u13b2\u13b9\u13c0\u13c5\u13ca\u13d5\u13e0\u13e6")
        buf.write("\u13eb\u13f8\u13fa\u13ff\u1404\u1406\u140d\u1414\u1417")
        buf.write("\u141a\u1420\u1424\u142a\u1430\u143f\u1444\u144a\u1451")
        buf.write("\u1453\u145a\u145d\u1467\u146b\u147f\u1486\u1488\u148f")
        buf.write("\u1491\u1495\u149a\u14a5\u14aa\u14b0\u14b3\u14b7\u14bc")
        buf.write("\u14bf\u14c3\u14c7\u14c9\u14ce\u14d3\u14e0\u14e3\u14e7")
        buf.write("\u14ea\u14ef\u14f3\u14f7\u14fa\u14fd\u1501\u1504\u1507")
        buf.write("\u150b\u150e\u1511\u1516\u151f\u1524\u1529\u152d\u1530")
        buf.write("\u1534\u1538\u153d\u1542\u1546\u1548\u1558\u1561\u1569")
        buf.write("\u1572\u157c\u1584\u158c\u1594\u159c\u15a5\u15a7\u15ac")
        buf.write("\u15af\u15b4\u15b7\u15bb\u15c9\u15d0\u15d5\u15f7\u15fb")
        buf.write("\u1603\u1607\u1610\u1618\u161d\u1625\u162a\u162f\u1631")
        buf.write("\u163a\u163f\u1647\u164c\u1654\u165c\u165f\u1669\u1674")
        buf.write("\u1681\u1689\u168d\u1692\u169b\u169e\u16ae\u16b6\u16c0")
        buf.write("\u16c3\u16c7\u16cb\u16e4\u16ef\u16f6\u16fa\u1701\u1709")
        buf.write("\u170e\u1716\u171c\u1726\u1733\u1739\u173f\u174f\u1755")
        buf.write("\u1757\u1759\u176c\u1778\u1789\u1796\u1798\u17ab\u17b4")
        buf.write("\u17bd")
        return buf.getvalue()


class frameQLParser ( Parser ):

    grammarFileName = "frameQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ERROR_WITHIN'", "'AT_CONFIDENCE'", "'ADD'", 
                     "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", 
                     "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", 
                     "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
                     "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", 
                     "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
                     "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT_USER'", 
                     "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
                     "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", 
                     "'DETERMINISTIC'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
                     "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", 
                     "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
                     "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", 
                     "'GENERATED'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
                     "'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", 
                     "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", 
                     "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
                     "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
                     "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", 
                     "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
                     "'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", 
                     "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'ON'", 
                     "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", 
                     "'OUT'", "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", 
                     "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
                     "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", 
                     "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESTRICT'", 
                     "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", 
                     "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", 
                     "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", 
                     "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
                     "'SQL_SMALL_RESULT'", "'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", 
                     "'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", 
                     "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
                     "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", 
                     "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
                     "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", 
                     "'SMALLINT'", "'MEDIUMINT'", "'INT'", "'INTEGER'", 
                     "'BIGINT'", "'REAL'", "'DOUBLE'", "'FLOAT'", "'DECIMAL'", 
                     "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", 
                     "'YEAR'", "'CHAR'", "'VARCHAR'", "'BINARY'", "'VARBINARY'", 
                     "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", 
                     "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", 
                     "'ENUM'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", 
                     "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
                     "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", 
                     "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'AVG'", 
                     "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", 
                     "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
                     "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", 
                     "'VARIANCE'", "'FCOUNT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
                     "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
                     "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", 
                     "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'", 
                     "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
                     "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
                     "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", 
                     "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", 
                     "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
                     "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", 
                     "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", 
                     "'CHECKSUM'", "'CIPHER'", "'CLIENT'", "'CLOSE'", "'COALESCE'", 
                     "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COMMENT'", 
                     "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", 
                     "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", 
                     "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
                     "'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
                     "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
                     "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", 
                     "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
                     "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
                     "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", 
                     "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
                     "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
                     "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", 
                     "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", 
                     "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", 
                     "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
                     "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", 
                     "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVOKER'", 
                     "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
                     "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", 
                     "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", 
                     "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
                     "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
                     "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
                     "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
                     "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", 
                     "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
                     "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
                     "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
                     "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
                     "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MID'", 
                     "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
                     "'MYSQL'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
                     "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", 
                     "'OFFSET'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", 
                     "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", 
                     "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", 
                     "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PHASE'", 
                     "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", 
                     "'PRECEDES'", "'PREPARE'", "'PRESERVE'", "'PREV'", 
                     "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
                     "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
                     "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", 
                     "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", 
                     "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
                     "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
                     "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", 
                     "'REPLICATION'", "'RESET'", "'RESUME'", "'RETURNS'", 
                     "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", 
                     "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
                     "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", 
                     "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", 
                     "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
                     "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
                     "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", 
                     "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
                     "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", 
                     "'STORED'", "'STRING'", "'SUBJECT'", "'SUBPARTITION'", 
                     "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", 
                     "'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", 
                     "'TRADITIONAL'", "'TRANSACTION'", "'TRIGGERS'", "'TRUNCATE'", 
                     "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
                     "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
                     "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
                     "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'WAIT'", 
                     "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
                     "'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", 
                     "'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", 
                     "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
                     "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", 
                     "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", 
                     "'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", 
                     "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", "'CP866'", 
                     "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", 
                     "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
                     "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
                     "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", 
                     "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", 
                     "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
                     "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", 
                     "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
                     "'NDB'", "'NDBCLUSTER'", "'PERFOMANCE_SCHEMA'", "'REPEATABLE'", 
                     "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
                     "'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", 
                     "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", 
                     "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", 
                     "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", 
                     "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
                     "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", 
                     "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
                     "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
                     "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
                     "'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", 
                     "'COMPRESS'", "'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", 
                     "'CONV'", "'CONVERT_TZ'", "'COS'", "'COT'", "'CRC32'", 
                     "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
                     "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", 
                     "'DATEDIFF'", "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", 
                     "'DAYOFWEEK'", "'DAYOFYEAR'", "'DECODE'", "'DEGREES'", 
                     "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", "'DISJOINT'", 
                     "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
                     "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
                     "'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", 
                     "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", 
                     "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
                     "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
                     "'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", 
                     "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", "'GEOMFROMWKB'", 
                     "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
                     "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", 
                     "'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", 
                     "'INSTR'", "'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", 
                     "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
                     "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
                     "'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", 
                     "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
                     "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", 
                     "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
                     "'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", 
                     "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", 
                     "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
                     "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", 
                     "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
                     "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", 
                     "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
                     "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
                     "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
                     "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", 
                     "'OCT'", "'OCTET_LENGTH'", "'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", 
                     "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", "'POINTFROMWKB'", 
                     "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
                     "'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", 
                     "'RADIANS'", "'RAND'", "'RANDOM_BYTES'", "'RELEASE_LOCK'", 
                     "'REVERSE'", "'ROUND'", "'ROW_COUNT'", "'RPAD'", "'RTRIM'", 
                     "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
                     "'SHA2'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
                     "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", 
                     "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", 
                     "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", 
                     "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", 
                     "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
                     "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", 
                     "'ST_EQUALS'", "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", 
                     "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", 
                     "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'", 
                     "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
                     "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", 
                     "'ST_INTERSECTION'", "'ST_INTERSECTS'", "'ST_ISCLOSED'", 
                     "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
                     "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
                     "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
                     "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", 
                     "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", 
                     "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", 
                     "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
                     "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", 
                     "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'", 
                     "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", 
                     "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
                     "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", 
                     "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", 
                     "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", 
                     "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
                     "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                     "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", 
                     "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", 
                     "'/'", "'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
                     "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", 
                     "'2'", "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "ERRORBOUND", "CONFLEVEL", "ADD", 
                      "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", 
                      "ASC", "BEFORE", "BETWEEN", "BOTH", "BY", "CALL", 
                      "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
                      "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
                      "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_USER", 
                      "CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", 
                      "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
                      "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", 
                      "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", 
                      "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
                      "FROM", "FULLTEXT", "GENERATED", "GRANT", "GROUP", 
                      "HAVING", "HIGH_PRIORITY", "IF", "IGNORE", "IN", "INDEX", 
                      "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", 
                      "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
                      "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
                      "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
                      "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
                      "NULL_LITERAL", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", 
                      "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", 
                      "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", 
                      "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
                      "REPEAT", "REPLACE", "REQUIRE", "RESTRICT", "RETURN", 
                      "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", 
                      "SET", "SEPARATOR", "SHOW", "SPATIAL", "SQL", "SQLEXCEPTION", 
                      "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                      "SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", 
                      "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
                      "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", 
                      "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
                      "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", 
                      "TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", 
                      "BIGINT", "REAL", "DOUBLE", "FLOAT", "DECIMAL", "NUMERIC", 
                      "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", 
                      "VARCHAR", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", 
                      "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", 
                      "LONGTEXT", "ENUM", "SERIAL", "YEAR_MONTH", "DAY_HOUR", 
                      "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
                      "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
                      "HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", 
                      "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", 
                      "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
                      "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "FCOUNT", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", 
                      "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
                      "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
                      "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
                      "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
                      "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
                      "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
                      "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
                      "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", "CLOSE", 
                      "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", 
                      "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
                      "CONCURRENT", "CONNECTION", "CONSISTENT", "CONTAINS", 
                      "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
                      "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", 
                      "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
                      "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
                      "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", 
                      "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", 
                      "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
                      "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", 
                      "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", 
                      "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", 
                      "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
                      "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
                      "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
                      "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", 
                      "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
                      "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
                      "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
                      "LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", 
                      "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
                      "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
                      "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
                      "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", 
                      "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
                      "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", 
                      "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", 
                      "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", 
                      "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
                      "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", 
                      "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", 
                      "OFFSET", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
                      "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", 
                      "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
                      "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
                      "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", 
                      "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", 
                      "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", 
                      "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
                      "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
                      "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
                      "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
                      "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", 
                      "RESUME", "RETURNS", "ROLLBACK", "ROLLUP", "ROTATE", 
                      "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", 
                      "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", 
                      "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", 
                      "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", 
                      "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", 
                      "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
                      "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
                      "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", 
                      "STORED", "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
                      "SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", 
                      "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
                      "TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
                      "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", 
                      "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", 
                      "VARIABLES", "VIEW", "VIRTUAL", "WAIT", "WARNINGS", 
                      "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
                      "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", 
                      "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", 
                      "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", 
                      "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
                      "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", 
                      "CP1257", "CP850", "CP852", "CP866", "CP932", "DEC8", 
                      "EUCJPMS", "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", 
                      "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
                      "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
                      "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
                      "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
                      "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", 
                      "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", 
                      "PERFOMANCE_SCHEMA", "REPEATABLE", "COMMITTED", "UNCOMMITTED", 
                      "SERIALIZABLE", "GEOMETRYCOLLECTION", "LINESTRING", 
                      "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", "POINT", 
                      "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
                      "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
                      "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", 
                      "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", 
                      "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
                      "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", 
                      "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
                      "COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
                      "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
                      "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", 
                      "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
                      "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
                      "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", 
                      "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", 
                      "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
                      "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", 
                      "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
                      "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
                      "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
                      "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                      "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                      "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", 
                      "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
                      "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", 
                      "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                      "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", 
                      "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
                      "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", 
                      "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
                      "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                      "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                      "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
                      "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", 
                      "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                      "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
                      "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", 
                      "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                      "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                      "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                      "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                      "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
                      "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", 
                      "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
                      "SESSION_USER", "SHA", "SHA1", "SHA2", "SIGN", "SIN", 
                      "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
                      "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", 
                      "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
                      "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
                      "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", 
                      "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", 
                      "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
                      "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
                      "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", 
                      "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
                      "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", 
                      "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
                      "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", 
                      "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
                      "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", 
                      "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
                      "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", 
                      "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
                      "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
                      "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", 
                      "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", "TAN", 
                      "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
                      "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", 
                      "TO_SECONDS", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                      "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", 
                      "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", 
                      "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
                      "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
                      "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", 
                      "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                      "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                      "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", 
                      "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", 
                      "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
                      "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
                      "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", 
                      "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
                      "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_transactionStatement = 6
    RULE_replicationStatement = 7
    RULE_preparedStatement = 8
    RULE_compoundStatement = 9
    RULE_administrationStatement = 10
    RULE_utilityStatement = 11
    RULE_createDatabase = 12
    RULE_createEvent = 13
    RULE_createIndex = 14
    RULE_createLogfileGroup = 15
    RULE_createProcedure = 16
    RULE_createFunction = 17
    RULE_createServer = 18
    RULE_createTable = 19
    RULE_createTablespaceInnodb = 20
    RULE_createTablespaceNdb = 21
    RULE_createTrigger = 22
    RULE_createView = 23
    RULE_createDatabaseOption = 24
    RULE_ownerStatement = 25
    RULE_scheduleExpression = 26
    RULE_timestampValue = 27
    RULE_intervalExpr = 28
    RULE_intervalType = 29
    RULE_enableType = 30
    RULE_indexType = 31
    RULE_indexOption = 32
    RULE_procedureParameter = 33
    RULE_functionParameter = 34
    RULE_routineOption = 35
    RULE_serverOption = 36
    RULE_createDefinitions = 37
    RULE_createDefinition = 38
    RULE_columnDefinition = 39
    RULE_columnConstraint = 40
    RULE_tableConstraint = 41
    RULE_referenceDefinition = 42
    RULE_referenceAction = 43
    RULE_referenceControlType = 44
    RULE_indexColumnDefinition = 45
    RULE_tableOption = 46
    RULE_tablespaceStorage = 47
    RULE_partitionDefinitions = 48
    RULE_partitionFunctionDefinition = 49
    RULE_subpartitionFunctionDefinition = 50
    RULE_partitionDefinition = 51
    RULE_partitionDefinerAtom = 52
    RULE_partitionDefinerVector = 53
    RULE_subpartitionDefinition = 54
    RULE_partitionOption = 55
    RULE_alterDatabase = 56
    RULE_alterEvent = 57
    RULE_alterFunction = 58
    RULE_alterInstance = 59
    RULE_alterLogfileGroup = 60
    RULE_alterProcedure = 61
    RULE_alterServer = 62
    RULE_alterTable = 63
    RULE_alterTablespace = 64
    RULE_alterView = 65
    RULE_alterSpecification = 66
    RULE_dropDatabase = 67
    RULE_dropEvent = 68
    RULE_dropIndex = 69
    RULE_dropLogfileGroup = 70
    RULE_dropProcedure = 71
    RULE_dropFunction = 72
    RULE_dropServer = 73
    RULE_dropTable = 74
    RULE_dropTablespace = 75
    RULE_dropTrigger = 76
    RULE_dropView = 77
    RULE_renameTable = 78
    RULE_renameTableClause = 79
    RULE_truncateTable = 80
    RULE_callStatement = 81
    RULE_deleteStatement = 82
    RULE_doStatement = 83
    RULE_handlerStatement = 84
    RULE_insertStatement = 85
    RULE_loadDataStatement = 86
    RULE_loadXmlStatement = 87
    RULE_replaceStatement = 88
    RULE_selectStatement = 89
    RULE_updateStatement = 90
    RULE_insertStatementValue = 91
    RULE_updatedElement = 92
    RULE_assignmentField = 93
    RULE_lockClause = 94
    RULE_singleDeleteStatement = 95
    RULE_multipleDeleteStatement = 96
    RULE_handlerOpenStatement = 97
    RULE_handlerReadIndexStatement = 98
    RULE_handlerReadStatement = 99
    RULE_handlerCloseStatement = 100
    RULE_singleUpdateStatement = 101
    RULE_multipleUpdateStatement = 102
    RULE_orderByClause = 103
    RULE_orderByExpression = 104
    RULE_tableSources = 105
    RULE_tableSource = 106
    RULE_tableSourceItem = 107
    RULE_indexHint = 108
    RULE_indexHintType = 109
    RULE_joinPart = 110
    RULE_queryExpression = 111
    RULE_queryExpressionNointo = 112
    RULE_querySpecification = 113
    RULE_querySpecificationNointo = 114
    RULE_unionParenthesis = 115
    RULE_unionStatement = 116
    RULE_selectSpec = 117
    RULE_selectElements = 118
    RULE_selectElement = 119
    RULE_errorTolerenceExpression = 120
    RULE_confLevelExpression = 121
    RULE_selectIntoExpression = 122
    RULE_selectFieldsInto = 123
    RULE_selectLinesInto = 124
    RULE_fromClause = 125
    RULE_groupByItem = 126
    RULE_limitClause = 127
    RULE_startTransaction = 128
    RULE_beginWork = 129
    RULE_commitWork = 130
    RULE_rollbackWork = 131
    RULE_savepointStatement = 132
    RULE_rollbackStatement = 133
    RULE_releaseStatement = 134
    RULE_lockTables = 135
    RULE_unlockTables = 136
    RULE_setAutocommitStatement = 137
    RULE_setTransactionStatement = 138
    RULE_transactionMode = 139
    RULE_lockTableElement = 140
    RULE_lockAction = 141
    RULE_transactionOption = 142
    RULE_transactionLevel = 143
    RULE_changeMaster = 144
    RULE_changeReplicationFilter = 145
    RULE_purgeBinaryLogs = 146
    RULE_resetMaster = 147
    RULE_resetSlave = 148
    RULE_startSlave = 149
    RULE_stopSlave = 150
    RULE_startGroupReplication = 151
    RULE_stopGroupReplication = 152
    RULE_masterOption = 153
    RULE_stringMasterOption = 154
    RULE_decimalMasterOption = 155
    RULE_boolMasterOption = 156
    RULE_channelOption = 157
    RULE_replicationFilter = 158
    RULE_tablePair = 159
    RULE_threadType = 160
    RULE_untilOption = 161
    RULE_connectionOption = 162
    RULE_gtuidSet = 163
    RULE_xaStartTransaction = 164
    RULE_xaEndTransaction = 165
    RULE_xaPrepareStatement = 166
    RULE_xaCommitWork = 167
    RULE_xaRollbackWork = 168
    RULE_xaRecoverWork = 169
    RULE_prepareStatement = 170
    RULE_executeStatement = 171
    RULE_deallocatePrepare = 172
    RULE_routineBody = 173
    RULE_blockStatement = 174
    RULE_caseStatement = 175
    RULE_ifStatement = 176
    RULE_iterateStatement = 177
    RULE_leaveStatement = 178
    RULE_loopStatement = 179
    RULE_repeatStatement = 180
    RULE_returnStatement = 181
    RULE_whileStatement = 182
    RULE_cursorStatement = 183
    RULE_declareVariable = 184
    RULE_declareCondition = 185
    RULE_declareCursor = 186
    RULE_declareHandler = 187
    RULE_handlerConditionValue = 188
    RULE_procedureSqlStatement = 189
    RULE_caseAlternative = 190
    RULE_elifAlternative = 191
    RULE_alterUser = 192
    RULE_createUser = 193
    RULE_dropUser = 194
    RULE_grantStatement = 195
    RULE_grantProxy = 196
    RULE_renameUser = 197
    RULE_revokeStatement = 198
    RULE_revokeProxy = 199
    RULE_setPasswordStatement = 200
    RULE_userSpecification = 201
    RULE_userAuthOption = 202
    RULE_tlsOption = 203
    RULE_userResourceOption = 204
    RULE_userPasswordOption = 205
    RULE_userLockOption = 206
    RULE_privelegeClause = 207
    RULE_privilege = 208
    RULE_privilegeLevel = 209
    RULE_renameUserClause = 210
    RULE_analyzeTable = 211
    RULE_checkTable = 212
    RULE_checksumTable = 213
    RULE_optimizeTable = 214
    RULE_repairTable = 215
    RULE_checkTableOption = 216
    RULE_createUdfunction = 217
    RULE_installPlugin = 218
    RULE_uninstallPlugin = 219
    RULE_setStatement = 220
    RULE_showStatement = 221
    RULE_variableClause = 222
    RULE_showCommonEntity = 223
    RULE_showFilter = 224
    RULE_showGlobalInfoClause = 225
    RULE_showSchemaEntity = 226
    RULE_showProfileType = 227
    RULE_binlogStatement = 228
    RULE_cacheIndexStatement = 229
    RULE_flushStatement = 230
    RULE_killStatement = 231
    RULE_loadIndexIntoCache = 232
    RULE_resetStatement = 233
    RULE_shutdownStatement = 234
    RULE_tableIndexes = 235
    RULE_flushOption = 236
    RULE_flushTableOption = 237
    RULE_loadedTableIndexes = 238
    RULE_simpleDescribeStatement = 239
    RULE_fullDescribeStatement = 240
    RULE_helpStatement = 241
    RULE_useStatement = 242
    RULE_describeObjectClause = 243
    RULE_fullId = 244
    RULE_tableName = 245
    RULE_fullColumnName = 246
    RULE_indexColumnName = 247
    RULE_userName = 248
    RULE_mysqlVariable = 249
    RULE_charsetName = 250
    RULE_collationName = 251
    RULE_engineName = 252
    RULE_uuidSet = 253
    RULE_xid = 254
    RULE_xuidStringId = 255
    RULE_authPlugin = 256
    RULE_uid = 257
    RULE_simpleId = 258
    RULE_dottedId = 259
    RULE_decimalLiteral = 260
    RULE_fileSizeLiteral = 261
    RULE_stringLiteral = 262
    RULE_booleanLiteral = 263
    RULE_hexadecimalLiteral = 264
    RULE_nullNotnull = 265
    RULE_constant = 266
    RULE_dataType = 267
    RULE_convertedDataType = 268
    RULE_lengthOneDimension = 269
    RULE_lengthTwoDimension = 270
    RULE_lengthTwoOptionalDimension = 271
    RULE_uidList = 272
    RULE_tables = 273
    RULE_indexColumnNames = 274
    RULE_expressions = 275
    RULE_expressionsWithDefaults = 276
    RULE_constants = 277
    RULE_simpleStrings = 278
    RULE_userVariables = 279
    RULE_defaultValue = 280
    RULE_currentTimestamp = 281
    RULE_expressionOrDefault = 282
    RULE_ifExists = 283
    RULE_ifNotExists = 284
    RULE_functionCall = 285
    RULE_specificFunction = 286
    RULE_caseFuncAlternative = 287
    RULE_levelsInWeightString = 288
    RULE_levelInWeightListElement = 289
    RULE_aggregateWindowedFunction = 290
    RULE_scalarFunctionName = 291
    RULE_passwordFunctionClause = 292
    RULE_functionArgs = 293
    RULE_functionArg = 294
    RULE_expression = 295
    RULE_predicate = 296
    RULE_expressionAtom = 297
    RULE_unaryOperator = 298
    RULE_comparisonOperator = 299
    RULE_logicalOperator = 300
    RULE_bitOperator = 301
    RULE_mathOperator = 302
    RULE_charsetNameBase = 303
    RULE_transactionLevelBase = 304
    RULE_privilegesBase = 305
    RULE_intervalTypeBase = 306
    RULE_dataTypeBase = 307
    RULE_keywordsCanBeId = 308
    RULE_functionNameBase = 309

    ruleNames =  [ "root", "sqlStatements", "sqlStatement", "emptyStatement", 
                   "ddlStatement", "dmlStatement", "transactionStatement", 
                   "replicationStatement", "preparedStatement", "compoundStatement", 
                   "administrationStatement", "utilityStatement", "createDatabase", 
                   "createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
                   "createFunction", "createServer", "createTable", "createTablespaceInnodb", 
                   "createTablespaceNdb", "createTrigger", "createView", 
                   "createDatabaseOption", "ownerStatement", "scheduleExpression", 
                   "timestampValue", "intervalExpr", "intervalType", "enableType", 
                   "indexType", "indexOption", "procedureParameter", "functionParameter", 
                   "routineOption", "serverOption", "createDefinitions", 
                   "createDefinition", "columnDefinition", "columnConstraint", 
                   "tableConstraint", "referenceDefinition", "referenceAction", 
                   "referenceControlType", "indexColumnDefinition", "tableOption", 
                   "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
                   "subpartitionFunctionDefinition", "partitionDefinition", 
                   "partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
                   "partitionOption", "alterDatabase", "alterEvent", "alterFunction", 
                   "alterInstance", "alterLogfileGroup", "alterProcedure", 
                   "alterServer", "alterTable", "alterTablespace", "alterView", 
                   "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
                   "dropLogfileGroup", "dropProcedure", "dropFunction", 
                   "dropServer", "dropTable", "dropTablespace", "dropTrigger", 
                   "dropView", "renameTable", "renameTableClause", "truncateTable", 
                   "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
                   "insertStatement", "loadDataStatement", "loadXmlStatement", 
                   "replaceStatement", "selectStatement", "updateStatement", 
                   "insertStatementValue", "updatedElement", "assignmentField", 
                   "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
                   "handlerOpenStatement", "handlerReadIndexStatement", 
                   "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
                   "multipleUpdateStatement", "orderByClause", "orderByExpression", 
                   "tableSources", "tableSource", "tableSourceItem", "indexHint", 
                   "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
                   "querySpecification", "querySpecificationNointo", "unionParenthesis", 
                   "unionStatement", "selectSpec", "selectElements", "selectElement", 
                   "errorTolerenceExpression", "confLevelExpression", "selectIntoExpression", 
                   "selectFieldsInto", "selectLinesInto", "fromClause", 
                   "groupByItem", "limitClause", "startTransaction", "beginWork", 
                   "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
                   "releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
                   "setTransactionStatement", "transactionMode", "lockTableElement", 
                   "lockAction", "transactionOption", "transactionLevel", 
                   "changeMaster", "changeReplicationFilter", "purgeBinaryLogs", 
                   "resetMaster", "resetSlave", "startSlave", "stopSlave", 
                   "startGroupReplication", "stopGroupReplication", "masterOption", 
                   "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
                   "channelOption", "replicationFilter", "tablePair", "threadType", 
                   "untilOption", "connectionOption", "gtuidSet", "xaStartTransaction", 
                   "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
                   "xaRollbackWork", "xaRecoverWork", "prepareStatement", 
                   "executeStatement", "deallocatePrepare", "routineBody", 
                   "blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
                   "leaveStatement", "loopStatement", "repeatStatement", 
                   "returnStatement", "whileStatement", "cursorStatement", 
                   "declareVariable", "declareCondition", "declareCursor", 
                   "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
                   "caseAlternative", "elifAlternative", "alterUser", "createUser", 
                   "dropUser", "grantStatement", "grantProxy", "renameUser", 
                   "revokeStatement", "revokeProxy", "setPasswordStatement", 
                   "userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
                   "userPasswordOption", "userLockOption", "privelegeClause", 
                   "privilege", "privilegeLevel", "renameUserClause", "analyzeTable", 
                   "checkTable", "checksumTable", "optimizeTable", "repairTable", 
                   "checkTableOption", "createUdfunction", "installPlugin", 
                   "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
                   "showCommonEntity", "showFilter", "showGlobalInfoClause", 
                   "showSchemaEntity", "showProfileType", "binlogStatement", 
                   "cacheIndexStatement", "flushStatement", "killStatement", 
                   "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
                   "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
                   "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", 
                   "useStatement", "describeObjectClause", "fullId", "tableName", 
                   "fullColumnName", "indexColumnName", "userName", "mysqlVariable", 
                   "charsetName", "collationName", "engineName", "uuidSet", 
                   "xid", "xuidStringId", "authPlugin", "uid", "simpleId", 
                   "dottedId", "decimalLiteral", "fileSizeLiteral", "stringLiteral", 
                   "booleanLiteral", "hexadecimalLiteral", "nullNotnull", 
                   "constant", "dataType", "convertedDataType", "lengthOneDimension", 
                   "lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", 
                   "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
                   "constants", "simpleStrings", "userVariables", "defaultValue", 
                   "currentTimestamp", "expressionOrDefault", "ifExists", 
                   "ifNotExists", "functionCall", "specificFunction", "caseFuncAlternative", 
                   "levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction", 
                   "scalarFunctionName", "passwordFunctionClause", "functionArgs", 
                   "functionArg", "expression", "predicate", "expressionAtom", 
                   "unaryOperator", "comparisonOperator", "logicalOperator", 
                   "bitOperator", "mathOperator", "charsetNameBase", "transactionLevelBase", 
                   "privilegesBase", "intervalTypeBase", "dataTypeBase", 
                   "keywordsCanBeId", "functionNameBase" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_MYSQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    ERRORBOUND=5
    CONFLEVEL=6
    ADD=7
    ALL=8
    ALTER=9
    ALWAYS=10
    ANALYZE=11
    AND=12
    AS=13
    ASC=14
    BEFORE=15
    BETWEEN=16
    BOTH=17
    BY=18
    CALL=19
    CASCADE=20
    CASE=21
    CAST=22
    CHANGE=23
    CHARACTER=24
    CHECK=25
    COLLATE=26
    COLUMN=27
    CONDITION=28
    CONSTRAINT=29
    CONTINUE=30
    CONVERT=31
    CREATE=32
    CROSS=33
    CURRENT_USER=34
    CURSOR=35
    DATABASE=36
    DATABASES=37
    DECLARE=38
    DEFAULT=39
    DELAYED=40
    DELETE=41
    DESC=42
    DESCRIBE=43
    DETERMINISTIC=44
    DISTINCT=45
    DISTINCTROW=46
    DROP=47
    EACH=48
    ELSE=49
    ELSEIF=50
    ENCLOSED=51
    ESCAPED=52
    EXISTS=53
    EXIT=54
    EXPLAIN=55
    FALSE=56
    FETCH=57
    FOR=58
    FORCE=59
    FOREIGN=60
    FROM=61
    FULLTEXT=62
    GENERATED=63
    GRANT=64
    GROUP=65
    HAVING=66
    HIGH_PRIORITY=67
    IF=68
    IGNORE=69
    IN=70
    INDEX=71
    INFILE=72
    INNER=73
    INOUT=74
    INSERT=75
    INTERVAL=76
    INTO=77
    IS=78
    ITERATE=79
    JOIN=80
    KEY=81
    KEYS=82
    KILL=83
    LEADING=84
    LEAVE=85
    LEFT=86
    LIKE=87
    LIMIT=88
    LINEAR=89
    LINES=90
    LOAD=91
    LOCK=92
    LOOP=93
    LOW_PRIORITY=94
    MASTER_BIND=95
    MASTER_SSL_VERIFY_SERVER_CERT=96
    MATCH=97
    MAXVALUE=98
    MODIFIES=99
    NATURAL=100
    NOT=101
    NO_WRITE_TO_BINLOG=102
    NULL_LITERAL=103
    ON=104
    OPTIMIZE=105
    OPTION=106
    OPTIONALLY=107
    OR=108
    ORDER=109
    OUT=110
    OUTER=111
    OUTFILE=112
    PARTITION=113
    PRIMARY=114
    PROCEDURE=115
    PURGE=116
    RANGE=117
    READ=118
    READS=119
    REFERENCES=120
    REGEXP=121
    RELEASE=122
    RENAME=123
    REPEAT=124
    REPLACE=125
    REQUIRE=126
    RESTRICT=127
    RETURN=128
    REVOKE=129
    RIGHT=130
    RLIKE=131
    SCHEMA=132
    SCHEMAS=133
    SELECT=134
    SET=135
    SEPARATOR=136
    SHOW=137
    SPATIAL=138
    SQL=139
    SQLEXCEPTION=140
    SQLSTATE=141
    SQLWARNING=142
    SQL_BIG_RESULT=143
    SQL_CALC_FOUND_ROWS=144
    SQL_SMALL_RESULT=145
    SSL=146
    STARTING=147
    STRAIGHT_JOIN=148
    TABLE=149
    TERMINATED=150
    THEN=151
    TO=152
    TRAILING=153
    TRIGGER=154
    TRUE=155
    UNDO=156
    UNION=157
    UNIQUE=158
    UNLOCK=159
    UNSIGNED=160
    UPDATE=161
    USAGE=162
    USE=163
    USING=164
    VALUES=165
    WHEN=166
    WHERE=167
    WHILE=168
    WITH=169
    WRITE=170
    XOR=171
    ZEROFILL=172
    TINYINT=173
    SMALLINT=174
    MEDIUMINT=175
    INT=176
    INTEGER=177
    BIGINT=178
    REAL=179
    DOUBLE=180
    FLOAT=181
    DECIMAL=182
    NUMERIC=183
    DATE=184
    TIME=185
    TIMESTAMP=186
    DATETIME=187
    YEAR=188
    CHAR=189
    VARCHAR=190
    BINARY=191
    VARBINARY=192
    TINYBLOB=193
    BLOB=194
    MEDIUMBLOB=195
    LONGBLOB=196
    TINYTEXT=197
    TEXT=198
    MEDIUMTEXT=199
    LONGTEXT=200
    ENUM=201
    SERIAL=202
    YEAR_MONTH=203
    DAY_HOUR=204
    DAY_MINUTE=205
    DAY_SECOND=206
    HOUR_MINUTE=207
    HOUR_SECOND=208
    MINUTE_SECOND=209
    SECOND_MICROSECOND=210
    MINUTE_MICROSECOND=211
    HOUR_MICROSECOND=212
    DAY_MICROSECOND=213
    AVG=214
    BIT_AND=215
    BIT_OR=216
    BIT_XOR=217
    COUNT=218
    GROUP_CONCAT=219
    MAX=220
    MIN=221
    STD=222
    STDDEV=223
    STDDEV_POP=224
    STDDEV_SAMP=225
    SUM=226
    VAR_POP=227
    VAR_SAMP=228
    VARIANCE=229
    FCOUNT=230
    CURRENT_DATE=231
    CURRENT_TIME=232
    CURRENT_TIMESTAMP=233
    LOCALTIME=234
    CURDATE=235
    CURTIME=236
    DATE_ADD=237
    DATE_SUB=238
    EXTRACT=239
    LOCALTIMESTAMP=240
    NOW=241
    POSITION=242
    SUBSTR=243
    SUBSTRING=244
    SYSDATE=245
    TRIM=246
    UTC_DATE=247
    UTC_TIME=248
    UTC_TIMESTAMP=249
    ACCOUNT=250
    ACTION=251
    AFTER=252
    AGGREGATE=253
    ALGORITHM=254
    ANY=255
    AT=256
    AUTHORS=257
    AUTOCOMMIT=258
    AUTOEXTEND_SIZE=259
    AUTO_INCREMENT=260
    AVG_ROW_LENGTH=261
    BEGIN=262
    BINLOG=263
    BIT=264
    BLOCK=265
    BOOL=266
    BOOLEAN=267
    BTREE=268
    CACHE=269
    CASCADED=270
    CHAIN=271
    CHANGED=272
    CHANNEL=273
    CHECKSUM=274
    CIPHER=275
    CLIENT=276
    CLOSE=277
    COALESCE=278
    CODE=279
    COLUMNS=280
    COLUMN_FORMAT=281
    COMMENT=282
    COMMIT=283
    COMPACT=284
    COMPLETION=285
    COMPRESSED=286
    COMPRESSION=287
    CONCURRENT=288
    CONNECTION=289
    CONSISTENT=290
    CONTAINS=291
    CONTEXT=292
    CONTRIBUTORS=293
    COPY=294
    CPU=295
    DATA=296
    DATAFILE=297
    DEALLOCATE=298
    DEFAULT_AUTH=299
    DEFINER=300
    DELAY_KEY_WRITE=301
    DES_KEY_FILE=302
    DIRECTORY=303
    DISABLE=304
    DISCARD=305
    DISK=306
    DO=307
    DUMPFILE=308
    DUPLICATE=309
    DYNAMIC=310
    ENABLE=311
    ENCRYPTION=312
    END=313
    ENDS=314
    ENGINE=315
    ENGINES=316
    ERROR=317
    ERRORS=318
    ESCAPE=319
    EVEN=320
    EVENT=321
    EVENTS=322
    EVERY=323
    EXCHANGE=324
    EXCLUSIVE=325
    EXPIRE=326
    EXPORT=327
    EXTENDED=328
    EXTENT_SIZE=329
    FAST=330
    FAULTS=331
    FIELDS=332
    FILE_BLOCK_SIZE=333
    FILTER=334
    FIRST=335
    FIXED=336
    FLUSH=337
    FOLLOWS=338
    FOUND=339
    FULL=340
    FUNCTION=341
    GENERAL=342
    GLOBAL=343
    GRANTS=344
    GROUP_REPLICATION=345
    HANDLER=346
    HASH=347
    HELP=348
    HOST=349
    HOSTS=350
    IDENTIFIED=351
    IGNORE_SERVER_IDS=352
    IMPORT=353
    INDEXES=354
    INITIAL_SIZE=355
    INPLACE=356
    INSERT_METHOD=357
    INSTALL=358
    INSTANCE=359
    INVOKER=360
    IO=361
    IO_THREAD=362
    IPC=363
    ISOLATION=364
    ISSUER=365
    JSON=366
    KEY_BLOCK_SIZE=367
    LANGUAGE=368
    LAST=369
    LEAVES=370
    LESS=371
    LEVEL=372
    LIST=373
    LOCAL=374
    LOGFILE=375
    LOGS=376
    MASTER=377
    MASTER_AUTO_POSITION=378
    MASTER_CONNECT_RETRY=379
    MASTER_DELAY=380
    MASTER_HEARTBEAT_PERIOD=381
    MASTER_HOST=382
    MASTER_LOG_FILE=383
    MASTER_LOG_POS=384
    MASTER_PASSWORD=385
    MASTER_PORT=386
    MASTER_RETRY_COUNT=387
    MASTER_SSL=388
    MASTER_SSL_CA=389
    MASTER_SSL_CAPATH=390
    MASTER_SSL_CERT=391
    MASTER_SSL_CIPHER=392
    MASTER_SSL_CRL=393
    MASTER_SSL_CRLPATH=394
    MASTER_SSL_KEY=395
    MASTER_TLS_VERSION=396
    MASTER_USER=397
    MAX_CONNECTIONS_PER_HOUR=398
    MAX_QUERIES_PER_HOUR=399
    MAX_ROWS=400
    MAX_SIZE=401
    MAX_UPDATES_PER_HOUR=402
    MAX_USER_CONNECTIONS=403
    MEDIUM=404
    MERGE=405
    MID=406
    MIGRATE=407
    MIN_ROWS=408
    MODE=409
    MODIFY=410
    MUTEX=411
    MYSQL=412
    NAME=413
    NAMES=414
    NCHAR=415
    NEVER=416
    NEXT=417
    NO=418
    NODEGROUP=419
    NONE=420
    OFFLINE=421
    OFFSET=422
    OJ=423
    OLD_PASSWORD=424
    ONE=425
    ONLINE=426
    ONLY=427
    OPEN=428
    OPTIMIZER_COSTS=429
    OPTIONS=430
    OWNER=431
    PACK_KEYS=432
    PAGE=433
    PARSER=434
    PARTIAL=435
    PARTITIONING=436
    PARTITIONS=437
    PASSWORD=438
    PHASE=439
    PLUGIN=440
    PLUGIN_DIR=441
    PLUGINS=442
    PORT=443
    PRECEDES=444
    PREPARE=445
    PRESERVE=446
    PREV=447
    PROCESSLIST=448
    PROFILE=449
    PROFILES=450
    PROXY=451
    QUERY=452
    QUICK=453
    REBUILD=454
    RECOVER=455
    REDO_BUFFER_SIZE=456
    REDUNDANT=457
    RELAY=458
    RELAY_LOG_FILE=459
    RELAY_LOG_POS=460
    RELAYLOG=461
    REMOVE=462
    REORGANIZE=463
    REPAIR=464
    REPLICATE_DO_DB=465
    REPLICATE_DO_TABLE=466
    REPLICATE_IGNORE_DB=467
    REPLICATE_IGNORE_TABLE=468
    REPLICATE_REWRITE_DB=469
    REPLICATE_WILD_DO_TABLE=470
    REPLICATE_WILD_IGNORE_TABLE=471
    REPLICATION=472
    RESET=473
    RESUME=474
    RETURNS=475
    ROLLBACK=476
    ROLLUP=477
    ROTATE=478
    ROW=479
    ROWS=480
    ROW_FORMAT=481
    SAVEPOINT=482
    SCHEDULE=483
    SECURITY=484
    SERVER=485
    SESSION=486
    SHARE=487
    SHARED=488
    SIGNED=489
    SIMPLE=490
    SLAVE=491
    SLOW=492
    SNAPSHOT=493
    SOCKET=494
    SOME=495
    SONAME=496
    SOUNDS=497
    SOURCE=498
    SQL_AFTER_GTIDS=499
    SQL_AFTER_MTS_GAPS=500
    SQL_BEFORE_GTIDS=501
    SQL_BUFFER_RESULT=502
    SQL_CACHE=503
    SQL_NO_CACHE=504
    SQL_THREAD=505
    START=506
    STARTS=507
    STATS_AUTO_RECALC=508
    STATS_PERSISTENT=509
    STATS_SAMPLE_PAGES=510
    STATUS=511
    STOP=512
    STORAGE=513
    STORED=514
    STRING=515
    SUBJECT=516
    SUBPARTITION=517
    SUBPARTITIONS=518
    SUSPEND=519
    SWAPS=520
    SWITCHES=521
    TABLESPACE=522
    TEMPORARY=523
    TEMPTABLE=524
    THAN=525
    TRADITIONAL=526
    TRANSACTION=527
    TRIGGERS=528
    TRUNCATE=529
    UNDEFINED=530
    UNDOFILE=531
    UNDO_BUFFER_SIZE=532
    UNINSTALL=533
    UNKNOWN=534
    UNTIL=535
    UPGRADE=536
    USER=537
    USE_FRM=538
    USER_RESOURCES=539
    VALIDATION=540
    VALUE=541
    VARIABLES=542
    VIEW=543
    VIRTUAL=544
    WAIT=545
    WARNINGS=546
    WITHOUT=547
    WORK=548
    WRAPPER=549
    X509=550
    XA=551
    XML=552
    EUR=553
    USA=554
    JIS=555
    ISO=556
    INTERNAL=557
    QUARTER=558
    MONTH=559
    DAY=560
    HOUR=561
    MINUTE=562
    WEEK=563
    SECOND=564
    MICROSECOND=565
    TABLES=566
    ROUTINE=567
    EXECUTE=568
    FILE=569
    PROCESS=570
    RELOAD=571
    SHUTDOWN=572
    SUPER=573
    PRIVILEGES=574
    ARMSCII8=575
    ASCII=576
    BIG5=577
    CP1250=578
    CP1251=579
    CP1256=580
    CP1257=581
    CP850=582
    CP852=583
    CP866=584
    CP932=585
    DEC8=586
    EUCJPMS=587
    EUCKR=588
    GB2312=589
    GBK=590
    GEOSTD8=591
    GREEK=592
    HEBREW=593
    HP8=594
    KEYBCS2=595
    KOI8R=596
    KOI8U=597
    LATIN1=598
    LATIN2=599
    LATIN5=600
    LATIN7=601
    MACCE=602
    MACROMAN=603
    SJIS=604
    SWE7=605
    TIS620=606
    UCS2=607
    UJIS=608
    UTF16=609
    UTF16LE=610
    UTF32=611
    UTF8=612
    UTF8MB3=613
    UTF8MB4=614
    ARCHIVE=615
    BLACKHOLE=616
    CSV=617
    FEDERATED=618
    INNODB=619
    MEMORY=620
    MRG_MYISAM=621
    MYISAM=622
    NDB=623
    NDBCLUSTER=624
    PERFOMANCE_SCHEMA=625
    REPEATABLE=626
    COMMITTED=627
    UNCOMMITTED=628
    SERIALIZABLE=629
    GEOMETRYCOLLECTION=630
    LINESTRING=631
    MULTILINESTRING=632
    MULTIPOINT=633
    MULTIPOLYGON=634
    POINT=635
    POLYGON=636
    ABS=637
    ACOS=638
    ADDDATE=639
    ADDTIME=640
    AES_DECRYPT=641
    AES_ENCRYPT=642
    AREA=643
    ASBINARY=644
    ASIN=645
    ASTEXT=646
    ASWKB=647
    ASWKT=648
    ASYMMETRIC_DECRYPT=649
    ASYMMETRIC_DERIVE=650
    ASYMMETRIC_ENCRYPT=651
    ASYMMETRIC_SIGN=652
    ASYMMETRIC_VERIFY=653
    ATAN=654
    ATAN2=655
    BENCHMARK=656
    BIN=657
    BIT_COUNT=658
    BIT_LENGTH=659
    BUFFER=660
    CEIL=661
    CEILING=662
    CENTROID=663
    CHARACTER_LENGTH=664
    CHARSET=665
    CHAR_LENGTH=666
    COERCIBILITY=667
    COLLATION=668
    COMPRESS=669
    CONCAT=670
    CONCAT_WS=671
    CONNECTION_ID=672
    CONV=673
    CONVERT_TZ=674
    COS=675
    COT=676
    CRC32=677
    CREATE_ASYMMETRIC_PRIV_KEY=678
    CREATE_ASYMMETRIC_PUB_KEY=679
    CREATE_DH_PARAMETERS=680
    CREATE_DIGEST=681
    CROSSES=682
    DATEDIFF=683
    DATE_FORMAT=684
    DAYNAME=685
    DAYOFMONTH=686
    DAYOFWEEK=687
    DAYOFYEAR=688
    DECODE=689
    DEGREES=690
    DES_DECRYPT=691
    DES_ENCRYPT=692
    DIMENSION=693
    DISJOINT=694
    ELT=695
    ENCODE=696
    ENCRYPT=697
    ENDPOINT=698
    ENVELOPE=699
    EQUALS=700
    EXP=701
    EXPORT_SET=702
    EXTERIORRING=703
    EXTRACTVALUE=704
    FIELD=705
    FIND_IN_SET=706
    FLOOR=707
    FORMAT=708
    FOUND_ROWS=709
    FROM_BASE64=710
    FROM_DAYS=711
    FROM_UNIXTIME=712
    GEOMCOLLFROMTEXT=713
    GEOMCOLLFROMWKB=714
    GEOMETRYCOLLECTIONFROMTEXT=715
    GEOMETRYCOLLECTIONFROMWKB=716
    GEOMETRYFROMTEXT=717
    GEOMETRYFROMWKB=718
    GEOMETRYN=719
    GEOMETRYTYPE=720
    GEOMFROMTEXT=721
    GEOMFROMWKB=722
    GET_FORMAT=723
    GET_LOCK=724
    GLENGTH=725
    GREATEST=726
    GTID_SUBSET=727
    GTID_SUBTRACT=728
    HEX=729
    IFNULL=730
    INET6_ATON=731
    INET6_NTOA=732
    INET_ATON=733
    INET_NTOA=734
    INSTR=735
    INTERIORRINGN=736
    INTERSECTS=737
    ISCLOSED=738
    ISEMPTY=739
    ISNULL=740
    ISSIMPLE=741
    IS_FREE_LOCK=742
    IS_IPV4=743
    IS_IPV4_COMPAT=744
    IS_IPV4_MAPPED=745
    IS_IPV6=746
    IS_USED_LOCK=747
    LAST_INSERT_ID=748
    LCASE=749
    LEAST=750
    LENGTH=751
    LINEFROMTEXT=752
    LINEFROMWKB=753
    LINESTRINGFROMTEXT=754
    LINESTRINGFROMWKB=755
    LN=756
    LOAD_FILE=757
    LOCATE=758
    LOG=759
    LOG10=760
    LOG2=761
    LOWER=762
    LPAD=763
    LTRIM=764
    MAKEDATE=765
    MAKETIME=766
    MAKE_SET=767
    MASTER_POS_WAIT=768
    MBRCONTAINS=769
    MBRDISJOINT=770
    MBREQUAL=771
    MBRINTERSECTS=772
    MBROVERLAPS=773
    MBRTOUCHES=774
    MBRWITHIN=775
    MD5=776
    MLINEFROMTEXT=777
    MLINEFROMWKB=778
    MONTHNAME=779
    MPOINTFROMTEXT=780
    MPOINTFROMWKB=781
    MPOLYFROMTEXT=782
    MPOLYFROMWKB=783
    MULTILINESTRINGFROMTEXT=784
    MULTILINESTRINGFROMWKB=785
    MULTIPOINTFROMTEXT=786
    MULTIPOINTFROMWKB=787
    MULTIPOLYGONFROMTEXT=788
    MULTIPOLYGONFROMWKB=789
    NAME_CONST=790
    NULLIF=791
    NUMGEOMETRIES=792
    NUMINTERIORRINGS=793
    NUMPOINTS=794
    OCT=795
    OCTET_LENGTH=796
    ORD=797
    OVERLAPS=798
    PERIOD_ADD=799
    PERIOD_DIFF=800
    PI=801
    POINTFROMTEXT=802
    POINTFROMWKB=803
    POINTN=804
    POLYFROMTEXT=805
    POLYFROMWKB=806
    POLYGONFROMTEXT=807
    POLYGONFROMWKB=808
    POW=809
    POWER=810
    QUOTE=811
    RADIANS=812
    RAND=813
    RANDOM_BYTES=814
    RELEASE_LOCK=815
    REVERSE=816
    ROUND=817
    ROW_COUNT=818
    RPAD=819
    RTRIM=820
    SEC_TO_TIME=821
    SESSION_USER=822
    SHA=823
    SHA1=824
    SHA2=825
    SIGN=826
    SIN=827
    SLEEP=828
    SOUNDEX=829
    SQL_THREAD_WAIT_AFTER_GTIDS=830
    SQRT=831
    SRID=832
    STARTPOINT=833
    STRCMP=834
    STR_TO_DATE=835
    ST_AREA=836
    ST_ASBINARY=837
    ST_ASTEXT=838
    ST_ASWKB=839
    ST_ASWKT=840
    ST_BUFFER=841
    ST_CENTROID=842
    ST_CONTAINS=843
    ST_CROSSES=844
    ST_DIFFERENCE=845
    ST_DIMENSION=846
    ST_DISJOINT=847
    ST_DISTANCE=848
    ST_ENDPOINT=849
    ST_ENVELOPE=850
    ST_EQUALS=851
    ST_EXTERIORRING=852
    ST_GEOMCOLLFROMTEXT=853
    ST_GEOMCOLLFROMTXT=854
    ST_GEOMCOLLFROMWKB=855
    ST_GEOMETRYCOLLECTIONFROMTEXT=856
    ST_GEOMETRYCOLLECTIONFROMWKB=857
    ST_GEOMETRYFROMTEXT=858
    ST_GEOMETRYFROMWKB=859
    ST_GEOMETRYN=860
    ST_GEOMETRYTYPE=861
    ST_GEOMFROMTEXT=862
    ST_GEOMFROMWKB=863
    ST_INTERIORRINGN=864
    ST_INTERSECTION=865
    ST_INTERSECTS=866
    ST_ISCLOSED=867
    ST_ISEMPTY=868
    ST_ISSIMPLE=869
    ST_LINEFROMTEXT=870
    ST_LINEFROMWKB=871
    ST_LINESTRINGFROMTEXT=872
    ST_LINESTRINGFROMWKB=873
    ST_NUMGEOMETRIES=874
    ST_NUMINTERIORRING=875
    ST_NUMINTERIORRINGS=876
    ST_NUMPOINTS=877
    ST_OVERLAPS=878
    ST_POINTFROMTEXT=879
    ST_POINTFROMWKB=880
    ST_POINTN=881
    ST_POLYFROMTEXT=882
    ST_POLYFROMWKB=883
    ST_POLYGONFROMTEXT=884
    ST_POLYGONFROMWKB=885
    ST_SRID=886
    ST_STARTPOINT=887
    ST_SYMDIFFERENCE=888
    ST_TOUCHES=889
    ST_UNION=890
    ST_WITHIN=891
    ST_X=892
    ST_Y=893
    SUBDATE=894
    SUBSTRING_INDEX=895
    SUBTIME=896
    SYSTEM_USER=897
    TAN=898
    TIMEDIFF=899
    TIMESTAMPADD=900
    TIMESTAMPDIFF=901
    TIME_FORMAT=902
    TIME_TO_SEC=903
    TOUCHES=904
    TO_BASE64=905
    TO_DAYS=906
    TO_SECONDS=907
    UCASE=908
    UNCOMPRESS=909
    UNCOMPRESSED_LENGTH=910
    UNHEX=911
    UNIX_TIMESTAMP=912
    UPDATEXML=913
    UPPER=914
    UUID=915
    UUID_SHORT=916
    VALIDATE_PASSWORD_STRENGTH=917
    VERSION=918
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=919
    WEEKDAY=920
    WEEKOFYEAR=921
    WEIGHT_STRING=922
    WITHIN=923
    YEARWEEK=924
    Y_FUNCTION=925
    X_FUNCTION=926
    VAR_ASSIGN=927
    PLUS_ASSIGN=928
    MINUS_ASSIGN=929
    MULT_ASSIGN=930
    DIV_ASSIGN=931
    MOD_ASSIGN=932
    AND_ASSIGN=933
    XOR_ASSIGN=934
    OR_ASSIGN=935
    STAR=936
    DIVIDE=937
    MODULE=938
    PLUS=939
    MINUSMINUS=940
    MINUS=941
    DIV=942
    MOD=943
    EQUAL_SYMBOL=944
    GREATER_SYMBOL=945
    LESS_SYMBOL=946
    EXCLAMATION_SYMBOL=947
    BIT_NOT_OP=948
    BIT_OR_OP=949
    BIT_AND_OP=950
    BIT_XOR_OP=951
    DOT=952
    LR_BRACKET=953
    RR_BRACKET=954
    COMMA=955
    SEMI=956
    AT_SIGN=957
    ZERO_DECIMAL=958
    ONE_DECIMAL=959
    TWO_DECIMAL=960
    SINGLE_QUOTE_SYMB=961
    DOUBLE_QUOTE_SYMB=962
    REVERSE_QUOTE_SYMB=963
    COLON_SYMB=964
    CHARSET_REVERSE_QOUTE_STRING=965
    FILESIZE_LITERAL=966
    START_NATIONAL_STRING_LITERAL=967
    STRING_LITERAL=968
    DECIMAL_LITERAL=969
    HEXADECIMAL_LITERAL=970
    REAL_LITERAL=971
    NULL_SPEC_LITERAL=972
    BIT_STRING=973
    STRING_CHARSET_NAME=974
    DOT_ID=975
    ID=976
    REVERSE_QUOTE_ID=977
    STRING_USER_NAME=978
    LOCAL_ID=979
    GLOBAL_ID=980
    ERROR_RECONGNIGION=981

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(frameQLParser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(frameQLParser.SqlStatementsContext,0)


        def MINUSMINUS(self):
            return self.getToken(frameQLParser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = frameQLParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << frameQLParser.ALTER) | (1 << frameQLParser.ANALYZE) | (1 << frameQLParser.CALL) | (1 << frameQLParser.CHANGE) | (1 << frameQLParser.CHECK) | (1 << frameQLParser.CREATE) | (1 << frameQLParser.DELETE) | (1 << frameQLParser.DESC) | (1 << frameQLParser.DESCRIBE) | (1 << frameQLParser.DROP) | (1 << frameQLParser.EXPLAIN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (frameQLParser.GRANT - 64)) | (1 << (frameQLParser.INSERT - 64)) | (1 << (frameQLParser.KILL - 64)) | (1 << (frameQLParser.LOAD - 64)) | (1 << (frameQLParser.LOCK - 64)) | (1 << (frameQLParser.OPTIMIZE - 64)) | (1 << (frameQLParser.PURGE - 64)) | (1 << (frameQLParser.RELEASE - 64)) | (1 << (frameQLParser.RENAME - 64)) | (1 << (frameQLParser.REPLACE - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (frameQLParser.REVOKE - 129)) | (1 << (frameQLParser.SELECT - 129)) | (1 << (frameQLParser.SET - 129)) | (1 << (frameQLParser.SHOW - 129)) | (1 << (frameQLParser.UNLOCK - 129)) | (1 << (frameQLParser.UPDATE - 129)) | (1 << (frameQLParser.USE - 129)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (frameQLParser.BEGIN - 262)) | (1 << (frameQLParser.BINLOG - 262)) | (1 << (frameQLParser.CACHE - 262)) | (1 << (frameQLParser.CHECKSUM - 262)) | (1 << (frameQLParser.COMMIT - 262)) | (1 << (frameQLParser.DEALLOCATE - 262)) | (1 << (frameQLParser.DO - 262)))) != 0) or ((((_la - 337)) & ~0x3f) == 0 and ((1 << (_la - 337)) & ((1 << (frameQLParser.FLUSH - 337)) | (1 << (frameQLParser.HANDLER - 337)) | (1 << (frameQLParser.HELP - 337)) | (1 << (frameQLParser.INSTALL - 337)))) != 0) or ((((_la - 445)) & ~0x3f) == 0 and ((1 << (_la - 445)) & ((1 << (frameQLParser.PREPARE - 445)) | (1 << (frameQLParser.REPAIR - 445)) | (1 << (frameQLParser.RESET - 445)) | (1 << (frameQLParser.ROLLBACK - 445)) | (1 << (frameQLParser.SAVEPOINT - 445)) | (1 << (frameQLParser.START - 445)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (frameQLParser.STOP - 512)) | (1 << (frameQLParser.TRUNCATE - 512)) | (1 << (frameQLParser.UNINSTALL - 512)) | (1 << (frameQLParser.XA - 512)) | (1 << (frameQLParser.EXECUTE - 512)) | (1 << (frameQLParser.SHUTDOWN - 512)))) != 0) or _la==frameQLParser.LR_BRACKET or _la==frameQLParser.SEMI:
                self.state = 620
                self.sqlStatements()


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.MINUSMINUS:
                self.state = 623
                self.match(frameQLParser.MINUSMINUS)


            self.state = 626
            self.match(frameQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SqlStatementContext,i)


        def emptyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.EmptyStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.EmptyStatementContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.SEMI)
            else:
                return self.getToken(frameQLParser.SEMI, i)

        def MINUSMINUS(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.MINUSMINUS)
            else:
                return self.getToken(frameQLParser.MINUSMINUS, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)




    def sqlStatements(self):

        localctx = frameQLParser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 635
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [frameQLParser.ALTER, frameQLParser.ANALYZE, frameQLParser.CALL, frameQLParser.CHANGE, frameQLParser.CHECK, frameQLParser.CREATE, frameQLParser.DELETE, frameQLParser.DESC, frameQLParser.DESCRIBE, frameQLParser.DROP, frameQLParser.EXPLAIN, frameQLParser.GRANT, frameQLParser.INSERT, frameQLParser.KILL, frameQLParser.LOAD, frameQLParser.LOCK, frameQLParser.OPTIMIZE, frameQLParser.PURGE, frameQLParser.RELEASE, frameQLParser.RENAME, frameQLParser.REPLACE, frameQLParser.REVOKE, frameQLParser.SELECT, frameQLParser.SET, frameQLParser.SHOW, frameQLParser.UNLOCK, frameQLParser.UPDATE, frameQLParser.USE, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.CACHE, frameQLParser.CHECKSUM, frameQLParser.COMMIT, frameQLParser.DEALLOCATE, frameQLParser.DO, frameQLParser.FLUSH, frameQLParser.HANDLER, frameQLParser.HELP, frameQLParser.INSTALL, frameQLParser.PREPARE, frameQLParser.REPAIR, frameQLParser.RESET, frameQLParser.ROLLBACK, frameQLParser.SAVEPOINT, frameQLParser.START, frameQLParser.STOP, frameQLParser.TRUNCATE, frameQLParser.UNINSTALL, frameQLParser.XA, frameQLParser.EXECUTE, frameQLParser.SHUTDOWN, frameQLParser.LR_BRACKET]:
                        self.state = 628
                        self.sqlStatement()
                        self.state = 630
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==frameQLParser.MINUSMINUS:
                            self.state = 629
                            self.match(frameQLParser.MINUSMINUS)


                        self.state = 632
                        self.match(frameQLParser.SEMI)
                        pass
                    elif token in [frameQLParser.SEMI]:
                        self.state = 634
                        self.emptyStatement()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ALTER, frameQLParser.ANALYZE, frameQLParser.CALL, frameQLParser.CHANGE, frameQLParser.CHECK, frameQLParser.CREATE, frameQLParser.DELETE, frameQLParser.DESC, frameQLParser.DESCRIBE, frameQLParser.DROP, frameQLParser.EXPLAIN, frameQLParser.GRANT, frameQLParser.INSERT, frameQLParser.KILL, frameQLParser.LOAD, frameQLParser.LOCK, frameQLParser.OPTIMIZE, frameQLParser.PURGE, frameQLParser.RELEASE, frameQLParser.RENAME, frameQLParser.REPLACE, frameQLParser.REVOKE, frameQLParser.SELECT, frameQLParser.SET, frameQLParser.SHOW, frameQLParser.UNLOCK, frameQLParser.UPDATE, frameQLParser.USE, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.CACHE, frameQLParser.CHECKSUM, frameQLParser.COMMIT, frameQLParser.DEALLOCATE, frameQLParser.DO, frameQLParser.FLUSH, frameQLParser.HANDLER, frameQLParser.HELP, frameQLParser.INSTALL, frameQLParser.PREPARE, frameQLParser.REPAIR, frameQLParser.RESET, frameQLParser.ROLLBACK, frameQLParser.SAVEPOINT, frameQLParser.START, frameQLParser.STOP, frameQLParser.TRUNCATE, frameQLParser.UNINSTALL, frameQLParser.XA, frameQLParser.EXECUTE, frameQLParser.SHUTDOWN, frameQLParser.LR_BRACKET]:
                self.state = 640
                self.sqlStatement()
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.MINUSMINUS:
                        self.state = 641
                        self.match(frameQLParser.MINUSMINUS)


                    self.state = 644
                    self.match(frameQLParser.SEMI)


                pass
            elif token in [frameQLParser.SEMI]:
                self.state = 647
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(frameQLParser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(frameQLParser.DmlStatementContext,0)


        def transactionStatement(self):
            return self.getTypedRuleContext(frameQLParser.TransactionStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(frameQLParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(frameQLParser.PreparedStatementContext,0)


        def administrationStatement(self):
            return self.getTypedRuleContext(frameQLParser.AdministrationStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(frameQLParser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)




    def sqlStatement(self):

        localctx = frameQLParser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.ddlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 651
                self.dmlStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 652
                self.transactionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 653
                self.replicationStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 654
                self.preparedStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 655
                self.administrationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 656
                self.utilityStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(frameQLParser.SEMI, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)




    def emptyStatement(self):

        localctx = frameQLParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(frameQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(frameQLParser.CreateDatabaseContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(frameQLParser.CreateEventContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(frameQLParser.CreateIndexContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(frameQLParser.CreateLogfileGroupContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(frameQLParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(frameQLParser.CreateFunctionContext,0)


        def createServer(self):
            return self.getTypedRuleContext(frameQLParser.CreateServerContext,0)


        def createTable(self):
            return self.getTypedRuleContext(frameQLParser.CreateTableContext,0)


        def createTablespaceInnodb(self):
            return self.getTypedRuleContext(frameQLParser.CreateTablespaceInnodbContext,0)


        def createTablespaceNdb(self):
            return self.getTypedRuleContext(frameQLParser.CreateTablespaceNdbContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(frameQLParser.CreateTriggerContext,0)


        def createView(self):
            return self.getTypedRuleContext(frameQLParser.CreateViewContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(frameQLParser.AlterDatabaseContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(frameQLParser.AlterEventContext,0)


        def alterFunction(self):
            return self.getTypedRuleContext(frameQLParser.AlterFunctionContext,0)


        def alterInstance(self):
            return self.getTypedRuleContext(frameQLParser.AlterInstanceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(frameQLParser.AlterLogfileGroupContext,0)


        def alterProcedure(self):
            return self.getTypedRuleContext(frameQLParser.AlterProcedureContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(frameQLParser.AlterServerContext,0)


        def alterTable(self):
            return self.getTypedRuleContext(frameQLParser.AlterTableContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(frameQLParser.AlterTablespaceContext,0)


        def alterView(self):
            return self.getTypedRuleContext(frameQLParser.AlterViewContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(frameQLParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(frameQLParser.DropEventContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(frameQLParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(frameQLParser.DropLogfileGroupContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(frameQLParser.DropProcedureContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(frameQLParser.DropFunctionContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(frameQLParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(frameQLParser.DropTableContext,0)


        def dropTablespace(self):
            return self.getTypedRuleContext(frameQLParser.DropTablespaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(frameQLParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(frameQLParser.DropViewContext,0)


        def renameTable(self):
            return self.getTypedRuleContext(frameQLParser.RenameTableContext,0)


        def truncateTable(self):
            return self.getTypedRuleContext(frameQLParser.TruncateTableContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)




    def ddlStatement(self):

        localctx = frameQLParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 661
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.createEvent()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 663
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 664
                self.createLogfileGroup()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 665
                self.createProcedure()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 666
                self.createFunction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 667
                self.createServer()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 668
                self.createTable()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 669
                self.createTablespaceInnodb()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 670
                self.createTablespaceNdb()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 671
                self.createTrigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 672
                self.createView()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 673
                self.alterDatabase()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 674
                self.alterEvent()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 675
                self.alterFunction()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 676
                self.alterInstance()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 677
                self.alterLogfileGroup()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 678
                self.alterProcedure()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 679
                self.alterServer()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 680
                self.alterTable()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 681
                self.alterTablespace()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 682
                self.alterView()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 683
                self.dropDatabase()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 684
                self.dropEvent()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 685
                self.dropIndex()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 686
                self.dropLogfileGroup()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 687
                self.dropProcedure()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 688
                self.dropFunction()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 689
                self.dropServer()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 690
                self.dropTable()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 691
                self.dropTablespace()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 692
                self.dropTrigger()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 693
                self.dropView()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 694
                self.renameTable()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 695
                self.truncateTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(frameQLParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(frameQLParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(frameQLParser.DeleteStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(frameQLParser.ReplaceStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(frameQLParser.CallStatementContext,0)


        def loadDataStatement(self):
            return self.getTypedRuleContext(frameQLParser.LoadDataStatementContext,0)


        def loadXmlStatement(self):
            return self.getTypedRuleContext(frameQLParser.LoadXmlStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(frameQLParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(frameQLParser.HandlerStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)




    def dmlStatement(self):

        localctx = frameQLParser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 698
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 699
                self.insertStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 700
                self.updateStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 701
                self.deleteStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 702
                self.replaceStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 703
                self.callStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 704
                self.loadDataStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 705
                self.loadXmlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 706
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 707
                self.handlerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransaction(self):
            return self.getTypedRuleContext(frameQLParser.StartTransactionContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(frameQLParser.BeginWorkContext,0)


        def commitWork(self):
            return self.getTypedRuleContext(frameQLParser.CommitWorkContext,0)


        def rollbackWork(self):
            return self.getTypedRuleContext(frameQLParser.RollbackWorkContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(frameQLParser.SavepointStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(frameQLParser.RollbackStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(frameQLParser.ReleaseStatementContext,0)


        def lockTables(self):
            return self.getTypedRuleContext(frameQLParser.LockTablesContext,0)


        def unlockTables(self):
            return self.getTypedRuleContext(frameQLParser.UnlockTablesContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)




    def transactionStatement(self):

        localctx = frameQLParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transactionStatement)
        try:
            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 710
                self.startTransaction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self.beginWork()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 712
                self.commitWork()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 713
                self.rollbackWork()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 714
                self.savepointStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 715
                self.rollbackStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 716
                self.releaseStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 717
                self.lockTables()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 718
                self.unlockTables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def changeMaster(self):
            return self.getTypedRuleContext(frameQLParser.ChangeMasterContext,0)


        def changeReplicationFilter(self):
            return self.getTypedRuleContext(frameQLParser.ChangeReplicationFilterContext,0)


        def purgeBinaryLogs(self):
            return self.getTypedRuleContext(frameQLParser.PurgeBinaryLogsContext,0)


        def resetMaster(self):
            return self.getTypedRuleContext(frameQLParser.ResetMasterContext,0)


        def resetSlave(self):
            return self.getTypedRuleContext(frameQLParser.ResetSlaveContext,0)


        def startSlave(self):
            return self.getTypedRuleContext(frameQLParser.StartSlaveContext,0)


        def stopSlave(self):
            return self.getTypedRuleContext(frameQLParser.StopSlaveContext,0)


        def startGroupReplication(self):
            return self.getTypedRuleContext(frameQLParser.StartGroupReplicationContext,0)


        def stopGroupReplication(self):
            return self.getTypedRuleContext(frameQLParser.StopGroupReplicationContext,0)


        def xaStartTransaction(self):
            return self.getTypedRuleContext(frameQLParser.XaStartTransactionContext,0)


        def xaEndTransaction(self):
            return self.getTypedRuleContext(frameQLParser.XaEndTransactionContext,0)


        def xaPrepareStatement(self):
            return self.getTypedRuleContext(frameQLParser.XaPrepareStatementContext,0)


        def xaCommitWork(self):
            return self.getTypedRuleContext(frameQLParser.XaCommitWorkContext,0)


        def xaRollbackWork(self):
            return self.getTypedRuleContext(frameQLParser.XaRollbackWorkContext,0)


        def xaRecoverWork(self):
            return self.getTypedRuleContext(frameQLParser.XaRecoverWorkContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_replicationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationStatement" ):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationStatement" ):
                listener.exitReplicationStatement(self)




    def replicationStatement(self):

        localctx = frameQLParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_replicationStatement)
        try:
            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 721
                self.changeMaster()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 722
                self.changeReplicationFilter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 723
                self.purgeBinaryLogs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 724
                self.resetMaster()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 725
                self.resetSlave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 726
                self.startSlave()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 727
                self.stopSlave()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 728
                self.startGroupReplication()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 729
                self.stopGroupReplication()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 730
                self.xaStartTransaction()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 731
                self.xaEndTransaction()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 732
                self.xaPrepareStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 733
                self.xaCommitWork()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 734
                self.xaRollbackWork()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 735
                self.xaRecoverWork()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparedStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prepareStatement(self):
            return self.getTypedRuleContext(frameQLParser.PrepareStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(frameQLParser.ExecuteStatementContext,0)


        def deallocatePrepare(self):
            return self.getTypedRuleContext(frameQLParser.DeallocatePrepareContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_preparedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparedStatement" ):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparedStatement" ):
                listener.exitPreparedStatement(self)




    def preparedStatement(self):

        localctx = frameQLParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_preparedStatement)
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.PREPARE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.prepareStatement()
                pass
            elif token in [frameQLParser.EXECUTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.executeStatement()
                pass
            elif token in [frameQLParser.DROP, frameQLParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 740
                self.deallocatePrepare()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(frameQLParser.BlockStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(frameQLParser.CaseStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(frameQLParser.IfStatementContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(frameQLParser.LeaveStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(frameQLParser.LoopStatementContext,0)


        def repeatStatement(self):
            return self.getTypedRuleContext(frameQLParser.RepeatStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(frameQLParser.WhileStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(frameQLParser.IterateStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(frameQLParser.ReturnStatementContext,0)


        def cursorStatement(self):
            return self.getTypedRuleContext(frameQLParser.CursorStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = frameQLParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compoundStatement)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.caseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 745
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 746
                self.leaveStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 747
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 748
                self.repeatStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 749
                self.whileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 750
                self.iterateStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 751
                self.returnStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 752
                self.cursorStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdministrationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(frameQLParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(frameQLParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(frameQLParser.DropUserContext,0)


        def grantStatement(self):
            return self.getTypedRuleContext(frameQLParser.GrantStatementContext,0)


        def grantProxy(self):
            return self.getTypedRuleContext(frameQLParser.GrantProxyContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(frameQLParser.RenameUserContext,0)


        def revokeStatement(self):
            return self.getTypedRuleContext(frameQLParser.RevokeStatementContext,0)


        def revokeProxy(self):
            return self.getTypedRuleContext(frameQLParser.RevokeProxyContext,0)


        def analyzeTable(self):
            return self.getTypedRuleContext(frameQLParser.AnalyzeTableContext,0)


        def checkTable(self):
            return self.getTypedRuleContext(frameQLParser.CheckTableContext,0)


        def checksumTable(self):
            return self.getTypedRuleContext(frameQLParser.ChecksumTableContext,0)


        def optimizeTable(self):
            return self.getTypedRuleContext(frameQLParser.OptimizeTableContext,0)


        def repairTable(self):
            return self.getTypedRuleContext(frameQLParser.RepairTableContext,0)


        def createUdfunction(self):
            return self.getTypedRuleContext(frameQLParser.CreateUdfunctionContext,0)


        def installPlugin(self):
            return self.getTypedRuleContext(frameQLParser.InstallPluginContext,0)


        def uninstallPlugin(self):
            return self.getTypedRuleContext(frameQLParser.UninstallPluginContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(frameQLParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(frameQLParser.ShowStatementContext,0)


        def binlogStatement(self):
            return self.getTypedRuleContext(frameQLParser.BinlogStatementContext,0)


        def cacheIndexStatement(self):
            return self.getTypedRuleContext(frameQLParser.CacheIndexStatementContext,0)


        def flushStatement(self):
            return self.getTypedRuleContext(frameQLParser.FlushStatementContext,0)


        def killStatement(self):
            return self.getTypedRuleContext(frameQLParser.KillStatementContext,0)


        def loadIndexIntoCache(self):
            return self.getTypedRuleContext(frameQLParser.LoadIndexIntoCacheContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(frameQLParser.ResetStatementContext,0)


        def shutdownStatement(self):
            return self.getTypedRuleContext(frameQLParser.ShutdownStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_administrationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdministrationStatement" ):
                listener.enterAdministrationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdministrationStatement" ):
                listener.exitAdministrationStatement(self)




    def administrationStatement(self):

        localctx = frameQLParser.AdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_administrationStatement)
        try:
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 757
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 758
                self.grantStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 759
                self.grantProxy()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 760
                self.renameUser()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 761
                self.revokeStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 762
                self.revokeProxy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 763
                self.analyzeTable()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 764
                self.checkTable()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 765
                self.checksumTable()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 766
                self.optimizeTable()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 767
                self.repairTable()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 768
                self.createUdfunction()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 769
                self.installPlugin()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 770
                self.uninstallPlugin()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 771
                self.setStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 772
                self.showStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 773
                self.binlogStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 774
                self.cacheIndexStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 775
                self.flushStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 776
                self.killStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 777
                self.loadIndexIntoCache()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 778
                self.resetStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 779
                self.shutdownStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(frameQLParser.SimpleDescribeStatementContext,0)


        def fullDescribeStatement(self):
            return self.getTypedRuleContext(frameQLParser.FullDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(frameQLParser.HelpStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(frameQLParser.UseStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)




    def utilityStatement(self):

        localctx = frameQLParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_utilityStatement)
        try:
            self.state = 786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.simpleDescribeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 783
                self.fullDescribeStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 784
                self.helpStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 785
                self.useStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(frameQLParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(frameQLParser.SCHEMA, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(frameQLParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)




    def createDatabase(self):

        localctx = frameQLParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(frameQLParser.CREATE)
            self.state = 789
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.DATABASE or _la==frameQLParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 790
                self.ifNotExists()


            self.state = 793
            self.uid()
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << frameQLParser.CHARACTER) | (1 << frameQLParser.COLLATE) | (1 << frameQLParser.DEFAULT))) != 0) or _la==frameQLParser.CHARSET:
                self.state = 794
                self.createDatabaseOption()
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(frameQLParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.ON)
            else:
                return self.getToken(frameQLParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(frameQLParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(frameQLParser.ScheduleExpressionContext,0)


        def DO(self):
            return self.getToken(frameQLParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(frameQLParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(frameQLParser.OwnerStatementContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(frameQLParser.IfNotExistsContext,0)


        def COMPLETION(self):
            return self.getToken(frameQLParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(frameQLParser.PRESERVE, 0)

        def enableType(self):
            return self.getTypedRuleContext(frameQLParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_createEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateEvent" ):
                listener.enterCreateEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateEvent" ):
                listener.exitCreateEvent(self)




    def createEvent(self):

        localctx = frameQLParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(frameQLParser.CREATE)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DEFINER:
                self.state = 801
                self.ownerStatement()


            self.state = 804
            self.match(frameQLParser.EVENT)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 805
                self.ifNotExists()


            self.state = 808
            self.fullId()
            self.state = 809
            self.match(frameQLParser.ON)
            self.state = 810
            self.match(frameQLParser.SCHEDULE)
            self.state = 811
            self.scheduleExpression()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ON:
                self.state = 812
                self.match(frameQLParser.ON)
                self.state = 813
                self.match(frameQLParser.COMPLETION)
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.NOT:
                    self.state = 814
                    self.match(frameQLParser.NOT)


                self.state = 817
                self.match(frameQLParser.PRESERVE)


            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DISABLE or _la==frameQLParser.ENABLE:
                self.state = 820
                self.enableType()


            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.COMMENT:
                self.state = 823
                self.match(frameQLParser.COMMENT)
                self.state = 824
                self.match(frameQLParser.STRING_LITERAL)


            self.state = 827
            self.match(frameQLParser.DO)
            self.state = 828
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.indexCategory = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def ON(self):
            return self.getToken(frameQLParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(frameQLParser.IndexTypeContext,0)


        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexOptionContext,i)


        def ALGORITHM(self):
            return self.getToken(frameQLParser.ALGORITHM, 0)

        def LOCK(self):
            return self.getToken(frameQLParser.LOCK, 0)

        def ONLINE(self):
            return self.getToken(frameQLParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(frameQLParser.OFFLINE, 0)

        def UNIQUE(self):
            return self.getToken(frameQLParser.UNIQUE, 0)

        def FULLTEXT(self):
            return self.getToken(frameQLParser.FULLTEXT, 0)

        def SPATIAL(self):
            return self.getToken(frameQLParser.SPATIAL, 0)

        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def INPLACE(self):
            return self.getToken(frameQLParser.INPLACE, 0)

        def COPY(self):
            return self.getToken(frameQLParser.COPY, 0)

        def NONE(self):
            return self.getToken(frameQLParser.NONE, 0)

        def SHARED(self):
            return self.getToken(frameQLParser.SHARED, 0)

        def EXCLUSIVE(self):
            return self.getToken(frameQLParser.EXCLUSIVE, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)




    def createIndex(self):

        localctx = frameQLParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(frameQLParser.CREATE)
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.OFFLINE or _la==frameQLParser.ONLINE:
                self.state = 831
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.OFFLINE or _la==frameQLParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.FULLTEXT or _la==frameQLParser.SPATIAL or _la==frameQLParser.UNIQUE:
                self.state = 834
                localctx.indexCategory = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FULLTEXT or _la==frameQLParser.SPATIAL or _la==frameQLParser.UNIQUE):
                    localctx.indexCategory = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 837
            self.match(frameQLParser.INDEX)
            self.state = 838
            self.uid()
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.USING:
                self.state = 839
                self.indexType()


            self.state = 842
            self.match(frameQLParser.ON)
            self.state = 843
            self.tableName()
            self.state = 844
            self.indexColumnNames()
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.USING or _la==frameQLParser.WITH or _la==frameQLParser.COMMENT or _la==frameQLParser.KEY_BLOCK_SIZE:
                self.state = 845
                self.indexOption()
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ALGORITHM]:
                self.state = 851
                self.match(frameQLParser.ALGORITHM)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 852
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 855
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.COPY or _la==frameQLParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.LOCK]:
                self.state = 856
                self.match(frameQLParser.LOCK)
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 857
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 860
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.EXCLUSIVE or _la==frameQLParser.NONE or _la==frameQLParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.EOF, frameQLParser.MINUSMINUS, frameQLParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.undoFile = None # Token
            self.initSize = None # FileSizeLiteralContext
            self.undoSize = None # FileSizeLiteralContext
            self.redoSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def LOGFILE(self):
            return self.getToken(frameQLParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(frameQLParser.GROUP, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(frameQLParser.UNDOFILE, 0)

        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.STRING_LITERAL)
            else:
                return self.getToken(frameQLParser.STRING_LITERAL, i)

        def INITIAL_SIZE(self):
            return self.getToken(frameQLParser.INITIAL_SIZE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(frameQLParser.UNDO_BUFFER_SIZE, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(frameQLParser.REDO_BUFFER_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(frameQLParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(frameQLParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_createLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLogfileGroup" ):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLogfileGroup" ):
                listener.exitCreateLogfileGroup(self)




    def createLogfileGroup(self):

        localctx = frameQLParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(frameQLParser.CREATE)
            self.state = 864
            self.match(frameQLParser.LOGFILE)
            self.state = 865
            self.match(frameQLParser.GROUP)
            self.state = 866
            self.uid()
            self.state = 867
            self.match(frameQLParser.ADD)
            self.state = 868
            self.match(frameQLParser.UNDOFILE)
            self.state = 869
            localctx.undoFile = self.match(frameQLParser.STRING_LITERAL)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.INITIAL_SIZE:
                self.state = 870
                self.match(frameQLParser.INITIAL_SIZE)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 871
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 874
                localctx.initSize = self.fileSizeLiteral()


            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.UNDO_BUFFER_SIZE:
                self.state = 877
                self.match(frameQLParser.UNDO_BUFFER_SIZE)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 878
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 881
                localctx.undoSize = self.fileSizeLiteral()


            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.REDO_BUFFER_SIZE:
                self.state = 884
                self.match(frameQLParser.REDO_BUFFER_SIZE)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 885
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 888
                localctx.redoSize = self.fileSizeLiteral()


            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.NODEGROUP:
                self.state = 891
                self.match(frameQLParser.NODEGROUP)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 892
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 895
                self.uid()


            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WAIT:
                self.state = 898
                self.match(frameQLParser.WAIT)


            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.COMMENT:
                self.state = 901
                self.match(frameQLParser.COMMENT)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 902
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 905
                localctx.comment = self.match(frameQLParser.STRING_LITERAL)


            self.state = 908
            self.match(frameQLParser.ENGINE)
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.EQUAL_SYMBOL:
                self.state = 909
                self.match(frameQLParser.EQUAL_SYMBOL)


            self.state = 912
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(frameQLParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def routineBody(self):
            return self.getTypedRuleContext(frameQLParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(frameQLParser.OwnerStatementContext,0)


        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ProcedureParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_createProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateProcedure" ):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateProcedure" ):
                listener.exitCreateProcedure(self)




    def createProcedure(self):

        localctx = frameQLParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(frameQLParser.CREATE)
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DEFINER:
                self.state = 915
                self.ownerStatement()


            self.state = 918
            self.match(frameQLParser.PROCEDURE)
            self.state = 919
            self.fullId()
            self.state = 920
            self.match(frameQLParser.LR_BRACKET)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (frameQLParser.IN - 70)) | (1 << (frameQLParser.INOUT - 70)) | (1 << (frameQLParser.OUT - 70)))) != 0):
                self.state = 921
                self.procedureParameter()


            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 924
                self.match(frameQLParser.COMMA)
                self.state = 925
                self.procedureParameter()
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 931
            self.match(frameQLParser.RR_BRACKET)
            self.state = 935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 932
                    self.routineOption() 
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 938
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def RETURNS(self):
            return self.getToken(frameQLParser.RETURNS, 0)

        def dataType(self):
            return self.getTypedRuleContext(frameQLParser.DataTypeContext,0)


        def routineBody(self):
            return self.getTypedRuleContext(frameQLParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(frameQLParser.OwnerStatementContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FunctionParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_createFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)




    def createFunction(self):

        localctx = frameQLParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(frameQLParser.CREATE)
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DEFINER:
                self.state = 941
                self.ownerStatement()


            self.state = 944
            self.match(frameQLParser.FUNCTION)
            self.state = 945
            self.fullId()
            self.state = 946
            self.match(frameQLParser.LR_BRACKET)
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 947
                self.functionParameter()


            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 950
                self.match(frameQLParser.COMMA)
                self.state = 951
                self.functionParameter()
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 957
            self.match(frameQLParser.RR_BRACKET)
            self.state = 958
            self.match(frameQLParser.RETURNS)
            self.state = 959
            self.dataType()
            self.state = 963
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 960
                    self.routineOption() 
                self.state = 965
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 966
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.wrapperName = None # Token

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(frameQLParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def FOREIGN(self):
            return self.getToken(frameQLParser.FOREIGN, 0)

        def DATA(self):
            return self.getToken(frameQLParser.DATA, 0)

        def WRAPPER(self):
            return self.getToken(frameQLParser.WRAPPER, 0)

        def OPTIONS(self):
            return self.getToken(frameQLParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def MYSQL(self):
            return self.getToken(frameQLParser.MYSQL, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_createServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)




    def createServer(self):

        localctx = frameQLParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_createServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(frameQLParser.CREATE)
            self.state = 969
            self.match(frameQLParser.SERVER)
            self.state = 970
            self.uid()
            self.state = 971
            self.match(frameQLParser.FOREIGN)
            self.state = 972
            self.match(frameQLParser.DATA)
            self.state = 973
            self.match(frameQLParser.WRAPPER)
            self.state = 974
            localctx.wrapperName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.MYSQL or _la==frameQLParser.STRING_LITERAL):
                localctx.wrapperName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 975
            self.match(frameQLParser.OPTIONS)
            self.state = 976
            self.match(frameQLParser.LR_BRACKET)
            self.state = 977
            self.serverOption()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 978
                self.match(frameQLParser.COMMA)
                self.state = 979
                self.serverOption()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 985
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CopyCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CreateTableContext
            super().__init__(parser)
            self.parenthesisTable = None # TableNameContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)
        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableNameContext,i)

        def LIKE(self):
            return self.getToken(frameQLParser.LIKE, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def TEMPORARY(self):
            return self.getToken(frameQLParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(frameQLParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyCreateTable" ):
                listener.enterCopyCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyCreateTable" ):
                listener.exitCopyCreateTable(self)


    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(frameQLParser.CreateDefinitionsContext,0)

        def TEMPORARY(self):
            return self.getToken(frameQLParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(frameQLParser.IfNotExistsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(frameQLParser.PartitionDefinitionsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)


    class QueryCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CreateTableContext
            super().__init__(parser)
            self.keyViolate = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)

        def TEMPORARY(self):
            return self.getToken(frameQLParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(frameQLParser.IfNotExistsContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(frameQLParser.CreateDefinitionsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(frameQLParser.PartitionDefinitionsContext,0)

        def AS(self):
            return self.getToken(frameQLParser.AS, 0)
        def IGNORE(self):
            return self.getToken(frameQLParser.IGNORE, 0)
        def REPLACE(self):
            return self.getToken(frameQLParser.REPLACE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCreateTable" ):
                listener.enterQueryCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCreateTable" ):
                listener.exitQueryCreateTable(self)



    def createTable(self):

        localctx = frameQLParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.state = 1065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.CopyCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 987
                self.match(frameQLParser.CREATE)
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.TEMPORARY:
                    self.state = 988
                    self.match(frameQLParser.TEMPORARY)


                self.state = 991
                self.match(frameQLParser.TABLE)
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.IF:
                    self.state = 992
                    self.ifNotExists()


                self.state = 995
                self.tableName()
                self.state = 1003
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.LIKE]:
                    self.state = 996
                    self.match(frameQLParser.LIKE)
                    self.state = 997
                    self.tableName()
                    pass
                elif token in [frameQLParser.LR_BRACKET]:
                    self.state = 998
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 999
                    self.match(frameQLParser.LIKE)
                    self.state = 1000
                    localctx.parenthesisTable = self.tableName()
                    self.state = 1001
                    self.match(frameQLParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = frameQLParser.QueryCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.match(frameQLParser.CREATE)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.TEMPORARY:
                    self.state = 1006
                    self.match(frameQLParser.TEMPORARY)


                self.state = 1009
                self.match(frameQLParser.TABLE)
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.IF:
                    self.state = 1010
                    self.ifNotExists()


                self.state = 1013
                self.tableName()
                self.state = 1015
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 1014
                    self.createDefinitions()


                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (frameQLParser.CHARACTER - 24)) | (1 << (frameQLParser.COLLATE - 24)) | (1 << (frameQLParser.DEFAULT - 24)) | (1 << (frameQLParser.INDEX - 24)))) != 0) or _la==frameQLParser.UNION or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & ((1 << (frameQLParser.AUTO_INCREMENT - 260)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 260)) | (1 << (frameQLParser.CHECKSUM - 260)) | (1 << (frameQLParser.COMMENT - 260)) | (1 << (frameQLParser.COMPRESSION - 260)) | (1 << (frameQLParser.CONNECTION - 260)) | (1 << (frameQLParser.DATA - 260)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 260)) | (1 << (frameQLParser.ENCRYPTION - 260)) | (1 << (frameQLParser.ENGINE - 260)))) != 0) or ((((_la - 357)) & ~0x3f) == 0 and ((1 << (_la - 357)) & ((1 << (frameQLParser.INSERT_METHOD - 357)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 357)) | (1 << (frameQLParser.MAX_ROWS - 357)) | (1 << (frameQLParser.MIN_ROWS - 357)))) != 0) or ((((_la - 432)) & ~0x3f) == 0 and ((1 << (_la - 432)) & ((1 << (frameQLParser.PACK_KEYS - 432)) | (1 << (frameQLParser.PASSWORD - 432)) | (1 << (frameQLParser.ROW_FORMAT - 432)))) != 0) or ((((_la - 508)) & ~0x3f) == 0 and ((1 << (_la - 508)) & ((1 << (frameQLParser.STATS_AUTO_RECALC - 508)) | (1 << (frameQLParser.STATS_PERSISTENT - 508)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 508)) | (1 << (frameQLParser.TABLESPACE - 508)))) != 0) or _la==frameQLParser.CHARSET:
                    self.state = 1017
                    self.tableOption()
                    self.state = 1024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (frameQLParser.CHARACTER - 24)) | (1 << (frameQLParser.COLLATE - 24)) | (1 << (frameQLParser.DEFAULT - 24)) | (1 << (frameQLParser.INDEX - 24)))) != 0) or _la==frameQLParser.UNION or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & ((1 << (frameQLParser.AUTO_INCREMENT - 260)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 260)) | (1 << (frameQLParser.CHECKSUM - 260)) | (1 << (frameQLParser.COMMENT - 260)) | (1 << (frameQLParser.COMPRESSION - 260)) | (1 << (frameQLParser.CONNECTION - 260)) | (1 << (frameQLParser.DATA - 260)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 260)) | (1 << (frameQLParser.ENCRYPTION - 260)) | (1 << (frameQLParser.ENGINE - 260)))) != 0) or ((((_la - 357)) & ~0x3f) == 0 and ((1 << (_la - 357)) & ((1 << (frameQLParser.INSERT_METHOD - 357)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 357)) | (1 << (frameQLParser.MAX_ROWS - 357)) | (1 << (frameQLParser.MIN_ROWS - 357)))) != 0) or ((((_la - 432)) & ~0x3f) == 0 and ((1 << (_la - 432)) & ((1 << (frameQLParser.PACK_KEYS - 432)) | (1 << (frameQLParser.PASSWORD - 432)) | (1 << (frameQLParser.ROW_FORMAT - 432)))) != 0) or ((((_la - 508)) & ~0x3f) == 0 and ((1 << (_la - 508)) & ((1 << (frameQLParser.STATS_AUTO_RECALC - 508)) | (1 << (frameQLParser.STATS_PERSISTENT - 508)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 508)) | (1 << (frameQLParser.TABLESPACE - 508)))) != 0) or _la==frameQLParser.CHARSET or _la==frameQLParser.COMMA:
                        self.state = 1019
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==frameQLParser.COMMA:
                            self.state = 1018
                            self.match(frameQLParser.COMMA)


                        self.state = 1021
                        self.tableOption()
                        self.state = 1026
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.PARTITION:
                    self.state = 1029
                    self.partitionDefinitions()


                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.IGNORE or _la==frameQLParser.REPLACE:
                    self.state = 1032
                    localctx.keyViolate = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.IGNORE or _la==frameQLParser.REPLACE):
                        localctx.keyViolate = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.AS:
                    self.state = 1035
                    self.match(frameQLParser.AS)


                self.state = 1038
                self.selectStatement()
                pass

            elif la_ == 3:
                localctx = frameQLParser.ColumnCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1040
                self.match(frameQLParser.CREATE)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.TEMPORARY:
                    self.state = 1041
                    self.match(frameQLParser.TEMPORARY)


                self.state = 1044
                self.match(frameQLParser.TABLE)
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.IF:
                    self.state = 1045
                    self.ifNotExists()


                self.state = 1048
                self.tableName()
                self.state = 1049
                self.createDefinitions()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (frameQLParser.CHARACTER - 24)) | (1 << (frameQLParser.COLLATE - 24)) | (1 << (frameQLParser.DEFAULT - 24)) | (1 << (frameQLParser.INDEX - 24)))) != 0) or _la==frameQLParser.UNION or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & ((1 << (frameQLParser.AUTO_INCREMENT - 260)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 260)) | (1 << (frameQLParser.CHECKSUM - 260)) | (1 << (frameQLParser.COMMENT - 260)) | (1 << (frameQLParser.COMPRESSION - 260)) | (1 << (frameQLParser.CONNECTION - 260)) | (1 << (frameQLParser.DATA - 260)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 260)) | (1 << (frameQLParser.ENCRYPTION - 260)) | (1 << (frameQLParser.ENGINE - 260)))) != 0) or ((((_la - 357)) & ~0x3f) == 0 and ((1 << (_la - 357)) & ((1 << (frameQLParser.INSERT_METHOD - 357)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 357)) | (1 << (frameQLParser.MAX_ROWS - 357)) | (1 << (frameQLParser.MIN_ROWS - 357)))) != 0) or ((((_la - 432)) & ~0x3f) == 0 and ((1 << (_la - 432)) & ((1 << (frameQLParser.PACK_KEYS - 432)) | (1 << (frameQLParser.PASSWORD - 432)) | (1 << (frameQLParser.ROW_FORMAT - 432)))) != 0) or ((((_la - 508)) & ~0x3f) == 0 and ((1 << (_la - 508)) & ((1 << (frameQLParser.STATS_AUTO_RECALC - 508)) | (1 << (frameQLParser.STATS_PERSISTENT - 508)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 508)) | (1 << (frameQLParser.TABLESPACE - 508)))) != 0) or _la==frameQLParser.CHARSET:
                    self.state = 1050
                    self.tableOption()
                    self.state = 1057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (frameQLParser.CHARACTER - 24)) | (1 << (frameQLParser.COLLATE - 24)) | (1 << (frameQLParser.DEFAULT - 24)) | (1 << (frameQLParser.INDEX - 24)))) != 0) or _la==frameQLParser.UNION or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & ((1 << (frameQLParser.AUTO_INCREMENT - 260)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 260)) | (1 << (frameQLParser.CHECKSUM - 260)) | (1 << (frameQLParser.COMMENT - 260)) | (1 << (frameQLParser.COMPRESSION - 260)) | (1 << (frameQLParser.CONNECTION - 260)) | (1 << (frameQLParser.DATA - 260)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 260)) | (1 << (frameQLParser.ENCRYPTION - 260)) | (1 << (frameQLParser.ENGINE - 260)))) != 0) or ((((_la - 357)) & ~0x3f) == 0 and ((1 << (_la - 357)) & ((1 << (frameQLParser.INSERT_METHOD - 357)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 357)) | (1 << (frameQLParser.MAX_ROWS - 357)) | (1 << (frameQLParser.MIN_ROWS - 357)))) != 0) or ((((_la - 432)) & ~0x3f) == 0 and ((1 << (_la - 432)) & ((1 << (frameQLParser.PACK_KEYS - 432)) | (1 << (frameQLParser.PASSWORD - 432)) | (1 << (frameQLParser.ROW_FORMAT - 432)))) != 0) or ((((_la - 508)) & ~0x3f) == 0 and ((1 << (_la - 508)) & ((1 << (frameQLParser.STATS_AUTO_RECALC - 508)) | (1 << (frameQLParser.STATS_PERSISTENT - 508)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 508)) | (1 << (frameQLParser.TABLESPACE - 508)))) != 0) or _la==frameQLParser.CHARSET or _la==frameQLParser.COMMA:
                        self.state = 1052
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==frameQLParser.COMMA:
                            self.state = 1051
                            self.match(frameQLParser.COMMA)


                        self.state = 1054
                        self.tableOption()
                        self.state = 1059
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.PARTITION:
                    self.state = 1062
                    self.partitionDefinitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceInnodbContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.fileBlockSize = None # FileSizeLiteralContext

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(frameQLParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(frameQLParser.FILE_BLOCK_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)

        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)


        def fileSizeLiteral(self):
            return self.getTypedRuleContext(frameQLParser.FileSizeLiteralContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_createTablespaceInnodb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceInnodb" ):
                listener.enterCreateTablespaceInnodb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceInnodb" ):
                listener.exitCreateTablespaceInnodb(self)




    def createTablespaceInnodb(self):

        localctx = frameQLParser.CreateTablespaceInnodbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_createTablespaceInnodb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(frameQLParser.CREATE)
            self.state = 1068
            self.match(frameQLParser.TABLESPACE)
            self.state = 1069
            self.uid()
            self.state = 1070
            self.match(frameQLParser.ADD)
            self.state = 1071
            self.match(frameQLParser.DATAFILE)
            self.state = 1072
            localctx.datafile = self.match(frameQLParser.STRING_LITERAL)
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.FILE_BLOCK_SIZE:
                self.state = 1073
                self.match(frameQLParser.FILE_BLOCK_SIZE)
                self.state = 1074
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 1075
                localctx.fileBlockSize = self.fileSizeLiteral()


            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ENGINE:
                self.state = 1078
                self.match(frameQLParser.ENGINE)
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1079
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1082
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceNdbContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.extentSize = None # FileSizeLiteralContext
            self.initialSize = None # FileSizeLiteralContext
            self.autoextendSize = None # FileSizeLiteralContext
            self.maxSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(frameQLParser.DATAFILE, 0)

        def USE(self):
            return self.getToken(frameQLParser.USE, 0)

        def LOGFILE(self):
            return self.getToken(frameQLParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(frameQLParser.GROUP, 0)

        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.STRING_LITERAL)
            else:
                return self.getToken(frameQLParser.STRING_LITERAL, i)

        def EXTENT_SIZE(self):
            return self.getToken(frameQLParser.EXTENT_SIZE, 0)

        def INITIAL_SIZE(self):
            return self.getToken(frameQLParser.INITIAL_SIZE, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(frameQLParser.AUTOEXTEND_SIZE, 0)

        def MAX_SIZE(self):
            return self.getToken(frameQLParser.MAX_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(frameQLParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(frameQLParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_createTablespaceNdb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceNdb" ):
                listener.enterCreateTablespaceNdb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceNdb" ):
                listener.exitCreateTablespaceNdb(self)




    def createTablespaceNdb(self):

        localctx = frameQLParser.CreateTablespaceNdbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_createTablespaceNdb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(frameQLParser.CREATE)
            self.state = 1086
            self.match(frameQLParser.TABLESPACE)
            self.state = 1087
            self.uid()
            self.state = 1088
            self.match(frameQLParser.ADD)
            self.state = 1089
            self.match(frameQLParser.DATAFILE)
            self.state = 1090
            localctx.datafile = self.match(frameQLParser.STRING_LITERAL)
            self.state = 1091
            self.match(frameQLParser.USE)
            self.state = 1092
            self.match(frameQLParser.LOGFILE)
            self.state = 1093
            self.match(frameQLParser.GROUP)
            self.state = 1094
            self.uid()
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.EXTENT_SIZE:
                self.state = 1095
                self.match(frameQLParser.EXTENT_SIZE)
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1096
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1099
                localctx.extentSize = self.fileSizeLiteral()


            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.INITIAL_SIZE:
                self.state = 1102
                self.match(frameQLParser.INITIAL_SIZE)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1103
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1106
                localctx.initialSize = self.fileSizeLiteral()


            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.AUTOEXTEND_SIZE:
                self.state = 1109
                self.match(frameQLParser.AUTOEXTEND_SIZE)
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1110
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1113
                localctx.autoextendSize = self.fileSizeLiteral()


            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.MAX_SIZE:
                self.state = 1116
                self.match(frameQLParser.MAX_SIZE)
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1117
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1120
                localctx.maxSize = self.fileSizeLiteral()


            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.NODEGROUP:
                self.state = 1123
                self.match(frameQLParser.NODEGROUP)
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1124
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1127
                self.uid()


            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WAIT:
                self.state = 1130
                self.match(frameQLParser.WAIT)


            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.COMMENT:
                self.state = 1133
                self.match(frameQLParser.COMMENT)
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1134
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1137
                localctx.comment = self.match(frameQLParser.STRING_LITERAL)


            self.state = 1140
            self.match(frameQLParser.ENGINE)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.EQUAL_SYMBOL:
                self.state = 1141
                self.match(frameQLParser.EQUAL_SYMBOL)


            self.state = 1144
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.thisTrigger = None # FullIdContext
            self.triggerTime = None # Token
            self.triggerEvent = None # Token
            self.triggerPlace = None # Token
            self.otherTrigger = None # FullIdContext

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(frameQLParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(frameQLParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def EACH(self):
            return self.getToken(frameQLParser.EACH, 0)

        def ROW(self):
            return self.getToken(frameQLParser.ROW, 0)

        def routineBody(self):
            return self.getTypedRuleContext(frameQLParser.RoutineBodyContext,0)


        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FullIdContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FullIdContext,i)


        def BEFORE(self):
            return self.getToken(frameQLParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(frameQLParser.AFTER, 0)

        def INSERT(self):
            return self.getToken(frameQLParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(frameQLParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(frameQLParser.DELETE, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(frameQLParser.OwnerStatementContext,0)


        def FOLLOWS(self):
            return self.getToken(frameQLParser.FOLLOWS, 0)

        def PRECEDES(self):
            return self.getToken(frameQLParser.PRECEDES, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_createTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTrigger" ):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTrigger" ):
                listener.exitCreateTrigger(self)




    def createTrigger(self):

        localctx = frameQLParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(frameQLParser.CREATE)
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DEFINER:
                self.state = 1147
                self.ownerStatement()


            self.state = 1150
            self.match(frameQLParser.TRIGGER)
            self.state = 1151
            localctx.thisTrigger = self.fullId()
            self.state = 1152
            localctx.triggerTime = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.BEFORE or _la==frameQLParser.AFTER):
                localctx.triggerTime = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1153
            localctx.triggerEvent = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.DELETE or _la==frameQLParser.INSERT or _la==frameQLParser.UPDATE):
                localctx.triggerEvent = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1154
            self.match(frameQLParser.ON)
            self.state = 1155
            self.tableName()
            self.state = 1156
            self.match(frameQLParser.FOR)
            self.state = 1157
            self.match(frameQLParser.EACH)
            self.state = 1158
            self.match(frameQLParser.ROW)
            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 1159
                localctx.triggerPlace = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FOLLOWS or _la==frameQLParser.PRECEDES):
                    localctx.triggerPlace = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1160
                localctx.otherTrigger = self.fullId()


            self.state = 1163
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOption = None # Token

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(frameQLParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)


        def OR(self):
            return self.getToken(frameQLParser.OR, 0)

        def REPLACE(self):
            return self.getToken(frameQLParser.REPLACE, 0)

        def ALGORITHM(self):
            return self.getToken(frameQLParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(frameQLParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(frameQLParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(frameQLParser.SECURITY, 0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(frameQLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(frameQLParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(frameQLParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(frameQLParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(frameQLParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(frameQLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(frameQLParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(frameQLParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_createView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)




    def createView(self):

        localctx = frameQLParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.match(frameQLParser.CREATE)
            self.state = 1168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.OR:
                self.state = 1166
                self.match(frameQLParser.OR)
                self.state = 1167
                self.match(frameQLParser.REPLACE)


            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ALGORITHM:
                self.state = 1170
                self.match(frameQLParser.ALGORITHM)
                self.state = 1171
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 1172
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.MERGE or _la==frameQLParser.TEMPTABLE or _la==frameQLParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DEFINER:
                self.state = 1175
                self.ownerStatement()


            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.SQL:
                self.state = 1178
                self.match(frameQLParser.SQL)
                self.state = 1179
                self.match(frameQLParser.SECURITY)
                self.state = 1180
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFINER or _la==frameQLParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1183
            self.match(frameQLParser.VIEW)
            self.state = 1184
            self.fullId()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LR_BRACKET:
                self.state = 1185
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1186
                self.uidList()
                self.state = 1187
                self.match(frameQLParser.RR_BRACKET)


            self.state = 1191
            self.match(frameQLParser.AS)
            self.state = 1192
            self.selectStatement()
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WITH:
                self.state = 1193
                self.match(frameQLParser.WITH)
                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CASCADED or _la==frameQLParser.LOCAL:
                    self.state = 1194
                    localctx.checkOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.CASCADED or _la==frameQLParser.LOCAL):
                        localctx.checkOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1197
                self.match(frameQLParser.CHECK)
                self.state = 1198
                self.match(frameQLParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)


        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def CHARSET(self):
            return self.getToken(frameQLParser.CHARSET, 0)

        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def COLLATE(self):
            return self.getToken(frameQLParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(frameQLParser.CollationNameContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_createDatabaseOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseOption" ):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseOption" ):
                listener.exitCreateDatabaseOption(self)




    def createDatabaseOption(self):

        localctx = frameQLParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createDatabaseOption)
        self._la = 0 # Token type
        try:
            self.state = 1221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DEFAULT:
                    self.state = 1201
                    self.match(frameQLParser.DEFAULT)


                self.state = 1207
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.CHARACTER]:
                    self.state = 1204
                    self.match(frameQLParser.CHARACTER)
                    self.state = 1205
                    self.match(frameQLParser.SET)
                    pass
                elif token in [frameQLParser.CHARSET]:
                    self.state = 1206
                    self.match(frameQLParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1209
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1212
                self.charsetName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DEFAULT:
                    self.state = 1213
                    self.match(frameQLParser.DEFAULT)


                self.state = 1216
                self.match(frameQLParser.COLLATE)
                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1217
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1220
                self.collationName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OwnerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER(self):
            return self.getToken(frameQLParser.DEFINER, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(frameQLParser.UserNameContext,0)


        def CURRENT_USER(self):
            return self.getToken(frameQLParser.CURRENT_USER, 0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_ownerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwnerStatement" ):
                listener.enterOwnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwnerStatement" ):
                listener.exitOwnerStatement(self)




    def ownerStatement(self):

        localctx = frameQLParser.OwnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ownerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(frameQLParser.DEFINER)
            self.state = 1224
            self.match(frameQLParser.EQUAL_SYMBOL)
            self.state = 1231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ID, frameQLParser.STRING_USER_NAME]:
                self.state = 1225
                self.userName()
                pass
            elif token in [frameQLParser.CURRENT_USER]:
                self.state = 1226
                self.match(frameQLParser.CURRENT_USER)
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LR_BRACKET:
                    self.state = 1227
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 1228
                    self.match(frameQLParser.RR_BRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_scheduleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PreciseScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ScheduleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(frameQLParser.AT, 0)
        def timestampValue(self):
            return self.getTypedRuleContext(frameQLParser.TimestampValueContext,0)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreciseSchedule" ):
                listener.enterPreciseSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreciseSchedule" ):
                listener.exitPreciseSchedule(self)


    class IntervalScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ScheduleExpressionContext
            super().__init__(parser)
            self.start = None # TimestampValueContext
            self._intervalExpr = None # IntervalExprContext
            self.startIntervals = list() # of IntervalExprContexts
            self.end = None # TimestampValueContext
            self.endIntervals = list() # of IntervalExprContexts
            self.copyFrom(ctx)

        def EVERY(self):
            return self.getToken(frameQLParser.EVERY, 0)
        def intervalType(self):
            return self.getTypedRuleContext(frameQLParser.IntervalTypeContext,0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def STARTS(self):
            return self.getToken(frameQLParser.STARTS, 0)
        def ENDS(self):
            return self.getToken(frameQLParser.ENDS, 0)
        def timestampValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TimestampValueContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TimestampValueContext,i)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSchedule" ):
                listener.enterIntervalSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSchedule" ):
                listener.exitIntervalSchedule(self)



    def scheduleExpression(self):

        localctx = frameQLParser.ScheduleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_scheduleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.AT]:
                localctx = frameQLParser.PreciseScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1233
                self.match(frameQLParser.AT)
                self.state = 1234
                self.timestampValue()
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.PLUS:
                    self.state = 1235
                    self.intervalExpr()
                    self.state = 1240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [frameQLParser.EVERY]:
                localctx = frameQLParser.IntervalScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.match(frameQLParser.EVERY)
                self.state = 1244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1242
                    self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1243
                    self.expression(0)
                    pass


                self.state = 1246
                self.intervalType()
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.STARTS:
                    self.state = 1247
                    self.match(frameQLParser.STARTS)
                    self.state = 1248
                    localctx.start = self.timestampValue()
                    self.state = 1252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==frameQLParser.PLUS:
                        self.state = 1249
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.startIntervals.append(localctx._intervalExpr)
                        self.state = 1254
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ENDS:
                    self.state = 1257
                    self.match(frameQLParser.ENDS)
                    self.state = 1258
                    localctx.end = self.timestampValue()
                    self.state = 1262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==frameQLParser.PLUS:
                        self.state = 1259
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.endIntervals.append(localctx._intervalExpr)
                        self.state = 1264
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIMESTAMP(self):
            return self.getToken(frameQLParser.CURRENT_TIMESTAMP, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(frameQLParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_timestampValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampValue" ):
                listener.enterTimestampValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampValue" ):
                listener.exitTimestampValue(self)




    def timestampValue(self):

        localctx = frameQLParser.TimestampValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_timestampValue)
        try:
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.match(frameQLParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1270
                self.stringLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1271
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1272
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(frameQLParser.PLUS, 0)

        def INTERVAL(self):
            return self.getToken(frameQLParser.INTERVAL, 0)

        def intervalType(self):
            return self.getTypedRuleContext(frameQLParser.IntervalTypeContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_intervalExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)




    def intervalExpr(self):

        localctx = frameQLParser.IntervalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_intervalExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(frameQLParser.PLUS)
            self.state = 1276
            self.match(frameQLParser.INTERVAL)
            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1277
                self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 1278
                self.expression(0)
                pass


            self.state = 1281
            self.intervalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTypeBase(self):
            return self.getTypedRuleContext(frameQLParser.IntervalTypeBaseContext,0)


        def YEAR(self):
            return self.getToken(frameQLParser.YEAR, 0)

        def YEAR_MONTH(self):
            return self.getToken(frameQLParser.YEAR_MONTH, 0)

        def DAY_HOUR(self):
            return self.getToken(frameQLParser.DAY_HOUR, 0)

        def DAY_MINUTE(self):
            return self.getToken(frameQLParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(frameQLParser.DAY_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(frameQLParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(frameQLParser.HOUR_SECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(frameQLParser.MINUTE_SECOND, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(frameQLParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(frameQLParser.MINUTE_MICROSECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(frameQLParser.HOUR_MICROSECOND, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(frameQLParser.DAY_MICROSECOND, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_intervalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)




    def intervalType(self):

        localctx = frameQLParser.IntervalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_intervalType)
        try:
            self.state = 1296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1283
                self.intervalTypeBase()
                pass
            elif token in [frameQLParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self.match(frameQLParser.YEAR)
                pass
            elif token in [frameQLParser.YEAR_MONTH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1285
                self.match(frameQLParser.YEAR_MONTH)
                pass
            elif token in [frameQLParser.DAY_HOUR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1286
                self.match(frameQLParser.DAY_HOUR)
                pass
            elif token in [frameQLParser.DAY_MINUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1287
                self.match(frameQLParser.DAY_MINUTE)
                pass
            elif token in [frameQLParser.DAY_SECOND]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1288
                self.match(frameQLParser.DAY_SECOND)
                pass
            elif token in [frameQLParser.HOUR_MINUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1289
                self.match(frameQLParser.HOUR_MINUTE)
                pass
            elif token in [frameQLParser.HOUR_SECOND]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1290
                self.match(frameQLParser.HOUR_SECOND)
                pass
            elif token in [frameQLParser.MINUTE_SECOND]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1291
                self.match(frameQLParser.MINUTE_SECOND)
                pass
            elif token in [frameQLParser.SECOND_MICROSECOND]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1292
                self.match(frameQLParser.SECOND_MICROSECOND)
                pass
            elif token in [frameQLParser.MINUTE_MICROSECOND]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1293
                self.match(frameQLParser.MINUTE_MICROSECOND)
                pass
            elif token in [frameQLParser.HOUR_MICROSECOND]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1294
                self.match(frameQLParser.HOUR_MICROSECOND)
                pass
            elif token in [frameQLParser.DAY_MICROSECOND]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1295
                self.match(frameQLParser.DAY_MICROSECOND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(frameQLParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(frameQLParser.DISABLE, 0)

        def ON(self):
            return self.getToken(frameQLParser.ON, 0)

        def SLAVE(self):
            return self.getToken(frameQLParser.SLAVE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_enableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableType" ):
                listener.enterEnableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableType" ):
                listener.exitEnableType(self)




    def enableType(self):

        localctx = frameQLParser.EnableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_enableType)
        try:
            self.state = 1303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.match(frameQLParser.ENABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.match(frameQLParser.DISABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1300
                self.match(frameQLParser.DISABLE)
                self.state = 1301
                self.match(frameQLParser.ON)
                self.state = 1302
                self.match(frameQLParser.SLAVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(frameQLParser.USING, 0)

        def BTREE(self):
            return self.getToken(frameQLParser.BTREE, 0)

        def HASH(self):
            return self.getToken(frameQLParser.HASH, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = frameQLParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(frameQLParser.USING)
            self.state = 1306
            _la = self._input.LA(1)
            if not(_la==frameQLParser.BTREE or _la==frameQLParser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE(self):
            return self.getToken(frameQLParser.KEY_BLOCK_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(frameQLParser.FileSizeLiteralContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def indexType(self):
            return self.getTypedRuleContext(frameQLParser.IndexTypeContext,0)


        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)

        def PARSER(self):
            return self.getToken(frameQLParser.PARSER, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_indexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOption" ):
                listener.enterIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOption" ):
                listener.exitIndexOption(self)




    def indexOption(self):

        localctx = frameQLParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_indexOption)
        self._la = 0 # Token type
        try:
            self.state = 1319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.KEY_BLOCK_SIZE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self.match(frameQLParser.KEY_BLOCK_SIZE)
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1309
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1312
                self.fileSizeLiteral()
                pass
            elif token in [frameQLParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1313
                self.indexType()
                pass
            elif token in [frameQLParser.WITH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1314
                self.match(frameQLParser.WITH)
                self.state = 1315
                self.match(frameQLParser.PARSER)
                self.state = 1316
                self.uid()
                pass
            elif token in [frameQLParser.COMMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1317
                self.match(frameQLParser.COMMENT)
                self.state = 1318
                self.match(frameQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(frameQLParser.DataTypeContext,0)


        def IN(self):
            return self.getToken(frameQLParser.IN, 0)

        def OUT(self):
            return self.getToken(frameQLParser.OUT, 0)

        def INOUT(self):
            return self.getToken(frameQLParser.INOUT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)




    def procedureParameter(self):

        localctx = frameQLParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            localctx.direction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (frameQLParser.IN - 70)) | (1 << (frameQLParser.INOUT - 70)) | (1 << (frameQLParser.OUT - 70)))) != 0)):
                localctx.direction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1322
            self.uid()
            self.state = 1323
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(frameQLParser.DataTypeContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)




    def functionParameter(self):

        localctx = frameQLParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.uid()
            self.state = 1326
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_routineOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RoutineBehaviorContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(frameQLParser.DETERMINISTIC, 0)
        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBehavior" ):
                listener.enterRoutineBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBehavior" ):
                listener.exitRoutineBehavior(self)


    class RoutineLanguageContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LANGUAGE(self):
            return self.getToken(frameQLParser.LANGUAGE, 0)
        def SQL(self):
            return self.getToken(frameQLParser.SQL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineLanguage" ):
                listener.enterRoutineLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineLanguage" ):
                listener.exitRoutineLanguage(self)


    class RoutineCommentContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineComment" ):
                listener.enterRoutineComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineComment" ):
                listener.exitRoutineComment(self)


    class RoutineSecurityContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.RoutineOptionContext
            super().__init__(parser)
            self.context = None # Token
            self.copyFrom(ctx)

        def SQL(self):
            return self.getToken(frameQLParser.SQL, 0)
        def SECURITY(self):
            return self.getToken(frameQLParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(frameQLParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(frameQLParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineSecurity" ):
                listener.enterRoutineSecurity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineSecurity" ):
                listener.exitRoutineSecurity(self)


    class RoutineDataContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(frameQLParser.CONTAINS, 0)
        def SQL(self):
            return self.getToken(frameQLParser.SQL, 0)
        def NO(self):
            return self.getToken(frameQLParser.NO, 0)
        def READS(self):
            return self.getToken(frameQLParser.READS, 0)
        def DATA(self):
            return self.getToken(frameQLParser.DATA, 0)
        def MODIFIES(self):
            return self.getToken(frameQLParser.MODIFIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineData" ):
                listener.enterRoutineData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineData" ):
                listener.exitRoutineData(self)



    def routineOption(self):

        localctx = frameQLParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 1351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.COMMENT]:
                localctx = frameQLParser.RoutineCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1328
                self.match(frameQLParser.COMMENT)
                self.state = 1329
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.LANGUAGE]:
                localctx = frameQLParser.RoutineLanguageContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1330
                self.match(frameQLParser.LANGUAGE)
                self.state = 1331
                self.match(frameQLParser.SQL)
                pass
            elif token in [frameQLParser.DETERMINISTIC, frameQLParser.NOT]:
                localctx = frameQLParser.RoutineBehaviorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.NOT:
                    self.state = 1332
                    self.match(frameQLParser.NOT)


                self.state = 1335
                self.match(frameQLParser.DETERMINISTIC)
                pass
            elif token in [frameQLParser.MODIFIES, frameQLParser.READS, frameQLParser.CONTAINS, frameQLParser.NO]:
                localctx = frameQLParser.RoutineDataContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.CONTAINS]:
                    self.state = 1336
                    self.match(frameQLParser.CONTAINS)
                    self.state = 1337
                    self.match(frameQLParser.SQL)
                    pass
                elif token in [frameQLParser.NO]:
                    self.state = 1338
                    self.match(frameQLParser.NO)
                    self.state = 1339
                    self.match(frameQLParser.SQL)
                    pass
                elif token in [frameQLParser.READS]:
                    self.state = 1340
                    self.match(frameQLParser.READS)
                    self.state = 1341
                    self.match(frameQLParser.SQL)
                    self.state = 1342
                    self.match(frameQLParser.DATA)
                    pass
                elif token in [frameQLParser.MODIFIES]:
                    self.state = 1343
                    self.match(frameQLParser.MODIFIES)
                    self.state = 1344
                    self.match(frameQLParser.SQL)
                    self.state = 1345
                    self.match(frameQLParser.DATA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [frameQLParser.SQL]:
                localctx = frameQLParser.RoutineSecurityContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1348
                self.match(frameQLParser.SQL)
                self.state = 1349
                self.match(frameQLParser.SECURITY)
                self.state = 1350
                localctx.context = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFINER or _la==frameQLParser.INVOKER):
                    localctx.context = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOST(self):
            return self.getToken(frameQLParser.HOST, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def DATABASE(self):
            return self.getToken(frameQLParser.DATABASE, 0)

        def USER(self):
            return self.getToken(frameQLParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(frameQLParser.PASSWORD, 0)

        def SOCKET(self):
            return self.getToken(frameQLParser.SOCKET, 0)

        def OWNER(self):
            return self.getToken(frameQLParser.OWNER, 0)

        def PORT(self):
            return self.getToken(frameQLParser.PORT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_serverOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOption" ):
                listener.enterServerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOption" ):
                listener.exitServerOption(self)




    def serverOption(self):

        localctx = frameQLParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_serverOption)
        try:
            self.state = 1367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.HOST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1353
                self.match(frameQLParser.HOST)
                self.state = 1354
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.DATABASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1355
                self.match(frameQLParser.DATABASE)
                self.state = 1356
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.USER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1357
                self.match(frameQLParser.USER)
                self.state = 1358
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1359
                self.match(frameQLParser.PASSWORD)
                self.state = 1360
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.SOCKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1361
                self.match(frameQLParser.SOCKET)
                self.state = 1362
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.OWNER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1363
                self.match(frameQLParser.OWNER)
                self.state = 1364
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.PORT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1365
                self.match(frameQLParser.PORT)
                self.state = 1366
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.CreateDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)




    def createDefinitions(self):

        localctx = frameQLParser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(frameQLParser.LR_BRACKET)
            self.state = 1370
            self.createDefinition()
            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 1371
                self.match(frameQLParser.COMMA)
                self.state = 1372
                self.createDefinition()
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1378
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(frameQLParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)


    class ConstraintDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableConstraint(self):
            return self.getTypedRuleContext(frameQLParser.TableConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintDeclaration" ):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintDeclaration" ):
                listener.exitConstraintDeclaration(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)



    def createDefinition(self):

        localctx = frameQLParser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_createDefinition)
        try:
            self.state = 1385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                localctx = frameQLParser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1380
                self.uid()
                self.state = 1381
                self.columnDefinition()
                pass
            elif token in [frameQLParser.CHECK, frameQLParser.CONSTRAINT, frameQLParser.FOREIGN, frameQLParser.PRIMARY, frameQLParser.UNIQUE]:
                localctx = frameQLParser.ConstraintDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1383
                self.tableConstraint()
                pass
            elif token in [frameQLParser.FULLTEXT, frameQLParser.INDEX, frameQLParser.KEY, frameQLParser.SPATIAL]:
                localctx = frameQLParser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1384
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(frameQLParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = frameQLParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.dataType()
            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << frameQLParser.AS) | (1 << frameQLParser.DEFAULT) | (1 << frameQLParser.GENERATED))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (frameQLParser.KEY - 81)) | (1 << (frameQLParser.NOT - 81)) | (1 << (frameQLParser.NULL_LITERAL - 81)) | (1 << (frameQLParser.PRIMARY - 81)) | (1 << (frameQLParser.REFERENCES - 81)))) != 0) or _la==frameQLParser.UNIQUE or _la==frameQLParser.SERIAL or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & ((1 << (frameQLParser.AUTO_INCREMENT - 260)) | (1 << (frameQLParser.COLUMN_FORMAT - 260)) | (1 << (frameQLParser.COMMENT - 260)))) != 0) or _la==frameQLParser.STORAGE or _la==frameQLParser.NULL_SPEC_LITERAL:
                self.state = 1388
                self.columnConstraint()
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StorageColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.storageval = None # Token
            self.copyFrom(ctx)

        def STORAGE(self):
            return self.getToken(frameQLParser.STORAGE, 0)
        def DISK(self):
            return self.getToken(frameQLParser.DISK, 0)
        def MEMORY(self):
            return self.getToken(frameQLParser.MEMORY, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageColumnConstraint" ):
                listener.enterStorageColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageColumnConstraint" ):
                listener.exitStorageColumnConstraint(self)


    class FormatColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.colformat = None # Token
            self.copyFrom(ctx)

        def COLUMN_FORMAT(self):
            return self.getToken(frameQLParser.COLUMN_FORMAT, 0)
        def FIXED(self):
            return self.getToken(frameQLParser.FIXED, 0)
        def DYNAMIC(self):
            return self.getToken(frameQLParser.DYNAMIC, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatColumnConstraint" ):
                listener.enterFormatColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatColumnConstraint" ):
                listener.exitFormatColumnConstraint(self)


    class AutoIncrementColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(frameQLParser.AUTO_INCREMENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutoIncrementColumnConstraint" ):
                listener.enterAutoIncrementColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutoIncrementColumnConstraint" ):
                listener.exitAutoIncrementColumnConstraint(self)


    class CommentColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumnConstraint" ):
                listener.enterCommentColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumnConstraint" ):
                listener.exitCommentColumnConstraint(self)


    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(frameQLParser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(frameQLParser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)


    class SerialDefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIAL(self):
            return self.getToken(frameQLParser.SERIAL, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def VALUE(self):
            return self.getToken(frameQLParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerialDefaultColumnConstraint" ):
                listener.enterSerialDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerialDefaultColumnConstraint" ):
                listener.exitSerialDefaultColumnConstraint(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(frameQLParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(frameQLParser.DefaultValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultColumnConstraint" ):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultColumnConstraint" ):
                listener.exitDefaultColumnConstraint(self)


    class ReferenceColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referenceDefinition(self):
            return self.getTypedRuleContext(frameQLParser.ReferenceDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceColumnConstraint" ):
                listener.enterReferenceColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceColumnConstraint" ):
                listener.exitReferenceColumnConstraint(self)


    class GeneratedColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(frameQLParser.AS, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def GENERATED(self):
            return self.getToken(frameQLParser.GENERATED, 0)
        def ALWAYS(self):
            return self.getToken(frameQLParser.ALWAYS, 0)
        def VIRTUAL(self):
            return self.getToken(frameQLParser.VIRTUAL, 0)
        def STORED(self):
            return self.getToken(frameQLParser.STORED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratedColumnConstraint" ):
                listener.enterGeneratedColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratedColumnConstraint" ):
                listener.exitGeneratedColumnConstraint(self)



    def columnConstraint(self):

        localctx = frameQLParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.NOT, frameQLParser.NULL_LITERAL, frameQLParser.NULL_SPEC_LITERAL]:
                localctx = frameQLParser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1394
                self.nullNotnull()
                pass
            elif token in [frameQLParser.DEFAULT]:
                localctx = frameQLParser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self.match(frameQLParser.DEFAULT)
                self.state = 1396
                self.defaultValue()
                pass
            elif token in [frameQLParser.AUTO_INCREMENT]:
                localctx = frameQLParser.AutoIncrementColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1397
                self.match(frameQLParser.AUTO_INCREMENT)
                pass
            elif token in [frameQLParser.KEY, frameQLParser.PRIMARY]:
                localctx = frameQLParser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.PRIMARY:
                    self.state = 1398
                    self.match(frameQLParser.PRIMARY)


                self.state = 1401
                self.match(frameQLParser.KEY)
                pass
            elif token in [frameQLParser.UNIQUE]:
                localctx = frameQLParser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1402
                self.match(frameQLParser.UNIQUE)
                self.state = 1404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 1403
                    self.match(frameQLParser.KEY)


                pass
            elif token in [frameQLParser.COMMENT]:
                localctx = frameQLParser.CommentColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1406
                self.match(frameQLParser.COMMENT)
                self.state = 1407
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.COLUMN_FORMAT]:
                localctx = frameQLParser.FormatColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1408
                self.match(frameQLParser.COLUMN_FORMAT)
                self.state = 1409
                localctx.colformat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.DYNAMIC or _la==frameQLParser.FIXED):
                    localctx.colformat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.STORAGE]:
                localctx = frameQLParser.StorageColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1410
                self.match(frameQLParser.STORAGE)
                self.state = 1411
                localctx.storageval = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.DISK or _la==frameQLParser.MEMORY):
                    localctx.storageval = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.REFERENCES]:
                localctx = frameQLParser.ReferenceColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1412
                self.referenceDefinition()
                pass
            elif token in [frameQLParser.AS, frameQLParser.GENERATED]:
                localctx = frameQLParser.GeneratedColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.GENERATED:
                    self.state = 1413
                    self.match(frameQLParser.GENERATED)
                    self.state = 1414
                    self.match(frameQLParser.ALWAYS)


                self.state = 1417
                self.match(frameQLParser.AS)
                self.state = 1418
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1419
                self.expression(0)
                self.state = 1420
                self.match(frameQLParser.RR_BRACKET)
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.STORED or _la==frameQLParser.VIRTUAL:
                    self.state = 1421
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.STORED or _la==frameQLParser.VIRTUAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [frameQLParser.SERIAL]:
                localctx = frameQLParser.SerialDefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1424
                self.match(frameQLParser.SERIAL)
                self.state = 1425
                self.match(frameQLParser.DEFAULT)
                self.state = 1426
                self.match(frameQLParser.VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_tableConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniqueKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.index = None # UidContext
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(frameQLParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(frameQLParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(frameQLParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyTableConstraint" ):
                listener.enterUniqueKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyTableConstraint" ):
                listener.exitUniqueKeyTableConstraint(self)


    class CheckTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(frameQLParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(frameQLParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableConstraint" ):
                listener.enterCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableConstraint" ):
                listener.exitCheckTableConstraint(self)


    class PrimaryKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def PRIMARY(self):
            return self.getToken(frameQLParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(frameQLParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(frameQLParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexOptionContext,i)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyTableConstraint" ):
                listener.enterPrimaryKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyTableConstraint" ):
                listener.exitPrimaryKeyTableConstraint(self)


    class ForeignKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def FOREIGN(self):
            return self.getToken(frameQLParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(frameQLParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(frameQLParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignKeyTableConstraint" ):
                listener.enterForeignKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignKeyTableConstraint" ):
                listener.exitForeignKeyTableConstraint(self)



    def tableConstraint(self):

        localctx = frameQLParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tableConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.PrimaryKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CONSTRAINT:
                    self.state = 1429
                    self.match(frameQLParser.CONSTRAINT)
                    self.state = 1431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                        self.state = 1430
                        localctx.name = self.uid()




                self.state = 1435
                self.match(frameQLParser.PRIMARY)
                self.state = 1436
                self.match(frameQLParser.KEY)
                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.USING:
                    self.state = 1437
                    self.indexType()


                self.state = 1440
                self.indexColumnNames()
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.USING or _la==frameQLParser.WITH or _la==frameQLParser.COMMENT or _la==frameQLParser.KEY_BLOCK_SIZE:
                    self.state = 1441
                    self.indexOption()
                    self.state = 1446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = frameQLParser.UniqueKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CONSTRAINT:
                    self.state = 1447
                    self.match(frameQLParser.CONSTRAINT)
                    self.state = 1449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                        self.state = 1448
                        localctx.name = self.uid()




                self.state = 1453
                self.match(frameQLParser.UNIQUE)
                self.state = 1455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.INDEX or _la==frameQLParser.KEY:
                    self.state = 1454
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                    self.state = 1457
                    localctx.index = self.uid()


                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.USING:
                    self.state = 1460
                    self.indexType()


                self.state = 1463
                self.indexColumnNames()
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.USING or _la==frameQLParser.WITH or _la==frameQLParser.COMMENT or _la==frameQLParser.KEY_BLOCK_SIZE:
                    self.state = 1464
                    self.indexOption()
                    self.state = 1469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = frameQLParser.ForeignKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CONSTRAINT:
                    self.state = 1470
                    self.match(frameQLParser.CONSTRAINT)
                    self.state = 1472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                        self.state = 1471
                        localctx.name = self.uid()




                self.state = 1476
                self.match(frameQLParser.FOREIGN)
                self.state = 1477
                self.match(frameQLParser.KEY)
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                    self.state = 1478
                    localctx.index = self.uid()


                self.state = 1481
                self.indexColumnNames()
                self.state = 1482
                self.referenceDefinition()
                pass

            elif la_ == 4:
                localctx = frameQLParser.CheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CONSTRAINT:
                    self.state = 1484
                    self.match(frameQLParser.CONSTRAINT)
                    self.state = 1486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                        self.state = 1485
                        localctx.name = self.uid()




                self.state = 1490
                self.match(frameQLParser.CHECK)
                self.state = 1491
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1492
                self.expression(0)
                self.state = 1493
                self.match(frameQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchType = None # Token

        def REFERENCES(self):
            return self.getToken(frameQLParser.REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)


        def MATCH(self):
            return self.getToken(frameQLParser.MATCH, 0)

        def referenceAction(self):
            return self.getTypedRuleContext(frameQLParser.ReferenceActionContext,0)


        def FULL(self):
            return self.getToken(frameQLParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(frameQLParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(frameQLParser.SIMPLE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_referenceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceDefinition" ):
                listener.enterReferenceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceDefinition" ):
                listener.exitReferenceDefinition(self)




    def referenceDefinition(self):

        localctx = frameQLParser.ReferenceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_referenceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.match(frameQLParser.REFERENCES)
            self.state = 1498
            self.tableName()
            self.state = 1499
            self.indexColumnNames()
            self.state = 1502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.MATCH:
                self.state = 1500
                self.match(frameQLParser.MATCH)
                self.state = 1501
                localctx.matchType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FULL or _la==frameQLParser.PARTIAL or _la==frameQLParser.SIMPLE):
                    localctx.matchType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ON:
                self.state = 1504
                self.referenceAction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onDelete = None # ReferenceControlTypeContext
            self.onUpdate = None # ReferenceControlTypeContext

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.ON)
            else:
                return self.getToken(frameQLParser.ON, i)

        def DELETE(self):
            return self.getToken(frameQLParser.DELETE, 0)

        def referenceControlType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ReferenceControlTypeContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ReferenceControlTypeContext,i)


        def UPDATE(self):
            return self.getToken(frameQLParser.UPDATE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_referenceAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceAction" ):
                listener.enterReferenceAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceAction" ):
                listener.exitReferenceAction(self)




    def referenceAction(self):

        localctx = frameQLParser.ReferenceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_referenceAction)
        self._la = 0 # Token type
        try:
            self.state = 1523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1507
                self.match(frameQLParser.ON)
                self.state = 1508
                self.match(frameQLParser.DELETE)
                self.state = 1509
                localctx.onDelete = self.referenceControlType()
                self.state = 1513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ON:
                    self.state = 1510
                    self.match(frameQLParser.ON)
                    self.state = 1511
                    self.match(frameQLParser.UPDATE)
                    self.state = 1512
                    localctx.onUpdate = self.referenceControlType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1515
                self.match(frameQLParser.ON)
                self.state = 1516
                self.match(frameQLParser.UPDATE)
                self.state = 1517
                localctx.onUpdate = self.referenceControlType()
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ON:
                    self.state = 1518
                    self.match(frameQLParser.ON)
                    self.state = 1519
                    self.match(frameQLParser.DELETE)
                    self.state = 1520
                    localctx.onDelete = self.referenceControlType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceControlTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(frameQLParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(frameQLParser.CASCADE, 0)

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def NULL_LITERAL(self):
            return self.getToken(frameQLParser.NULL_LITERAL, 0)

        def NO(self):
            return self.getToken(frameQLParser.NO, 0)

        def ACTION(self):
            return self.getToken(frameQLParser.ACTION, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_referenceControlType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceControlType" ):
                listener.enterReferenceControlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceControlType" ):
                listener.exitReferenceControlType(self)




    def referenceControlType(self):

        localctx = frameQLParser.ReferenceControlTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_referenceControlType)
        try:
            self.state = 1531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.RESTRICT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1525
                self.match(frameQLParser.RESTRICT)
                pass
            elif token in [frameQLParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1526
                self.match(frameQLParser.CASCADE)
                pass
            elif token in [frameQLParser.SET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1527
                self.match(frameQLParser.SET)
                self.state = 1528
                self.match(frameQLParser.NULL_LITERAL)
                pass
            elif token in [frameQLParser.NO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1529
                self.match(frameQLParser.NO)
                self.state = 1530
                self.match(frameQLParser.ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecialIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(frameQLParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(frameQLParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialIndexDeclaration" ):
                listener.enterSpecialIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialIndexDeclaration" ):
                listener.exitSpecialIndexDeclaration(self)


    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(frameQLParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)



    def indexColumnDefinition(self):

        localctx = frameQLParser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.INDEX, frameQLParser.KEY]:
                localctx = frameQLParser.SimpleIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1533
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                    self.state = 1534
                    self.uid()


                self.state = 1538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.USING:
                    self.state = 1537
                    self.indexType()


                self.state = 1540
                self.indexColumnNames()
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.USING or _la==frameQLParser.WITH or _la==frameQLParser.COMMENT or _la==frameQLParser.KEY_BLOCK_SIZE:
                    self.state = 1541
                    self.indexOption()
                    self.state = 1546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [frameQLParser.FULLTEXT, frameQLParser.SPATIAL]:
                localctx = frameQLParser.SpecialIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FULLTEXT or _la==frameQLParser.SPATIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.INDEX or _la==frameQLParser.KEY:
                    self.state = 1548
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                    self.state = 1551
                    self.uid()


                self.state = 1554
                self.indexColumnNames()
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.USING or _la==frameQLParser.WITH or _la==frameQLParser.COMMENT or _la==frameQLParser.KEY_BLOCK_SIZE:
                    self.state = 1555
                    self.indexOption()
                    self.state = 1560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_tableOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableOptionEngineContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEngine" ):
                listener.enterTableOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEngine" ):
                listener.exitTableOptionEngine(self)


    class TableOptionMaxRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(frameQLParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMaxRows" ):
                listener.enterTableOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMaxRows" ):
                listener.exitTableOptionMaxRows(self)


    class TableOptionCollateContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(frameQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(frameQLParser.CollationNameContext,0)

        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCollate" ):
                listener.enterTableOptionCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCollate" ):
                listener.exitTableOptionCollate(self)


    class TableOptionPersistentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_PERSISTENT(self):
            return self.getToken(frameQLParser.STATS_PERSISTENT, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(frameQLParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPersistent" ):
                listener.enterTableOptionPersistent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPersistent" ):
                listener.exitTableOptionPersistent(self)


    class TableOptionTablespaceContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def tablespaceStorage(self):
            return self.getTypedRuleContext(frameQLParser.TablespaceStorageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTablespace" ):
                listener.enterTableOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTablespace" ):
                listener.exitTableOptionTablespace(self)


    class TableOptionPackKeysContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def PACK_KEYS(self):
            return self.getToken(frameQLParser.PACK_KEYS, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(frameQLParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPackKeys" ):
                listener.enterTableOptionPackKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPackKeys" ):
                listener.exitTableOptionPackKeys(self)


    class TableOptionPasswordContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(frameQLParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPassword" ):
                listener.enterTableOptionPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPassword" ):
                listener.exitTableOptionPassword(self)


    class TableOptionUnionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(frameQLParser.UNION, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionUnion" ):
                listener.enterTableOptionUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionUnion" ):
                listener.exitTableOptionUnion(self)


    class TableOptionSamplePageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(frameQLParser.STATS_SAMPLE_PAGES, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionSamplePage" ):
                listener.enterTableOptionSamplePage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionSamplePage" ):
                listener.exitTableOptionSamplePage(self)


    class TableOptionCharsetContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)

        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(frameQLParser.SET, 0)
        def CHARSET(self):
            return self.getToken(frameQLParser.CHARSET, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCharset" ):
                listener.enterTableOptionCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCharset" ):
                listener.exitTableOptionCharset(self)


    class TableOptionIndexDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(frameQLParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionIndexDirectory" ):
                listener.enterTableOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionIndexDirectory" ):
                listener.exitTableOptionIndexDirectory(self)


    class TableOptionKeyBlockSizeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(frameQLParser.KEY_BLOCK_SIZE, 0)
        def fileSizeLiteral(self):
            return self.getTypedRuleContext(frameQLParser.FileSizeLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionKeyBlockSize" ):
                listener.enterTableOptionKeyBlockSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionKeyBlockSize" ):
                listener.exitTableOptionKeyBlockSize(self)


    class TableOptionEncryptionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENCRYPTION(self):
            return self.getToken(frameQLParser.ENCRYPTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEncryption" ):
                listener.enterTableOptionEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEncryption" ):
                listener.exitTableOptionEncryption(self)


    class TableOptionDataDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(frameQLParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(frameQLParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDataDirectory" ):
                listener.enterTableOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDataDirectory" ):
                listener.exitTableOptionDataDirectory(self)


    class TableOptionRecalculationContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_AUTO_RECALC(self):
            return self.getToken(frameQLParser.STATS_AUTO_RECALC, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(frameQLParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRecalculation" ):
                listener.enterTableOptionRecalculation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRecalculation" ):
                listener.exitTableOptionRecalculation(self)


    class TableOptionAutoIncrementContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(frameQLParser.AUTO_INCREMENT, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAutoIncrement" ):
                listener.enterTableOptionAutoIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAutoIncrement" ):
                listener.exitTableOptionAutoIncrement(self)


    class TableOptionChecksumContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(frameQLParser.CHECKSUM, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(frameQLParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionChecksum" ):
                listener.enterTableOptionChecksum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionChecksum" ):
                listener.exitTableOptionChecksum(self)


    class TableOptionDelayContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def DELAY_KEY_WRITE(self):
            return self.getToken(frameQLParser.DELAY_KEY_WRITE, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(frameQLParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDelay" ):
                listener.enterTableOptionDelay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDelay" ):
                listener.exitTableOptionDelay(self)


    class TableOptionConnectionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONNECTION(self):
            return self.getToken(frameQLParser.CONNECTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionConnection" ):
                listener.enterTableOptionConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionConnection" ):
                listener.exitTableOptionConnection(self)


    class TableOptionCommentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionComment" ):
                listener.enterTableOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionComment" ):
                listener.exitTableOptionComment(self)


    class TableOptionAverageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AVG_ROW_LENGTH(self):
            return self.getToken(frameQLParser.AVG_ROW_LENGTH, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAverage" ):
                listener.enterTableOptionAverage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAverage" ):
                listener.exitTableOptionAverage(self)


    class TableOptionRowFormatContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.rowFormat = None # Token
            self.copyFrom(ctx)

        def ROW_FORMAT(self):
            return self.getToken(frameQLParser.ROW_FORMAT, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def DYNAMIC(self):
            return self.getToken(frameQLParser.DYNAMIC, 0)
        def FIXED(self):
            return self.getToken(frameQLParser.FIXED, 0)
        def COMPRESSED(self):
            return self.getToken(frameQLParser.COMPRESSED, 0)
        def REDUNDANT(self):
            return self.getToken(frameQLParser.REDUNDANT, 0)
        def COMPACT(self):
            return self.getToken(frameQLParser.COMPACT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRowFormat" ):
                listener.enterTableOptionRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRowFormat" ):
                listener.exitTableOptionRowFormat(self)


    class TableOptionCompressionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMPRESSION(self):
            return self.getToken(frameQLParser.COMPRESSION, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCompression" ):
                listener.enterTableOptionCompression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCompression" ):
                listener.exitTableOptionCompression(self)


    class TableOptionInsertMethodContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.insertMethod = None # Token
            self.copyFrom(ctx)

        def INSERT_METHOD(self):
            return self.getToken(frameQLParser.INSERT_METHOD, 0)
        def NO(self):
            return self.getToken(frameQLParser.NO, 0)
        def FIRST(self):
            return self.getToken(frameQLParser.FIRST, 0)
        def LAST(self):
            return self.getToken(frameQLParser.LAST, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionInsertMethod" ):
                listener.enterTableOptionInsertMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionInsertMethod" ):
                listener.exitTableOptionInsertMethod(self)


    class TableOptionMinRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(frameQLParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMinRows" ):
                listener.enterTableOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMinRows" ):
                listener.exitTableOptionMinRows(self)



    def tableOption(self):

        localctx = frameQLParser.TableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tableOption)
        self._la = 0 # Token type
        try:
            self.state = 1703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.TableOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1563
                self.match(frameQLParser.ENGINE)
                self.state = 1565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1564
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1567
                self.engineName()
                pass

            elif la_ == 2:
                localctx = frameQLParser.TableOptionAutoIncrementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1568
                self.match(frameQLParser.AUTO_INCREMENT)
                self.state = 1570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1569
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1572
                self.decimalLiteral()
                pass

            elif la_ == 3:
                localctx = frameQLParser.TableOptionAverageContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1573
                self.match(frameQLParser.AVG_ROW_LENGTH)
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1574
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1577
                self.decimalLiteral()
                pass

            elif la_ == 4:
                localctx = frameQLParser.TableOptionCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DEFAULT:
                    self.state = 1578
                    self.match(frameQLParser.DEFAULT)


                self.state = 1584
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.CHARACTER]:
                    self.state = 1581
                    self.match(frameQLParser.CHARACTER)
                    self.state = 1582
                    self.match(frameQLParser.SET)
                    pass
                elif token in [frameQLParser.CHARSET]:
                    self.state = 1583
                    self.match(frameQLParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1586
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1589
                self.charsetName()
                pass

            elif la_ == 5:
                localctx = frameQLParser.TableOptionChecksumContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1590
                self.match(frameQLParser.CHECKSUM)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1591
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1594
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ZERO_DECIMAL or _la==frameQLParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                localctx = frameQLParser.TableOptionCollateContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DEFAULT:
                    self.state = 1595
                    self.match(frameQLParser.DEFAULT)


                self.state = 1598
                self.match(frameQLParser.COLLATE)
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1599
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1602
                self.collationName()
                pass

            elif la_ == 7:
                localctx = frameQLParser.TableOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1603
                self.match(frameQLParser.COMMENT)
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1604
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1607
                self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = frameQLParser.TableOptionCompressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1608
                self.match(frameQLParser.COMPRESSION)
                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1609
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1612
                self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 9:
                localctx = frameQLParser.TableOptionConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1613
                self.match(frameQLParser.CONNECTION)
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1614
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1617
                self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 10:
                localctx = frameQLParser.TableOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1618
                self.match(frameQLParser.DATA)
                self.state = 1619
                self.match(frameQLParser.DIRECTORY)
                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1620
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1623
                self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 11:
                localctx = frameQLParser.TableOptionDelayContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1624
                self.match(frameQLParser.DELAY_KEY_WRITE)
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1625
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1628
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ZERO_DECIMAL or _la==frameQLParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = frameQLParser.TableOptionEncryptionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1629
                self.match(frameQLParser.ENCRYPTION)
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1630
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1633
                self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 13:
                localctx = frameQLParser.TableOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1634
                self.match(frameQLParser.INDEX)
                self.state = 1635
                self.match(frameQLParser.DIRECTORY)
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1636
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1639
                self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 14:
                localctx = frameQLParser.TableOptionInsertMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1640
                self.match(frameQLParser.INSERT_METHOD)
                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1641
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1644
                localctx.insertMethod = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FIRST or _la==frameQLParser.LAST or _la==frameQLParser.NO):
                    localctx.insertMethod = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = frameQLParser.TableOptionKeyBlockSizeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1645
                self.match(frameQLParser.KEY_BLOCK_SIZE)
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1646
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1649
                self.fileSizeLiteral()
                pass

            elif la_ == 16:
                localctx = frameQLParser.TableOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1650
                self.match(frameQLParser.MAX_ROWS)
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1651
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1654
                self.decimalLiteral()
                pass

            elif la_ == 17:
                localctx = frameQLParser.TableOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1655
                self.match(frameQLParser.MIN_ROWS)
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1656
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1659
                self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = frameQLParser.TableOptionPackKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1660
                self.match(frameQLParser.PACK_KEYS)
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1661
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1664
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.ZERO_DECIMAL or _la==frameQLParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 19:
                localctx = frameQLParser.TableOptionPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1665
                self.match(frameQLParser.PASSWORD)
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1666
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1669
                self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 20:
                localctx = frameQLParser.TableOptionRowFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1670
                self.match(frameQLParser.ROW_FORMAT)
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1671
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1674
                localctx.rowFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (frameQLParser.COMPACT - 284)) | (1 << (frameQLParser.COMPRESSED - 284)) | (1 << (frameQLParser.DYNAMIC - 284)) | (1 << (frameQLParser.FIXED - 284)))) != 0) or _la==frameQLParser.REDUNDANT):
                    localctx.rowFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                localctx = frameQLParser.TableOptionRecalculationContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1675
                self.match(frameQLParser.STATS_AUTO_RECALC)
                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1676
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1679
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.ZERO_DECIMAL or _la==frameQLParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 22:
                localctx = frameQLParser.TableOptionPersistentContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1680
                self.match(frameQLParser.STATS_PERSISTENT)
                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1681
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1684
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.ZERO_DECIMAL or _la==frameQLParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                localctx = frameQLParser.TableOptionSamplePageContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1685
                self.match(frameQLParser.STATS_SAMPLE_PAGES)
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1686
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1689
                self.decimalLiteral()
                pass

            elif la_ == 24:
                localctx = frameQLParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1690
                self.match(frameQLParser.TABLESPACE)
                self.state = 1691
                self.uid()
                self.state = 1693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.STORAGE:
                    self.state = 1692
                    self.tablespaceStorage()


                pass

            elif la_ == 25:
                localctx = frameQLParser.TableOptionUnionContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1695
                self.match(frameQLParser.UNION)
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1696
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1699
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1700
                self.tables()
                self.state = 1701
                self.match(frameQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceStorageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(frameQLParser.STORAGE, 0)

        def DISK(self):
            return self.getToken(frameQLParser.DISK, 0)

        def MEMORY(self):
            return self.getToken(frameQLParser.MEMORY, 0)

        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_tablespaceStorage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceStorage" ):
                listener.enterTablespaceStorage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceStorage" ):
                listener.exitTablespaceStorage(self)




    def tablespaceStorage(self):

        localctx = frameQLParser.TablespaceStorageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tablespaceStorage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.match(frameQLParser.STORAGE)
            self.state = 1706
            _la = self._input.LA(1)
            if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.DISK or _la==frameQLParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # DecimalLiteralContext
            self.subCount = None # DecimalLiteralContext

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.BY)
            else:
                return self.getToken(frameQLParser.BY, i)

        def partitionFunctionDefinition(self):
            return self.getTypedRuleContext(frameQLParser.PartitionFunctionDefinitionContext,0)


        def PARTITIONS(self):
            return self.getToken(frameQLParser.PARTITIONS, 0)

        def SUBPARTITION(self):
            return self.getToken(frameQLParser.SUBPARTITION, 0)

        def subpartitionFunctionDefinition(self):
            return self.getTypedRuleContext(frameQLParser.SubpartitionFunctionDefinitionContext,0)


        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)


        def SUBPARTITIONS(self):
            return self.getToken(frameQLParser.SUBPARTITIONS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)




    def partitionDefinitions(self):

        localctx = frameQLParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.match(frameQLParser.PARTITION)
            self.state = 1709
            self.match(frameQLParser.BY)
            self.state = 1710
            self.partitionFunctionDefinition()
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.PARTITIONS:
                self.state = 1711
                self.match(frameQLParser.PARTITIONS)
                self.state = 1712
                localctx.count = self.decimalLiteral()


            self.state = 1722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.SUBPARTITION:
                self.state = 1715
                self.match(frameQLParser.SUBPARTITION)
                self.state = 1716
                self.match(frameQLParser.BY)
                self.state = 1717
                self.subpartitionFunctionDefinition()
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.SUBPARTITIONS:
                    self.state = 1718
                    self.match(frameQLParser.SUBPARTITIONS)
                    self.state = 1719
                    localctx.subCount = self.decimalLiteral()




            self.state = 1735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1724
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1725
                self.partitionDefinition()
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 1726
                    self.match(frameQLParser.COMMA)
                    self.state = 1727
                    self.partitionDefinition()
                    self.state = 1732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1733
                self.match(frameQLParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_partitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionFunctionKeyContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(frameQLParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(frameQLParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(frameQLParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionKey" ):
                listener.enterPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionKey" ):
                listener.exitPartitionFunctionKey(self)


    class PartitionFunctionHashContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(frameQLParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(frameQLParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionHash" ):
                listener.enterPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionHash" ):
                listener.exitPartitionFunctionHash(self)


    class PartitionFunctionListContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(frameQLParser.LIST, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(frameQLParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionList" ):
                listener.enterPartitionFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionList" ):
                listener.exitPartitionFunctionList(self)


    class PartitionFunctionRangeContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGE(self):
            return self.getToken(frameQLParser.RANGE, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(frameQLParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionRange" ):
                listener.enterPartitionFunctionRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionRange" ):
                listener.exitPartitionFunctionRange(self)



    def partitionFunctionDefinition(self):

        localctx = frameQLParser.PartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_partitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.PartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LINEAR:
                    self.state = 1737
                    self.match(frameQLParser.LINEAR)


                self.state = 1740
                self.match(frameQLParser.HASH)
                self.state = 1741
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1742
                self.expression(0)
                self.state = 1743
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = frameQLParser.PartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LINEAR:
                    self.state = 1745
                    self.match(frameQLParser.LINEAR)


                self.state = 1748
                self.match(frameQLParser.KEY)
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ALGORITHM:
                    self.state = 1749
                    self.match(frameQLParser.ALGORITHM)
                    self.state = 1750
                    self.match(frameQLParser.EQUAL_SYMBOL)
                    self.state = 1751
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.ONE_DECIMAL or _la==frameQLParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1754
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1755
                self.uidList()
                self.state = 1756
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = frameQLParser.PartitionFunctionRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1758
                self.match(frameQLParser.RANGE)
                self.state = 1768
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.LR_BRACKET]:
                    self.state = 1759
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 1760
                    self.expression(0)
                    self.state = 1761
                    self.match(frameQLParser.RR_BRACKET)
                    pass
                elif token in [frameQLParser.COLUMNS]:
                    self.state = 1763
                    self.match(frameQLParser.COLUMNS)
                    self.state = 1764
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 1765
                    self.uidList()
                    self.state = 1766
                    self.match(frameQLParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = frameQLParser.PartitionFunctionListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1770
                self.match(frameQLParser.LIST)
                self.state = 1780
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.LR_BRACKET]:
                    self.state = 1771
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 1772
                    self.expression(0)
                    self.state = 1773
                    self.match(frameQLParser.RR_BRACKET)
                    pass
                elif token in [frameQLParser.COLUMNS]:
                    self.state = 1775
                    self.match(frameQLParser.COLUMNS)
                    self.state = 1776
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 1777
                    self.uidList()
                    self.state = 1778
                    self.match(frameQLParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_subpartitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(frameQLParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(frameQLParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionHash" ):
                listener.enterSubPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionHash" ):
                listener.exitSubPartitionFunctionHash(self)


    class SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(frameQLParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(frameQLParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(frameQLParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionKey" ):
                listener.enterSubPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionKey" ):
                listener.exitSubPartitionFunctionKey(self)



    def subpartitionFunctionDefinition(self):

        localctx = frameQLParser.SubpartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_subpartitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.SubPartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LINEAR:
                    self.state = 1784
                    self.match(frameQLParser.LINEAR)


                self.state = 1787
                self.match(frameQLParser.HASH)
                self.state = 1788
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1789
                self.expression(0)
                self.state = 1790
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = frameQLParser.SubPartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LINEAR:
                    self.state = 1792
                    self.match(frameQLParser.LINEAR)


                self.state = 1795
                self.match(frameQLParser.KEY)
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ALGORITHM:
                    self.state = 1796
                    self.match(frameQLParser.ALGORITHM)
                    self.state = 1797
                    self.match(frameQLParser.EQUAL_SYMBOL)
                    self.state = 1798
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.ONE_DECIMAL or _la==frameQLParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1801
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1802
                self.uidList()
                self.state = 1803
                self.match(frameQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_partitionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionComparisionContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def VALUES(self):
            return self.getToken(frameQLParser.VALUES, 0)
        def LESS(self):
            return self.getToken(frameQLParser.LESS, 0)
        def THAN(self):
            return self.getToken(frameQLParser.THAN, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionComparision" ):
                listener.enterPartitionComparision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionComparision" ):
                listener.exitPartitionComparision(self)


    class PartitionListAtomContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def VALUES(self):
            return self.getToken(frameQLParser.VALUES, 0)
        def IN(self):
            return self.getToken(frameQLParser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListAtom" ):
                listener.enterPartitionListAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListAtom" ):
                listener.exitPartitionListAtom(self)


    class PartitionListVectorContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def VALUES(self):
            return self.getToken(frameQLParser.VALUES, 0)
        def IN(self):
            return self.getToken(frameQLParser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def partitionDefinerVector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionDefinerVectorContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionDefinerVectorContext,i)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListVector" ):
                listener.enterPartitionListVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListVector" ):
                listener.exitPartitionListVector(self)


    class PartitionSimpleContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SubpartitionDefinitionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSimple" ):
                listener.enterPartitionSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSimple" ):
                listener.exitPartitionSimple(self)



    def partitionDefinition(self):

        localctx = frameQLParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.PartitionComparisionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1807
                self.match(frameQLParser.PARTITION)
                self.state = 1808
                self.uid()
                self.state = 1809
                self.match(frameQLParser.VALUES)
                self.state = 1810
                self.match(frameQLParser.LESS)
                self.state = 1811
                self.match(frameQLParser.THAN)
                self.state = 1812
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1813
                self.partitionDefinerAtom()
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 1814
                    self.match(frameQLParser.COMMA)
                    self.state = 1815
                    self.partitionDefinerAtom()
                    self.state = 1820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1821
                self.match(frameQLParser.RR_BRACKET)
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.INDEX or ((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & ((1 << (frameQLParser.COMMENT - 282)) | (1 << (frameQLParser.DATA - 282)) | (1 << (frameQLParser.ENGINE - 282)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (frameQLParser.MAX_ROWS - 400)) | (1 << (frameQLParser.MIN_ROWS - 400)) | (1 << (frameQLParser.NODEGROUP - 400)))) != 0) or _la==frameQLParser.STORAGE or _la==frameQLParser.TABLESPACE:
                    self.state = 1822
                    self.partitionOption()
                    self.state = 1827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.SUBPARTITION:
                    self.state = 1828
                    self.subpartitionDefinition()
                    self.state = 1833
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1829
                            self.match(frameQLParser.COMMA)
                            self.state = 1830
                            self.subpartitionDefinition() 
                        self.state = 1835
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,206,self._ctx)



                pass

            elif la_ == 2:
                localctx = frameQLParser.PartitionListAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1838
                self.match(frameQLParser.PARTITION)
                self.state = 1839
                self.uid()
                self.state = 1840
                self.match(frameQLParser.VALUES)
                self.state = 1841
                self.match(frameQLParser.IN)
                self.state = 1842
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1843
                self.partitionDefinerAtom()
                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 1844
                    self.match(frameQLParser.COMMA)
                    self.state = 1845
                    self.partitionDefinerAtom()
                    self.state = 1850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1851
                self.match(frameQLParser.RR_BRACKET)
                self.state = 1855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.INDEX or ((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & ((1 << (frameQLParser.COMMENT - 282)) | (1 << (frameQLParser.DATA - 282)) | (1 << (frameQLParser.ENGINE - 282)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (frameQLParser.MAX_ROWS - 400)) | (1 << (frameQLParser.MIN_ROWS - 400)) | (1 << (frameQLParser.NODEGROUP - 400)))) != 0) or _la==frameQLParser.STORAGE or _la==frameQLParser.TABLESPACE:
                    self.state = 1852
                    self.partitionOption()
                    self.state = 1857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.SUBPARTITION:
                    self.state = 1858
                    self.subpartitionDefinition()
                    self.state = 1863
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1859
                            self.match(frameQLParser.COMMA)
                            self.state = 1860
                            self.subpartitionDefinition() 
                        self.state = 1865
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,210,self._ctx)



                pass

            elif la_ == 3:
                localctx = frameQLParser.PartitionListVectorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1868
                self.match(frameQLParser.PARTITION)
                self.state = 1869
                self.uid()
                self.state = 1870
                self.match(frameQLParser.VALUES)
                self.state = 1871
                self.match(frameQLParser.IN)
                self.state = 1872
                self.match(frameQLParser.LR_BRACKET)
                self.state = 1873
                self.partitionDefinerVector()
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 1874
                    self.match(frameQLParser.COMMA)
                    self.state = 1875
                    self.partitionDefinerVector()
                    self.state = 1880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1881
                self.match(frameQLParser.RR_BRACKET)
                self.state = 1885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.INDEX or ((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & ((1 << (frameQLParser.COMMENT - 282)) | (1 << (frameQLParser.DATA - 282)) | (1 << (frameQLParser.ENGINE - 282)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (frameQLParser.MAX_ROWS - 400)) | (1 << (frameQLParser.MIN_ROWS - 400)) | (1 << (frameQLParser.NODEGROUP - 400)))) != 0) or _la==frameQLParser.STORAGE or _la==frameQLParser.TABLESPACE:
                    self.state = 1882
                    self.partitionOption()
                    self.state = 1887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.SUBPARTITION:
                    self.state = 1888
                    self.subpartitionDefinition()
                    self.state = 1893
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1889
                            self.match(frameQLParser.COMMA)
                            self.state = 1890
                            self.subpartitionDefinition() 
                        self.state = 1895
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,214,self._ctx)



                pass

            elif la_ == 4:
                localctx = frameQLParser.PartitionSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1898
                self.match(frameQLParser.PARTITION)
                self.state = 1899
                self.uid()
                self.state = 1903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.INDEX or ((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & ((1 << (frameQLParser.COMMENT - 282)) | (1 << (frameQLParser.DATA - 282)) | (1 << (frameQLParser.ENGINE - 282)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (frameQLParser.MAX_ROWS - 400)) | (1 << (frameQLParser.MIN_ROWS - 400)) | (1 << (frameQLParser.NODEGROUP - 400)))) != 0) or _la==frameQLParser.STORAGE or _la==frameQLParser.TABLESPACE:
                    self.state = 1900
                    self.partitionOption()
                    self.state = 1905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.SUBPARTITION:
                    self.state = 1906
                    self.subpartitionDefinition()
                    self.state = 1911
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1907
                            self.match(frameQLParser.COMMA)
                            self.state = 1908
                            self.subpartitionDefinition() 
                        self.state = 1913
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,217,self._ctx)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(frameQLParser.ConstantContext,0)


        def MAXVALUE(self):
            return self.getToken(frameQLParser.MAXVALUE, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_partitionDefinerAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerAtom" ):
                listener.enterPartitionDefinerAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerAtom" ):
                listener.exitPartitionDefinerAtom(self)




    def partitionDefinerAtom(self):

        localctx = frameQLParser.PartitionDefinerAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_partitionDefinerAtom)
        try:
            self.state = 1921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1918
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1919
                self.match(frameQLParser.MAXVALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1920
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerVectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionDefinerAtomContext,i)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_partitionDefinerVector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerVector" ):
                listener.enterPartitionDefinerVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerVector" ):
                listener.exitPartitionDefinerVector(self)




    def partitionDefinerVector(self):

        localctx = frameQLParser.PartitionDefinerVectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_partitionDefinerVector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1923
            self.match(frameQLParser.LR_BRACKET)
            self.state = 1924
            self.partitionDefinerAtom()
            self.state = 1927 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1925
                self.match(frameQLParser.COMMA)
                self.state = 1926
                self.partitionDefinerAtom()
                self.state = 1929 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==frameQLParser.COMMA):
                    break

            self.state = 1931
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(frameQLParser.SUBPARTITION, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_subpartitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartitionDefinition" ):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartitionDefinition" ):
                listener.exitSubpartitionDefinition(self)




    def subpartitionDefinition(self):

        localctx = frameQLParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.match(frameQLParser.SUBPARTITION)
            self.state = 1934
            self.uid()
            self.state = 1938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.INDEX or ((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & ((1 << (frameQLParser.COMMENT - 282)) | (1 << (frameQLParser.DATA - 282)) | (1 << (frameQLParser.ENGINE - 282)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (frameQLParser.MAX_ROWS - 400)) | (1 << (frameQLParser.MIN_ROWS - 400)) | (1 << (frameQLParser.NODEGROUP - 400)))) != 0) or _la==frameQLParser.STORAGE or _la==frameQLParser.TABLESPACE:
                self.state = 1935
                self.partitionOption()
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_partitionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionOptionCommentContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionOptionContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionComment" ):
                listener.enterPartitionOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionComment" ):
                listener.exitPartitionOptionComment(self)


    class PartitionOptionNodeGroupContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionOptionContext
            super().__init__(parser)
            self.nodegroup = None # UidContext
            self.copyFrom(ctx)

        def NODEGROUP(self):
            return self.getToken(frameQLParser.NODEGROUP, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionNodeGroup" ):
                listener.enterPartitionOptionNodeGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionNodeGroup" ):
                listener.exitPartitionOptionNodeGroup(self)


    class PartitionOptionIndexDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionOptionContext
            super().__init__(parser)
            self.indexDirectory = None # Token
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(frameQLParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionIndexDirectory" ):
                listener.enterPartitionOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionIndexDirectory" ):
                listener.exitPartitionOptionIndexDirectory(self)


    class PartitionOptionMaxRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionOptionContext
            super().__init__(parser)
            self.maxRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(frameQLParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMaxRows" ):
                listener.enterPartitionOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMaxRows" ):
                listener.exitPartitionOptionMaxRows(self)


    class PartitionOptionTablespaceContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionOptionContext
            super().__init__(parser)
            self.tablespace = None # UidContext
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionTablespace" ):
                listener.enterPartitionOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionTablespace" ):
                listener.exitPartitionOptionTablespace(self)


    class PartitionOptionEngineContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)

        def STORAGE(self):
            return self.getToken(frameQLParser.STORAGE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionEngine" ):
                listener.enterPartitionOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionEngine" ):
                listener.exitPartitionOptionEngine(self)


    class PartitionOptionMinRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionOptionContext
            super().__init__(parser)
            self.minRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(frameQLParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMinRows" ):
                listener.enterPartitionOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMinRows" ):
                listener.exitPartitionOptionMinRows(self)


    class PartitionOptionDataDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PartitionOptionContext
            super().__init__(parser)
            self.dataDirectory = None # Token
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(frameQLParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(frameQLParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionDataDirectory" ):
                listener.enterPartitionOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionDataDirectory" ):
                listener.exitPartitionOptionDataDirectory(self)



    def partitionOption(self):

        localctx = frameQLParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 1986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ENGINE, frameQLParser.STORAGE]:
                localctx = frameQLParser.PartitionOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.STORAGE:
                    self.state = 1941
                    self.match(frameQLParser.STORAGE)


                self.state = 1944
                self.match(frameQLParser.ENGINE)
                self.state = 1946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1945
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1948
                self.engineName()
                pass
            elif token in [frameQLParser.COMMENT]:
                localctx = frameQLParser.PartitionOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1949
                self.match(frameQLParser.COMMENT)
                self.state = 1951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1950
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1953
                localctx.comment = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.DATA]:
                localctx = frameQLParser.PartitionOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1954
                self.match(frameQLParser.DATA)
                self.state = 1955
                self.match(frameQLParser.DIRECTORY)
                self.state = 1957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1956
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1959
                localctx.dataDirectory = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.INDEX]:
                localctx = frameQLParser.PartitionOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1960
                self.match(frameQLParser.INDEX)
                self.state = 1961
                self.match(frameQLParser.DIRECTORY)
                self.state = 1963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1962
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1965
                localctx.indexDirectory = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.MAX_ROWS]:
                localctx = frameQLParser.PartitionOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1966
                self.match(frameQLParser.MAX_ROWS)
                self.state = 1968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1967
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1970
                localctx.maxRows = self.decimalLiteral()
                pass
            elif token in [frameQLParser.MIN_ROWS]:
                localctx = frameQLParser.PartitionOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1971
                self.match(frameQLParser.MIN_ROWS)
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1972
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1975
                localctx.minRows = self.decimalLiteral()
                pass
            elif token in [frameQLParser.TABLESPACE]:
                localctx = frameQLParser.PartitionOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1976
                self.match(frameQLParser.TABLESPACE)
                self.state = 1978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1977
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1980
                localctx.tablespace = self.uid()
                pass
            elif token in [frameQLParser.NODEGROUP]:
                localctx = frameQLParser.PartitionOptionNodeGroupContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1981
                self.match(frameQLParser.NODEGROUP)
                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 1982
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 1985
                localctx.nodegroup = self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_alterDatabase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUpgradeNameContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def UPGRADE(self):
            return self.getToken(frameQLParser.UPGRADE, 0)
        def DATA(self):
            return self.getToken(frameQLParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(frameQLParser.DIRECTORY, 0)
        def NAME(self):
            return self.getToken(frameQLParser.NAME, 0)
        def DATABASE(self):
            return self.getToken(frameQLParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(frameQLParser.SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUpgradeName" ):
                listener.enterAlterUpgradeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUpgradeName" ):
                listener.exitAlterUpgradeName(self)


    class AlterSimpleDatabaseContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(frameQLParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(frameQLParser.SCHEMA, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.CreateDatabaseOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSimpleDatabase" ):
                listener.enterAlterSimpleDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSimpleDatabase" ):
                listener.exitAlterSimpleDatabase(self)



    def alterDatabase(self):

        localctx = frameQLParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_alterDatabase)
        self._la = 0 # Token type
        try:
            self.state = 2006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.AlterSimpleDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1988
                self.match(frameQLParser.ALTER)
                self.state = 1989
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DATABASE or _la==frameQLParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1991
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1990
                    self.uid()


                self.state = 1994 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1993
                    self.createDatabaseOption()
                    self.state = 1996 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << frameQLParser.CHARACTER) | (1 << frameQLParser.COLLATE) | (1 << frameQLParser.DEFAULT))) != 0) or _la==frameQLParser.CHARSET):
                        break

                pass

            elif la_ == 2:
                localctx = frameQLParser.AlterUpgradeNameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1998
                self.match(frameQLParser.ALTER)
                self.state = 1999
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DATABASE or _la==frameQLParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2000
                self.uid()
                self.state = 2001
                self.match(frameQLParser.UPGRADE)
                self.state = 2002
                self.match(frameQLParser.DATA)
                self.state = 2003
                self.match(frameQLParser.DIRECTORY)
                self.state = 2004
                self.match(frameQLParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def EVENT(self):
            return self.getToken(frameQLParser.EVENT, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FullIdContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FullIdContext,i)


        def ownerStatement(self):
            return self.getTypedRuleContext(frameQLParser.OwnerStatementContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.ON)
            else:
                return self.getToken(frameQLParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(frameQLParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(frameQLParser.ScheduleExpressionContext,0)


        def COMPLETION(self):
            return self.getToken(frameQLParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(frameQLParser.PRESERVE, 0)

        def RENAME(self):
            return self.getToken(frameQLParser.RENAME, 0)

        def TO(self):
            return self.getToken(frameQLParser.TO, 0)

        def enableType(self):
            return self.getTypedRuleContext(frameQLParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def DO(self):
            return self.getToken(frameQLParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(frameQLParser.RoutineBodyContext,0)


        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_alterEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterEvent" ):
                listener.enterAlterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterEvent" ):
                listener.exitAlterEvent(self)




    def alterEvent(self):

        localctx = frameQLParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.match(frameQLParser.ALTER)
            self.state = 2010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DEFINER:
                self.state = 2009
                self.ownerStatement()


            self.state = 2012
            self.match(frameQLParser.EVENT)
            self.state = 2013
            self.fullId()
            self.state = 2017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 2014
                self.match(frameQLParser.ON)
                self.state = 2015
                self.match(frameQLParser.SCHEDULE)
                self.state = 2016
                self.scheduleExpression()


            self.state = 2025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ON:
                self.state = 2019
                self.match(frameQLParser.ON)
                self.state = 2020
                self.match(frameQLParser.COMPLETION)
                self.state = 2022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.NOT:
                    self.state = 2021
                    self.match(frameQLParser.NOT)


                self.state = 2024
                self.match(frameQLParser.PRESERVE)


            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.RENAME:
                self.state = 2027
                self.match(frameQLParser.RENAME)
                self.state = 2028
                self.match(frameQLParser.TO)
                self.state = 2029
                self.fullId()


            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DISABLE or _la==frameQLParser.ENABLE:
                self.state = 2032
                self.enableType()


            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.COMMENT:
                self.state = 2035
                self.match(frameQLParser.COMMENT)
                self.state = 2036
                self.match(frameQLParser.STRING_LITERAL)


            self.state = 2041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DO:
                self.state = 2039
                self.match(frameQLParser.DO)
                self.state = 2040
                self.routineBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_alterFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterFunction" ):
                listener.enterAlterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterFunction" ):
                listener.exitAlterFunction(self)




    def alterFunction(self):

        localctx = frameQLParser.AlterFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_alterFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            self.match(frameQLParser.ALTER)
            self.state = 2044
            self.match(frameQLParser.FUNCTION)
            self.state = 2045
            self.fullId()
            self.state = 2049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.DETERMINISTIC or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (frameQLParser.MODIFIES - 99)) | (1 << (frameQLParser.NOT - 99)) | (1 << (frameQLParser.READS - 99)) | (1 << (frameQLParser.SQL - 99)))) != 0) or _la==frameQLParser.COMMENT or _la==frameQLParser.CONTAINS or _la==frameQLParser.LANGUAGE or _la==frameQLParser.NO:
                self.state = 2046
                self.routineOption()
                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterInstanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def INSTANCE(self):
            return self.getToken(frameQLParser.INSTANCE, 0)

        def ROTATE(self):
            return self.getToken(frameQLParser.ROTATE, 0)

        def INNODB(self):
            return self.getToken(frameQLParser.INNODB, 0)

        def MASTER(self):
            return self.getToken(frameQLParser.MASTER, 0)

        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_alterInstance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterInstance" ):
                listener.enterAlterInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterInstance" ):
                listener.exitAlterInstance(self)




    def alterInstance(self):

        localctx = frameQLParser.AlterInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_alterInstance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2052
            self.match(frameQLParser.ALTER)
            self.state = 2053
            self.match(frameQLParser.INSTANCE)
            self.state = 2054
            self.match(frameQLParser.ROTATE)
            self.state = 2055
            self.match(frameQLParser.INNODB)
            self.state = 2056
            self.match(frameQLParser.MASTER)
            self.state = 2057
            self.match(frameQLParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def LOGFILE(self):
            return self.getToken(frameQLParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(frameQLParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(frameQLParser.UNDOFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)


        def INITIAL_SIZE(self):
            return self.getToken(frameQLParser.INITIAL_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(frameQLParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(frameQLParser.WAIT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_alterLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroup" ):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroup" ):
                listener.exitAlterLogfileGroup(self)




    def alterLogfileGroup(self):

        localctx = frameQLParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.match(frameQLParser.ALTER)
            self.state = 2060
            self.match(frameQLParser.LOGFILE)
            self.state = 2061
            self.match(frameQLParser.GROUP)
            self.state = 2062
            self.uid()
            self.state = 2063
            self.match(frameQLParser.ADD)
            self.state = 2064
            self.match(frameQLParser.UNDOFILE)
            self.state = 2065
            self.match(frameQLParser.STRING_LITERAL)
            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.INITIAL_SIZE:
                self.state = 2066
                self.match(frameQLParser.INITIAL_SIZE)
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 2067
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 2070
                self.fileSizeLiteral()


            self.state = 2074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WAIT:
                self.state = 2073
                self.match(frameQLParser.WAIT)


            self.state = 2076
            self.match(frameQLParser.ENGINE)
            self.state = 2078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.EQUAL_SYMBOL:
                self.state = 2077
                self.match(frameQLParser.EQUAL_SYMBOL)


            self.state = 2080
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(frameQLParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_alterProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterProcedure" ):
                listener.enterAlterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterProcedure" ):
                listener.exitAlterProcedure(self)




    def alterProcedure(self):

        localctx = frameQLParser.AlterProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alterProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2082
            self.match(frameQLParser.ALTER)
            self.state = 2083
            self.match(frameQLParser.PROCEDURE)
            self.state = 2084
            self.fullId()
            self.state = 2088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.DETERMINISTIC or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (frameQLParser.MODIFIES - 99)) | (1 << (frameQLParser.NOT - 99)) | (1 << (frameQLParser.READS - 99)) | (1 << (frameQLParser.SQL - 99)))) != 0) or _la==frameQLParser.COMMENT or _la==frameQLParser.CONTAINS or _la==frameQLParser.LANGUAGE or _la==frameQLParser.NO:
                self.state = 2085
                self.routineOption()
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(frameQLParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def OPTIONS(self):
            return self.getToken(frameQLParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)




    def alterServer(self):

        localctx = frameQLParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_alterServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2091
            self.match(frameQLParser.ALTER)
            self.state = 2092
            self.match(frameQLParser.SERVER)
            self.state = 2093
            self.uid()
            self.state = 2094
            self.match(frameQLParser.OPTIONS)
            self.state = 2095
            self.match(frameQLParser.LR_BRACKET)
            self.state = 2096
            self.serverOption()
            self.state = 2101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 2097
                self.match(frameQLParser.COMMA)
                self.state = 2098
                self.serverOption()
                self.state = 2103
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2104
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def alterSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.AlterSpecificationContext)
            else:
                return self.getTypedRuleContext(frameQLParser.AlterSpecificationContext,i)


        def IGNORE(self):
            return self.getToken(frameQLParser.IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(frameQLParser.PartitionDefinitionsContext,0)


        def ONLINE(self):
            return self.getToken(frameQLParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(frameQLParser.OFFLINE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_alterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTable" ):
                listener.enterAlterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTable" ):
                listener.exitAlterTable(self)




    def alterTable(self):

        localctx = frameQLParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.match(frameQLParser.ALTER)
            self.state = 2108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.OFFLINE or _la==frameQLParser.ONLINE:
                self.state = 2107
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.OFFLINE or _la==frameQLParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE:
                self.state = 2110
                self.match(frameQLParser.IGNORE)


            self.state = 2113
            self.match(frameQLParser.TABLE)
            self.state = 2114
            self.tableName()
            self.state = 2115
            self.alterSpecification()
            self.state = 2120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 2116
                self.match(frameQLParser.COMMA)
                self.state = 2117
                self.alterSpecification()
                self.state = 2122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.PARTITION:
                self.state = 2123
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.objectAction = None # Token

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def DATAFILE(self):
            return self.getToken(frameQLParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)


        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def INITIAL_SIZE(self):
            return self.getToken(frameQLParser.INITIAL_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(frameQLParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(frameQLParser.WAIT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_alterTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespace" ):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespace" ):
                listener.exitAlterTablespace(self)




    def alterTablespace(self):

        localctx = frameQLParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            self.match(frameQLParser.ALTER)
            self.state = 2127
            self.match(frameQLParser.TABLESPACE)
            self.state = 2128
            self.uid()
            self.state = 2129
            localctx.objectAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.ADD or _la==frameQLParser.DROP):
                localctx.objectAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2130
            self.match(frameQLParser.DATAFILE)
            self.state = 2131
            self.match(frameQLParser.STRING_LITERAL)
            self.state = 2135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.INITIAL_SIZE:
                self.state = 2132
                self.match(frameQLParser.INITIAL_SIZE)
                self.state = 2133
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 2134
                self.fileSizeLiteral()


            self.state = 2138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WAIT:
                self.state = 2137
                self.match(frameQLParser.WAIT)


            self.state = 2140
            self.match(frameQLParser.ENGINE)
            self.state = 2142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.EQUAL_SYMBOL:
                self.state = 2141
                self.match(frameQLParser.EQUAL_SYMBOL)


            self.state = 2144
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOpt = None # Token

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(frameQLParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)


        def ALGORITHM(self):
            return self.getToken(frameQLParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(frameQLParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(frameQLParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(frameQLParser.SECURITY, 0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(frameQLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(frameQLParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(frameQLParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(frameQLParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(frameQLParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(frameQLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(frameQLParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(frameQLParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_alterView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterView" ):
                listener.enterAlterView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterView" ):
                listener.exitAlterView(self)




    def alterView(self):

        localctx = frameQLParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2146
            self.match(frameQLParser.ALTER)
            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ALGORITHM:
                self.state = 2147
                self.match(frameQLParser.ALGORITHM)
                self.state = 2148
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 2149
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.MERGE or _la==frameQLParser.TEMPTABLE or _la==frameQLParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DEFINER:
                self.state = 2152
                self.ownerStatement()


            self.state = 2158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.SQL:
                self.state = 2155
                self.match(frameQLParser.SQL)
                self.state = 2156
                self.match(frameQLParser.SECURITY)
                self.state = 2157
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFINER or _la==frameQLParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2160
            self.match(frameQLParser.VIEW)
            self.state = 2161
            self.fullId()
            self.state = 2166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LR_BRACKET:
                self.state = 2162
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2163
                self.uidList()
                self.state = 2164
                self.match(frameQLParser.RR_BRACKET)


            self.state = 2168
            self.match(frameQLParser.AS)
            self.state = 2169
            self.selectStatement()
            self.state = 2176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WITH:
                self.state = 2170
                self.match(frameQLParser.WITH)
                self.state = 2172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CASCADED or _la==frameQLParser.LOCAL:
                    self.state = 2171
                    localctx.checkOpt = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.CASCADED or _la==frameQLParser.LOCAL):
                        localctx.checkOpt = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2174
                self.match(frameQLParser.CHECK)
                self.state = 2175
                self.match(frameQLParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_alterSpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterByDisableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISABLE(self):
            return self.getToken(frameQLParser.DISABLE, 0)
        def KEYS(self):
            return self.getToken(frameQLParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDisableKeys" ):
                listener.enterAlterByDisableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDisableKeys" ):
                listener.exitAlterByDisableKeys(self)


    class AlterByDefaultCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(frameQLParser.SET, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)
        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(frameQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(frameQLParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDefaultCharset" ):
                listener.enterAlterByDefaultCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDefaultCharset" ):
                listener.exitAlterByDefaultCharset(self)


    class AlterByRenameColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(frameQLParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(frameQLParser.COLUMN, 0)
        def TO(self):
            return self.getToken(frameQLParser.TO, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRenameColumn" ):
                listener.enterAlterByRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRenameColumn" ):
                listener.exitAlterByRenameColumn(self)


    class AlterByConvertCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(frameQLParser.CONVERT, 0)
        def TO(self):
            return self.getToken(frameQLParser.TO, 0)
        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(frameQLParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(frameQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(frameQLParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByConvertCharset" ):
                listener.enterAlterByConvertCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByConvertCharset" ):
                listener.exitAlterByConvertCharset(self)


    class AlterByAddPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPartition" ):
                listener.enterAlterByAddPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPartition" ):
                listener.exitAlterByAddPartition(self)


    class AlterByAnalyzePartitiionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(frameQLParser.ANALYZE, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAnalyzePartitiion" ):
                listener.enterAlterByAnalyzePartitiion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAnalyzePartitiion" ):
                listener.exitAlterByAnalyzePartitiion(self)


    class AlterByAddForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)
        def FOREIGN(self):
            return self.getToken(frameQLParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(frameQLParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(frameQLParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddForeignKey" ):
                listener.enterAlterByAddForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddForeignKey" ):
                listener.exitAlterByAddForeignKey(self)


    class AlterByRemovePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REMOVE(self):
            return self.getToken(frameQLParser.REMOVE, 0)
        def PARTITIONING(self):
            return self.getToken(frameQLParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRemovePartitioning" ):
                listener.enterAlterByRemovePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRemovePartitioning" ):
                listener.exitAlterByRemovePartitioning(self)


    class AlterByRenameContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.renameFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(frameQLParser.RENAME, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)

        def TO(self):
            return self.getToken(frameQLParser.TO, 0)
        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRename" ):
                listener.enterAlterByRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRename" ):
                listener.exitAlterByRename(self)


    class AlterByOptimizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTIMIZE(self):
            return self.getToken(frameQLParser.OPTIMIZE, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOptimizePartition" ):
                listener.enterAlterByOptimizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOptimizePartition" ):
                listener.exitAlterByOptimizePartition(self)


    class AlterByImportTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(frameQLParser.IMPORT, 0)
        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportTablespace" ):
                listener.enterAlterByImportTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportTablespace" ):
                listener.exitAlterByImportTablespace(self)


    class AlterByCoalescePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(frameQLParser.COALESCE, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCoalescePartition" ):
                listener.enterAlterByCoalescePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCoalescePartition" ):
                listener.exitAlterByCoalescePartition(self)


    class AlterByAddColumnsContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)

        def columnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ColumnDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COLUMN(self):
            return self.getToken(frameQLParser.COLUMN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumns" ):
                listener.enterAlterByAddColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumns" ):
                listener.exitAlterByAddColumns(self)


    class AlterByDropForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)
        def FOREIGN(self):
            return self.getToken(frameQLParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropForeignKey" ):
                listener.enterAlterByDropForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropForeignKey" ):
                listener.exitAlterByDropForeignKey(self)


    class AlterByAddCheckTableConstraintContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)
        def CHECK(self):
            return self.getToken(frameQLParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(frameQLParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddCheckTableConstraint" ):
                listener.enterAlterByAddCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddCheckTableConstraint" ):
                listener.exitAlterByAddCheckTableConstraint(self)


    class AlterByRebuildPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REBUILD(self):
            return self.getToken(frameQLParser.REBUILD, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRebuildPartition" ):
                listener.enterAlterByRebuildPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRebuildPartition" ):
                listener.exitAlterByRebuildPartition(self)


    class AlterByUpgradePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPGRADE(self):
            return self.getToken(frameQLParser.UPGRADE, 0)
        def PARTITIONING(self):
            return self.getToken(frameQLParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByUpgradePartitioning" ):
                listener.enterAlterByUpgradePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByUpgradePartitioning" ):
                listener.exitAlterByUpgradePartitioning(self)


    class AlterByRepairPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPAIR(self):
            return self.getToken(frameQLParser.REPAIR, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRepairPartition" ):
                listener.enterAlterByRepairPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRepairPartition" ):
                listener.exitAlterByRepairPartition(self)


    class AlterByExchangePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def EXCHANGE(self):
            return self.getToken(frameQLParser.EXCHANGE, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.WITH)
            else:
                return self.getToken(frameQLParser.WITH, i)
        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)

        def VALIDATION(self):
            return self.getToken(frameQLParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(frameQLParser.WITHOUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByExchangePartition" ):
                listener.enterAlterByExchangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByExchangePartition" ):
                listener.exitAlterByExchangePartition(self)


    class AlterByAddIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(frameQLParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddIndex" ):
                listener.enterAlterByAddIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddIndex" ):
                listener.exitAlterByAddIndex(self)


    class AlterByDropColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def COLUMN(self):
            return self.getToken(frameQLParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropColumn" ):
                listener.enterAlterByDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropColumn" ):
                listener.exitAlterByDropColumn(self)


    class AlterByImportPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(frameQLParser.IMPORT, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportPartition" ):
                listener.enterAlterByImportPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportPartition" ):
                listener.exitAlterByImportPartition(self)


    class AlterByChangeDefaultContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(frameQLParser.DefaultValueContext,0)

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(frameQLParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeDefault" ):
                listener.enterAlterByChangeDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeDefault" ):
                listener.exitAlterByChangeDefault(self)


    class AlterByForceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FORCE(self):
            return self.getToken(frameQLParser.FORCE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByForce" ):
                listener.enterAlterByForce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByForce" ):
                listener.exitAlterByForce(self)


    class AlterByDropPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPartition" ):
                listener.enterAlterByDropPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPartition" ):
                listener.exitAlterByDropPartition(self)


    class AlterByAddSpecialIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.keyType = None # Token
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(frameQLParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(frameQLParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddSpecialIndex" ):
                listener.enterAlterByAddSpecialIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddSpecialIndex" ):
                listener.exitAlterByAddSpecialIndex(self)


    class AlterByModifyColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(frameQLParser.MODIFY, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(frameQLParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(frameQLParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(frameQLParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(frameQLParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByModifyColumn" ):
                listener.enterAlterByModifyColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByModifyColumn" ):
                listener.exitAlterByModifyColumn(self)


    class AlterByTableOptionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTableOption" ):
                listener.enterAlterByTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTableOption" ):
                listener.exitAlterByTableOption(self)


    class AlterByDropPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)
        def PRIMARY(self):
            return self.getToken(frameQLParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPrimaryKey" ):
                listener.enterAlterByDropPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPrimaryKey" ):
                listener.exitAlterByDropPrimaryKey(self)


    class AlterByLockContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.lockType = None # Token
            self.copyFrom(ctx)

        def LOCK(self):
            return self.getToken(frameQLParser.LOCK, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def NONE(self):
            return self.getToken(frameQLParser.NONE, 0)
        def SHARED(self):
            return self.getToken(frameQLParser.SHARED, 0)
        def EXCLUSIVE(self):
            return self.getToken(frameQLParser.EXCLUSIVE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByLock" ):
                listener.enterAlterByLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByLock" ):
                listener.exitAlterByLock(self)


    class AlterByDiscardPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(frameQLParser.DISCARD, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardPartition" ):
                listener.enterAlterByDiscardPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardPartition" ):
                listener.exitAlterByDiscardPartition(self)


    class AlterByDiscardTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(frameQLParser.DISCARD, 0)
        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardTablespace" ):
                listener.enterAlterByDiscardTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardTablespace" ):
                listener.exitAlterByDiscardTablespace(self)


    class AlterByValidateContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def VALIDATION(self):
            return self.getToken(frameQLParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(frameQLParser.WITHOUT, 0)
        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByValidate" ):
                listener.enterAlterByValidate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByValidate" ):
                listener.exitAlterByValidate(self)


    class AlterByAddPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)
        def PRIMARY(self):
            return self.getToken(frameQLParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(frameQLParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(frameQLParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexOptionContext,i)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPrimaryKey" ):
                listener.enterAlterByAddPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPrimaryKey" ):
                listener.exitAlterByAddPrimaryKey(self)


    class AlterByCheckPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(frameQLParser.CHECK, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCheckPartition" ):
                listener.enterAlterByCheckPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCheckPartition" ):
                listener.exitAlterByCheckPartition(self)


    class AlterByEnableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENABLE(self):
            return self.getToken(frameQLParser.ENABLE, 0)
        def KEYS(self):
            return self.getToken(frameQLParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByEnableKeys" ):
                listener.enterAlterByEnableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByEnableKeys" ):
                listener.exitAlterByEnableKeys(self)


    class AlterByReorganizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REORGANIZE(self):
            return self.getToken(frameQLParser.REORGANIZE, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByReorganizePartition" ):
                listener.enterAlterByReorganizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByReorganizePartition" ):
                listener.exitAlterByReorganizePartition(self)


    class AlterBySetAlgorithmContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def ALGORITHM(self):
            return self.getToken(frameQLParser.ALGORITHM, 0)
        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def INPLACE(self):
            return self.getToken(frameQLParser.INPLACE, 0)
        def COPY(self):
            return self.getToken(frameQLParser.COPY, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterBySetAlgorithm" ):
                listener.enterAlterBySetAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterBySetAlgorithm" ):
                listener.exitAlterBySetAlgorithm(self)


    class AlterByChangeColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.afterColumn = None # UidContext
            self.copyFrom(ctx)

        def CHANGE(self):
            return self.getToken(frameQLParser.CHANGE, 0)
        def columnDefinition(self):
            return self.getTypedRuleContext(frameQLParser.ColumnDefinitionContext,0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)

        def COLUMN(self):
            return self.getToken(frameQLParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(frameQLParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(frameQLParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeColumn" ):
                listener.enterAlterByChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeColumn" ):
                listener.exitAlterByChangeColumn(self)


    class AlterByAddUniqueKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)
        def UNIQUE(self):
            return self.getToken(frameQLParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(frameQLParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(frameQLParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(frameQLParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddUniqueKey" ):
                listener.enterAlterByAddUniqueKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddUniqueKey" ):
                listener.exitAlterByAddUniqueKey(self)


    class AlterByTruncatePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(frameQLParser.TRUNCATE, 0)
        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTruncatePartition" ):
                listener.enterAlterByTruncatePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTruncatePartition" ):
                listener.exitAlterByTruncatePartition(self)


    class AlterByDropIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropIndex" ):
                listener.enterAlterByDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropIndex" ):
                listener.exitAlterByDropIndex(self)


    class AlterByAddColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(frameQLParser.ADD, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(frameQLParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(frameQLParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(frameQLParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(frameQLParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumn" ):
                listener.enterAlterByAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumn" ):
                listener.exitAlterByAddColumn(self)


    class AlterByOrderContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORDER(self):
            return self.getToken(frameQLParser.ORDER, 0)
        def BY(self):
            return self.getToken(frameQLParser.BY, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOrder" ):
                listener.enterAlterByOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOrder" ):
                listener.exitAlterByOrder(self)



    def alterSpecification(self):

        localctx = frameQLParser.AlterSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.AlterByTableOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2178
                self.tableOption()
                self.state = 2185
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2180
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==frameQLParser.COMMA:
                            self.state = 2179
                            self.match(frameQLParser.COMMA)


                        self.state = 2182
                        self.tableOption() 
                    self.state = 2187
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

                pass

            elif la_ == 2:
                localctx = frameQLParser.AlterByAddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2188
                self.match(frameQLParser.ADD)
                self.state = 2190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLUMN:
                    self.state = 2189
                    self.match(frameQLParser.COLUMN)


                self.state = 2192
                self.uid()
                self.state = 2193
                self.columnDefinition()
                self.state = 2197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.FIRST]:
                    self.state = 2194
                    self.match(frameQLParser.FIRST)
                    pass
                elif token in [frameQLParser.AFTER]:
                    self.state = 2195
                    self.match(frameQLParser.AFTER)
                    self.state = 2196
                    self.uid()
                    pass
                elif token in [frameQLParser.EOF, frameQLParser.PARTITION, frameQLParser.MINUSMINUS, frameQLParser.COMMA, frameQLParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 3:
                localctx = frameQLParser.AlterByAddColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2199
                self.match(frameQLParser.ADD)
                self.state = 2201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLUMN:
                    self.state = 2200
                    self.match(frameQLParser.COLUMN)


                self.state = 2203
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2204
                self.uid()
                self.state = 2205
                self.columnDefinition()
                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2206
                    self.match(frameQLParser.COMMA)
                    self.state = 2207
                    self.uid()
                    self.state = 2208
                    self.columnDefinition()
                    self.state = 2214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2215
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = frameQLParser.AlterByAddIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2217
                self.match(frameQLParser.ADD)
                self.state = 2218
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                    self.state = 2219
                    self.uid()


                self.state = 2223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.USING:
                    self.state = 2222
                    self.indexType()


                self.state = 2225
                self.indexColumnNames()
                self.state = 2229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.USING or _la==frameQLParser.WITH or _la==frameQLParser.COMMENT or _la==frameQLParser.KEY_BLOCK_SIZE:
                    self.state = 2226
                    self.indexOption()
                    self.state = 2231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = frameQLParser.AlterByAddPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2232
                self.match(frameQLParser.ADD)
                self.state = 2237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CONSTRAINT:
                    self.state = 2233
                    self.match(frameQLParser.CONSTRAINT)
                    self.state = 2235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                        self.state = 2234
                        localctx.name = self.uid()




                self.state = 2239
                self.match(frameQLParser.PRIMARY)
                self.state = 2240
                self.match(frameQLParser.KEY)
                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.USING:
                    self.state = 2241
                    self.indexType()


                self.state = 2244
                self.indexColumnNames()
                self.state = 2248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.USING or _la==frameQLParser.WITH or _la==frameQLParser.COMMENT or _la==frameQLParser.KEY_BLOCK_SIZE:
                    self.state = 2245
                    self.indexOption()
                    self.state = 2250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                localctx = frameQLParser.AlterByAddUniqueKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2251
                self.match(frameQLParser.ADD)
                self.state = 2256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CONSTRAINT:
                    self.state = 2252
                    self.match(frameQLParser.CONSTRAINT)
                    self.state = 2254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                        self.state = 2253
                        localctx.name = self.uid()




                self.state = 2258
                self.match(frameQLParser.UNIQUE)
                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.INDEX or _la==frameQLParser.KEY:
                    self.state = 2259
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                    self.state = 2262
                    localctx.indexName = self.uid()


                self.state = 2266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.USING:
                    self.state = 2265
                    self.indexType()


                self.state = 2268
                self.indexColumnNames()
                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.USING or _la==frameQLParser.WITH or _la==frameQLParser.COMMENT or _la==frameQLParser.KEY_BLOCK_SIZE:
                    self.state = 2269
                    self.indexOption()
                    self.state = 2274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                localctx = frameQLParser.AlterByAddSpecialIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2275
                self.match(frameQLParser.ADD)
                self.state = 2276
                localctx.keyType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FULLTEXT or _la==frameQLParser.SPATIAL):
                    localctx.keyType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.INDEX or _la==frameQLParser.KEY:
                    self.state = 2277
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                    self.state = 2280
                    self.uid()


                self.state = 2283
                self.indexColumnNames()
                self.state = 2287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.USING or _la==frameQLParser.WITH or _la==frameQLParser.COMMENT or _la==frameQLParser.KEY_BLOCK_SIZE:
                    self.state = 2284
                    self.indexOption()
                    self.state = 2289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                localctx = frameQLParser.AlterByAddForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2290
                self.match(frameQLParser.ADD)
                self.state = 2295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CONSTRAINT:
                    self.state = 2291
                    self.match(frameQLParser.CONSTRAINT)
                    self.state = 2293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                        self.state = 2292
                        localctx.name = self.uid()




                self.state = 2297
                self.match(frameQLParser.FOREIGN)
                self.state = 2298
                self.match(frameQLParser.KEY)
                self.state = 2300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                    self.state = 2299
                    localctx.indexName = self.uid()


                self.state = 2302
                self.indexColumnNames()
                self.state = 2303
                self.referenceDefinition()
                pass

            elif la_ == 9:
                localctx = frameQLParser.AlterByAddCheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2305
                self.match(frameQLParser.ADD)
                self.state = 2310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CONSTRAINT:
                    self.state = 2306
                    self.match(frameQLParser.CONSTRAINT)
                    self.state = 2308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                        self.state = 2307
                        localctx.name = self.uid()




                self.state = 2312
                self.match(frameQLParser.CHECK)
                self.state = 2313
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2314
                self.expression(0)
                self.state = 2315
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = frameQLParser.AlterBySetAlgorithmContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2317
                self.match(frameQLParser.ALGORITHM)
                self.state = 2319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 2318
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 2321
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.COPY or _la==frameQLParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 11:
                localctx = frameQLParser.AlterByChangeDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2322
                self.match(frameQLParser.ALTER)
                self.state = 2324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLUMN:
                    self.state = 2323
                    self.match(frameQLParser.COLUMN)


                self.state = 2326
                self.uid()
                self.state = 2332
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.SET]:
                    self.state = 2327
                    self.match(frameQLParser.SET)
                    self.state = 2328
                    self.match(frameQLParser.DEFAULT)
                    self.state = 2329
                    self.defaultValue()
                    pass
                elif token in [frameQLParser.DROP]:
                    self.state = 2330
                    self.match(frameQLParser.DROP)
                    self.state = 2331
                    self.match(frameQLParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = frameQLParser.AlterByChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2334
                self.match(frameQLParser.CHANGE)
                self.state = 2336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLUMN:
                    self.state = 2335
                    self.match(frameQLParser.COLUMN)


                self.state = 2338
                localctx.oldColumn = self.uid()
                self.state = 2339
                localctx.newColumn = self.uid()
                self.state = 2340
                self.columnDefinition()
                self.state = 2344
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.FIRST]:
                    self.state = 2341
                    self.match(frameQLParser.FIRST)
                    pass
                elif token in [frameQLParser.AFTER]:
                    self.state = 2342
                    self.match(frameQLParser.AFTER)
                    self.state = 2343
                    localctx.afterColumn = self.uid()
                    pass
                elif token in [frameQLParser.EOF, frameQLParser.PARTITION, frameQLParser.MINUSMINUS, frameQLParser.COMMA, frameQLParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 13:
                localctx = frameQLParser.AlterByRenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2346
                self.match(frameQLParser.RENAME)
                self.state = 2347
                self.match(frameQLParser.COLUMN)
                self.state = 2348
                localctx.oldColumn = self.uid()
                self.state = 2349
                self.match(frameQLParser.TO)
                self.state = 2350
                localctx.newColumn = self.uid()
                pass

            elif la_ == 14:
                localctx = frameQLParser.AlterByLockContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2352
                self.match(frameQLParser.LOCK)
                self.state = 2354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 2353
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 2356
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.EXCLUSIVE or _la==frameQLParser.NONE or _la==frameQLParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = frameQLParser.AlterByModifyColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2357
                self.match(frameQLParser.MODIFY)
                self.state = 2359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLUMN:
                    self.state = 2358
                    self.match(frameQLParser.COLUMN)


                self.state = 2361
                self.uid()
                self.state = 2362
                self.columnDefinition()
                self.state = 2366
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.FIRST]:
                    self.state = 2363
                    self.match(frameQLParser.FIRST)
                    pass
                elif token in [frameQLParser.AFTER]:
                    self.state = 2364
                    self.match(frameQLParser.AFTER)
                    self.state = 2365
                    self.uid()
                    pass
                elif token in [frameQLParser.EOF, frameQLParser.PARTITION, frameQLParser.MINUSMINUS, frameQLParser.COMMA, frameQLParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 16:
                localctx = frameQLParser.AlterByDropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2368
                self.match(frameQLParser.DROP)
                self.state = 2370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLUMN:
                    self.state = 2369
                    self.match(frameQLParser.COLUMN)


                self.state = 2372
                self.uid()
                pass

            elif la_ == 17:
                localctx = frameQLParser.AlterByDropPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2373
                self.match(frameQLParser.DROP)
                self.state = 2374
                self.match(frameQLParser.PRIMARY)
                self.state = 2375
                self.match(frameQLParser.KEY)
                pass

            elif la_ == 18:
                localctx = frameQLParser.AlterByDropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2376
                self.match(frameQLParser.DROP)
                self.state = 2377
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2378
                self.uid()
                pass

            elif la_ == 19:
                localctx = frameQLParser.AlterByDropForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2379
                self.match(frameQLParser.DROP)
                self.state = 2380
                self.match(frameQLParser.FOREIGN)
                self.state = 2381
                self.match(frameQLParser.KEY)
                self.state = 2382
                self.uid()
                pass

            elif la_ == 20:
                localctx = frameQLParser.AlterByDisableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2383
                self.match(frameQLParser.DISABLE)
                self.state = 2384
                self.match(frameQLParser.KEYS)
                pass

            elif la_ == 21:
                localctx = frameQLParser.AlterByEnableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2385
                self.match(frameQLParser.ENABLE)
                self.state = 2386
                self.match(frameQLParser.KEYS)
                pass

            elif la_ == 22:
                localctx = frameQLParser.AlterByRenameContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2387
                self.match(frameQLParser.RENAME)
                self.state = 2389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.AS or _la==frameQLParser.TO:
                    self.state = 2388
                    localctx.renameFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.AS or _la==frameQLParser.TO):
                        localctx.renameFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 2391
                    self.uid()
                    pass

                elif la_ == 2:
                    self.state = 2392
                    self.fullId()
                    pass


                pass

            elif la_ == 23:
                localctx = frameQLParser.AlterByOrderContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2395
                self.match(frameQLParser.ORDER)
                self.state = 2396
                self.match(frameQLParser.BY)
                self.state = 2397
                self.uidList()
                pass

            elif la_ == 24:
                localctx = frameQLParser.AlterByConvertCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2398
                self.match(frameQLParser.CONVERT)
                self.state = 2399
                self.match(frameQLParser.TO)
                self.state = 2400
                self.match(frameQLParser.CHARACTER)
                self.state = 2401
                self.match(frameQLParser.SET)
                self.state = 2402
                self.charsetName()
                self.state = 2405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLLATE:
                    self.state = 2403
                    self.match(frameQLParser.COLLATE)
                    self.state = 2404
                    self.collationName()


                pass

            elif la_ == 25:
                localctx = frameQLParser.AlterByDefaultCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DEFAULT:
                    self.state = 2407
                    self.match(frameQLParser.DEFAULT)


                self.state = 2410
                self.match(frameQLParser.CHARACTER)
                self.state = 2411
                self.match(frameQLParser.SET)
                self.state = 2412
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 2413
                self.charsetName()
                self.state = 2417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLLATE:
                    self.state = 2414
                    self.match(frameQLParser.COLLATE)
                    self.state = 2415
                    self.match(frameQLParser.EQUAL_SYMBOL)
                    self.state = 2416
                    self.collationName()


                pass

            elif la_ == 26:
                localctx = frameQLParser.AlterByDiscardTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2419
                self.match(frameQLParser.DISCARD)
                self.state = 2420
                self.match(frameQLParser.TABLESPACE)
                pass

            elif la_ == 27:
                localctx = frameQLParser.AlterByImportTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2421
                self.match(frameQLParser.IMPORT)
                self.state = 2422
                self.match(frameQLParser.TABLESPACE)
                pass

            elif la_ == 28:
                localctx = frameQLParser.AlterByForceContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 2423
                self.match(frameQLParser.FORCE)
                pass

            elif la_ == 29:
                localctx = frameQLParser.AlterByValidateContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 2424
                localctx.validationFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.WITH or _la==frameQLParser.WITHOUT):
                    localctx.validationFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2425
                self.match(frameQLParser.VALIDATION)
                pass

            elif la_ == 30:
                localctx = frameQLParser.AlterByAddPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 2426
                self.match(frameQLParser.ADD)
                self.state = 2427
                self.match(frameQLParser.PARTITION)
                self.state = 2428
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2429
                self.partitionDefinition()
                self.state = 2434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2430
                    self.match(frameQLParser.COMMA)
                    self.state = 2431
                    self.partitionDefinition()
                    self.state = 2436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2437
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 31:
                localctx = frameQLParser.AlterByDropPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 2439
                self.match(frameQLParser.DROP)
                self.state = 2440
                self.match(frameQLParser.PARTITION)
                self.state = 2441
                self.uidList()
                pass

            elif la_ == 32:
                localctx = frameQLParser.AlterByDiscardPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 2442
                self.match(frameQLParser.DISCARD)
                self.state = 2443
                self.match(frameQLParser.PARTITION)
                self.state = 2446
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 2444
                    self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 2445
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2448
                self.match(frameQLParser.TABLESPACE)
                pass

            elif la_ == 33:
                localctx = frameQLParser.AlterByImportPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 2449
                self.match(frameQLParser.IMPORT)
                self.state = 2450
                self.match(frameQLParser.PARTITION)
                self.state = 2453
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 2451
                    self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 2452
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2455
                self.match(frameQLParser.TABLESPACE)
                pass

            elif la_ == 34:
                localctx = frameQLParser.AlterByTruncatePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 2456
                self.match(frameQLParser.TRUNCATE)
                self.state = 2457
                self.match(frameQLParser.PARTITION)
                self.state = 2460
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 2458
                    self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 2459
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 35:
                localctx = frameQLParser.AlterByCoalescePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 2462
                self.match(frameQLParser.COALESCE)
                self.state = 2463
                self.match(frameQLParser.PARTITION)
                self.state = 2464
                self.decimalLiteral()
                pass

            elif la_ == 36:
                localctx = frameQLParser.AlterByReorganizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 2465
                self.match(frameQLParser.REORGANIZE)
                self.state = 2466
                self.match(frameQLParser.PARTITION)
                self.state = 2467
                self.uidList()
                self.state = 2468
                self.match(frameQLParser.INTO)
                self.state = 2469
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2470
                self.partitionDefinition()
                self.state = 2475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2471
                    self.match(frameQLParser.COMMA)
                    self.state = 2472
                    self.partitionDefinition()
                    self.state = 2477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2478
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 37:
                localctx = frameQLParser.AlterByExchangePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 2480
                self.match(frameQLParser.EXCHANGE)
                self.state = 2481
                self.match(frameQLParser.PARTITION)
                self.state = 2482
                self.uid()
                self.state = 2483
                self.match(frameQLParser.WITH)
                self.state = 2484
                self.match(frameQLParser.TABLE)
                self.state = 2485
                self.tableName()
                self.state = 2488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.WITH or _la==frameQLParser.WITHOUT:
                    self.state = 2486
                    localctx.validationFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.WITH or _la==frameQLParser.WITHOUT):
                        localctx.validationFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2487
                    self.match(frameQLParser.VALIDATION)


                pass

            elif la_ == 38:
                localctx = frameQLParser.AlterByAnalyzePartitiionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 2490
                self.match(frameQLParser.ANALYZE)
                self.state = 2491
                self.match(frameQLParser.PARTITION)
                self.state = 2494
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 2492
                    self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 2493
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 39:
                localctx = frameQLParser.AlterByCheckPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 2496
                self.match(frameQLParser.CHECK)
                self.state = 2497
                self.match(frameQLParser.PARTITION)
                self.state = 2500
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 2498
                    self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 2499
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 40:
                localctx = frameQLParser.AlterByOptimizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 2502
                self.match(frameQLParser.OPTIMIZE)
                self.state = 2503
                self.match(frameQLParser.PARTITION)
                self.state = 2506
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 2504
                    self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 2505
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 41:
                localctx = frameQLParser.AlterByRebuildPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 2508
                self.match(frameQLParser.REBUILD)
                self.state = 2509
                self.match(frameQLParser.PARTITION)
                self.state = 2512
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 2510
                    self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 2511
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 42:
                localctx = frameQLParser.AlterByRepairPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 2514
                self.match(frameQLParser.REPAIR)
                self.state = 2515
                self.match(frameQLParser.PARTITION)
                self.state = 2518
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 2516
                    self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 2517
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 43:
                localctx = frameQLParser.AlterByRemovePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 2520
                self.match(frameQLParser.REMOVE)
                self.state = 2521
                self.match(frameQLParser.PARTITIONING)
                pass

            elif la_ == 44:
                localctx = frameQLParser.AlterByUpgradePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 2522
                self.match(frameQLParser.UPGRADE)
                self.state = 2523
                self.match(frameQLParser.PARTITIONING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(frameQLParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(frameQLParser.SCHEMA, 0)

        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)




    def dropDatabase(self):

        localctx = frameQLParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2526
            self.match(frameQLParser.DROP)
            self.state = 2527
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.DATABASE or _la==frameQLParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 2528
                self.ifExists()


            self.state = 2531
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def EVENT(self):
            return self.getToken(frameQLParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_dropEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropEvent" ):
                listener.enterDropEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropEvent" ):
                listener.exitDropEvent(self)




    def dropEvent(self):

        localctx = frameQLParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dropEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2533
            self.match(frameQLParser.DROP)
            self.state = 2534
            self.match(frameQLParser.EVENT)
            self.state = 2536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 2535
                self.ifExists()


            self.state = 2538
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def ON(self):
            return self.getToken(frameQLParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def ALGORITHM(self):
            return self.getToken(frameQLParser.ALGORITHM, 0)

        def LOCK(self):
            return self.getToken(frameQLParser.LOCK, 0)

        def ONLINE(self):
            return self.getToken(frameQLParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(frameQLParser.OFFLINE, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.DEFAULT)
            else:
                return self.getToken(frameQLParser.DEFAULT, i)

        def INPLACE(self):
            return self.getToken(frameQLParser.INPLACE, 0)

        def COPY(self):
            return self.getToken(frameQLParser.COPY, 0)

        def NONE(self):
            return self.getToken(frameQLParser.NONE, 0)

        def SHARED(self):
            return self.getToken(frameQLParser.SHARED, 0)

        def EXCLUSIVE(self):
            return self.getToken(frameQLParser.EXCLUSIVE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)




    def dropIndex(self):

        localctx = frameQLParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2540
            self.match(frameQLParser.DROP)
            self.state = 2541
            self.match(frameQLParser.INDEX)
            self.state = 2543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.state = 2542
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.OFFLINE or _la==frameQLParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2545
            self.uid()
            self.state = 2546
            self.match(frameQLParser.ON)
            self.state = 2547
            self.tableName()
            self.state = 2553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ALGORITHM:
                self.state = 2548
                self.match(frameQLParser.ALGORITHM)
                self.state = 2550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 2549
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 2552
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.COPY or _la==frameQLParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LOCK:
                self.state = 2555
                self.match(frameQLParser.LOCK)
                self.state = 2557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 2556
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 2559
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DEFAULT or _la==frameQLParser.EXCLUSIVE or _la==frameQLParser.NONE or _la==frameQLParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def LOGFILE(self):
            return self.getToken(frameQLParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(frameQLParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_dropLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroup" ):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroup" ):
                listener.exitDropLogfileGroup(self)




    def dropLogfileGroup(self):

        localctx = frameQLParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dropLogfileGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2562
            self.match(frameQLParser.DROP)
            self.state = 2563
            self.match(frameQLParser.LOGFILE)
            self.state = 2564
            self.match(frameQLParser.GROUP)
            self.state = 2565
            self.uid()
            self.state = 2566
            self.match(frameQLParser.ENGINE)
            self.state = 2567
            self.match(frameQLParser.EQUAL_SYMBOL)
            self.state = 2568
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(frameQLParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_dropProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropProcedure" ):
                listener.enterDropProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropProcedure" ):
                listener.exitDropProcedure(self)




    def dropProcedure(self):

        localctx = frameQLParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dropProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2570
            self.match(frameQLParser.DROP)
            self.state = 2571
            self.match(frameQLParser.PROCEDURE)
            self.state = 2573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 2572
                self.ifExists()


            self.state = 2575
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_dropFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)




    def dropFunction(self):

        localctx = frameQLParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dropFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2577
            self.match(frameQLParser.DROP)
            self.state = 2578
            self.match(frameQLParser.FUNCTION)
            self.state = 2580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 2579
                self.ifExists()


            self.state = 2582
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def SERVER(self):
            return self.getToken(frameQLParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)




    def dropServer(self):

        localctx = frameQLParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dropServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self.match(frameQLParser.DROP)
            self.state = 2585
            self.match(frameQLParser.SERVER)
            self.state = 2587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 2586
                self.ifExists()


            self.state = 2589
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)


        def TEMPORARY(self):
            return self.getToken(frameQLParser.TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)


        def RESTRICT(self):
            return self.getToken(frameQLParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(frameQLParser.CASCADE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = frameQLParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2591
            self.match(frameQLParser.DROP)
            self.state = 2593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.TEMPORARY:
                self.state = 2592
                self.match(frameQLParser.TEMPORARY)


            self.state = 2595
            self.match(frameQLParser.TABLE)
            self.state = 2597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 2596
                self.ifExists()


            self.state = 2599
            self.tables()
            self.state = 2601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.CASCADE or _la==frameQLParser.RESTRICT:
                self.state = 2600
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.CASCADE or _la==frameQLParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_dropTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablespace" ):
                listener.enterDropTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablespace" ):
                listener.exitDropTablespace(self)




    def dropTablespace(self):

        localctx = frameQLParser.DropTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2603
            self.match(frameQLParser.DROP)
            self.state = 2604
            self.match(frameQLParser.TABLESPACE)
            self.state = 2605
            self.uid()
            self.state = 2611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ENGINE:
                self.state = 2606
                self.match(frameQLParser.ENGINE)
                self.state = 2608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.EQUAL_SYMBOL:
                    self.state = 2607
                    self.match(frameQLParser.EQUAL_SYMBOL)


                self.state = 2610
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(frameQLParser.TRIGGER, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_dropTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTrigger" ):
                listener.enterDropTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTrigger" ):
                listener.exitDropTrigger(self)




    def dropTrigger(self):

        localctx = frameQLParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dropTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            self.match(frameQLParser.DROP)
            self.state = 2614
            self.match(frameQLParser.TRIGGER)
            self.state = 2616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 2615
                self.ifExists()


            self.state = 2618
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def VIEW(self):
            return self.getToken(frameQLParser.VIEW, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FullIdContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FullIdContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def RESTRICT(self):
            return self.getToken(frameQLParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(frameQLParser.CASCADE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_dropView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)




    def dropView(self):

        localctx = frameQLParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self.match(frameQLParser.DROP)
            self.state = 2621
            self.match(frameQLParser.VIEW)
            self.state = 2623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 2622
                self.ifExists()


            self.state = 2625
            self.fullId()
            self.state = 2630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 2626
                self.match(frameQLParser.COMMA)
                self.state = 2627
                self.fullId()
                self.state = 2632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.CASCADE or _la==frameQLParser.RESTRICT:
                self.state = 2633
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.CASCADE or _la==frameQLParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(frameQLParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def renameTableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.RenameTableClauseContext)
            else:
                return self.getTypedRuleContext(frameQLParser.RenameTableClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_renameTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)




    def renameTable(self):

        localctx = frameQLParser.RenameTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_renameTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self.match(frameQLParser.RENAME)
            self.state = 2637
            self.match(frameQLParser.TABLE)
            self.state = 2638
            self.renameTableClause()
            self.state = 2643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 2639
                self.match(frameQLParser.COMMA)
                self.state = 2640
                self.renameTableClause()
                self.state = 2645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableNameContext,i)


        def TO(self):
            return self.getToken(frameQLParser.TO, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_renameTableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableClause" ):
                listener.enterRenameTableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableClause" ):
                listener.exitRenameTableClause(self)




    def renameTableClause(self):

        localctx = frameQLParser.RenameTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_renameTableClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2646
            self.tableName()
            self.state = 2647
            self.match(frameQLParser.TO)
            self.state = 2648
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(frameQLParser.TRUNCATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_truncateTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)




    def truncateTable(self):

        localctx = frameQLParser.TruncateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_truncateTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2650
            self.match(frameQLParser.TRUNCATE)
            self.state = 2652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.TABLE:
                self.state = 2651
                self.match(frameQLParser.TABLE)


            self.state = 2654
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(frameQLParser.CALL, 0)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(frameQLParser.ConstantsContext,0)


        def expressions(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)




    def callStatement(self):

        localctx = frameQLParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_callStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2656
            self.match(frameQLParser.CALL)
            self.state = 2657
            self.fullId()
            self.state = 2664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LR_BRACKET:
                self.state = 2658
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 2659
                    self.constants()

                elif la_ == 2:
                    self.state = 2660
                    self.expressions()


                self.state = 2663
                self.match(frameQLParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(frameQLParser.SingleDeleteStatementContext,0)


        def multipleDeleteStatement(self):
            return self.getTypedRuleContext(frameQLParser.MultipleDeleteStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = frameQLParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_deleteStatement)
        try:
            self.state = 2668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2666
                self.singleDeleteStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2667
                self.multipleDeleteStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(frameQLParser.DO, 0)

        def expressions(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = frameQLParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            self.match(frameQLParser.DO)
            self.state = 2671
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handlerOpenStatement(self):
            return self.getTypedRuleContext(frameQLParser.HandlerOpenStatementContext,0)


        def handlerReadIndexStatement(self):
            return self.getTypedRuleContext(frameQLParser.HandlerReadIndexStatementContext,0)


        def handlerReadStatement(self):
            return self.getTypedRuleContext(frameQLParser.HandlerReadStatementContext,0)


        def handlerCloseStatement(self):
            return self.getTypedRuleContext(frameQLParser.HandlerCloseStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_handlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerStatement" ):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerStatement" ):
                listener.exitHandlerStatement(self)




    def handlerStatement(self):

        localctx = frameQLParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_handlerStatement)
        try:
            self.state = 2677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2673
                self.handlerOpenStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2674
                self.handlerReadIndexStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2675
                self.handlerReadStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2676
                self.handlerCloseStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts
            self.duplicatedFirst = None # UpdatedElementContext
            self.duplicatedElements = list() # of UpdatedElementContexts

        def INSERT(self):
            return self.getToken(frameQLParser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(frameQLParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def IGNORE(self):
            return self.getToken(frameQLParser.IGNORE, 0)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LR_BRACKET)
            else:
                return self.getToken(frameQLParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.RR_BRACKET)
            else:
                return self.getToken(frameQLParser.RR_BRACKET, i)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UpdatedElementContext,i)


        def ON(self):
            return self.getToken(frameQLParser.ON, 0)

        def DUPLICATE(self):
            return self.getToken(frameQLParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(frameQLParser.UPDATE, 0)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidListContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(frameQLParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(frameQLParser.DELAYED, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(frameQLParser.HIGH_PRIORITY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = frameQLParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            self.match(frameQLParser.INSERT)
            self.state = 2681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (frameQLParser.DELAYED - 40)) | (1 << (frameQLParser.HIGH_PRIORITY - 40)) | (1 << (frameQLParser.LOW_PRIORITY - 40)))) != 0):
                self.state = 2680
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (frameQLParser.DELAYED - 40)) | (1 << (frameQLParser.HIGH_PRIORITY - 40)) | (1 << (frameQLParser.LOW_PRIORITY - 40)))) != 0)):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE:
                self.state = 2683
                self.match(frameQLParser.IGNORE)


            self.state = 2687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.INTO:
                self.state = 2686
                self.match(frameQLParser.INTO)


            self.state = 2689
            self.tableName()
            self.state = 2695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.PARTITION:
                self.state = 2690
                self.match(frameQLParser.PARTITION)
                self.state = 2691
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2692
                localctx.partitions = self.uidList()
                self.state = 2693
                self.match(frameQLParser.RR_BRACKET)


            self.state = 2713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.SELECT, frameQLParser.VALUES, frameQLParser.VALUE, frameQLParser.LR_BRACKET]:
                self.state = 2701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
                if la_ == 1:
                    self.state = 2697
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 2698
                    localctx.columns = self.uidList()
                    self.state = 2699
                    self.match(frameQLParser.RR_BRACKET)


                self.state = 2703
                self.insertStatementValue()
                pass
            elif token in [frameQLParser.SET]:
                self.state = 2704
                self.match(frameQLParser.SET)
                self.state = 2705
                localctx.setFirst = self.updatedElement()
                self.state = 2710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2706
                    self.match(frameQLParser.COMMA)
                    self.state = 2707
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 2712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ON:
                self.state = 2715
                self.match(frameQLParser.ON)
                self.state = 2716
                self.match(frameQLParser.DUPLICATE)
                self.state = 2717
                self.match(frameQLParser.KEY)
                self.state = 2718
                self.match(frameQLParser.UPDATE)
                self.state = 2719
                localctx.duplicatedFirst = self.updatedElement()
                self.state = 2724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2720
                    self.match(frameQLParser.COMMA)
                    self.state = 2721
                    localctx._updatedElement = self.updatedElement()
                    localctx.duplicatedElements.append(localctx._updatedElement)
                    self.state = 2726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(frameQLParser.LOAD, 0)

        def DATA(self):
            return self.getToken(frameQLParser.DATA, 0)

        def INFILE(self):
            return self.getToken(frameQLParser.INFILE, 0)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LR_BRACKET)
            else:
                return self.getToken(frameQLParser.LR_BRACKET, i)

        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.RR_BRACKET)
            else:
                return self.getToken(frameQLParser.RR_BRACKET, i)

        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.SET)
            else:
                return self.getToken(frameQLParser.SET, i)

        def LINES(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LINES)
            else:
                return self.getToken(frameQLParser.LINES, i)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.IGNORE)
            else:
                return self.getToken(frameQLParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(frameQLParser.AssignmentFieldContext,i)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(frameQLParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(frameQLParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(frameQLParser.REPLACE, 0)

        def FIELDS(self):
            return self.getToken(frameQLParser.FIELDS, 0)

        def COLUMNS(self):
            return self.getToken(frameQLParser.COLUMNS, 0)

        def ROWS(self):
            return self.getToken(frameQLParser.ROWS, 0)

        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SelectFieldsIntoContext,i)


        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SelectLinesIntoContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_loadDataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataStatement" ):
                listener.enterLoadDataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataStatement" ):
                listener.exitLoadDataStatement(self)




    def loadDataStatement(self):

        localctx = frameQLParser.LoadDataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_loadDataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2729
            self.match(frameQLParser.LOAD)
            self.state = 2730
            self.match(frameQLParser.DATA)
            self.state = 2732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LOW_PRIORITY or _la==frameQLParser.CONCURRENT:
                self.state = 2731
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.LOW_PRIORITY or _la==frameQLParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LOCAL:
                self.state = 2734
                self.match(frameQLParser.LOCAL)


            self.state = 2737
            self.match(frameQLParser.INFILE)
            self.state = 2738
            localctx.filename = self.match(frameQLParser.STRING_LITERAL)
            self.state = 2740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE or _la==frameQLParser.REPLACE:
                self.state = 2739
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.IGNORE or _la==frameQLParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2742
            self.match(frameQLParser.INTO)
            self.state = 2743
            self.match(frameQLParser.TABLE)
            self.state = 2744
            self.tableName()
            self.state = 2750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.PARTITION:
                self.state = 2745
                self.match(frameQLParser.PARTITION)
                self.state = 2746
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2747
                self.uidList()
                self.state = 2748
                self.match(frameQLParser.RR_BRACKET)


            self.state = 2755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.CHARACTER:
                self.state = 2752
                self.match(frameQLParser.CHARACTER)
                self.state = 2753
                self.match(frameQLParser.SET)
                self.state = 2754
                localctx.charset = self.charsetName()


            self.state = 2763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.COLUMNS or _la==frameQLParser.FIELDS:
                self.state = 2757
                localctx.fieldsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.COLUMNS or _la==frameQLParser.FIELDS):
                    localctx.fieldsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2759 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2758
                    self.selectFieldsInto()
                    self.state = 2761 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==frameQLParser.ENCLOSED or _la==frameQLParser.ESCAPED or _la==frameQLParser.OPTIONALLY or _la==frameQLParser.TERMINATED):
                        break



            self.state = 2771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LINES:
                self.state = 2765
                self.match(frameQLParser.LINES)
                self.state = 2767 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2766
                    self.selectLinesInto()
                    self.state = 2769 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==frameQLParser.STARTING or _la==frameQLParser.TERMINATED):
                        break



            self.state = 2777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE:
                self.state = 2773
                self.match(frameQLParser.IGNORE)
                self.state = 2774
                self.decimalLiteral()
                self.state = 2775
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.LINES or _la==frameQLParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LR_BRACKET:
                self.state = 2779
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2780
                self.assignmentField()
                self.state = 2785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2781
                    self.match(frameQLParser.COMMA)
                    self.state = 2782
                    self.assignmentField()
                    self.state = 2787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2788
                self.match(frameQLParser.RR_BRACKET)


            self.state = 2801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.SET:
                self.state = 2792
                self.match(frameQLParser.SET)
                self.state = 2793
                self.updatedElement()
                self.state = 2798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2794
                    self.match(frameQLParser.COMMA)
                    self.state = 2795
                    self.updatedElement()
                    self.state = 2800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadXmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.tag = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(frameQLParser.LOAD, 0)

        def XML(self):
            return self.getToken(frameQLParser.XML, 0)

        def INFILE(self):
            return self.getToken(frameQLParser.INFILE, 0)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.STRING_LITERAL)
            else:
                return self.getToken(frameQLParser.STRING_LITERAL, i)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.SET)
            else:
                return self.getToken(frameQLParser.SET, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.ROWS)
            else:
                return self.getToken(frameQLParser.ROWS, i)

        def IDENTIFIED(self):
            return self.getToken(frameQLParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(frameQLParser.BY, 0)

        def LESS_SYMBOL(self):
            return self.getToken(frameQLParser.LESS_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(frameQLParser.GREATER_SYMBOL, 0)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.IGNORE)
            else:
                return self.getToken(frameQLParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(frameQLParser.AssignmentFieldContext,i)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(frameQLParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(frameQLParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(frameQLParser.REPLACE, 0)

        def LINES(self):
            return self.getToken(frameQLParser.LINES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_loadXmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadXmlStatement" ):
                listener.enterLoadXmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadXmlStatement" ):
                listener.exitLoadXmlStatement(self)




    def loadXmlStatement(self):

        localctx = frameQLParser.LoadXmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_loadXmlStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2803
            self.match(frameQLParser.LOAD)
            self.state = 2804
            self.match(frameQLParser.XML)
            self.state = 2806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LOW_PRIORITY or _la==frameQLParser.CONCURRENT:
                self.state = 2805
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.LOW_PRIORITY or _la==frameQLParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LOCAL:
                self.state = 2808
                self.match(frameQLParser.LOCAL)


            self.state = 2811
            self.match(frameQLParser.INFILE)
            self.state = 2812
            localctx.filename = self.match(frameQLParser.STRING_LITERAL)
            self.state = 2814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE or _la==frameQLParser.REPLACE:
                self.state = 2813
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.IGNORE or _la==frameQLParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2816
            self.match(frameQLParser.INTO)
            self.state = 2817
            self.match(frameQLParser.TABLE)
            self.state = 2818
            self.tableName()
            self.state = 2822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.CHARACTER:
                self.state = 2819
                self.match(frameQLParser.CHARACTER)
                self.state = 2820
                self.match(frameQLParser.SET)
                self.state = 2821
                localctx.charset = self.charsetName()


            self.state = 2830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ROWS:
                self.state = 2824
                self.match(frameQLParser.ROWS)
                self.state = 2825
                self.match(frameQLParser.IDENTIFIED)
                self.state = 2826
                self.match(frameQLParser.BY)
                self.state = 2827
                self.match(frameQLParser.LESS_SYMBOL)
                self.state = 2828
                localctx.tag = self.match(frameQLParser.STRING_LITERAL)
                self.state = 2829
                self.match(frameQLParser.GREATER_SYMBOL)


            self.state = 2836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE:
                self.state = 2832
                self.match(frameQLParser.IGNORE)
                self.state = 2833
                self.decimalLiteral()
                self.state = 2834
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.LINES or _la==frameQLParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LR_BRACKET:
                self.state = 2838
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2839
                self.assignmentField()
                self.state = 2844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2840
                    self.match(frameQLParser.COMMA)
                    self.state = 2841
                    self.assignmentField()
                    self.state = 2846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2847
                self.match(frameQLParser.RR_BRACKET)


            self.state = 2860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.SET:
                self.state = 2851
                self.match(frameQLParser.SET)
                self.state = 2852
                self.updatedElement()
                self.state = 2857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2853
                    self.match(frameQLParser.COMMA)
                    self.state = 2854
                    self.updatedElement()
                    self.state = 2859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts

        def REPLACE(self):
            return self.getToken(frameQLParser.REPLACE, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(frameQLParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LR_BRACKET)
            else:
                return self.getToken(frameQLParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.RR_BRACKET)
            else:
                return self.getToken(frameQLParser.RR_BRACKET, i)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UpdatedElementContext,i)


        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidListContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(frameQLParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(frameQLParser.DELAYED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)




    def replaceStatement(self):

        localctx = frameQLParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2862
            self.match(frameQLParser.REPLACE)
            self.state = 2864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DELAYED or _la==frameQLParser.LOW_PRIORITY:
                self.state = 2863
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DELAYED or _la==frameQLParser.LOW_PRIORITY):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.INTO:
                self.state = 2866
                self.match(frameQLParser.INTO)


            self.state = 2869
            self.tableName()
            self.state = 2875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.PARTITION:
                self.state = 2870
                self.match(frameQLParser.PARTITION)
                self.state = 2871
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2872
                localctx.partitions = self.uidList()
                self.state = 2873
                self.match(frameQLParser.RR_BRACKET)


            self.state = 2893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.SELECT, frameQLParser.VALUES, frameQLParser.VALUE, frameQLParser.LR_BRACKET]:
                self.state = 2881
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
                if la_ == 1:
                    self.state = 2877
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 2878
                    localctx.columns = self.uidList()
                    self.state = 2879
                    self.match(frameQLParser.RR_BRACKET)


                self.state = 2883
                self.insertStatementValue()
                pass
            elif token in [frameQLParser.SET]:
                self.state = 2884
                self.match(frameQLParser.SET)
                self.state = 2885
                localctx.setFirst = self.updatedElement()
                self.state = 2890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2886
                    self.match(frameQLParser.COMMA)
                    self.state = 2887
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 2892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(frameQLParser.QuerySpecificationNointoContext,0)

        def unionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(frameQLParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(frameQLParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(frameQLParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(frameQLParser.LockClauseContext,0)

        def querySpecification(self):
            return self.getTypedRuleContext(frameQLParser.QuerySpecificationContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(frameQLParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(frameQLParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(frameQLParser.QueryExpressionNointoContext,0)

        def unionParenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(frameQLParser.UNION, 0)
        def queryExpression(self):
            return self.getTypedRuleContext(frameQLParser.QueryExpressionContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(frameQLParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(frameQLParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(frameQLParser.LockClauseContext,0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(frameQLParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesisSelect" ):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesisSelect" ):
                listener.exitUnionParenthesisSelect(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(frameQLParser.QuerySpecificationContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(frameQLParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(frameQLParser.QueryExpressionContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(frameQLParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisSelect" ):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisSelect" ):
                listener.exitParenthesisSelect(self)



    def selectStatement(self):

        localctx = frameQLParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 2950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2895
                self.querySpecification()
                self.state = 2897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR or _la==frameQLParser.LOCK:
                    self.state = 2896
                    self.lockClause()


                pass

            elif la_ == 2:
                localctx = frameQLParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2899
                self.queryExpression()
                self.state = 2901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR or _la==frameQLParser.LOCK:
                    self.state = 2900
                    self.lockClause()


                pass

            elif la_ == 3:
                localctx = frameQLParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2903
                self.querySpecificationNointo()
                self.state = 2905 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2904
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2907 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

                self.state = 2917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.UNION:
                    self.state = 2909
                    self.match(frameQLParser.UNION)
                    self.state = 2911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.ALL or _la==frameQLParser.DISTINCT:
                        self.state = 2910
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==frameQLParser.ALL or _la==frameQLParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2915
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [frameQLParser.SELECT]:
                        self.state = 2913
                        self.querySpecification()
                        pass
                    elif token in [frameQLParser.LR_BRACKET]:
                        self.state = 2914
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 2920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ORDER:
                    self.state = 2919
                    self.orderByClause()


                self.state = 2923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LIMIT:
                    self.state = 2922
                    self.limitClause()


                self.state = 2926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR or _la==frameQLParser.LOCK:
                    self.state = 2925
                    self.lockClause()


                pass

            elif la_ == 4:
                localctx = frameQLParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2928
                self.queryExpressionNointo()
                self.state = 2930 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2929
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2932 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

                self.state = 2939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.UNION:
                    self.state = 2934
                    self.match(frameQLParser.UNION)
                    self.state = 2936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.ALL or _la==frameQLParser.DISTINCT:
                        self.state = 2935
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==frameQLParser.ALL or _la==frameQLParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2938
                    self.queryExpression()


                self.state = 2942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ORDER:
                    self.state = 2941
                    self.orderByClause()


                self.state = 2945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LIMIT:
                    self.state = 2944
                    self.limitClause()


                self.state = 2948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR or _la==frameQLParser.LOCK:
                    self.state = 2947
                    self.lockClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(frameQLParser.SingleUpdateStatementContext,0)


        def multipleUpdateStatement(self):
            return self.getTypedRuleContext(frameQLParser.MultipleUpdateStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = frameQLParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_updateStatement)
        try:
            self.state = 2954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2952
                self.singleUpdateStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2953
                self.multipleUpdateStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LR_BRACKET)
            else:
                return self.getToken(frameQLParser.LR_BRACKET, i)

        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionsWithDefaultsContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.RR_BRACKET)
            else:
                return self.getToken(frameQLParser.RR_BRACKET, i)

        def VALUES(self):
            return self.getToken(frameQLParser.VALUES, 0)

        def VALUE(self):
            return self.getToken(frameQLParser.VALUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)




    def insertStatementValue(self):

        localctx = frameQLParser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 2971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.SELECT, frameQLParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2956
                self.selectStatement()
                pass
            elif token in [frameQLParser.VALUES, frameQLParser.VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2957
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.VALUES or _la==frameQLParser.VALUE):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2958
                self.match(frameQLParser.LR_BRACKET)
                self.state = 2959
                self.expressionsWithDefaults()
                self.state = 2960
                self.match(frameQLParser.RR_BRACKET)
                self.state = 2968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 2961
                    self.match(frameQLParser.COMMA)
                    self.state = 2962
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 2963
                    self.expressionsWithDefaults()
                    self.state = 2964
                    self.match(frameQLParser.RR_BRACKET)
                    self.state = 2970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatedElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(frameQLParser.FullColumnNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)




    def updatedElement(self):

        localctx = frameQLParser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2973
            self.fullColumnName()
            self.state = 2974
            self.match(frameQLParser.EQUAL_SYMBOL)
            self.state = 2977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.CASE, frameQLParser.CAST, frameQLParser.CONVERT, frameQLParser.CURRENT_USER, frameQLParser.DATABASE, frameQLParser.EXISTS, frameQLParser.FALSE, frameQLParser.IF, frameQLParser.INSERT, frameQLParser.INTERVAL, frameQLParser.LEFT, frameQLParser.NOT, frameQLParser.NULL_LITERAL, frameQLParser.REPLACE, frameQLParser.RIGHT, frameQLParser.TRUE, frameQLParser.VALUES, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.CHAR, frameQLParser.BINARY, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.AVG, frameQLParser.BIT_AND, frameQLParser.BIT_OR, frameQLParser.BIT_XOR, frameQLParser.COUNT, frameQLParser.GROUP_CONCAT, frameQLParser.MAX, frameQLParser.MIN, frameQLParser.STD, frameQLParser.STDDEV, frameQLParser.STDDEV_POP, frameQLParser.STDDEV_SAMP, frameQLParser.SUM, frameQLParser.VAR_POP, frameQLParser.VAR_SAMP, frameQLParser.VARIANCE, frameQLParser.FCOUNT, frameQLParser.CURRENT_DATE, frameQLParser.CURRENT_TIME, frameQLParser.CURRENT_TIMESTAMP, frameQLParser.LOCALTIME, frameQLParser.CURDATE, frameQLParser.CURTIME, frameQLParser.DATE_ADD, frameQLParser.DATE_SUB, frameQLParser.EXTRACT, frameQLParser.LOCALTIMESTAMP, frameQLParser.NOW, frameQLParser.POSITION, frameQLParser.SUBSTR, frameQLParser.SUBSTRING, frameQLParser.SYSDATE, frameQLParser.TRIM, frameQLParser.UTC_DATE, frameQLParser.UTC_TIME, frameQLParser.UTC_TIMESTAMP, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.PLUS, frameQLParser.MINUS, frameQLParser.EXCLAMATION_SYMBOL, frameQLParser.BIT_NOT_OP, frameQLParser.LR_BRACKET, frameQLParser.ZERO_DECIMAL, frameQLParser.ONE_DECIMAL, frameQLParser.TWO_DECIMAL, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.START_NATIONAL_STRING_LITERAL, frameQLParser.STRING_LITERAL, frameQLParser.DECIMAL_LITERAL, frameQLParser.HEXADECIMAL_LITERAL, frameQLParser.REAL_LITERAL, frameQLParser.NULL_SPEC_LITERAL, frameQLParser.BIT_STRING, frameQLParser.STRING_CHARSET_NAME, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID, frameQLParser.LOCAL_ID, frameQLParser.GLOBAL_ID]:
                self.state = 2975
                self.expression(0)
                pass
            elif token in [frameQLParser.DEFAULT]:
                self.state = 2976
                self.match(frameQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def LOCAL_ID(self):
            return self.getToken(frameQLParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_assignmentField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentField" ):
                listener.enterAssignmentField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentField" ):
                listener.exitAssignmentField(self)




    def assignmentField(self):

        localctx = frameQLParser.AssignmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_assignmentField)
        try:
            self.state = 2981
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2979
                self.uid()
                pass
            elif token in [frameQLParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2980
                self.match(frameQLParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(frameQLParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(frameQLParser.LOCK, 0)

        def IN(self):
            return self.getToken(frameQLParser.IN, 0)

        def SHARE(self):
            return self.getToken(frameQLParser.SHARE, 0)

        def MODE(self):
            return self.getToken(frameQLParser.MODE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_lockClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockClause" ):
                listener.enterLockClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockClause" ):
                listener.exitLockClause(self)




    def lockClause(self):

        localctx = frameQLParser.LockClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_lockClause)
        try:
            self.state = 2989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2983
                self.match(frameQLParser.FOR)
                self.state = 2984
                self.match(frameQLParser.UPDATE)
                pass
            elif token in [frameQLParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2985
                self.match(frameQLParser.LOCK)
                self.state = 2986
                self.match(frameQLParser.IN)
                self.state = 2987
                self.match(frameQLParser.SHARE)
                self.state = 2988
                self.match(frameQLParser.MODE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(frameQLParser.DELETE, 0)

        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def QUICK(self):
            return self.getToken(frameQLParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(frameQLParser.IGNORE, 0)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(frameQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(frameQLParser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(frameQLParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(frameQLParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)




    def singleDeleteStatement(self):

        localctx = frameQLParser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2991
            self.match(frameQLParser.DELETE)
            self.state = 2993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LOW_PRIORITY:
                self.state = 2992
                localctx.priority = self.match(frameQLParser.LOW_PRIORITY)


            self.state = 2996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.QUICK:
                self.state = 2995
                self.match(frameQLParser.QUICK)


            self.state = 2999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE:
                self.state = 2998
                self.match(frameQLParser.IGNORE)


            self.state = 3001
            self.match(frameQLParser.FROM)
            self.state = 3002
            self.tableName()
            self.state = 3008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.PARTITION:
                self.state = 3003
                self.match(frameQLParser.PARTITION)
                self.state = 3004
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3005
                self.uidList()
                self.state = 3006
                self.match(frameQLParser.RR_BRACKET)


            self.state = 3012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WHERE:
                self.state = 3010
                self.match(frameQLParser.WHERE)
                self.state = 3011
                self.expression(0)


            self.state = 3015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ORDER:
                self.state = 3014
                self.orderByClause()


            self.state = 3019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LIMIT:
                self.state = 3017
                self.match(frameQLParser.LIMIT)
                self.state = 3018
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(frameQLParser.DELETE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableNameContext,i)


        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(frameQLParser.TableSourcesContext,0)


        def USING(self):
            return self.getToken(frameQLParser.USING, 0)

        def QUICK(self):
            return self.getToken(frameQLParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(frameQLParser.IGNORE, 0)

        def WHERE(self):
            return self.getToken(frameQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(frameQLParser.LOW_PRIORITY, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.DOT)
            else:
                return self.getToken(frameQLParser.DOT, i)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.STAR)
            else:
                return self.getToken(frameQLParser.STAR, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_multipleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleDeleteStatement" ):
                listener.enterMultipleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleDeleteStatement" ):
                listener.exitMultipleDeleteStatement(self)




    def multipleDeleteStatement(self):

        localctx = frameQLParser.MultipleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_multipleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3021
            self.match(frameQLParser.DELETE)
            self.state = 3023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LOW_PRIORITY:
                self.state = 3022
                localctx.priority = self.match(frameQLParser.LOW_PRIORITY)


            self.state = 3026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.state = 3025
                self.match(frameQLParser.QUICK)


            self.state = 3029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE:
                self.state = 3028
                self.match(frameQLParser.IGNORE)


            self.state = 3070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                self.state = 3031
                self.tableName()
                self.state = 3034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DOT:
                    self.state = 3032
                    self.match(frameQLParser.DOT)
                    self.state = 3033
                    self.match(frameQLParser.STAR)


                self.state = 3044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 3036
                    self.match(frameQLParser.COMMA)
                    self.state = 3037
                    self.tableName()
                    self.state = 3040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DOT:
                        self.state = 3038
                        self.match(frameQLParser.DOT)
                        self.state = 3039
                        self.match(frameQLParser.STAR)


                    self.state = 3046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3047
                self.match(frameQLParser.FROM)
                self.state = 3048
                self.tableSources()
                pass
            elif token in [frameQLParser.FROM]:
                self.state = 3050
                self.match(frameQLParser.FROM)
                self.state = 3051
                self.tableName()
                self.state = 3054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DOT:
                    self.state = 3052
                    self.match(frameQLParser.DOT)
                    self.state = 3053
                    self.match(frameQLParser.STAR)


                self.state = 3064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 3056
                    self.match(frameQLParser.COMMA)
                    self.state = 3057
                    self.tableName()
                    self.state = 3060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.DOT:
                        self.state = 3058
                        self.match(frameQLParser.DOT)
                        self.state = 3059
                        self.match(frameQLParser.STAR)


                    self.state = 3066
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3067
                self.match(frameQLParser.USING)
                self.state = 3068
                self.tableSources()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WHERE:
                self.state = 3072
                self.match(frameQLParser.WHERE)
                self.state = 3073
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerOpenStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(frameQLParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def OPEN(self):
            return self.getToken(frameQLParser.OPEN, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_handlerOpenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerOpenStatement" ):
                listener.enterHandlerOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerOpenStatement" ):
                listener.exitHandlerOpenStatement(self)




    def handlerOpenStatement(self):

        localctx = frameQLParser.HandlerOpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_handlerOpenStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3076
            self.match(frameQLParser.HANDLER)
            self.state = 3077
            self.tableName()
            self.state = 3078
            self.match(frameQLParser.OPEN)
            self.state = 3083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.AS or _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 3080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.AS:
                    self.state = 3079
                    self.match(frameQLParser.AS)


                self.state = 3082
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadIndexStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # UidContext
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(frameQLParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def READ(self):
            return self.getToken(frameQLParser.READ, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(frameQLParser.ComparisonOperatorContext,0)


        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(frameQLParser.ConstantsContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(frameQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(frameQLParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def FIRST(self):
            return self.getToken(frameQLParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(frameQLParser.NEXT, 0)

        def PREV(self):
            return self.getToken(frameQLParser.PREV, 0)

        def LAST(self):
            return self.getToken(frameQLParser.LAST, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_handlerReadIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadIndexStatement" ):
                listener.enterHandlerReadIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadIndexStatement" ):
                listener.exitHandlerReadIndexStatement(self)




    def handlerReadIndexStatement(self):

        localctx = frameQLParser.HandlerReadIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_handlerReadIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3085
            self.match(frameQLParser.HANDLER)
            self.state = 3086
            self.tableName()
            self.state = 3087
            self.match(frameQLParser.READ)
            self.state = 3088
            localctx.index = self.uid()
            self.state = 3095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.EQUAL_SYMBOL, frameQLParser.GREATER_SYMBOL, frameQLParser.LESS_SYMBOL, frameQLParser.EXCLAMATION_SYMBOL]:
                self.state = 3089
                self.comparisonOperator()
                self.state = 3090
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3091
                self.constants()
                self.state = 3092
                self.match(frameQLParser.RR_BRACKET)
                pass
            elif token in [frameQLParser.FIRST, frameQLParser.LAST, frameQLParser.NEXT, frameQLParser.PREV]:
                self.state = 3094
                localctx.moveOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FIRST or _la==frameQLParser.LAST or _la==frameQLParser.NEXT or _la==frameQLParser.PREV):
                    localctx.moveOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WHERE:
                self.state = 3097
                self.match(frameQLParser.WHERE)
                self.state = 3098
                self.expression(0)


            self.state = 3103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LIMIT:
                self.state = 3101
                self.match(frameQLParser.LIMIT)
                self.state = 3102
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(frameQLParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def READ(self):
            return self.getToken(frameQLParser.READ, 0)

        def FIRST(self):
            return self.getToken(frameQLParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(frameQLParser.NEXT, 0)

        def WHERE(self):
            return self.getToken(frameQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(frameQLParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_handlerReadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadStatement" ):
                listener.enterHandlerReadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadStatement" ):
                listener.exitHandlerReadStatement(self)




    def handlerReadStatement(self):

        localctx = frameQLParser.HandlerReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_handlerReadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3105
            self.match(frameQLParser.HANDLER)
            self.state = 3106
            self.tableName()
            self.state = 3107
            self.match(frameQLParser.READ)
            self.state = 3108
            localctx.moveOrder = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.FIRST or _la==frameQLParser.NEXT):
                localctx.moveOrder = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WHERE:
                self.state = 3109
                self.match(frameQLParser.WHERE)
                self.state = 3110
                self.expression(0)


            self.state = 3115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LIMIT:
                self.state = 3113
                self.match(frameQLParser.LIMIT)
                self.state = 3114
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerCloseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(frameQLParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def CLOSE(self):
            return self.getToken(frameQLParser.CLOSE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_handlerCloseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerCloseStatement" ):
                listener.enterHandlerCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerCloseStatement" ):
                listener.exitHandlerCloseStatement(self)




    def handlerCloseStatement(self):

        localctx = frameQLParser.HandlerCloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_handlerCloseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3117
            self.match(frameQLParser.HANDLER)
            self.state = 3118
            self.tableName()
            self.state = 3119
            self.match(frameQLParser.CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleUpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(frameQLParser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(frameQLParser.IGNORE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def WHERE(self):
            return self.getToken(frameQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(frameQLParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(frameQLParser.LimitClauseContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(frameQLParser.LOW_PRIORITY, 0)

        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_singleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleUpdateStatement" ):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleUpdateStatement" ):
                listener.exitSingleUpdateStatement(self)




    def singleUpdateStatement(self):

        localctx = frameQLParser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3121
            self.match(frameQLParser.UPDATE)
            self.state = 3123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LOW_PRIORITY:
                self.state = 3122
                localctx.priority = self.match(frameQLParser.LOW_PRIORITY)


            self.state = 3126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE:
                self.state = 3125
                self.match(frameQLParser.IGNORE)


            self.state = 3128
            self.tableName()
            self.state = 3133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.AS or _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 3130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.AS:
                    self.state = 3129
                    self.match(frameQLParser.AS)


                self.state = 3132
                self.uid()


            self.state = 3135
            self.match(frameQLParser.SET)
            self.state = 3136
            self.updatedElement()
            self.state = 3141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 3137
                self.match(frameQLParser.COMMA)
                self.state = 3138
                self.updatedElement()
                self.state = 3143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WHERE:
                self.state = 3144
                self.match(frameQLParser.WHERE)
                self.state = 3145
                self.expression(0)


            self.state = 3149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ORDER:
                self.state = 3148
                self.orderByClause()


            self.state = 3152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LIMIT:
                self.state = 3151
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleUpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(frameQLParser.UPDATE, 0)

        def tableSources(self):
            return self.getTypedRuleContext(frameQLParser.TableSourcesContext,0)


        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(frameQLParser.IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def WHERE(self):
            return self.getToken(frameQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(frameQLParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_multipleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleUpdateStatement" ):
                listener.enterMultipleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleUpdateStatement" ):
                listener.exitMultipleUpdateStatement(self)




    def multipleUpdateStatement(self):

        localctx = frameQLParser.MultipleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_multipleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3154
            self.match(frameQLParser.UPDATE)
            self.state = 3156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LOW_PRIORITY:
                self.state = 3155
                localctx.priority = self.match(frameQLParser.LOW_PRIORITY)


            self.state = 3159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE:
                self.state = 3158
                self.match(frameQLParser.IGNORE)


            self.state = 3161
            self.tableSources()
            self.state = 3162
            self.match(frameQLParser.SET)
            self.state = 3163
            self.updatedElement()
            self.state = 3168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 3164
                self.match(frameQLParser.COMMA)
                self.state = 3165
                self.updatedElement()
                self.state = 3170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WHERE:
                self.state = 3171
                self.match(frameQLParser.WHERE)
                self.state = 3172
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(frameQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(frameQLParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.OrderByExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = frameQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3175
            self.match(frameQLParser.ORDER)
            self.state = 3176
            self.match(frameQLParser.BY)
            self.state = 3177
            self.orderByExpression()
            self.state = 3182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 3178
                self.match(frameQLParser.COMMA)
                self.state = 3179
                self.orderByExpression()
                self.state = 3184
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(frameQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(frameQLParser.DESC, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)




    def orderByExpression(self):

        localctx = frameQLParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3185
            self.expression(0)
            self.state = 3187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ASC or _la==frameQLParser.DESC:
                self.state = 3186
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ASC or _la==frameQLParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)




    def tableSources(self):

        localctx = frameQLParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3189
            self.tableSource()
            self.state = 3194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 3190
                self.match(frameQLParser.COMMA)
                self.state = 3191
                self.tableSource()
                self.state = 3196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceNestedContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(frameQLParser.TableSourceItemContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(frameQLParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceNested" ):
                listener.enterTableSourceNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceNested" ):
                listener.exitTableSourceNested(self)


    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(frameQLParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(frameQLParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)



    def tableSource(self):

        localctx = frameQLParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 3214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.TableSourceBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3197
                self.tableSourceItem()
                self.state = 3201
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,443,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3198
                        self.joinPart() 
                    self.state = 3203
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,443,self._ctx)

                pass

            elif la_ == 2:
                localctx = frameQLParser.TableSourceNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3204
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3205
                self.tableSourceItem()
                self.state = 3209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 33)) & ~0x3f) == 0 and ((1 << (_la - 33)) & ((1 << (frameQLParser.CROSS - 33)) | (1 << (frameQLParser.INNER - 33)) | (1 << (frameQLParser.JOIN - 33)) | (1 << (frameQLParser.LEFT - 33)))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (frameQLParser.NATURAL - 100)) | (1 << (frameQLParser.RIGHT - 100)) | (1 << (frameQLParser.STRAIGHT_JOIN - 100)))) != 0):
                    self.state = 3206
                    self.joinPart()
                    self.state = 3211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3212
                self.match(frameQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableSourceItemContext
            super().__init__(parser)
            self.parenthesisSubquery = None # SelectStatementContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableSourceItemContext
            super().__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def indexHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexHintContext,i)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def AS(self):
            return self.getToken(frameQLParser.AS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def tableSources(self):
            return self.getTypedRuleContext(frameQLParser.TableSourcesContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourcesItem" ):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourcesItem" ):
                listener.exitTableSourcesItem(self)



    def tableSourceItem(self):

        localctx = frameQLParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 3256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3216
                self.tableName()
                self.state = 3222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.PARTITION:
                    self.state = 3217
                    self.match(frameQLParser.PARTITION)
                    self.state = 3218
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 3219
                    self.uidList()
                    self.state = 3220
                    self.match(frameQLParser.RR_BRACKET)


                self.state = 3228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
                if la_ == 1:
                    self.state = 3225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.AS:
                        self.state = 3224
                        self.match(frameQLParser.AS)


                    self.state = 3227
                    localctx.alias = self.uid()


                self.state = 3238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FORCE or _la==frameQLParser.IGNORE or _la==frameQLParser.USE:
                    self.state = 3230
                    self.indexHint()
                    self.state = 3235
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,449,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3231
                            self.match(frameQLParser.COMMA)
                            self.state = 3232
                            self.indexHint() 
                        self.state = 3237
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,449,self._ctx)



                pass

            elif la_ == 2:
                localctx = frameQLParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
                if la_ == 1:
                    self.state = 3240
                    self.selectStatement()
                    pass

                elif la_ == 2:
                    self.state = 3241
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 3242
                    localctx.parenthesisSubquery = self.selectStatement()
                    self.state = 3243
                    self.match(frameQLParser.RR_BRACKET)
                    pass


                self.state = 3248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.AS:
                    self.state = 3247
                    self.match(frameQLParser.AS)


                self.state = 3250
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = frameQLParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3252
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3253
                self.tableSources()
                self.state = 3254
                self.match(frameQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexHintAction = None # Token
            self.keyFormat = None # Token

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def USE(self):
            return self.getToken(frameQLParser.USE, 0)

        def IGNORE(self):
            return self.getToken(frameQLParser.IGNORE, 0)

        def FORCE(self):
            return self.getToken(frameQLParser.FORCE, 0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)

        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def indexHintType(self):
            return self.getTypedRuleContext(frameQLParser.IndexHintTypeContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)




    def indexHint(self):

        localctx = frameQLParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3258
            localctx.indexHintAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.FORCE or _la==frameQLParser.IGNORE or _la==frameQLParser.USE):
                localctx.indexHintAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3259
            localctx.keyFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                localctx.keyFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.FOR:
                self.state = 3260
                self.match(frameQLParser.FOR)
                self.state = 3261
                self.indexHintType()


            self.state = 3264
            self.match(frameQLParser.LR_BRACKET)
            self.state = 3265
            self.uidList()
            self.state = 3266
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(frameQLParser.JOIN, 0)

        def ORDER(self):
            return self.getToken(frameQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(frameQLParser.BY, 0)

        def GROUP(self):
            return self.getToken(frameQLParser.GROUP, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)




    def indexHintType(self):

        localctx = frameQLParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_indexHintType)
        try:
            self.state = 3273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3268
                self.match(frameQLParser.JOIN)
                pass
            elif token in [frameQLParser.ORDER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3269
                self.match(frameQLParser.ORDER)
                self.state = 3270
                self.match(frameQLParser.BY)
                pass
            elif token in [frameQLParser.GROUP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3271
                self.match(frameQLParser.GROUP)
                self.state = 3272
                self.match(frameQLParser.BY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(frameQLParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(frameQLParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(frameQLParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(frameQLParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def INNER(self):
            return self.getToken(frameQLParser.INNER, 0)
        def CROSS(self):
            return self.getToken(frameQLParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(frameQLParser.NATURAL, 0)
        def JOIN(self):
            return self.getToken(frameQLParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(frameQLParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(frameQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(frameQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(frameQLParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoin" ):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoin" ):
                listener.exitNaturalJoin(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(frameQLParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(frameQLParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(frameQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(frameQLParser.RIGHT, 0)
        def ON(self):
            return self.getToken(frameQLParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(frameQLParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def OUTER(self):
            return self.getToken(frameQLParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoin" ):
                listener.enterOuterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoin" ):
                listener.exitOuterJoin(self)


    class StraightJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRAIGHT_JOIN(self):
            return self.getToken(frameQLParser.STRAIGHT_JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(frameQLParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(frameQLParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStraightJoin" ):
                listener.enterStraightJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStraightJoin" ):
                listener.exitStraightJoin(self)



    def joinPart(self):

        localctx = frameQLParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 3319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.CROSS, frameQLParser.INNER, frameQLParser.JOIN]:
                localctx = frameQLParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CROSS or _la==frameQLParser.INNER:
                    self.state = 3275
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.CROSS or _la==frameQLParser.INNER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3278
                self.match(frameQLParser.JOIN)
                self.state = 3279
                self.tableSourceItem()
                self.state = 3287
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 3280
                    self.match(frameQLParser.ON)
                    self.state = 3281
                    self.expression(0)

                elif la_ == 2:
                    self.state = 3282
                    self.match(frameQLParser.USING)
                    self.state = 3283
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 3284
                    self.uidList()
                    self.state = 3285
                    self.match(frameQLParser.RR_BRACKET)


                pass
            elif token in [frameQLParser.STRAIGHT_JOIN]:
                localctx = frameQLParser.StraightJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3289
                self.match(frameQLParser.STRAIGHT_JOIN)
                self.state = 3290
                self.tableSourceItem()
                self.state = 3293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 3291
                    self.match(frameQLParser.ON)
                    self.state = 3292
                    self.expression(0)


                pass
            elif token in [frameQLParser.LEFT, frameQLParser.RIGHT]:
                localctx = frameQLParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3295
                _la = self._input.LA(1)
                if not(_la==frameQLParser.LEFT or _la==frameQLParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.OUTER:
                    self.state = 3296
                    self.match(frameQLParser.OUTER)


                self.state = 3299
                self.match(frameQLParser.JOIN)
                self.state = 3300
                self.tableSourceItem()
                self.state = 3308
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.ON]:
                    self.state = 3301
                    self.match(frameQLParser.ON)
                    self.state = 3302
                    self.expression(0)
                    pass
                elif token in [frameQLParser.USING]:
                    self.state = 3303
                    self.match(frameQLParser.USING)
                    self.state = 3304
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 3305
                    self.uidList()
                    self.state = 3306
                    self.match(frameQLParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [frameQLParser.NATURAL]:
                localctx = frameQLParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3310
                self.match(frameQLParser.NATURAL)
                self.state = 3315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT:
                    self.state = 3311
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.LEFT or _la==frameQLParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.OUTER:
                        self.state = 3312
                        self.match(frameQLParser.OUTER)




                self.state = 3317
                self.match(frameQLParser.JOIN)
                self.state = 3318
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(frameQLParser.QuerySpecificationContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(frameQLParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = frameQLParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_queryExpression)
        try:
            self.state = 3329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3321
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3322
                self.querySpecification()
                self.state = 3323
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3325
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3326
                self.queryExpression()
                self.state = 3327
                self.match(frameQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionNointoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(frameQLParser.QuerySpecificationNointoContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(frameQLParser.QueryExpressionNointoContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_queryExpressionNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionNointo" ):
                listener.enterQueryExpressionNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionNointo" ):
                listener.exitQueryExpressionNointo(self)




    def queryExpressionNointo(self):

        localctx = frameQLParser.QueryExpressionNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_queryExpressionNointo)
        try:
            self.state = 3339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3331
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3332
                self.querySpecificationNointo()
                self.state = 3333
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3335
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3336
                self.queryExpressionNointo()
                self.state = 3337
                self.match(frameQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(frameQLParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(frameQLParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SelectSpecContext,i)


        def selectIntoExpression(self):
            return self.getTypedRuleContext(frameQLParser.SelectIntoExpressionContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(frameQLParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(frameQLParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(frameQLParser.LimitClauseContext,0)


        def errorTolerenceExpression(self):
            return self.getTypedRuleContext(frameQLParser.ErrorTolerenceExpressionContext,0)


        def confLevelExpression(self):
            return self.getTypedRuleContext(frameQLParser.ConfLevelExpressionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = frameQLParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 3398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3341
                self.match(frameQLParser.SELECT)
                self.state = 3345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,466,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3342
                        self.selectSpec() 
                    self.state = 3347
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,466,self._ctx)

                self.state = 3348
                self.selectElements()
                self.state = 3350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.INTO:
                    self.state = 3349
                    self.selectIntoExpression()


                self.state = 3353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FROM:
                    self.state = 3352
                    self.fromClause()


                self.state = 3356
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
                if la_ == 1:
                    self.state = 3355
                    self.orderByClause()


                self.state = 3359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
                if la_ == 1:
                    self.state = 3358
                    self.limitClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3361
                self.match(frameQLParser.SELECT)
                self.state = 3365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,471,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3362
                        self.selectSpec() 
                    self.state = 3367
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,471,self._ctx)

                self.state = 3368
                self.selectElements()
                self.state = 3370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FROM:
                    self.state = 3369
                    self.fromClause()


                self.state = 3373
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 3372
                    self.orderByClause()


                self.state = 3376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
                if la_ == 1:
                    self.state = 3375
                    self.limitClause()


                self.state = 3379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.INTO:
                    self.state = 3378
                    self.selectIntoExpression()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3381
                self.match(frameQLParser.SELECT)
                self.state = 3385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,476,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3382
                        self.selectSpec() 
                    self.state = 3387
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,476,self._ctx)

                self.state = 3388
                self.selectElements()
                self.state = 3390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FROM:
                    self.state = 3389
                    self.fromClause()


                self.state = 3393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ERRORBOUND:
                    self.state = 3392
                    self.errorTolerenceExpression()


                self.state = 3396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CONFLEVEL:
                    self.state = 3395
                    self.confLevelExpression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationNointoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(frameQLParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(frameQLParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(frameQLParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(frameQLParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(frameQLParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_querySpecificationNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecificationNointo" ):
                listener.enterQuerySpecificationNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecificationNointo" ):
                listener.exitQuerySpecificationNointo(self)




    def querySpecificationNointo(self):

        localctx = frameQLParser.QuerySpecificationNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_querySpecificationNointo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3400
            self.match(frameQLParser.SELECT)
            self.state = 3404
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,481,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3401
                    self.selectSpec() 
                self.state = 3406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,481,self._ctx)

            self.state = 3407
            self.selectElements()
            self.state = 3409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.FROM:
                self.state = 3408
                self.fromClause()


            self.state = 3412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
            if la_ == 1:
                self.state = 3411
                self.orderByClause()


            self.state = 3415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 3414
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionParenthesisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(frameQLParser.UNION, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(frameQLParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(frameQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_unionParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesis" ):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesis" ):
                listener.exitUnionParenthesis(self)




    def unionParenthesis(self):

        localctx = frameQLParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3417
            self.match(frameQLParser.UNION)
            self.state = 3419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ALL or _la==frameQLParser.DISTINCT:
                self.state = 3418
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ALL or _la==frameQLParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3421
            self.queryExpressionNointo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(frameQLParser.UNION, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(frameQLParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(frameQLParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(frameQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_unionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionStatement" ):
                listener.enterUnionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionStatement" ):
                listener.exitUnionStatement(self)




    def unionStatement(self):

        localctx = frameQLParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3423
            self.match(frameQLParser.UNION)
            self.state = 3425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ALL or _la==frameQLParser.DISTINCT:
                self.state = 3424
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ALL or _la==frameQLParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.SELECT]:
                self.state = 3427
                self.querySpecificationNointo()
                pass
            elif token in [frameQLParser.LR_BRACKET]:
                self.state = 3428
                self.queryExpressionNointo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(frameQLParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(frameQLParser.DISTINCTROW, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(frameQLParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(frameQLParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(frameQLParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(frameQLParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(frameQLParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(frameQLParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(frameQLParser.SQL_NO_CACHE, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(frameQLParser.SQL_CALC_FOUND_ROWS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_selectSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSpec" ):
                listener.enterSelectSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSpec" ):
                listener.exitSelectSpec(self)




    def selectSpec(self):

        localctx = frameQLParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.state = 3439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ALL, frameQLParser.DISTINCT, frameQLParser.DISTINCTROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3431
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << frameQLParser.ALL) | (1 << frameQLParser.DISTINCT) | (1 << frameQLParser.DISTINCTROW))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.HIGH_PRIORITY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3432
                self.match(frameQLParser.HIGH_PRIORITY)
                pass
            elif token in [frameQLParser.STRAIGHT_JOIN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3433
                self.match(frameQLParser.STRAIGHT_JOIN)
                pass
            elif token in [frameQLParser.SQL_SMALL_RESULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3434
                self.match(frameQLParser.SQL_SMALL_RESULT)
                pass
            elif token in [frameQLParser.SQL_BIG_RESULT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3435
                self.match(frameQLParser.SQL_BIG_RESULT)
                pass
            elif token in [frameQLParser.SQL_BUFFER_RESULT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3436
                self.match(frameQLParser.SQL_BUFFER_RESULT)
                pass
            elif token in [frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3437
                _la = self._input.LA(1)
                if not(_la==frameQLParser.SQL_CACHE or _la==frameQLParser.SQL_NO_CACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.SQL_CALC_FOUND_ROWS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3438
                self.match(frameQLParser.SQL_CALC_FOUND_ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SelectElementContext,i)


        def STAR(self):
            return self.getToken(frameQLParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)




    def selectElements(self):

        localctx = frameQLParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.STAR]:
                self.state = 3441
                localctx.star = self.match(frameQLParser.STAR)
                pass
            elif token in [frameQLParser.CASE, frameQLParser.CAST, frameQLParser.CONVERT, frameQLParser.CURRENT_USER, frameQLParser.DATABASE, frameQLParser.EXISTS, frameQLParser.FALSE, frameQLParser.IF, frameQLParser.INSERT, frameQLParser.INTERVAL, frameQLParser.LEFT, frameQLParser.NOT, frameQLParser.NULL_LITERAL, frameQLParser.REPLACE, frameQLParser.RIGHT, frameQLParser.TRUE, frameQLParser.VALUES, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.CHAR, frameQLParser.BINARY, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.AVG, frameQLParser.BIT_AND, frameQLParser.BIT_OR, frameQLParser.BIT_XOR, frameQLParser.COUNT, frameQLParser.GROUP_CONCAT, frameQLParser.MAX, frameQLParser.MIN, frameQLParser.STD, frameQLParser.STDDEV, frameQLParser.STDDEV_POP, frameQLParser.STDDEV_SAMP, frameQLParser.SUM, frameQLParser.VAR_POP, frameQLParser.VAR_SAMP, frameQLParser.VARIANCE, frameQLParser.FCOUNT, frameQLParser.CURRENT_DATE, frameQLParser.CURRENT_TIME, frameQLParser.CURRENT_TIMESTAMP, frameQLParser.LOCALTIME, frameQLParser.CURDATE, frameQLParser.CURTIME, frameQLParser.DATE_ADD, frameQLParser.DATE_SUB, frameQLParser.EXTRACT, frameQLParser.LOCALTIMESTAMP, frameQLParser.NOW, frameQLParser.POSITION, frameQLParser.SUBSTR, frameQLParser.SUBSTRING, frameQLParser.SYSDATE, frameQLParser.TRIM, frameQLParser.UTC_DATE, frameQLParser.UTC_TIME, frameQLParser.UTC_TIMESTAMP, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.PLUS, frameQLParser.MINUS, frameQLParser.EXCLAMATION_SYMBOL, frameQLParser.BIT_NOT_OP, frameQLParser.LR_BRACKET, frameQLParser.ZERO_DECIMAL, frameQLParser.ONE_DECIMAL, frameQLParser.TWO_DECIMAL, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.START_NATIONAL_STRING_LITERAL, frameQLParser.STRING_LITERAL, frameQLParser.DECIMAL_LITERAL, frameQLParser.HEXADECIMAL_LITERAL, frameQLParser.REAL_LITERAL, frameQLParser.NULL_SPEC_LITERAL, frameQLParser.BIT_STRING, frameQLParser.STRING_CHARSET_NAME, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID, frameQLParser.LOCAL_ID, frameQLParser.GLOBAL_ID]:
                self.state = 3442
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 3445
                self.match(frameQLParser.COMMA)
                self.state = 3446
                self.selectElement()
                self.state = 3451
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(frameQLParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(frameQLParser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(frameQLParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)

        def DOT(self):
            return self.getToken(frameQLParser.DOT, 0)
        def STAR(self):
            return self.getToken(frameQLParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(frameQLParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)



    def selectElement(self):

        localctx = frameQLParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 3481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3452
                self.fullId()
                self.state = 3453
                self.match(frameQLParser.DOT)
                self.state = 3454
                self.match(frameQLParser.STAR)
                pass

            elif la_ == 2:
                localctx = frameQLParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3456
                self.fullColumnName()
                self.state = 3461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
                if la_ == 1:
                    self.state = 3458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.AS:
                        self.state = 3457
                        self.match(frameQLParser.AS)


                    self.state = 3460
                    self.uid()


                pass

            elif la_ == 3:
                localctx = frameQLParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3463
                self.functionCall()
                self.state = 3468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
                if la_ == 1:
                    self.state = 3465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.AS:
                        self.state = 3464
                        self.match(frameQLParser.AS)


                    self.state = 3467
                    self.uid()


                pass

            elif la_ == 4:
                localctx = frameQLParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
                if la_ == 1:
                    self.state = 3470
                    self.match(frameQLParser.LOCAL_ID)
                    self.state = 3471
                    self.match(frameQLParser.VAR_ASSIGN)


                self.state = 3474
                self.expression(0)
                self.state = 3479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
                if la_ == 1:
                    self.state = 3476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.AS:
                        self.state = 3475
                        self.match(frameQLParser.AS)


                    self.state = 3478
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorTolerenceExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERRORBOUND(self):
            return self.getToken(frameQLParser.ERRORBOUND, 0)

        def REAL_LITERAL(self):
            return self.getToken(frameQLParser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_errorTolerenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorTolerenceExpression" ):
                listener.enterErrorTolerenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorTolerenceExpression" ):
                listener.exitErrorTolerenceExpression(self)




    def errorTolerenceExpression(self):

        localctx = frameQLParser.ErrorTolerenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_errorTolerenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3483
            self.match(frameQLParser.ERRORBOUND)
            self.state = 3484
            self.match(frameQLParser.REAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfLevelExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFLEVEL(self):
            return self.getToken(frameQLParser.CONFLEVEL, 0)

        def REAL_LITERAL(self):
            return self.getToken(frameQLParser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_confLevelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfLevelExpression" ):
                listener.enterConfLevelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfLevelExpression" ):
                listener.exitConfLevelExpression(self)




    def confLevelExpression(self):

        localctx = frameQLParser.ConfLevelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_confLevelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3486
            self.match(frameQLParser.CONFLEVEL)
            self.state = 3487
            self.match(frameQLParser.REAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectIntoExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_selectIntoExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectIntoVariablesContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)
        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(frameQLParser.AssignmentFieldContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoVariables" ):
                listener.enterSelectIntoVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoVariables" ):
                listener.exitSelectIntoVariables(self)


    class SelectIntoTextFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.filename = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)
        def OUTFILE(self):
            return self.getToken(frameQLParser.OUTFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(frameQLParser.SET, 0)
        def LINES(self):
            return self.getToken(frameQLParser.LINES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)

        def FIELDS(self):
            return self.getToken(frameQLParser.FIELDS, 0)
        def COLUMNS(self):
            return self.getToken(frameQLParser.COLUMNS, 0)
        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SelectFieldsIntoContext,i)

        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(frameQLParser.SelectLinesIntoContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoTextFile" ):
                listener.enterSelectIntoTextFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoTextFile" ):
                listener.exitSelectIntoTextFile(self)


    class SelectIntoDumpFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)
        def DUMPFILE(self):
            return self.getToken(frameQLParser.DUMPFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoDumpFile" ):
                listener.enterSelectIntoDumpFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoDumpFile" ):
                listener.exitSelectIntoDumpFile(self)



    def selectIntoExpression(self):

        localctx = frameQLParser.SelectIntoExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_selectIntoExpression)
        self._la = 0 # Token type
        try:
            self.state = 3525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.SelectIntoVariablesContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3489
                self.match(frameQLParser.INTO)
                self.state = 3490
                self.assignmentField()
                self.state = 3495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 3491
                    self.match(frameQLParser.COMMA)
                    self.state = 3492
                    self.assignmentField()
                    self.state = 3497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = frameQLParser.SelectIntoDumpFileContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3498
                self.match(frameQLParser.INTO)
                self.state = 3499
                self.match(frameQLParser.DUMPFILE)
                self.state = 3500
                self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = frameQLParser.SelectIntoTextFileContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3501
                self.match(frameQLParser.INTO)
                self.state = 3502
                self.match(frameQLParser.OUTFILE)
                self.state = 3503
                localctx.filename = self.match(frameQLParser.STRING_LITERAL)
                self.state = 3507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CHARACTER:
                    self.state = 3504
                    self.match(frameQLParser.CHARACTER)
                    self.state = 3505
                    self.match(frameQLParser.SET)
                    self.state = 3506
                    localctx.charset = self.charsetName()


                self.state = 3515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
                if la_ == 1:
                    self.state = 3509
                    localctx.fieldsFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.COLUMNS or _la==frameQLParser.FIELDS):
                        localctx.fieldsFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3511 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3510
                        self.selectFieldsInto()
                        self.state = 3513 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==frameQLParser.ENCLOSED or _la==frameQLParser.ESCAPED or _la==frameQLParser.OPTIONALLY or _la==frameQLParser.TERMINATED):
                            break



                self.state = 3523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LINES:
                    self.state = 3517
                    self.match(frameQLParser.LINES)
                    self.state = 3519 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3518
                        self.selectLinesInto()
                        self.state = 3521 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==frameQLParser.STARTING or _la==frameQLParser.TERMINATED):
                            break



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectFieldsIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token

        def TERMINATED(self):
            return self.getToken(frameQLParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(frameQLParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def ENCLOSED(self):
            return self.getToken(frameQLParser.ENCLOSED, 0)

        def OPTIONALLY(self):
            return self.getToken(frameQLParser.OPTIONALLY, 0)

        def ESCAPED(self):
            return self.getToken(frameQLParser.ESCAPED, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_selectFieldsInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFieldsInto" ):
                listener.enterSelectFieldsInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFieldsInto" ):
                listener.exitSelectFieldsInto(self)




    def selectFieldsInto(self):

        localctx = frameQLParser.SelectFieldsIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_selectFieldsInto)
        self._la = 0 # Token type
        try:
            self.state = 3539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.TERMINATED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3527
                self.match(frameQLParser.TERMINATED)
                self.state = 3528
                self.match(frameQLParser.BY)
                self.state = 3529
                localctx.terminationField = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.ENCLOSED, frameQLParser.OPTIONALLY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.OPTIONALLY:
                    self.state = 3530
                    self.match(frameQLParser.OPTIONALLY)


                self.state = 3533
                self.match(frameQLParser.ENCLOSED)
                self.state = 3534
                self.match(frameQLParser.BY)
                self.state = 3535
                localctx.enclosion = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.ESCAPED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3536
                self.match(frameQLParser.ESCAPED)
                self.state = 3537
                self.match(frameQLParser.BY)
                self.state = 3538
                localctx.escaping = self.match(frameQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectLinesIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.starting = None # Token
            self.terminationLine = None # Token

        def STARTING(self):
            return self.getToken(frameQLParser.STARTING, 0)

        def BY(self):
            return self.getToken(frameQLParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def TERMINATED(self):
            return self.getToken(frameQLParser.TERMINATED, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_selectLinesInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectLinesInto" ):
                listener.enterSelectLinesInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectLinesInto" ):
                listener.exitSelectLinesInto(self)




    def selectLinesInto(self):

        localctx = frameQLParser.SelectLinesIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_selectLinesInto)
        try:
            self.state = 3547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.STARTING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3541
                self.match(frameQLParser.STARTING)
                self.state = 3542
                self.match(frameQLParser.BY)
                self.state = 3543
                localctx.starting = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.TERMINATED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3544
                self.match(frameQLParser.TERMINATED)
                self.state = 3545
                self.match(frameQLParser.BY)
                self.state = 3546
                localctx.terminationLine = self.match(frameQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext
            self.havingExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(frameQLParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(frameQLParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(frameQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(frameQLParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(frameQLParser.GroupByItemContext,i)


        def HAVING(self):
            return self.getToken(frameQLParser.HAVING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)

        def ROLLUP(self):
            return self.getToken(frameQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = frameQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_fromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3549
            self.match(frameQLParser.FROM)
            self.state = 3550
            self.tableSources()
            self.state = 3553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WHERE:
                self.state = 3551
                self.match(frameQLParser.WHERE)
                self.state = 3552
                localctx.whereExpr = self.expression(0)


            self.state = 3569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.GROUP:
                self.state = 3555
                self.match(frameQLParser.GROUP)
                self.state = 3556
                self.match(frameQLParser.BY)
                self.state = 3557
                self.groupByItem()
                self.state = 3562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 3558
                    self.match(frameQLParser.COMMA)
                    self.state = 3559
                    self.groupByItem()
                    self.state = 3564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
                if la_ == 1:
                    self.state = 3565
                    self.match(frameQLParser.WITH)
                    self.state = 3566
                    self.match(frameQLParser.ROLLUP)




            self.state = 3573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.HAVING:
                self.state = 3571
                self.match(frameQLParser.HAVING)
                self.state = 3572
                localctx.havingExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(frameQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(frameQLParser.DESC, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)




    def groupByItem(self):

        localctx = frameQLParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3575
            self.expression(0)
            self.state = 3577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ASC or _la==frameQLParser.DESC:
                self.state = 3576
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ASC or _la==frameQLParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # DecimalLiteralContext
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(frameQLParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(frameQLParser.OFFSET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = frameQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3579
            self.match(frameQLParser.LIMIT)
            self.state = 3590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
            if la_ == 1:
                self.state = 3583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 3580
                    localctx.offset = self.decimalLiteral()
                    self.state = 3581
                    self.match(frameQLParser.COMMA)


                self.state = 3585
                localctx.limit = self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 3586
                localctx.limit = self.decimalLiteral()
                self.state = 3587
                self.match(frameQLParser.OFFSET)
                self.state = 3588
                localctx.offset = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(frameQLParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(frameQLParser.TRANSACTION, 0)

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TransactionModeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_startTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)




    def startTransaction(self):

        localctx = frameQLParser.StartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_startTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3592
            self.match(frameQLParser.START)
            self.state = 3593
            self.match(frameQLParser.TRANSACTION)
            self.state = 3602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.READ or _la==frameQLParser.WITH:
                self.state = 3594
                self.transactionMode()
                self.state = 3599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 3595
                    self.match(frameQLParser.COMMA)
                    self.state = 3596
                    self.transactionMode()
                    self.state = 3601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(frameQLParser.BEGIN, 0)

        def WORK(self):
            return self.getToken(frameQLParser.WORK, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_beginWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginWork" ):
                listener.enterBeginWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginWork" ):
                listener.exitBeginWork(self)




    def beginWork(self):

        localctx = frameQLParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3604
            self.match(frameQLParser.BEGIN)
            self.state = 3606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WORK:
                self.state = 3605
                self.match(frameQLParser.WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def COMMIT(self):
            return self.getToken(frameQLParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(frameQLParser.WORK, 0)

        def AND(self):
            return self.getToken(frameQLParser.AND, 0)

        def CHAIN(self):
            return self.getToken(frameQLParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(frameQLParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.NO)
            else:
                return self.getToken(frameQLParser.NO, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_commitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitWork" ):
                listener.enterCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitWork" ):
                listener.exitCommitWork(self)




    def commitWork(self):

        localctx = frameQLParser.CommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_commitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3608
            self.match(frameQLParser.COMMIT)
            self.state = 3610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WORK:
                self.state = 3609
                self.match(frameQLParser.WORK)


            self.state = 3617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.AND:
                self.state = 3612
                self.match(frameQLParser.AND)
                self.state = 3614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.NO:
                    self.state = 3613
                    localctx.nochain = self.match(frameQLParser.NO)


                self.state = 3616
                self.match(frameQLParser.CHAIN)


            self.state = 3623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.RELEASE or _la==frameQLParser.NO:
                self.state = 3620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.NO:
                    self.state = 3619
                    localctx.norelease = self.match(frameQLParser.NO)


                self.state = 3622
                self.match(frameQLParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def ROLLBACK(self):
            return self.getToken(frameQLParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(frameQLParser.WORK, 0)

        def AND(self):
            return self.getToken(frameQLParser.AND, 0)

        def CHAIN(self):
            return self.getToken(frameQLParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(frameQLParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.NO)
            else:
                return self.getToken(frameQLParser.NO, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_rollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackWork" ):
                listener.enterRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackWork" ):
                listener.exitRollbackWork(self)




    def rollbackWork(self):

        localctx = frameQLParser.RollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_rollbackWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3625
            self.match(frameQLParser.ROLLBACK)
            self.state = 3627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WORK:
                self.state = 3626
                self.match(frameQLParser.WORK)


            self.state = 3634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.AND:
                self.state = 3629
                self.match(frameQLParser.AND)
                self.state = 3631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.NO:
                    self.state = 3630
                    localctx.nochain = self.match(frameQLParser.NO)


                self.state = 3633
                self.match(frameQLParser.CHAIN)


            self.state = 3640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.RELEASE or _la==frameQLParser.NO:
                self.state = 3637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.NO:
                    self.state = 3636
                    localctx.norelease = self.match(frameQLParser.NO)


                self.state = 3639
                self.match(frameQLParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepointStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(frameQLParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_savepointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepointStatement" ):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepointStatement" ):
                listener.exitSavepointStatement(self)




    def savepointStatement(self):

        localctx = frameQLParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_savepointStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3642
            self.match(frameQLParser.SAVEPOINT)
            self.state = 3643
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(frameQLParser.ROLLBACK, 0)

        def TO(self):
            return self.getToken(frameQLParser.TO, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def WORK(self):
            return self.getToken(frameQLParser.WORK, 0)

        def SAVEPOINT(self):
            return self.getToken(frameQLParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_rollbackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackStatement" ):
                listener.enterRollbackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackStatement" ):
                listener.exitRollbackStatement(self)




    def rollbackStatement(self):

        localctx = frameQLParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3645
            self.match(frameQLParser.ROLLBACK)
            self.state = 3647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WORK:
                self.state = 3646
                self.match(frameQLParser.WORK)


            self.state = 3649
            self.match(frameQLParser.TO)
            self.state = 3651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.state = 3650
                self.match(frameQLParser.SAVEPOINT)


            self.state = 3653
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReleaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(frameQLParser.RELEASE, 0)

        def SAVEPOINT(self):
            return self.getToken(frameQLParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_releaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReleaseStatement" ):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReleaseStatement" ):
                listener.exitReleaseStatement(self)




    def releaseStatement(self):

        localctx = frameQLParser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_releaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3655
            self.match(frameQLParser.RELEASE)
            self.state = 3656
            self.match(frameQLParser.SAVEPOINT)
            self.state = 3657
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(frameQLParser.LOCK, 0)

        def TABLES(self):
            return self.getToken(frameQLParser.TABLES, 0)

        def lockTableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.LockTableElementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.LockTableElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_lockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTables" ):
                listener.enterLockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTables" ):
                listener.exitLockTables(self)




    def lockTables(self):

        localctx = frameQLParser.LockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_lockTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3659
            self.match(frameQLParser.LOCK)
            self.state = 3660
            self.match(frameQLParser.TABLES)
            self.state = 3661
            self.lockTableElement()
            self.state = 3666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 3662
                self.match(frameQLParser.COMMA)
                self.state = 3663
                self.lockTableElement()
                self.state = 3668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockTablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(frameQLParser.UNLOCK, 0)

        def TABLES(self):
            return self.getToken(frameQLParser.TABLES, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_unlockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockTables" ):
                listener.enterUnlockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockTables" ):
                listener.exitUnlockTables(self)




    def unlockTables(self):

        localctx = frameQLParser.UnlockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_unlockTables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3669
            self.match(frameQLParser.UNLOCK)
            self.state = 3670
            self.match(frameQLParser.TABLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAutocommitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.autocommitValue = None # Token

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def AUTOCOMMIT(self):
            return self.getToken(frameQLParser.AUTOCOMMIT, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(frameQLParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_setAutocommitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommitStatement" ):
                listener.enterSetAutocommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommitStatement" ):
                listener.exitSetAutocommitStatement(self)




    def setAutocommitStatement(self):

        localctx = frameQLParser.SetAutocommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_setAutocommitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3672
            self.match(frameQLParser.SET)
            self.state = 3673
            self.match(frameQLParser.AUTOCOMMIT)
            self.state = 3674
            self.match(frameQLParser.EQUAL_SYMBOL)
            self.state = 3675
            localctx.autocommitValue = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.ZERO_DECIMAL or _la==frameQLParser.ONE_DECIMAL):
                localctx.autocommitValue = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetTransactionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.transactionContext = None # Token

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(frameQLParser.TRANSACTION, 0)

        def transactionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TransactionOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TransactionOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def GLOBAL(self):
            return self.getToken(frameQLParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(frameQLParser.SESSION, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_setTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransactionStatement" ):
                listener.enterSetTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransactionStatement" ):
                listener.exitSetTransactionStatement(self)




    def setTransactionStatement(self):

        localctx = frameQLParser.SetTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_setTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3677
            self.match(frameQLParser.SET)
            self.state = 3679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.GLOBAL or _la==frameQLParser.SESSION:
                self.state = 3678
                localctx.transactionContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.GLOBAL or _la==frameQLParser.SESSION):
                    localctx.transactionContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3681
            self.match(frameQLParser.TRANSACTION)
            self.state = 3682
            self.transactionOption()
            self.state = 3687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 3683
                self.match(frameQLParser.COMMA)
                self.state = 3684
                self.transactionOption()
                self.state = 3689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)

        def CONSISTENT(self):
            return self.getToken(frameQLParser.CONSISTENT, 0)

        def SNAPSHOT(self):
            return self.getToken(frameQLParser.SNAPSHOT, 0)

        def READ(self):
            return self.getToken(frameQLParser.READ, 0)

        def WRITE(self):
            return self.getToken(frameQLParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(frameQLParser.ONLY, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)




    def transactionMode(self):

        localctx = frameQLParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_transactionMode)
        try:
            self.state = 3697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3690
                self.match(frameQLParser.WITH)
                self.state = 3691
                self.match(frameQLParser.CONSISTENT)
                self.state = 3692
                self.match(frameQLParser.SNAPSHOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3693
                self.match(frameQLParser.READ)
                self.state = 3694
                self.match(frameQLParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3695
                self.match(frameQLParser.READ)
                self.state = 3696
                self.match(frameQLParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTableElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def lockAction(self):
            return self.getTypedRuleContext(frameQLParser.LockActionContext,0)


        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_lockTableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTableElement" ):
                listener.enterLockTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTableElement" ):
                listener.exitLockTableElement(self)




    def lockTableElement(self):

        localctx = frameQLParser.LockTableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_lockTableElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3699
            self.tableName()
            self.state = 3704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.AS or _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 3701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.AS:
                    self.state = 3700
                    self.match(frameQLParser.AS)


                self.state = 3703
                self.uid()


            self.state = 3706
            self.lockAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(frameQLParser.READ, 0)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def WRITE(self):
            return self.getToken(frameQLParser.WRITE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(frameQLParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_lockAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockAction" ):
                listener.enterLockAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockAction" ):
                listener.exitLockAction(self)




    def lockAction(self):

        localctx = frameQLParser.LockActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_lockAction)
        self._la = 0 # Token type
        try:
            self.state = 3716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.READ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3708
                self.match(frameQLParser.READ)
                self.state = 3710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LOCAL:
                    self.state = 3709
                    self.match(frameQLParser.LOCAL)


                pass
            elif token in [frameQLParser.LOW_PRIORITY, frameQLParser.WRITE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LOW_PRIORITY:
                    self.state = 3712
                    self.match(frameQLParser.LOW_PRIORITY)


                self.state = 3715
                self.match(frameQLParser.WRITE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(frameQLParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(frameQLParser.LEVEL, 0)

        def transactionLevel(self):
            return self.getTypedRuleContext(frameQLParser.TransactionLevelContext,0)


        def READ(self):
            return self.getToken(frameQLParser.READ, 0)

        def WRITE(self):
            return self.getToken(frameQLParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(frameQLParser.ONLY, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_transactionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionOption" ):
                listener.enterTransactionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionOption" ):
                listener.exitTransactionOption(self)




    def transactionOption(self):

        localctx = frameQLParser.TransactionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_transactionOption)
        try:
            self.state = 3725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3718
                self.match(frameQLParser.ISOLATION)
                self.state = 3719
                self.match(frameQLParser.LEVEL)
                self.state = 3720
                self.transactionLevel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3721
                self.match(frameQLParser.READ)
                self.state = 3722
                self.match(frameQLParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3723
                self.match(frameQLParser.READ)
                self.state = 3724
                self.match(frameQLParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(frameQLParser.REPEATABLE, 0)

        def READ(self):
            return self.getToken(frameQLParser.READ, 0)

        def COMMITTED(self):
            return self.getToken(frameQLParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(frameQLParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(frameQLParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_transactionLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevel" ):
                listener.enterTransactionLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevel" ):
                listener.exitTransactionLevel(self)




    def transactionLevel(self):

        localctx = frameQLParser.TransactionLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_transactionLevel)
        try:
            self.state = 3734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3727
                self.match(frameQLParser.REPEATABLE)
                self.state = 3728
                self.match(frameQLParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3729
                self.match(frameQLParser.READ)
                self.state = 3730
                self.match(frameQLParser.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3731
                self.match(frameQLParser.READ)
                self.state = 3732
                self.match(frameQLParser.UNCOMMITTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3733
                self.match(frameQLParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(frameQLParser.CHANGE, 0)

        def MASTER(self):
            return self.getToken(frameQLParser.MASTER, 0)

        def TO(self):
            return self.getToken(frameQLParser.TO, 0)

        def masterOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.MasterOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def channelOption(self):
            return self.getTypedRuleContext(frameQLParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_changeMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMaster" ):
                listener.enterChangeMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMaster" ):
                listener.exitChangeMaster(self)




    def changeMaster(self):

        localctx = frameQLParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_changeMaster)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3736
            self.match(frameQLParser.CHANGE)
            self.state = 3737
            self.match(frameQLParser.MASTER)
            self.state = 3738
            self.match(frameQLParser.TO)
            self.state = 3739
            self.masterOption()
            self.state = 3744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 3740
                self.match(frameQLParser.COMMA)
                self.state = 3741
                self.masterOption()
                self.state = 3746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.FOR:
                self.state = 3747
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeReplicationFilterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(frameQLParser.CHANGE, 0)

        def REPLICATION(self):
            return self.getToken(frameQLParser.REPLICATION, 0)

        def FILTER(self):
            return self.getToken(frameQLParser.FILTER, 0)

        def replicationFilter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ReplicationFilterContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ReplicationFilterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_changeReplicationFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeReplicationFilter" ):
                listener.enterChangeReplicationFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeReplicationFilter" ):
                listener.exitChangeReplicationFilter(self)




    def changeReplicationFilter(self):

        localctx = frameQLParser.ChangeReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_changeReplicationFilter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3750
            self.match(frameQLParser.CHANGE)
            self.state = 3751
            self.match(frameQLParser.REPLICATION)
            self.state = 3752
            self.match(frameQLParser.FILTER)
            self.state = 3753
            self.replicationFilter()
            self.state = 3758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 3754
                self.match(frameQLParser.COMMA)
                self.state = 3755
                self.replicationFilter()
                self.state = 3760
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurgeBinaryLogsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.purgeFormat = None # Token
            self.fileName = None # Token
            self.timeValue = None # Token

        def PURGE(self):
            return self.getToken(frameQLParser.PURGE, 0)

        def LOGS(self):
            return self.getToken(frameQLParser.LOGS, 0)

        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)

        def MASTER(self):
            return self.getToken(frameQLParser.MASTER, 0)

        def TO(self):
            return self.getToken(frameQLParser.TO, 0)

        def BEFORE(self):
            return self.getToken(frameQLParser.BEFORE, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_purgeBinaryLogs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurgeBinaryLogs" ):
                listener.enterPurgeBinaryLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurgeBinaryLogs" ):
                listener.exitPurgeBinaryLogs(self)




    def purgeBinaryLogs(self):

        localctx = frameQLParser.PurgeBinaryLogsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_purgeBinaryLogs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            self.match(frameQLParser.PURGE)
            self.state = 3762
            localctx.purgeFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.BINARY or _la==frameQLParser.MASTER):
                localctx.purgeFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3763
            self.match(frameQLParser.LOGS)
            self.state = 3768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.TO]:
                self.state = 3764
                self.match(frameQLParser.TO)
                self.state = 3765
                localctx.fileName = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.BEFORE]:
                self.state = 3766
                self.match(frameQLParser.BEFORE)
                self.state = 3767
                localctx.timeValue = self.match(frameQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetMasterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(frameQLParser.RESET, 0)

        def MASTER(self):
            return self.getToken(frameQLParser.MASTER, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_resetMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetMaster" ):
                listener.enterResetMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetMaster" ):
                listener.exitResetMaster(self)




    def resetMaster(self):

        localctx = frameQLParser.ResetMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_resetMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3770
            self.match(frameQLParser.RESET)
            self.state = 3771
            self.match(frameQLParser.MASTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetSlaveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(frameQLParser.RESET, 0)

        def SLAVE(self):
            return self.getToken(frameQLParser.SLAVE, 0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def channelOption(self):
            return self.getTypedRuleContext(frameQLParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_resetSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSlave" ):
                listener.enterResetSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSlave" ):
                listener.exitResetSlave(self)




    def resetSlave(self):

        localctx = frameQLParser.ResetSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_resetSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3773
            self.match(frameQLParser.RESET)
            self.state = 3774
            self.match(frameQLParser.SLAVE)
            self.state = 3776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ALL:
                self.state = 3775
                self.match(frameQLParser.ALL)


            self.state = 3779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.FOR:
                self.state = 3778
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartSlaveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(frameQLParser.START, 0)

        def SLAVE(self):
            return self.getToken(frameQLParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ThreadTypeContext,i)


        def UNTIL(self):
            return self.getToken(frameQLParser.UNTIL, 0)

        def untilOption(self):
            return self.getTypedRuleContext(frameQLParser.UntilOptionContext,0)


        def connectionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ConnectionOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ConnectionOptionContext,i)


        def channelOption(self):
            return self.getTypedRuleContext(frameQLParser.ChannelOptionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_startSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartSlave" ):
                listener.enterStartSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartSlave" ):
                listener.exitStartSlave(self)




    def startSlave(self):

        localctx = frameQLParser.StartSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_startSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3781
            self.match(frameQLParser.START)
            self.state = 3782
            self.match(frameQLParser.SLAVE)
            self.state = 3791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IO_THREAD or _la==frameQLParser.SQL_THREAD:
                self.state = 3783
                self.threadType()
                self.state = 3788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 3784
                    self.match(frameQLParser.COMMA)
                    self.state = 3785
                    self.threadType()
                    self.state = 3790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.UNTIL:
                self.state = 3793
                self.match(frameQLParser.UNTIL)
                self.state = 3794
                self.untilOption()


            self.state = 3800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.DEFAULT_AUTH or _la==frameQLParser.PASSWORD or _la==frameQLParser.PLUGIN_DIR or _la==frameQLParser.USER:
                self.state = 3797
                self.connectionOption()
                self.state = 3802
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.FOR:
                self.state = 3803
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopSlaveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(frameQLParser.STOP, 0)

        def SLAVE(self):
            return self.getToken(frameQLParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ThreadTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_stopSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopSlave" ):
                listener.enterStopSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopSlave" ):
                listener.exitStopSlave(self)




    def stopSlave(self):

        localctx = frameQLParser.StopSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_stopSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3806
            self.match(frameQLParser.STOP)
            self.state = 3807
            self.match(frameQLParser.SLAVE)
            self.state = 3816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IO_THREAD or _la==frameQLParser.SQL_THREAD:
                self.state = 3808
                self.threadType()
                self.state = 3813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 3809
                    self.match(frameQLParser.COMMA)
                    self.state = 3810
                    self.threadType()
                    self.state = 3815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartGroupReplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(frameQLParser.START, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(frameQLParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_startGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartGroupReplication" ):
                listener.enterStartGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartGroupReplication" ):
                listener.exitStartGroupReplication(self)




    def startGroupReplication(self):

        localctx = frameQLParser.StartGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_startGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3818
            self.match(frameQLParser.START)
            self.state = 3819
            self.match(frameQLParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopGroupReplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(frameQLParser.STOP, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(frameQLParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_stopGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopGroupReplication" ):
                listener.enterStopGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopGroupReplication" ):
                listener.exitStopGroupReplication(self)




    def stopGroupReplication(self):

        localctx = frameQLParser.StopGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_stopGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3821
            self.match(frameQLParser.STOP)
            self.state = 3822
            self.match(frameQLParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_masterOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MasterStringOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringMasterOption(self):
            return self.getTypedRuleContext(frameQLParser.StringMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterStringOption" ):
                listener.enterMasterStringOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterStringOption" ):
                listener.exitMasterStringOption(self)


    class MasterRealOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(frameQLParser.MASTER_HEARTBEAT_PERIOD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def REAL_LITERAL(self):
            return self.getToken(frameQLParser.REAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterRealOption" ):
                listener.enterMasterRealOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterRealOption" ):
                listener.exitMasterRealOption(self)


    class MasterBoolOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.MasterOptionContext
            super().__init__(parser)
            self.boolVal = None # Token
            self.copyFrom(ctx)

        def boolMasterOption(self):
            return self.getTypedRuleContext(frameQLParser.BoolMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(frameQLParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterBoolOption" ):
                listener.enterMasterBoolOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterBoolOption" ):
                listener.exitMasterBoolOption(self)


    class MasterUidListOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(frameQLParser.IGNORE_SERVER_IDS, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterUidListOption" ):
                listener.enterMasterUidListOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterUidListOption" ):
                listener.exitMasterUidListOption(self)


    class MasterDecimalOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalMasterOption(self):
            return self.getTypedRuleContext(frameQLParser.DecimalMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterDecimalOption" ):
                listener.enterMasterDecimalOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterDecimalOption" ):
                listener.exitMasterDecimalOption(self)



    def masterOption(self):

        localctx = frameQLParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_masterOption)
        self._la = 0 # Token type
        try:
            self.state = 3853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.MASTER_BIND, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.RELAY_LOG_FILE]:
                localctx = frameQLParser.MasterStringOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3824
                self.stringMasterOption()
                self.state = 3825
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3826
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.RELAY_LOG_POS]:
                localctx = frameQLParser.MasterDecimalOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3828
                self.decimalMasterOption()
                self.state = 3829
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3830
                self.decimalLiteral()
                pass
            elif token in [frameQLParser.MASTER_SSL_VERIFY_SERVER_CERT, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_SSL]:
                localctx = frameQLParser.MasterBoolOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3832
                self.boolMasterOption()
                self.state = 3833
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3834
                localctx.boolVal = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ZERO_DECIMAL or _la==frameQLParser.ONE_DECIMAL):
                    localctx.boolVal = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.MASTER_HEARTBEAT_PERIOD]:
                localctx = frameQLParser.MasterRealOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3836
                self.match(frameQLParser.MASTER_HEARTBEAT_PERIOD)
                self.state = 3837
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3838
                self.match(frameQLParser.REAL_LITERAL)
                pass
            elif token in [frameQLParser.IGNORE_SERVER_IDS]:
                localctx = frameQLParser.MasterUidListOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3839
                self.match(frameQLParser.IGNORE_SERVER_IDS)
                self.state = 3840
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3841
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                    self.state = 3842
                    self.uid()
                    self.state = 3847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==frameQLParser.COMMA:
                        self.state = 3843
                        self.match(frameQLParser.COMMA)
                        self.state = 3844
                        self.uid()
                        self.state = 3849
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3852
                self.match(frameQLParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringMasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_BIND(self):
            return self.getToken(frameQLParser.MASTER_BIND, 0)

        def MASTER_HOST(self):
            return self.getToken(frameQLParser.MASTER_HOST, 0)

        def MASTER_USER(self):
            return self.getToken(frameQLParser.MASTER_USER, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(frameQLParser.MASTER_PASSWORD, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(frameQLParser.MASTER_LOG_FILE, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(frameQLParser.RELAY_LOG_FILE, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(frameQLParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(frameQLParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(frameQLParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(frameQLParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(frameQLParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(frameQLParser.MASTER_SSL_KEY, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(frameQLParser.MASTER_SSL_CIPHER, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(frameQLParser.MASTER_TLS_VERSION, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_stringMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringMasterOption" ):
                listener.enterStringMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringMasterOption" ):
                listener.exitStringMasterOption(self)




    def stringMasterOption(self):

        localctx = frameQLParser.StringMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_stringMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3855
            _la = self._input.LA(1)
            if not(_la==frameQLParser.MASTER_BIND or ((((_la - 382)) & ~0x3f) == 0 and ((1 << (_la - 382)) & ((1 << (frameQLParser.MASTER_HOST - 382)) | (1 << (frameQLParser.MASTER_LOG_FILE - 382)) | (1 << (frameQLParser.MASTER_PASSWORD - 382)) | (1 << (frameQLParser.MASTER_SSL_CA - 382)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 382)) | (1 << (frameQLParser.MASTER_SSL_CERT - 382)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 382)) | (1 << (frameQLParser.MASTER_SSL_CRL - 382)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 382)) | (1 << (frameQLParser.MASTER_SSL_KEY - 382)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 382)) | (1 << (frameQLParser.MASTER_USER - 382)))) != 0) or _la==frameQLParser.RELAY_LOG_FILE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalMasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_PORT(self):
            return self.getToken(frameQLParser.MASTER_PORT, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(frameQLParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(frameQLParser.MASTER_RETRY_COUNT, 0)

        def MASTER_DELAY(self):
            return self.getToken(frameQLParser.MASTER_DELAY, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(frameQLParser.MASTER_LOG_POS, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(frameQLParser.RELAY_LOG_POS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_decimalMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalMasterOption" ):
                listener.enterDecimalMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalMasterOption" ):
                listener.exitDecimalMasterOption(self)




    def decimalMasterOption(self):

        localctx = frameQLParser.DecimalMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_decimalMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3857
            _la = self._input.LA(1)
            if not(((((_la - 379)) & ~0x3f) == 0 and ((1 << (_la - 379)) & ((1 << (frameQLParser.MASTER_CONNECT_RETRY - 379)) | (1 << (frameQLParser.MASTER_DELAY - 379)) | (1 << (frameQLParser.MASTER_LOG_POS - 379)) | (1 << (frameQLParser.MASTER_PORT - 379)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 379)))) != 0) or _la==frameQLParser.RELAY_LOG_POS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolMasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_AUTO_POSITION(self):
            return self.getToken(frameQLParser.MASTER_AUTO_POSITION, 0)

        def MASTER_SSL(self):
            return self.getToken(frameQLParser.MASTER_SSL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT(self):
            return self.getToken(frameQLParser.MASTER_SSL_VERIFY_SERVER_CERT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_boolMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolMasterOption" ):
                listener.enterBoolMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolMasterOption" ):
                listener.exitBoolMasterOption(self)




    def boolMasterOption(self):

        localctx = frameQLParser.BoolMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_boolMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3859
            _la = self._input.LA(1)
            if not(_la==frameQLParser.MASTER_SSL_VERIFY_SERVER_CERT or _la==frameQLParser.MASTER_AUTO_POSITION or _la==frameQLParser.MASTER_SSL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def CHANNEL(self):
            return self.getToken(frameQLParser.CHANNEL, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_channelOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelOption" ):
                listener.enterChannelOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelOption" ):
                listener.exitChannelOption(self)




    def channelOption(self):

        localctx = frameQLParser.ChannelOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_channelOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3861
            self.match(frameQLParser.FOR)
            self.state = 3862
            self.match(frameQLParser.CHANNEL)
            self.state = 3863
            self.match(frameQLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationFilterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_replicationFilter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WildIgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(frameQLParser.REPLICATE_WILD_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(frameQLParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildIgnoreTableReplication" ):
                listener.enterWildIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildIgnoreTableReplication" ):
                listener.exitWildIgnoreTableReplication(self)


    class DoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(frameQLParser.REPLICATE_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoTableReplication" ):
                listener.enterDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoTableReplication" ):
                listener.exitDoTableReplication(self)


    class IgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(frameQLParser.REPLICATE_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreTableReplication" ):
                listener.enterIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreTableReplication" ):
                listener.exitIgnoreTableReplication(self)


    class RewriteDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(frameQLParser.REPLICATE_REWRITE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def tablePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TablePairContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TablePairContext,i)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteDbReplication" ):
                listener.enterRewriteDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteDbReplication" ):
                listener.exitRewriteDbReplication(self)


    class DoDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_DB(self):
            return self.getToken(frameQLParser.REPLICATE_DO_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoDbReplication" ):
                listener.enterDoDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoDbReplication" ):
                listener.exitDoDbReplication(self)


    class IgnoreDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(frameQLParser.REPLICATE_IGNORE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreDbReplication" ):
                listener.enterIgnoreDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreDbReplication" ):
                listener.exitIgnoreDbReplication(self)


    class WildDoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(frameQLParser.REPLICATE_WILD_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(frameQLParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildDoTableReplication" ):
                listener.enterWildDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildDoTableReplication" ):
                listener.exitWildDoTableReplication(self)



    def replicationFilter(self):

        localctx = frameQLParser.ReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_replicationFilter)
        self._la = 0 # Token type
        try:
            self.state = 3914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.REPLICATE_DO_DB]:
                localctx = frameQLParser.DoDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3865
                self.match(frameQLParser.REPLICATE_DO_DB)
                self.state = 3866
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3867
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3868
                self.uidList()
                self.state = 3869
                self.match(frameQLParser.RR_BRACKET)
                pass
            elif token in [frameQLParser.REPLICATE_IGNORE_DB]:
                localctx = frameQLParser.IgnoreDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3871
                self.match(frameQLParser.REPLICATE_IGNORE_DB)
                self.state = 3872
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3873
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3874
                self.uidList()
                self.state = 3875
                self.match(frameQLParser.RR_BRACKET)
                pass
            elif token in [frameQLParser.REPLICATE_DO_TABLE]:
                localctx = frameQLParser.DoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3877
                self.match(frameQLParser.REPLICATE_DO_TABLE)
                self.state = 3878
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3879
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3880
                self.tables()
                self.state = 3881
                self.match(frameQLParser.RR_BRACKET)
                pass
            elif token in [frameQLParser.REPLICATE_IGNORE_TABLE]:
                localctx = frameQLParser.IgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3883
                self.match(frameQLParser.REPLICATE_IGNORE_TABLE)
                self.state = 3884
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3885
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3886
                self.tables()
                self.state = 3887
                self.match(frameQLParser.RR_BRACKET)
                pass
            elif token in [frameQLParser.REPLICATE_WILD_DO_TABLE]:
                localctx = frameQLParser.WildDoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3889
                self.match(frameQLParser.REPLICATE_WILD_DO_TABLE)
                self.state = 3890
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3891
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3892
                self.simpleStrings()
                self.state = 3893
                self.match(frameQLParser.RR_BRACKET)
                pass
            elif token in [frameQLParser.REPLICATE_WILD_IGNORE_TABLE]:
                localctx = frameQLParser.WildIgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3895
                self.match(frameQLParser.REPLICATE_WILD_IGNORE_TABLE)
                self.state = 3896
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3897
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3898
                self.simpleStrings()
                self.state = 3899
                self.match(frameQLParser.RR_BRACKET)
                pass
            elif token in [frameQLParser.REPLICATE_REWRITE_DB]:
                localctx = frameQLParser.RewriteDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3901
                self.match(frameQLParser.REPLICATE_REWRITE_DB)
                self.state = 3902
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3903
                self.match(frameQLParser.LR_BRACKET)
                self.state = 3904
                self.tablePair()
                self.state = 3909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 3905
                    self.match(frameQLParser.COMMA)
                    self.state = 3906
                    self.tablePair()
                    self.state = 3911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3912
                self.match(frameQLParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.firstTable = None # TableNameContext
            self.secondTable = None # TableNameContext

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableNameContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_tablePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePair" ):
                listener.enterTablePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePair" ):
                listener.exitTablePair(self)




    def tablePair(self):

        localctx = frameQLParser.TablePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_tablePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3916
            self.match(frameQLParser.LR_BRACKET)
            self.state = 3917
            localctx.firstTable = self.tableName()
            self.state = 3918
            self.match(frameQLParser.COMMA)
            self.state = 3919
            localctx.secondTable = self.tableName()
            self.state = 3920
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IO_THREAD(self):
            return self.getToken(frameQLParser.IO_THREAD, 0)

        def SQL_THREAD(self):
            return self.getToken(frameQLParser.SQL_THREAD, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_threadType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadType" ):
                listener.enterThreadType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadType" ):
                listener.exitThreadType(self)




    def threadType(self):

        localctx = frameQLParser.ThreadTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_threadType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3922
            _la = self._input.LA(1)
            if not(_la==frameQLParser.IO_THREAD or _la==frameQLParser.SQL_THREAD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_untilOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GtidsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.UntilOptionContext
            super().__init__(parser)
            self.gtids = None # Token
            self.copyFrom(ctx)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def gtuidSet(self):
            return self.getTypedRuleContext(frameQLParser.GtuidSetContext,0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(frameQLParser.SQL_BEFORE_GTIDS, 0)
        def SQL_AFTER_GTIDS(self):
            return self.getToken(frameQLParser.SQL_AFTER_GTIDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtidsUntilOption" ):
                listener.enterGtidsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtidsUntilOption" ):
                listener.exitGtidsUntilOption(self)


    class SqlGapsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(frameQLParser.SQL_AFTER_MTS_GAPS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlGapsUntilOption" ):
                listener.enterSqlGapsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlGapsUntilOption" ):
                listener.exitSqlGapsUntilOption(self)


    class MasterLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_LOG_FILE(self):
            return self.getToken(frameQLParser.MASTER_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)
        def MASTER_LOG_POS(self):
            return self.getToken(frameQLParser.MASTER_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterLogUntilOption" ):
                listener.enterMasterLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterLogUntilOption" ):
                listener.exitMasterLogUntilOption(self)


    class RelayLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY_LOG_FILE(self):
            return self.getToken(frameQLParser.RELAY_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)
        def RELAY_LOG_POS(self):
            return self.getToken(frameQLParser.RELAY_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelayLogUntilOption" ):
                listener.enterRelayLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelayLogUntilOption" ):
                listener.exitRelayLogUntilOption(self)



    def untilOption(self):

        localctx = frameQLParser.UntilOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_untilOption)
        self._la = 0 # Token type
        try:
            self.state = 3942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_BEFORE_GTIDS]:
                localctx = frameQLParser.GtidsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3924
                localctx.gtids = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.SQL_AFTER_GTIDS or _la==frameQLParser.SQL_BEFORE_GTIDS):
                    localctx.gtids = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3925
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3926
                self.gtuidSet()
                pass
            elif token in [frameQLParser.MASTER_LOG_FILE]:
                localctx = frameQLParser.MasterLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3927
                self.match(frameQLParser.MASTER_LOG_FILE)
                self.state = 3928
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3929
                self.match(frameQLParser.STRING_LITERAL)
                self.state = 3930
                self.match(frameQLParser.COMMA)
                self.state = 3931
                self.match(frameQLParser.MASTER_LOG_POS)
                self.state = 3932
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3933
                self.decimalLiteral()
                pass
            elif token in [frameQLParser.RELAY_LOG_FILE]:
                localctx = frameQLParser.RelayLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3934
                self.match(frameQLParser.RELAY_LOG_FILE)
                self.state = 3935
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3936
                self.match(frameQLParser.STRING_LITERAL)
                self.state = 3937
                self.match(frameQLParser.COMMA)
                self.state = 3938
                self.match(frameQLParser.RELAY_LOG_POS)
                self.state = 3939
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3940
                self.decimalLiteral()
                pass
            elif token in [frameQLParser.SQL_AFTER_MTS_GAPS]:
                localctx = frameQLParser.SqlGapsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3941
                self.match(frameQLParser.SQL_AFTER_MTS_GAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_connectionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PluginDirConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPluginDir = None # Token
            self.copyFrom(ctx)

        def PLUGIN_DIR(self):
            return self.getToken(frameQLParser.PLUGIN_DIR, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluginDirConnectionOption" ):
                listener.enterPluginDirConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluginDirConnectionOption" ):
                listener.exitPluginDirConnectionOption(self)


    class UserConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptUser = None # Token
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(frameQLParser.USER, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserConnectionOption" ):
                listener.enterUserConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserConnectionOption" ):
                listener.exitUserConnectionOption(self)


    class DefaultAuthConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptDefAuth = None # Token
            self.copyFrom(ctx)

        def DEFAULT_AUTH(self):
            return self.getToken(frameQLParser.DEFAULT_AUTH, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultAuthConnectionOption" ):
                listener.enterDefaultAuthConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultAuthConnectionOption" ):
                listener.exitDefaultAuthConnectionOption(self)


    class PasswordConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPassword = None # Token
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(frameQLParser.PASSWORD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordConnectionOption" ):
                listener.enterPasswordConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordConnectionOption" ):
                listener.exitPasswordConnectionOption(self)



    def connectionOption(self):

        localctx = frameQLParser.ConnectionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_connectionOption)
        try:
            self.state = 3956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.USER]:
                localctx = frameQLParser.UserConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3944
                self.match(frameQLParser.USER)
                self.state = 3945
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3946
                localctx.conOptUser = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.PASSWORD]:
                localctx = frameQLParser.PasswordConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3947
                self.match(frameQLParser.PASSWORD)
                self.state = 3948
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3949
                localctx.conOptPassword = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.DEFAULT_AUTH]:
                localctx = frameQLParser.DefaultAuthConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3950
                self.match(frameQLParser.DEFAULT_AUTH)
                self.state = 3951
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3952
                localctx.conOptDefAuth = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.PLUGIN_DIR]:
                localctx = frameQLParser.PluginDirConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3953
                self.match(frameQLParser.PLUGIN_DIR)
                self.state = 3954
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 3955
                localctx.conOptPluginDir = self.match(frameQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GtuidSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uuidSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UuidSetContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UuidSetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_gtuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtuidSet" ):
                listener.enterGtuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtuidSet" ):
                listener.exitGtuidSet(self)




    def gtuidSet(self):

        localctx = frameQLParser.GtuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_gtuidSet)
        self._la = 0 # Token type
        try:
            self.state = 3967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ZERO_DECIMAL, frameQLParser.ONE_DECIMAL, frameQLParser.TWO_DECIMAL, frameQLParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3958
                self.uuidSet()
                self.state = 3963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 3959
                    self.match(frameQLParser.COMMA)
                    self.state = 3960
                    self.uuidSet()
                    self.state = 3965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [frameQLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3966
                self.match(frameQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaStartTransactionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xaStart = None # Token
            self.xaAction = None # Token

        def XA(self):
            return self.getToken(frameQLParser.XA, 0)

        def xid(self):
            return self.getTypedRuleContext(frameQLParser.XidContext,0)


        def START(self):
            return self.getToken(frameQLParser.START, 0)

        def BEGIN(self):
            return self.getToken(frameQLParser.BEGIN, 0)

        def JOIN(self):
            return self.getToken(frameQLParser.JOIN, 0)

        def RESUME(self):
            return self.getToken(frameQLParser.RESUME, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_xaStartTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaStartTransaction" ):
                listener.enterXaStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaStartTransaction" ):
                listener.exitXaStartTransaction(self)




    def xaStartTransaction(self):

        localctx = frameQLParser.XaStartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_xaStartTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3969
            self.match(frameQLParser.XA)
            self.state = 3970
            localctx.xaStart = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.BEGIN or _la==frameQLParser.START):
                localctx.xaStart = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3971
            self.xid()
            self.state = 3973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.JOIN or _la==frameQLParser.RESUME:
                self.state = 3972
                localctx.xaAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.JOIN or _la==frameQLParser.RESUME):
                    localctx.xaAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaEndTransactionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(frameQLParser.XA, 0)

        def END(self):
            return self.getToken(frameQLParser.END, 0)

        def xid(self):
            return self.getTypedRuleContext(frameQLParser.XidContext,0)


        def SUSPEND(self):
            return self.getToken(frameQLParser.SUSPEND, 0)

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def MIGRATE(self):
            return self.getToken(frameQLParser.MIGRATE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_xaEndTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaEndTransaction" ):
                listener.enterXaEndTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaEndTransaction" ):
                listener.exitXaEndTransaction(self)




    def xaEndTransaction(self):

        localctx = frameQLParser.XaEndTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_xaEndTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3975
            self.match(frameQLParser.XA)
            self.state = 3976
            self.match(frameQLParser.END)
            self.state = 3977
            self.xid()
            self.state = 3983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.SUSPEND:
                self.state = 3978
                self.match(frameQLParser.SUSPEND)
                self.state = 3981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR:
                    self.state = 3979
                    self.match(frameQLParser.FOR)
                    self.state = 3980
                    self.match(frameQLParser.MIGRATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaPrepareStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(frameQLParser.XA, 0)

        def PREPARE(self):
            return self.getToken(frameQLParser.PREPARE, 0)

        def xid(self):
            return self.getTypedRuleContext(frameQLParser.XidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_xaPrepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaPrepareStatement" ):
                listener.enterXaPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaPrepareStatement" ):
                listener.exitXaPrepareStatement(self)




    def xaPrepareStatement(self):

        localctx = frameQLParser.XaPrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_xaPrepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3985
            self.match(frameQLParser.XA)
            self.state = 3986
            self.match(frameQLParser.PREPARE)
            self.state = 3987
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaCommitWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(frameQLParser.XA, 0)

        def COMMIT(self):
            return self.getToken(frameQLParser.COMMIT, 0)

        def xid(self):
            return self.getTypedRuleContext(frameQLParser.XidContext,0)


        def ONE(self):
            return self.getToken(frameQLParser.ONE, 0)

        def PHASE(self):
            return self.getToken(frameQLParser.PHASE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_xaCommitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaCommitWork" ):
                listener.enterXaCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaCommitWork" ):
                listener.exitXaCommitWork(self)




    def xaCommitWork(self):

        localctx = frameQLParser.XaCommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_xaCommitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3989
            self.match(frameQLParser.XA)
            self.state = 3990
            self.match(frameQLParser.COMMIT)
            self.state = 3991
            self.xid()
            self.state = 3994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ONE:
                self.state = 3992
                self.match(frameQLParser.ONE)
                self.state = 3993
                self.match(frameQLParser.PHASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRollbackWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(frameQLParser.XA, 0)

        def ROLLBACK(self):
            return self.getToken(frameQLParser.ROLLBACK, 0)

        def xid(self):
            return self.getTypedRuleContext(frameQLParser.XidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_xaRollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRollbackWork" ):
                listener.enterXaRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRollbackWork" ):
                listener.exitXaRollbackWork(self)




    def xaRollbackWork(self):

        localctx = frameQLParser.XaRollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_xaRollbackWork)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3996
            self.match(frameQLParser.XA)
            self.state = 3997
            self.match(frameQLParser.ROLLBACK)
            self.state = 3998
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRecoverWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(frameQLParser.XA, 0)

        def RECOVER(self):
            return self.getToken(frameQLParser.RECOVER, 0)

        def CONVERT(self):
            return self.getToken(frameQLParser.CONVERT, 0)

        def xid(self):
            return self.getTypedRuleContext(frameQLParser.XidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_xaRecoverWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRecoverWork" ):
                listener.enterXaRecoverWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRecoverWork" ):
                listener.exitXaRecoverWork(self)




    def xaRecoverWork(self):

        localctx = frameQLParser.XaRecoverWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_xaRecoverWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4000
            self.match(frameQLParser.XA)
            self.state = 4001
            self.match(frameQLParser.RECOVER)
            self.state = 4004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.CONVERT:
                self.state = 4002
                self.match(frameQLParser.CONVERT)
                self.state = 4003
                self.xid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query = None # Token
            self.variable = None # Token

        def PREPARE(self):
            return self.getToken(frameQLParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def LOCAL_ID(self):
            return self.getToken(frameQLParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_prepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareStatement" ):
                listener.enterPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareStatement" ):
                listener.exitPrepareStatement(self)




    def prepareStatement(self):

        localctx = frameQLParser.PrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_prepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4006
            self.match(frameQLParser.PREPARE)
            self.state = 4007
            self.uid()
            self.state = 4008
            self.match(frameQLParser.FROM)
            self.state = 4011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.STRING_LITERAL]:
                self.state = 4009
                localctx.query = self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.LOCAL_ID]:
                self.state = 4010
                localctx.variable = self.match(frameQLParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(frameQLParser.EXECUTE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def USING(self):
            return self.getToken(frameQLParser.USING, 0)

        def userVariables(self):
            return self.getTypedRuleContext(frameQLParser.UserVariablesContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = frameQLParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4013
            self.match(frameQLParser.EXECUTE)
            self.state = 4014
            self.uid()
            self.state = 4017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.USING:
                self.state = 4015
                self.match(frameQLParser.USING)
                self.state = 4016
                self.userVariables()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocatePrepareContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropFormat = None # Token

        def PREPARE(self):
            return self.getToken(frameQLParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def DEALLOCATE(self):
            return self.getToken(frameQLParser.DEALLOCATE, 0)

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_deallocatePrepare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocatePrepare" ):
                listener.enterDeallocatePrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocatePrepare" ):
                listener.exitDeallocatePrepare(self)




    def deallocatePrepare(self):

        localctx = frameQLParser.DeallocatePrepareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_deallocatePrepare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4019
            localctx.dropFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.DROP or _la==frameQLParser.DEALLOCATE):
                localctx.dropFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4020
            self.match(frameQLParser.PREPARE)
            self.state = 4021
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(frameQLParser.BlockStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(frameQLParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_routineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBody" ):
                listener.enterRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBody" ):
                listener.exitRoutineBody(self)




    def routineBody(self):

        localctx = frameQLParser.RoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_routineBody)
        try:
            self.state = 4025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4023
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4024
                self.sqlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(frameQLParser.BEGIN, 0)

        def END(self):
            return self.getToken(frameQLParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(frameQLParser.COLON_SYMB, 0)

        def declareVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DeclareVariableContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DeclareVariableContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.SEMI)
            else:
                return self.getToken(frameQLParser.SEMI, i)

        def declareCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DeclareConditionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DeclareConditionContext,i)


        def declareCursor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DeclareCursorContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DeclareCursorContext,i)


        def declareHandler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DeclareHandlerContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DeclareHandlerContext,i)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = frameQLParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
            if la_ == 1:
                self.state = 4027
                self.uid()
                self.state = 4028
                self.match(frameQLParser.COLON_SYMB)


            self.state = 4032
            self.match(frameQLParser.BEGIN)
            self.state = 4070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DECLARE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0):
                self.state = 4038
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,574,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4033
                        self.declareVariable()
                        self.state = 4034
                        self.match(frameQLParser.SEMI) 
                    self.state = 4040
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,574,self._ctx)

                self.state = 4046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,575,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4041
                        self.declareCondition()
                        self.state = 4042
                        self.match(frameQLParser.SEMI) 
                    self.state = 4048
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,575,self._ctx)

                self.state = 4054
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,576,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4049
                        self.declareCursor()
                        self.state = 4050
                        self.match(frameQLParser.SEMI) 
                    self.state = 4056
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,576,self._ctx)

                self.state = 4062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.DECLARE:
                    self.state = 4057
                    self.declareHandler()
                    self.state = 4058
                    self.match(frameQLParser.SEMI)
                    self.state = 4064
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4066 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4065
                    self.procedureSqlStatement()
                    self.state = 4068 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0)):
                        break



            self.state = 4072
            self.match(frameQLParser.END)
            self.state = 4074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 4073
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.CASE)
            else:
                return self.getToken(frameQLParser.CASE, i)

        def END(self):
            return self.getToken(frameQLParser.END, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def caseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(frameQLParser.CaseAlternativeContext,i)


        def ELSE(self):
            return self.getToken(frameQLParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)




    def caseStatement(self):

        localctx = frameQLParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4076
            self.match(frameQLParser.CASE)
            self.state = 4079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
            if la_ == 1:
                self.state = 4077
                self.uid()

            elif la_ == 2:
                self.state = 4078
                self.expression(0)


            self.state = 4082 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4081
                self.caseAlternative()
                self.state = 4084 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==frameQLParser.WHEN):
                    break

            self.state = 4092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ELSE:
                self.state = 4086
                self.match(frameQLParser.ELSE)
                self.state = 4088 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4087
                    self.procedureSqlStatement()
                    self.state = 4090 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0)):
                        break



            self.state = 4094
            self.match(frameQLParser.END)
            self.state = 4095
            self.match(frameQLParser.CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._procedureSqlStatement = None # ProcedureSqlStatementContext
            self.thenStatements = list() # of ProcedureSqlStatementContexts
            self.elseStatements = list() # of ProcedureSqlStatementContexts

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.IF)
            else:
                return self.getToken(frameQLParser.IF, i)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(frameQLParser.THEN, 0)

        def END(self):
            return self.getToken(frameQLParser.END, 0)

        def elifAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ElifAlternativeContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ElifAlternativeContext,i)


        def ELSE(self):
            return self.getToken(frameQLParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = frameQLParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4097
            self.match(frameQLParser.IF)
            self.state = 4098
            self.expression(0)
            self.state = 4099
            self.match(frameQLParser.THEN)
            self.state = 4101 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4100
                localctx._procedureSqlStatement = self.procedureSqlStatement()
                localctx.thenStatements.append(localctx._procedureSqlStatement)
                self.state = 4103 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0)):
                    break

            self.state = 4108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.ELSEIF:
                self.state = 4105
                self.elifAlternative()
                self.state = 4110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ELSE:
                self.state = 4111
                self.match(frameQLParser.ELSE)
                self.state = 4113 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4112
                    localctx._procedureSqlStatement = self.procedureSqlStatement()
                    localctx.elseStatements.append(localctx._procedureSqlStatement)
                    self.state = 4115 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0)):
                        break



            self.state = 4119
            self.match(frameQLParser.END)
            self.state = 4120
            self.match(frameQLParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(frameQLParser.ITERATE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_iterateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)




    def iterateStatement(self):

        localctx = frameQLParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4122
            self.match(frameQLParser.ITERATE)
            self.state = 4123
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeaveStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE(self):
            return self.getToken(frameQLParser.LEAVE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_leaveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)




    def leaveStatement(self):

        localctx = frameQLParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4125
            self.match(frameQLParser.LEAVE)
            self.state = 4126
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LOOP)
            else:
                return self.getToken(frameQLParser.LOOP, i)

        def END(self):
            return self.getToken(frameQLParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(frameQLParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)




    def loopStatement(self):

        localctx = frameQLParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 4128
                self.uid()
                self.state = 4129
                self.match(frameQLParser.COLON_SYMB)


            self.state = 4133
            self.match(frameQLParser.LOOP)
            self.state = 4135 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4134
                self.procedureSqlStatement()
                self.state = 4137 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0)):
                    break

            self.state = 4139
            self.match(frameQLParser.END)
            self.state = 4140
            self.match(frameQLParser.LOOP)
            self.state = 4142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 4141
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.REPEAT)
            else:
                return self.getToken(frameQLParser.REPEAT, i)

        def UNTIL(self):
            return self.getToken(frameQLParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def END(self):
            return self.getToken(frameQLParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(frameQLParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_repeatStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStatement" ):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStatement" ):
                listener.exitRepeatStatement(self)




    def repeatStatement(self):

        localctx = frameQLParser.RepeatStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_repeatStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 4144
                self.uid()
                self.state = 4145
                self.match(frameQLParser.COLON_SYMB)


            self.state = 4149
            self.match(frameQLParser.REPEAT)
            self.state = 4151 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4150
                self.procedureSqlStatement()
                self.state = 4153 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0)):
                    break

            self.state = 4155
            self.match(frameQLParser.UNTIL)
            self.state = 4156
            self.expression(0)
            self.state = 4157
            self.match(frameQLParser.END)
            self.state = 4158
            self.match(frameQLParser.REPEAT)
            self.state = 4160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 4159
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(frameQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = frameQLParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4162
            self.match(frameQLParser.RETURN)
            self.state = 4163
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.WHILE)
            else:
                return self.getToken(frameQLParser.WHILE, i)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def DO(self):
            return self.getToken(frameQLParser.DO, 0)

        def END(self):
            return self.getToken(frameQLParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(frameQLParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = frameQLParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 4165
                self.uid()
                self.state = 4166
                self.match(frameQLParser.COLON_SYMB)


            self.state = 4170
            self.match(frameQLParser.WHILE)
            self.state = 4171
            self.expression(0)
            self.state = 4172
            self.match(frameQLParser.DO)
            self.state = 4174 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4173
                self.procedureSqlStatement()
                self.state = 4176 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0)):
                    break

            self.state = 4178
            self.match(frameQLParser.END)
            self.state = 4179
            self.match(frameQLParser.WHILE)
            self.state = 4181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)) | (1 << (frameQLParser.SERIAL - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (frameQLParser.ACCOUNT - 250)) | (1 << (frameQLParser.ACTION - 250)) | (1 << (frameQLParser.AFTER - 250)) | (1 << (frameQLParser.AGGREGATE - 250)) | (1 << (frameQLParser.ALGORITHM - 250)) | (1 << (frameQLParser.ANY - 250)) | (1 << (frameQLParser.AT - 250)) | (1 << (frameQLParser.AUTHORS - 250)) | (1 << (frameQLParser.AUTOCOMMIT - 250)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 250)) | (1 << (frameQLParser.AUTO_INCREMENT - 250)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 250)) | (1 << (frameQLParser.BEGIN - 250)) | (1 << (frameQLParser.BINLOG - 250)) | (1 << (frameQLParser.BIT - 250)) | (1 << (frameQLParser.BLOCK - 250)) | (1 << (frameQLParser.BOOL - 250)) | (1 << (frameQLParser.BOOLEAN - 250)) | (1 << (frameQLParser.BTREE - 250)) | (1 << (frameQLParser.CASCADED - 250)) | (1 << (frameQLParser.CHAIN - 250)) | (1 << (frameQLParser.CHANGED - 250)) | (1 << (frameQLParser.CHANNEL - 250)) | (1 << (frameQLParser.CHECKSUM - 250)) | (1 << (frameQLParser.CIPHER - 250)) | (1 << (frameQLParser.CLIENT - 250)) | (1 << (frameQLParser.COALESCE - 250)) | (1 << (frameQLParser.CODE - 250)) | (1 << (frameQLParser.COLUMNS - 250)) | (1 << (frameQLParser.COLUMN_FORMAT - 250)) | (1 << (frameQLParser.COMMENT - 250)) | (1 << (frameQLParser.COMMIT - 250)) | (1 << (frameQLParser.COMPACT - 250)) | (1 << (frameQLParser.COMPLETION - 250)) | (1 << (frameQLParser.COMPRESSED - 250)) | (1 << (frameQLParser.COMPRESSION - 250)) | (1 << (frameQLParser.CONCURRENT - 250)) | (1 << (frameQLParser.CONNECTION - 250)) | (1 << (frameQLParser.CONSISTENT - 250)) | (1 << (frameQLParser.CONTAINS - 250)) | (1 << (frameQLParser.CONTEXT - 250)) | (1 << (frameQLParser.CONTRIBUTORS - 250)) | (1 << (frameQLParser.COPY - 250)) | (1 << (frameQLParser.CPU - 250)) | (1 << (frameQLParser.DATA - 250)) | (1 << (frameQLParser.DATAFILE - 250)) | (1 << (frameQLParser.DEALLOCATE - 250)) | (1 << (frameQLParser.DEFAULT_AUTH - 250)) | (1 << (frameQLParser.DEFINER - 250)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 250)) | (1 << (frameQLParser.DIRECTORY - 250)) | (1 << (frameQLParser.DISABLE - 250)) | (1 << (frameQLParser.DISCARD - 250)) | (1 << (frameQLParser.DISK - 250)) | (1 << (frameQLParser.DO - 250)) | (1 << (frameQLParser.DUMPFILE - 250)) | (1 << (frameQLParser.DUPLICATE - 250)) | (1 << (frameQLParser.DYNAMIC - 250)) | (1 << (frameQLParser.ENABLE - 250)) | (1 << (frameQLParser.ENCRYPTION - 250)))) != 0) or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (frameQLParser.ENDS - 314)) | (1 << (frameQLParser.ENGINE - 314)) | (1 << (frameQLParser.ENGINES - 314)) | (1 << (frameQLParser.ERROR - 314)) | (1 << (frameQLParser.ERRORS - 314)) | (1 << (frameQLParser.ESCAPE - 314)) | (1 << (frameQLParser.EVEN - 314)) | (1 << (frameQLParser.EVENT - 314)) | (1 << (frameQLParser.EVENTS - 314)) | (1 << (frameQLParser.EVERY - 314)) | (1 << (frameQLParser.EXCHANGE - 314)) | (1 << (frameQLParser.EXCLUSIVE - 314)) | (1 << (frameQLParser.EXPIRE - 314)) | (1 << (frameQLParser.EXTENDED - 314)) | (1 << (frameQLParser.EXTENT_SIZE - 314)) | (1 << (frameQLParser.FAST - 314)) | (1 << (frameQLParser.FAULTS - 314)) | (1 << (frameQLParser.FIELDS - 314)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 314)) | (1 << (frameQLParser.FILTER - 314)) | (1 << (frameQLParser.FIRST - 314)) | (1 << (frameQLParser.FIXED - 314)) | (1 << (frameQLParser.FOLLOWS - 314)) | (1 << (frameQLParser.FULL - 314)) | (1 << (frameQLParser.FUNCTION - 314)) | (1 << (frameQLParser.GLOBAL - 314)) | (1 << (frameQLParser.GRANTS - 314)) | (1 << (frameQLParser.GROUP_REPLICATION - 314)) | (1 << (frameQLParser.HASH - 314)) | (1 << (frameQLParser.HOST - 314)) | (1 << (frameQLParser.IDENTIFIED - 314)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 314)) | (1 << (frameQLParser.IMPORT - 314)) | (1 << (frameQLParser.INDEXES - 314)) | (1 << (frameQLParser.INITIAL_SIZE - 314)) | (1 << (frameQLParser.INPLACE - 314)) | (1 << (frameQLParser.INSERT_METHOD - 314)) | (1 << (frameQLParser.INSTANCE - 314)) | (1 << (frameQLParser.INVOKER - 314)) | (1 << (frameQLParser.IO - 314)) | (1 << (frameQLParser.IO_THREAD - 314)) | (1 << (frameQLParser.IPC - 314)) | (1 << (frameQLParser.ISOLATION - 314)) | (1 << (frameQLParser.ISSUER - 314)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 314)) | (1 << (frameQLParser.LANGUAGE - 314)) | (1 << (frameQLParser.LAST - 314)) | (1 << (frameQLParser.LEAVES - 314)) | (1 << (frameQLParser.LESS - 314)) | (1 << (frameQLParser.LEVEL - 314)) | (1 << (frameQLParser.LIST - 314)) | (1 << (frameQLParser.LOCAL - 314)) | (1 << (frameQLParser.LOGFILE - 314)) | (1 << (frameQLParser.LOGS - 314)) | (1 << (frameQLParser.MASTER - 314)))) != 0) or ((((_la - 378)) & ~0x3f) == 0 and ((1 << (_la - 378)) & ((1 << (frameQLParser.MASTER_AUTO_POSITION - 378)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 378)) | (1 << (frameQLParser.MASTER_DELAY - 378)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 378)) | (1 << (frameQLParser.MASTER_HOST - 378)) | (1 << (frameQLParser.MASTER_LOG_FILE - 378)) | (1 << (frameQLParser.MASTER_LOG_POS - 378)) | (1 << (frameQLParser.MASTER_PASSWORD - 378)) | (1 << (frameQLParser.MASTER_PORT - 378)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 378)) | (1 << (frameQLParser.MASTER_SSL - 378)) | (1 << (frameQLParser.MASTER_SSL_CA - 378)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_CERT - 378)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 378)) | (1 << (frameQLParser.MASTER_SSL_CRL - 378)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 378)) | (1 << (frameQLParser.MASTER_SSL_KEY - 378)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 378)) | (1 << (frameQLParser.MASTER_USER - 378)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_ROWS - 378)) | (1 << (frameQLParser.MAX_SIZE - 378)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 378)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 378)) | (1 << (frameQLParser.MEDIUM - 378)) | (1 << (frameQLParser.MERGE - 378)) | (1 << (frameQLParser.MID - 378)) | (1 << (frameQLParser.MIGRATE - 378)) | (1 << (frameQLParser.MIN_ROWS - 378)) | (1 << (frameQLParser.MODIFY - 378)) | (1 << (frameQLParser.MUTEX - 378)) | (1 << (frameQLParser.MYSQL - 378)) | (1 << (frameQLParser.NAME - 378)) | (1 << (frameQLParser.NAMES - 378)) | (1 << (frameQLParser.NCHAR - 378)) | (1 << (frameQLParser.NEVER - 378)) | (1 << (frameQLParser.NO - 378)) | (1 << (frameQLParser.NODEGROUP - 378)) | (1 << (frameQLParser.NONE - 378)) | (1 << (frameQLParser.OFFLINE - 378)) | (1 << (frameQLParser.OFFSET - 378)) | (1 << (frameQLParser.OJ - 378)) | (1 << (frameQLParser.OLD_PASSWORD - 378)) | (1 << (frameQLParser.ONE - 378)) | (1 << (frameQLParser.ONLINE - 378)) | (1 << (frameQLParser.ONLY - 378)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 378)) | (1 << (frameQLParser.OPTIONS - 378)) | (1 << (frameQLParser.OWNER - 378)) | (1 << (frameQLParser.PACK_KEYS - 378)) | (1 << (frameQLParser.PAGE - 378)) | (1 << (frameQLParser.PARSER - 378)) | (1 << (frameQLParser.PARTIAL - 378)) | (1 << (frameQLParser.PARTITIONING - 378)) | (1 << (frameQLParser.PARTITIONS - 378)) | (1 << (frameQLParser.PASSWORD - 378)) | (1 << (frameQLParser.PHASE - 378)) | (1 << (frameQLParser.PLUGIN_DIR - 378)))) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & ((1 << (frameQLParser.PLUGINS - 442)) | (1 << (frameQLParser.PORT - 442)) | (1 << (frameQLParser.PRECEDES - 442)) | (1 << (frameQLParser.PREPARE - 442)) | (1 << (frameQLParser.PRESERVE - 442)) | (1 << (frameQLParser.PREV - 442)) | (1 << (frameQLParser.PROCESSLIST - 442)) | (1 << (frameQLParser.PROFILE - 442)) | (1 << (frameQLParser.PROFILES - 442)) | (1 << (frameQLParser.PROXY - 442)) | (1 << (frameQLParser.QUERY - 442)) | (1 << (frameQLParser.QUICK - 442)) | (1 << (frameQLParser.REBUILD - 442)) | (1 << (frameQLParser.RECOVER - 442)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 442)) | (1 << (frameQLParser.REDUNDANT - 442)) | (1 << (frameQLParser.RELAY_LOG_FILE - 442)) | (1 << (frameQLParser.RELAY_LOG_POS - 442)) | (1 << (frameQLParser.RELAYLOG - 442)) | (1 << (frameQLParser.REMOVE - 442)) | (1 << (frameQLParser.REORGANIZE - 442)) | (1 << (frameQLParser.REPAIR - 442)) | (1 << (frameQLParser.REPLICATE_DO_DB - 442)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 442)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 442)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 442)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 442)) | (1 << (frameQLParser.REPLICATION - 442)) | (1 << (frameQLParser.RESUME - 442)) | (1 << (frameQLParser.RETURNS - 442)) | (1 << (frameQLParser.ROLLBACK - 442)) | (1 << (frameQLParser.ROLLUP - 442)) | (1 << (frameQLParser.ROTATE - 442)) | (1 << (frameQLParser.ROW - 442)) | (1 << (frameQLParser.ROWS - 442)) | (1 << (frameQLParser.ROW_FORMAT - 442)) | (1 << (frameQLParser.SAVEPOINT - 442)) | (1 << (frameQLParser.SCHEDULE - 442)) | (1 << (frameQLParser.SECURITY - 442)) | (1 << (frameQLParser.SERVER - 442)) | (1 << (frameQLParser.SESSION - 442)) | (1 << (frameQLParser.SHARE - 442)) | (1 << (frameQLParser.SHARED - 442)) | (1 << (frameQLParser.SIGNED - 442)) | (1 << (frameQLParser.SIMPLE - 442)) | (1 << (frameQLParser.SLAVE - 442)) | (1 << (frameQLParser.SNAPSHOT - 442)) | (1 << (frameQLParser.SOCKET - 442)) | (1 << (frameQLParser.SOME - 442)) | (1 << (frameQLParser.SOUNDS - 442)) | (1 << (frameQLParser.SOURCE - 442)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 442)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 442)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 442)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 442)) | (1 << (frameQLParser.SQL_CACHE - 442)) | (1 << (frameQLParser.SQL_NO_CACHE - 442)) | (1 << (frameQLParser.SQL_THREAD - 442)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (frameQLParser.START - 506)) | (1 << (frameQLParser.STARTS - 506)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 506)) | (1 << (frameQLParser.STATS_PERSISTENT - 506)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 506)) | (1 << (frameQLParser.STATUS - 506)) | (1 << (frameQLParser.STOP - 506)) | (1 << (frameQLParser.STORAGE - 506)) | (1 << (frameQLParser.STRING - 506)) | (1 << (frameQLParser.SUBJECT - 506)) | (1 << (frameQLParser.SUBPARTITION - 506)) | (1 << (frameQLParser.SUBPARTITIONS - 506)) | (1 << (frameQLParser.SUSPEND - 506)) | (1 << (frameQLParser.SWAPS - 506)) | (1 << (frameQLParser.SWITCHES - 506)) | (1 << (frameQLParser.TABLESPACE - 506)) | (1 << (frameQLParser.TEMPORARY - 506)) | (1 << (frameQLParser.TEMPTABLE - 506)) | (1 << (frameQLParser.THAN - 506)) | (1 << (frameQLParser.TRANSACTION - 506)) | (1 << (frameQLParser.TRUNCATE - 506)) | (1 << (frameQLParser.UNDEFINED - 506)) | (1 << (frameQLParser.UNDOFILE - 506)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 506)) | (1 << (frameQLParser.UNKNOWN - 506)) | (1 << (frameQLParser.UPGRADE - 506)) | (1 << (frameQLParser.USER - 506)) | (1 << (frameQLParser.VALIDATION - 506)) | (1 << (frameQLParser.VALUE - 506)) | (1 << (frameQLParser.VARIABLES - 506)) | (1 << (frameQLParser.VIEW - 506)) | (1 << (frameQLParser.WAIT - 506)) | (1 << (frameQLParser.WARNINGS - 506)) | (1 << (frameQLParser.WITHOUT - 506)) | (1 << (frameQLParser.WORK - 506)) | (1 << (frameQLParser.WRAPPER - 506)) | (1 << (frameQLParser.X509 - 506)) | (1 << (frameQLParser.XA - 506)) | (1 << (frameQLParser.XML - 506)) | (1 << (frameQLParser.QUARTER - 506)) | (1 << (frameQLParser.MONTH - 506)) | (1 << (frameQLParser.DAY - 506)) | (1 << (frameQLParser.HOUR - 506)) | (1 << (frameQLParser.MINUTE - 506)) | (1 << (frameQLParser.WEEK - 506)) | (1 << (frameQLParser.SECOND - 506)) | (1 << (frameQLParser.MICROSECOND - 506)) | (1 << (frameQLParser.TABLES - 506)) | (1 << (frameQLParser.ROUTINE - 506)) | (1 << (frameQLParser.EXECUTE - 506)) | (1 << (frameQLParser.FILE - 506)))) != 0) or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & ((1 << (frameQLParser.PROCESS - 570)) | (1 << (frameQLParser.RELOAD - 570)) | (1 << (frameQLParser.SHUTDOWN - 570)) | (1 << (frameQLParser.SUPER - 570)) | (1 << (frameQLParser.PRIVILEGES - 570)) | (1 << (frameQLParser.ARMSCII8 - 570)) | (1 << (frameQLParser.ASCII - 570)) | (1 << (frameQLParser.BIG5 - 570)) | (1 << (frameQLParser.CP1250 - 570)) | (1 << (frameQLParser.CP1251 - 570)) | (1 << (frameQLParser.CP1256 - 570)) | (1 << (frameQLParser.CP1257 - 570)) | (1 << (frameQLParser.CP850 - 570)) | (1 << (frameQLParser.CP852 - 570)) | (1 << (frameQLParser.CP866 - 570)) | (1 << (frameQLParser.CP932 - 570)) | (1 << (frameQLParser.DEC8 - 570)) | (1 << (frameQLParser.EUCJPMS - 570)) | (1 << (frameQLParser.EUCKR - 570)) | (1 << (frameQLParser.GB2312 - 570)) | (1 << (frameQLParser.GBK - 570)) | (1 << (frameQLParser.GEOSTD8 - 570)) | (1 << (frameQLParser.GREEK - 570)) | (1 << (frameQLParser.HEBREW - 570)) | (1 << (frameQLParser.HP8 - 570)) | (1 << (frameQLParser.KEYBCS2 - 570)) | (1 << (frameQLParser.KOI8R - 570)) | (1 << (frameQLParser.KOI8U - 570)) | (1 << (frameQLParser.LATIN1 - 570)) | (1 << (frameQLParser.LATIN2 - 570)) | (1 << (frameQLParser.LATIN5 - 570)) | (1 << (frameQLParser.LATIN7 - 570)) | (1 << (frameQLParser.MACCE - 570)) | (1 << (frameQLParser.MACROMAN - 570)) | (1 << (frameQLParser.SJIS - 570)) | (1 << (frameQLParser.SWE7 - 570)) | (1 << (frameQLParser.TIS620 - 570)) | (1 << (frameQLParser.UCS2 - 570)) | (1 << (frameQLParser.UJIS - 570)) | (1 << (frameQLParser.UTF16 - 570)) | (1 << (frameQLParser.UTF16LE - 570)) | (1 << (frameQLParser.UTF32 - 570)) | (1 << (frameQLParser.UTF8 - 570)) | (1 << (frameQLParser.UTF8MB3 - 570)) | (1 << (frameQLParser.UTF8MB4 - 570)) | (1 << (frameQLParser.ARCHIVE - 570)) | (1 << (frameQLParser.BLACKHOLE - 570)) | (1 << (frameQLParser.CSV - 570)) | (1 << (frameQLParser.FEDERATED - 570)) | (1 << (frameQLParser.INNODB - 570)) | (1 << (frameQLParser.MEMORY - 570)) | (1 << (frameQLParser.MRG_MYISAM - 570)) | (1 << (frameQLParser.MYISAM - 570)) | (1 << (frameQLParser.NDB - 570)) | (1 << (frameQLParser.NDBCLUSTER - 570)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 570)) | (1 << (frameQLParser.REPEATABLE - 570)) | (1 << (frameQLParser.COMMITTED - 570)) | (1 << (frameQLParser.UNCOMMITTED - 570)) | (1 << (frameQLParser.SERIALIZABLE - 570)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 570)) | (1 << (frameQLParser.LINESTRING - 570)) | (1 << (frameQLParser.MULTILINESTRING - 570)) | (1 << (frameQLParser.MULTIPOINT - 570)))) != 0) or ((((_la - 634)) & ~0x3f) == 0 and ((1 << (_la - 634)) & ((1 << (frameQLParser.MULTIPOLYGON - 634)) | (1 << (frameQLParser.POINT - 634)) | (1 << (frameQLParser.POLYGON - 634)) | (1 << (frameQLParser.ABS - 634)) | (1 << (frameQLParser.ACOS - 634)) | (1 << (frameQLParser.ADDDATE - 634)) | (1 << (frameQLParser.ADDTIME - 634)) | (1 << (frameQLParser.AES_DECRYPT - 634)) | (1 << (frameQLParser.AES_ENCRYPT - 634)) | (1 << (frameQLParser.AREA - 634)) | (1 << (frameQLParser.ASBINARY - 634)) | (1 << (frameQLParser.ASIN - 634)) | (1 << (frameQLParser.ASTEXT - 634)) | (1 << (frameQLParser.ASWKB - 634)) | (1 << (frameQLParser.ASWKT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 634)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 634)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 634)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 634)) | (1 << (frameQLParser.ATAN - 634)) | (1 << (frameQLParser.ATAN2 - 634)) | (1 << (frameQLParser.BENCHMARK - 634)) | (1 << (frameQLParser.BIN - 634)) | (1 << (frameQLParser.BIT_COUNT - 634)) | (1 << (frameQLParser.BIT_LENGTH - 634)) | (1 << (frameQLParser.BUFFER - 634)) | (1 << (frameQLParser.CEIL - 634)) | (1 << (frameQLParser.CEILING - 634)) | (1 << (frameQLParser.CENTROID - 634)) | (1 << (frameQLParser.CHARACTER_LENGTH - 634)) | (1 << (frameQLParser.CHARSET - 634)) | (1 << (frameQLParser.CHAR_LENGTH - 634)) | (1 << (frameQLParser.COERCIBILITY - 634)) | (1 << (frameQLParser.COLLATION - 634)) | (1 << (frameQLParser.COMPRESS - 634)) | (1 << (frameQLParser.CONCAT - 634)) | (1 << (frameQLParser.CONCAT_WS - 634)) | (1 << (frameQLParser.CONNECTION_ID - 634)) | (1 << (frameQLParser.CONV - 634)) | (1 << (frameQLParser.CONVERT_TZ - 634)) | (1 << (frameQLParser.COS - 634)) | (1 << (frameQLParser.COT - 634)) | (1 << (frameQLParser.CRC32 - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 634)) | (1 << (frameQLParser.CREATE_DIGEST - 634)) | (1 << (frameQLParser.CROSSES - 634)) | (1 << (frameQLParser.DATEDIFF - 634)) | (1 << (frameQLParser.DATE_FORMAT - 634)) | (1 << (frameQLParser.DAYNAME - 634)) | (1 << (frameQLParser.DAYOFMONTH - 634)) | (1 << (frameQLParser.DAYOFWEEK - 634)) | (1 << (frameQLParser.DAYOFYEAR - 634)) | (1 << (frameQLParser.DECODE - 634)) | (1 << (frameQLParser.DEGREES - 634)) | (1 << (frameQLParser.DES_DECRYPT - 634)) | (1 << (frameQLParser.DES_ENCRYPT - 634)) | (1 << (frameQLParser.DIMENSION - 634)) | (1 << (frameQLParser.DISJOINT - 634)) | (1 << (frameQLParser.ELT - 634)) | (1 << (frameQLParser.ENCODE - 634)) | (1 << (frameQLParser.ENCRYPT - 634)))) != 0) or ((((_la - 698)) & ~0x3f) == 0 and ((1 << (_la - 698)) & ((1 << (frameQLParser.ENDPOINT - 698)) | (1 << (frameQLParser.ENVELOPE - 698)) | (1 << (frameQLParser.EQUALS - 698)) | (1 << (frameQLParser.EXP - 698)) | (1 << (frameQLParser.EXPORT_SET - 698)) | (1 << (frameQLParser.EXTERIORRING - 698)) | (1 << (frameQLParser.EXTRACTVALUE - 698)) | (1 << (frameQLParser.FIELD - 698)) | (1 << (frameQLParser.FIND_IN_SET - 698)) | (1 << (frameQLParser.FLOOR - 698)) | (1 << (frameQLParser.FORMAT - 698)) | (1 << (frameQLParser.FOUND_ROWS - 698)) | (1 << (frameQLParser.FROM_BASE64 - 698)) | (1 << (frameQLParser.FROM_DAYS - 698)) | (1 << (frameQLParser.FROM_UNIXTIME - 698)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 698)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 698)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 698)) | (1 << (frameQLParser.GEOMETRYN - 698)) | (1 << (frameQLParser.GEOMETRYTYPE - 698)) | (1 << (frameQLParser.GEOMFROMTEXT - 698)) | (1 << (frameQLParser.GEOMFROMWKB - 698)) | (1 << (frameQLParser.GET_FORMAT - 698)) | (1 << (frameQLParser.GET_LOCK - 698)) | (1 << (frameQLParser.GLENGTH - 698)) | (1 << (frameQLParser.GREATEST - 698)) | (1 << (frameQLParser.GTID_SUBSET - 698)) | (1 << (frameQLParser.GTID_SUBTRACT - 698)) | (1 << (frameQLParser.HEX - 698)) | (1 << (frameQLParser.IFNULL - 698)) | (1 << (frameQLParser.INET6_ATON - 698)) | (1 << (frameQLParser.INET6_NTOA - 698)) | (1 << (frameQLParser.INET_ATON - 698)) | (1 << (frameQLParser.INET_NTOA - 698)) | (1 << (frameQLParser.INSTR - 698)) | (1 << (frameQLParser.INTERIORRINGN - 698)) | (1 << (frameQLParser.INTERSECTS - 698)) | (1 << (frameQLParser.ISCLOSED - 698)) | (1 << (frameQLParser.ISEMPTY - 698)) | (1 << (frameQLParser.ISNULL - 698)) | (1 << (frameQLParser.ISSIMPLE - 698)) | (1 << (frameQLParser.IS_FREE_LOCK - 698)) | (1 << (frameQLParser.IS_IPV4 - 698)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 698)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 698)) | (1 << (frameQLParser.IS_IPV6 - 698)) | (1 << (frameQLParser.IS_USED_LOCK - 698)) | (1 << (frameQLParser.LAST_INSERT_ID - 698)) | (1 << (frameQLParser.LCASE - 698)) | (1 << (frameQLParser.LEAST - 698)) | (1 << (frameQLParser.LENGTH - 698)) | (1 << (frameQLParser.LINEFROMTEXT - 698)) | (1 << (frameQLParser.LINEFROMWKB - 698)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 698)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 698)) | (1 << (frameQLParser.LN - 698)) | (1 << (frameQLParser.LOAD_FILE - 698)) | (1 << (frameQLParser.LOCATE - 698)) | (1 << (frameQLParser.LOG - 698)) | (1 << (frameQLParser.LOG10 - 698)) | (1 << (frameQLParser.LOG2 - 698)))) != 0) or ((((_la - 762)) & ~0x3f) == 0 and ((1 << (_la - 762)) & ((1 << (frameQLParser.LOWER - 762)) | (1 << (frameQLParser.LPAD - 762)) | (1 << (frameQLParser.LTRIM - 762)) | (1 << (frameQLParser.MAKEDATE - 762)) | (1 << (frameQLParser.MAKETIME - 762)) | (1 << (frameQLParser.MAKE_SET - 762)) | (1 << (frameQLParser.MASTER_POS_WAIT - 762)) | (1 << (frameQLParser.MBRCONTAINS - 762)) | (1 << (frameQLParser.MBRDISJOINT - 762)) | (1 << (frameQLParser.MBREQUAL - 762)) | (1 << (frameQLParser.MBRINTERSECTS - 762)) | (1 << (frameQLParser.MBROVERLAPS - 762)) | (1 << (frameQLParser.MBRTOUCHES - 762)) | (1 << (frameQLParser.MBRWITHIN - 762)) | (1 << (frameQLParser.MD5 - 762)) | (1 << (frameQLParser.MLINEFROMTEXT - 762)) | (1 << (frameQLParser.MLINEFROMWKB - 762)) | (1 << (frameQLParser.MONTHNAME - 762)) | (1 << (frameQLParser.MPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MPOINTFROMWKB - 762)) | (1 << (frameQLParser.MPOLYFROMTEXT - 762)) | (1 << (frameQLParser.MPOLYFROMWKB - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 762)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 762)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 762)) | (1 << (frameQLParser.NAME_CONST - 762)) | (1 << (frameQLParser.NULLIF - 762)) | (1 << (frameQLParser.NUMGEOMETRIES - 762)) | (1 << (frameQLParser.NUMINTERIORRINGS - 762)) | (1 << (frameQLParser.NUMPOINTS - 762)) | (1 << (frameQLParser.OCT - 762)) | (1 << (frameQLParser.OCTET_LENGTH - 762)) | (1 << (frameQLParser.ORD - 762)) | (1 << (frameQLParser.OVERLAPS - 762)) | (1 << (frameQLParser.PERIOD_ADD - 762)) | (1 << (frameQLParser.PERIOD_DIFF - 762)) | (1 << (frameQLParser.PI - 762)) | (1 << (frameQLParser.POINTFROMTEXT - 762)) | (1 << (frameQLParser.POINTFROMWKB - 762)) | (1 << (frameQLParser.POINTN - 762)) | (1 << (frameQLParser.POLYFROMTEXT - 762)) | (1 << (frameQLParser.POLYFROMWKB - 762)) | (1 << (frameQLParser.POLYGONFROMTEXT - 762)) | (1 << (frameQLParser.POLYGONFROMWKB - 762)) | (1 << (frameQLParser.POW - 762)) | (1 << (frameQLParser.POWER - 762)) | (1 << (frameQLParser.QUOTE - 762)) | (1 << (frameQLParser.RADIANS - 762)) | (1 << (frameQLParser.RAND - 762)) | (1 << (frameQLParser.RANDOM_BYTES - 762)) | (1 << (frameQLParser.RELEASE_LOCK - 762)) | (1 << (frameQLParser.REVERSE - 762)) | (1 << (frameQLParser.ROUND - 762)) | (1 << (frameQLParser.ROW_COUNT - 762)) | (1 << (frameQLParser.RPAD - 762)) | (1 << (frameQLParser.RTRIM - 762)) | (1 << (frameQLParser.SEC_TO_TIME - 762)) | (1 << (frameQLParser.SESSION_USER - 762)) | (1 << (frameQLParser.SHA - 762)) | (1 << (frameQLParser.SHA1 - 762)) | (1 << (frameQLParser.SHA2 - 762)))) != 0) or ((((_la - 826)) & ~0x3f) == 0 and ((1 << (_la - 826)) & ((1 << (frameQLParser.SIGN - 826)) | (1 << (frameQLParser.SIN - 826)) | (1 << (frameQLParser.SLEEP - 826)) | (1 << (frameQLParser.SOUNDEX - 826)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1 << (frameQLParser.SQRT - 826)) | (1 << (frameQLParser.SRID - 826)) | (1 << (frameQLParser.STARTPOINT - 826)) | (1 << (frameQLParser.STRCMP - 826)) | (1 << (frameQLParser.STR_TO_DATE - 826)) | (1 << (frameQLParser.ST_AREA - 826)) | (1 << (frameQLParser.ST_ASBINARY - 826)) | (1 << (frameQLParser.ST_ASTEXT - 826)) | (1 << (frameQLParser.ST_ASWKB - 826)) | (1 << (frameQLParser.ST_ASWKT - 826)) | (1 << (frameQLParser.ST_BUFFER - 826)) | (1 << (frameQLParser.ST_CENTROID - 826)) | (1 << (frameQLParser.ST_CONTAINS - 826)) | (1 << (frameQLParser.ST_CROSSES - 826)) | (1 << (frameQLParser.ST_DIFFERENCE - 826)) | (1 << (frameQLParser.ST_DIMENSION - 826)) | (1 << (frameQLParser.ST_DISJOINT - 826)) | (1 << (frameQLParser.ST_DISTANCE - 826)) | (1 << (frameQLParser.ST_ENDPOINT - 826)) | (1 << (frameQLParser.ST_ENVELOPE - 826)) | (1 << (frameQLParser.ST_EQUALS - 826)) | (1 << (frameQLParser.ST_EXTERIORRING - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 826)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 826)) | (1 << (frameQLParser.ST_GEOMETRYN - 826)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 826)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 826)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 826)) | (1 << (frameQLParser.ST_INTERIORRINGN - 826)) | (1 << (frameQLParser.ST_INTERSECTION - 826)) | (1 << (frameQLParser.ST_INTERSECTS - 826)) | (1 << (frameQLParser.ST_ISCLOSED - 826)) | (1 << (frameQLParser.ST_ISEMPTY - 826)) | (1 << (frameQLParser.ST_ISSIMPLE - 826)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINEFROMWKB - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 826)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 826)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 826)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 826)) | (1 << (frameQLParser.ST_NUMPOINTS - 826)) | (1 << (frameQLParser.ST_OVERLAPS - 826)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 826)) | (1 << (frameQLParser.ST_POINTFROMWKB - 826)) | (1 << (frameQLParser.ST_POINTN - 826)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYFROMWKB - 826)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 826)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 826)) | (1 << (frameQLParser.ST_SRID - 826)) | (1 << (frameQLParser.ST_STARTPOINT - 826)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 826)) | (1 << (frameQLParser.ST_TOUCHES - 826)))) != 0) or ((((_la - 890)) & ~0x3f) == 0 and ((1 << (_la - 890)) & ((1 << (frameQLParser.ST_UNION - 890)) | (1 << (frameQLParser.ST_WITHIN - 890)) | (1 << (frameQLParser.ST_X - 890)) | (1 << (frameQLParser.ST_Y - 890)) | (1 << (frameQLParser.SUBDATE - 890)) | (1 << (frameQLParser.SUBSTRING_INDEX - 890)) | (1 << (frameQLParser.SUBTIME - 890)) | (1 << (frameQLParser.SYSTEM_USER - 890)) | (1 << (frameQLParser.TAN - 890)) | (1 << (frameQLParser.TIMEDIFF - 890)) | (1 << (frameQLParser.TIMESTAMPADD - 890)) | (1 << (frameQLParser.TIMESTAMPDIFF - 890)) | (1 << (frameQLParser.TIME_FORMAT - 890)) | (1 << (frameQLParser.TIME_TO_SEC - 890)) | (1 << (frameQLParser.TOUCHES - 890)) | (1 << (frameQLParser.TO_BASE64 - 890)) | (1 << (frameQLParser.TO_DAYS - 890)) | (1 << (frameQLParser.TO_SECONDS - 890)) | (1 << (frameQLParser.UCASE - 890)) | (1 << (frameQLParser.UNCOMPRESS - 890)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 890)) | (1 << (frameQLParser.UNHEX - 890)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 890)) | (1 << (frameQLParser.UPDATEXML - 890)) | (1 << (frameQLParser.UPPER - 890)) | (1 << (frameQLParser.UUID - 890)) | (1 << (frameQLParser.UUID_SHORT - 890)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 890)) | (1 << (frameQLParser.VERSION - 890)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1 << (frameQLParser.WEEKDAY - 890)) | (1 << (frameQLParser.WEEKOFYEAR - 890)) | (1 << (frameQLParser.WEIGHT_STRING - 890)) | (1 << (frameQLParser.WITHIN - 890)) | (1 << (frameQLParser.YEARWEEK - 890)) | (1 << (frameQLParser.Y_FUNCTION - 890)) | (1 << (frameQLParser.X_FUNCTION - 890)))) != 0) or ((((_la - 965)) & ~0x3f) == 0 and ((1 << (_la - 965)) & ((1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 965)) | (1 << (frameQLParser.STRING_LITERAL - 965)) | (1 << (frameQLParser.ID - 965)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 965)))) != 0):
                self.state = 4180
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_cursorStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CloseCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(frameQLParser.CLOSE, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseCursor" ):
                listener.enterCloseCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseCursor" ):
                listener.exitCloseCursor(self)


    class OpenCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN(self):
            return self.getToken(frameQLParser.OPEN, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenCursor" ):
                listener.enterOpenCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenCursor" ):
                listener.exitOpenCursor(self)


    class FetchCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(frameQLParser.FETCH, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)
        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)

        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)
        def NEXT(self):
            return self.getToken(frameQLParser.NEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchCursor" ):
                listener.enterFetchCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchCursor" ):
                listener.exitFetchCursor(self)



    def cursorStatement(self):

        localctx = frameQLParser.CursorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_cursorStatement)
        self._la = 0 # Token type
        try:
            self.state = 4198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.CLOSE]:
                localctx = frameQLParser.CloseCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4183
                self.match(frameQLParser.CLOSE)
                self.state = 4184
                self.uid()
                pass
            elif token in [frameQLParser.FETCH]:
                localctx = frameQLParser.FetchCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4185
                self.match(frameQLParser.FETCH)
                self.state = 4190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FROM or _la==frameQLParser.NEXT:
                    self.state = 4187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.NEXT:
                        self.state = 4186
                        self.match(frameQLParser.NEXT)


                    self.state = 4189
                    self.match(frameQLParser.FROM)


                self.state = 4192
                self.uid()
                self.state = 4193
                self.match(frameQLParser.INTO)
                self.state = 4194
                self.uidList()
                pass
            elif token in [frameQLParser.OPEN]:
                localctx = frameQLParser.OpenCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4196
                self.match(frameQLParser.OPEN)
                self.state = 4197
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(frameQLParser.DECLARE, 0)

        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(frameQLParser.DataTypeContext,0)


        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(frameQLParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_declareVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareVariable" ):
                listener.enterDeclareVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareVariable" ):
                listener.exitDeclareVariable(self)




    def declareVariable(self):

        localctx = frameQLParser.DeclareVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_declareVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4200
            self.match(frameQLParser.DECLARE)
            self.state = 4201
            self.uidList()
            self.state = 4202
            self.dataType()
            self.state = 4205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.DEFAULT:
                self.state = 4203
                self.match(frameQLParser.DEFAULT)
                self.state = 4204
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(frameQLParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def CONDITION(self):
            return self.getToken(frameQLParser.CONDITION, 0)

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def SQLSTATE(self):
            return self.getToken(frameQLParser.SQLSTATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def VALUE(self):
            return self.getToken(frameQLParser.VALUE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_declareCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCondition" ):
                listener.enterDeclareCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCondition" ):
                listener.exitDeclareCondition(self)




    def declareCondition(self):

        localctx = frameQLParser.DeclareConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_declareCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4207
            self.match(frameQLParser.DECLARE)
            self.state = 4208
            self.uid()
            self.state = 4209
            self.match(frameQLParser.CONDITION)
            self.state = 4210
            self.match(frameQLParser.FOR)
            self.state = 4217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ZERO_DECIMAL, frameQLParser.ONE_DECIMAL, frameQLParser.TWO_DECIMAL, frameQLParser.DECIMAL_LITERAL]:
                self.state = 4211
                self.decimalLiteral()
                pass
            elif token in [frameQLParser.SQLSTATE]:
                self.state = 4212
                self.match(frameQLParser.SQLSTATE)
                self.state = 4214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.VALUE:
                    self.state = 4213
                    self.match(frameQLParser.VALUE)


                self.state = 4216
                self.match(frameQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareCursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(frameQLParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def CURSOR(self):
            return self.getToken(frameQLParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_declareCursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCursor" ):
                listener.enterDeclareCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCursor" ):
                listener.exitDeclareCursor(self)




    def declareCursor(self):

        localctx = frameQLParser.DeclareCursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_declareCursor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4219
            self.match(frameQLParser.DECLARE)
            self.state = 4220
            self.uid()
            self.state = 4221
            self.match(frameQLParser.CURSOR)
            self.state = 4222
            self.match(frameQLParser.FOR)
            self.state = 4223
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareHandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.handlerAction = None # Token

        def DECLARE(self):
            return self.getToken(frameQLParser.DECLARE, 0)

        def HANDLER(self):
            return self.getToken(frameQLParser.HANDLER, 0)

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def handlerConditionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.HandlerConditionValueContext)
            else:
                return self.getTypedRuleContext(frameQLParser.HandlerConditionValueContext,i)


        def routineBody(self):
            return self.getTypedRuleContext(frameQLParser.RoutineBodyContext,0)


        def CONTINUE(self):
            return self.getToken(frameQLParser.CONTINUE, 0)

        def EXIT(self):
            return self.getToken(frameQLParser.EXIT, 0)

        def UNDO(self):
            return self.getToken(frameQLParser.UNDO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_declareHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareHandler" ):
                listener.enterDeclareHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareHandler" ):
                listener.exitDeclareHandler(self)




    def declareHandler(self):

        localctx = frameQLParser.DeclareHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_declareHandler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4225
            self.match(frameQLParser.DECLARE)
            self.state = 4226
            localctx.handlerAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.CONTINUE or _la==frameQLParser.EXIT or _la==frameQLParser.UNDO):
                localctx.handlerAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4227
            self.match(frameQLParser.HANDLER)
            self.state = 4228
            self.match(frameQLParser.FOR)
            self.state = 4229
            self.handlerConditionValue()
            self.state = 4234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 4230
                self.match(frameQLParser.COMMA)
                self.state = 4231
                self.handlerConditionValue()
                self.state = 4236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4237
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerConditionValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_handlerConditionValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HandlerConditionWarningContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLWARNING(self):
            return self.getToken(frameQLParser.SQLWARNING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionWarning" ):
                listener.enterHandlerConditionWarning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionWarning" ):
                listener.exitHandlerConditionWarning(self)


    class HandlerConditionCodeContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionCode" ):
                listener.enterHandlerConditionCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionCode" ):
                listener.exitHandlerConditionCode(self)


    class HandlerConditionNotfoundContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)
        def FOUND(self):
            return self.getToken(frameQLParser.FOUND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionNotfound" ):
                listener.enterHandlerConditionNotfound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionNotfound" ):
                listener.exitHandlerConditionNotfound(self)


    class HandlerConditionStateContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLSTATE(self):
            return self.getToken(frameQLParser.SQLSTATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def VALUE(self):
            return self.getToken(frameQLParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionState" ):
                listener.enterHandlerConditionState(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionState" ):
                listener.exitHandlerConditionState(self)


    class HandlerConditionExceptionContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLEXCEPTION(self):
            return self.getToken(frameQLParser.SQLEXCEPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionException" ):
                listener.enterHandlerConditionException(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionException" ):
                listener.exitHandlerConditionException(self)


    class HandlerConditionNameContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionName" ):
                listener.enterHandlerConditionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionName" ):
                listener.exitHandlerConditionName(self)



    def handlerConditionValue(self):

        localctx = frameQLParser.HandlerConditionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_handlerConditionValue)
        self._la = 0 # Token type
        try:
            self.state = 4250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ZERO_DECIMAL, frameQLParser.ONE_DECIMAL, frameQLParser.TWO_DECIMAL, frameQLParser.DECIMAL_LITERAL]:
                localctx = frameQLParser.HandlerConditionCodeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4239
                self.decimalLiteral()
                pass
            elif token in [frameQLParser.SQLSTATE]:
                localctx = frameQLParser.HandlerConditionStateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4240
                self.match(frameQLParser.SQLSTATE)
                self.state = 4242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.VALUE:
                    self.state = 4241
                    self.match(frameQLParser.VALUE)


                self.state = 4244
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                localctx = frameQLParser.HandlerConditionNameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4245
                self.uid()
                pass
            elif token in [frameQLParser.SQLWARNING]:
                localctx = frameQLParser.HandlerConditionWarningContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4246
                self.match(frameQLParser.SQLWARNING)
                pass
            elif token in [frameQLParser.NOT]:
                localctx = frameQLParser.HandlerConditionNotfoundContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4247
                self.match(frameQLParser.NOT)
                self.state = 4248
                self.match(frameQLParser.FOUND)
                pass
            elif token in [frameQLParser.SQLEXCEPTION]:
                localctx = frameQLParser.HandlerConditionExceptionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4249
                self.match(frameQLParser.SQLEXCEPTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureSqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(frameQLParser.SEMI, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(frameQLParser.CompoundStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(frameQLParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_procedureSqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureSqlStatement" ):
                listener.enterProcedureSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureSqlStatement" ):
                listener.exitProcedureSqlStatement(self)




    def procedureSqlStatement(self):

        localctx = frameQLParser.ProcedureSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_procedureSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,607,self._ctx)
            if la_ == 1:
                self.state = 4252
                self.compoundStatement()
                pass

            elif la_ == 2:
                self.state = 4253
                self.sqlStatement()
                pass


            self.state = 4256
            self.match(frameQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseAlternativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(frameQLParser.WHEN, 0)

        def THEN(self):
            return self.getToken(frameQLParser.THEN, 0)

        def constant(self):
            return self.getTypedRuleContext(frameQLParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_caseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseAlternative" ):
                listener.enterCaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseAlternative" ):
                listener.exitCaseAlternative(self)




    def caseAlternative(self):

        localctx = frameQLParser.CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_caseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4258
            self.match(frameQLParser.WHEN)
            self.state = 4261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
            if la_ == 1:
                self.state = 4259
                self.constant()
                pass

            elif la_ == 2:
                self.state = 4260
                self.expression(0)
                pass


            self.state = 4263
            self.match(frameQLParser.THEN)
            self.state = 4265 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4264
                self.procedureSqlStatement()
                self.state = 4267 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifAlternativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(frameQLParser.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(frameQLParser.THEN, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_elifAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElifAlternative" ):
                listener.enterElifAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElifAlternative" ):
                listener.exitElifAlternative(self)




    def elifAlternative(self):

        localctx = frameQLParser.ElifAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_elifAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4269
            self.match(frameQLParser.ELSEIF)
            self.state = 4270
            self.expression(0)
            self.state = 4271
            self.match(frameQLParser.THEN)
            self.state = 4273 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4272
                self.procedureSqlStatement()
                self.state = 4275 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (frameQLParser.ALTER - 9)) | (1 << (frameQLParser.ANALYZE - 9)) | (1 << (frameQLParser.CALL - 9)) | (1 << (frameQLParser.CASE - 9)) | (1 << (frameQLParser.CHANGE - 9)) | (1 << (frameQLParser.CHECK - 9)) | (1 << (frameQLParser.CREATE - 9)) | (1 << (frameQLParser.DATABASE - 9)) | (1 << (frameQLParser.DELETE - 9)) | (1 << (frameQLParser.DESC - 9)) | (1 << (frameQLParser.DESCRIBE - 9)) | (1 << (frameQLParser.DROP - 9)) | (1 << (frameQLParser.EXPLAIN - 9)) | (1 << (frameQLParser.FETCH - 9)) | (1 << (frameQLParser.GRANT - 9)) | (1 << (frameQLParser.IF - 9)))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (frameQLParser.INSERT - 75)) | (1 << (frameQLParser.ITERATE - 75)) | (1 << (frameQLParser.KILL - 75)) | (1 << (frameQLParser.LEAVE - 75)) | (1 << (frameQLParser.LEFT - 75)) | (1 << (frameQLParser.LOAD - 75)) | (1 << (frameQLParser.LOCK - 75)) | (1 << (frameQLParser.LOOP - 75)) | (1 << (frameQLParser.OPTIMIZE - 75)) | (1 << (frameQLParser.PURGE - 75)) | (1 << (frameQLParser.RELEASE - 75)) | (1 << (frameQLParser.RENAME - 75)) | (1 << (frameQLParser.REPEAT - 75)) | (1 << (frameQLParser.REPLACE - 75)) | (1 << (frameQLParser.RETURN - 75)) | (1 << (frameQLParser.REVOKE - 75)) | (1 << (frameQLParser.RIGHT - 75)) | (1 << (frameQLParser.SELECT - 75)) | (1 << (frameQLParser.SET - 75)) | (1 << (frameQLParser.SHOW - 75)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (frameQLParser.UNLOCK - 159)) | (1 << (frameQLParser.UPDATE - 159)) | (1 << (frameQLParser.USE - 159)) | (1 << (frameQLParser.WHILE - 159)) | (1 << (frameQLParser.DATE - 159)) | (1 << (frameQLParser.TIME - 159)) | (1 << (frameQLParser.TIMESTAMP - 159)) | (1 << (frameQLParser.DATETIME - 159)) | (1 << (frameQLParser.YEAR - 159)) | (1 << (frameQLParser.TEXT - 159)) | (1 << (frameQLParser.ENUM - 159)) | (1 << (frameQLParser.SERIAL - 159)) | (1 << (frameQLParser.COUNT - 159)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (frameQLParser.POSITION - 242)) | (1 << (frameQLParser.ACCOUNT - 242)) | (1 << (frameQLParser.ACTION - 242)) | (1 << (frameQLParser.AFTER - 242)) | (1 << (frameQLParser.AGGREGATE - 242)) | (1 << (frameQLParser.ALGORITHM - 242)) | (1 << (frameQLParser.ANY - 242)) | (1 << (frameQLParser.AT - 242)) | (1 << (frameQLParser.AUTHORS - 242)) | (1 << (frameQLParser.AUTOCOMMIT - 242)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 242)) | (1 << (frameQLParser.AUTO_INCREMENT - 242)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 242)) | (1 << (frameQLParser.BEGIN - 242)) | (1 << (frameQLParser.BINLOG - 242)) | (1 << (frameQLParser.BIT - 242)) | (1 << (frameQLParser.BLOCK - 242)) | (1 << (frameQLParser.BOOL - 242)) | (1 << (frameQLParser.BOOLEAN - 242)) | (1 << (frameQLParser.BTREE - 242)) | (1 << (frameQLParser.CACHE - 242)) | (1 << (frameQLParser.CASCADED - 242)) | (1 << (frameQLParser.CHAIN - 242)) | (1 << (frameQLParser.CHANGED - 242)) | (1 << (frameQLParser.CHANNEL - 242)) | (1 << (frameQLParser.CHECKSUM - 242)) | (1 << (frameQLParser.CIPHER - 242)) | (1 << (frameQLParser.CLIENT - 242)) | (1 << (frameQLParser.CLOSE - 242)) | (1 << (frameQLParser.COALESCE - 242)) | (1 << (frameQLParser.CODE - 242)) | (1 << (frameQLParser.COLUMNS - 242)) | (1 << (frameQLParser.COLUMN_FORMAT - 242)) | (1 << (frameQLParser.COMMENT - 242)) | (1 << (frameQLParser.COMMIT - 242)) | (1 << (frameQLParser.COMPACT - 242)) | (1 << (frameQLParser.COMPLETION - 242)) | (1 << (frameQLParser.COMPRESSED - 242)) | (1 << (frameQLParser.COMPRESSION - 242)) | (1 << (frameQLParser.CONCURRENT - 242)) | (1 << (frameQLParser.CONNECTION - 242)) | (1 << (frameQLParser.CONSISTENT - 242)) | (1 << (frameQLParser.CONTAINS - 242)) | (1 << (frameQLParser.CONTEXT - 242)) | (1 << (frameQLParser.CONTRIBUTORS - 242)) | (1 << (frameQLParser.COPY - 242)) | (1 << (frameQLParser.CPU - 242)) | (1 << (frameQLParser.DATA - 242)) | (1 << (frameQLParser.DATAFILE - 242)) | (1 << (frameQLParser.DEALLOCATE - 242)) | (1 << (frameQLParser.DEFAULT_AUTH - 242)) | (1 << (frameQLParser.DEFINER - 242)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 242)) | (1 << (frameQLParser.DIRECTORY - 242)) | (1 << (frameQLParser.DISABLE - 242)) | (1 << (frameQLParser.DISCARD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (frameQLParser.DISK - 306)) | (1 << (frameQLParser.DO - 306)) | (1 << (frameQLParser.DUMPFILE - 306)) | (1 << (frameQLParser.DUPLICATE - 306)) | (1 << (frameQLParser.DYNAMIC - 306)) | (1 << (frameQLParser.ENABLE - 306)) | (1 << (frameQLParser.ENCRYPTION - 306)) | (1 << (frameQLParser.ENDS - 306)) | (1 << (frameQLParser.ENGINE - 306)) | (1 << (frameQLParser.ENGINES - 306)) | (1 << (frameQLParser.ERROR - 306)) | (1 << (frameQLParser.ERRORS - 306)) | (1 << (frameQLParser.ESCAPE - 306)) | (1 << (frameQLParser.EVEN - 306)) | (1 << (frameQLParser.EVENT - 306)) | (1 << (frameQLParser.EVENTS - 306)) | (1 << (frameQLParser.EVERY - 306)) | (1 << (frameQLParser.EXCHANGE - 306)) | (1 << (frameQLParser.EXCLUSIVE - 306)) | (1 << (frameQLParser.EXPIRE - 306)) | (1 << (frameQLParser.EXTENDED - 306)) | (1 << (frameQLParser.EXTENT_SIZE - 306)) | (1 << (frameQLParser.FAST - 306)) | (1 << (frameQLParser.FAULTS - 306)) | (1 << (frameQLParser.FIELDS - 306)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 306)) | (1 << (frameQLParser.FILTER - 306)) | (1 << (frameQLParser.FIRST - 306)) | (1 << (frameQLParser.FIXED - 306)) | (1 << (frameQLParser.FLUSH - 306)) | (1 << (frameQLParser.FOLLOWS - 306)) | (1 << (frameQLParser.FULL - 306)) | (1 << (frameQLParser.FUNCTION - 306)) | (1 << (frameQLParser.GLOBAL - 306)) | (1 << (frameQLParser.GRANTS - 306)) | (1 << (frameQLParser.GROUP_REPLICATION - 306)) | (1 << (frameQLParser.HANDLER - 306)) | (1 << (frameQLParser.HASH - 306)) | (1 << (frameQLParser.HELP - 306)) | (1 << (frameQLParser.HOST - 306)) | (1 << (frameQLParser.IDENTIFIED - 306)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 306)) | (1 << (frameQLParser.IMPORT - 306)) | (1 << (frameQLParser.INDEXES - 306)) | (1 << (frameQLParser.INITIAL_SIZE - 306)) | (1 << (frameQLParser.INPLACE - 306)) | (1 << (frameQLParser.INSERT_METHOD - 306)) | (1 << (frameQLParser.INSTALL - 306)) | (1 << (frameQLParser.INSTANCE - 306)) | (1 << (frameQLParser.INVOKER - 306)) | (1 << (frameQLParser.IO - 306)) | (1 << (frameQLParser.IO_THREAD - 306)) | (1 << (frameQLParser.IPC - 306)) | (1 << (frameQLParser.ISOLATION - 306)) | (1 << (frameQLParser.ISSUER - 306)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 306)) | (1 << (frameQLParser.LANGUAGE - 306)) | (1 << (frameQLParser.LAST - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (frameQLParser.LEAVES - 370)) | (1 << (frameQLParser.LESS - 370)) | (1 << (frameQLParser.LEVEL - 370)) | (1 << (frameQLParser.LIST - 370)) | (1 << (frameQLParser.LOCAL - 370)) | (1 << (frameQLParser.LOGFILE - 370)) | (1 << (frameQLParser.LOGS - 370)) | (1 << (frameQLParser.MASTER - 370)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 370)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 370)) | (1 << (frameQLParser.MASTER_DELAY - 370)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 370)) | (1 << (frameQLParser.MASTER_HOST - 370)) | (1 << (frameQLParser.MASTER_LOG_FILE - 370)) | (1 << (frameQLParser.MASTER_LOG_POS - 370)) | (1 << (frameQLParser.MASTER_PASSWORD - 370)) | (1 << (frameQLParser.MASTER_PORT - 370)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 370)) | (1 << (frameQLParser.MASTER_SSL - 370)) | (1 << (frameQLParser.MASTER_SSL_CA - 370)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_CERT - 370)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 370)) | (1 << (frameQLParser.MASTER_SSL_CRL - 370)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 370)) | (1 << (frameQLParser.MASTER_SSL_KEY - 370)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 370)) | (1 << (frameQLParser.MASTER_USER - 370)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_ROWS - 370)) | (1 << (frameQLParser.MAX_SIZE - 370)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 370)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 370)) | (1 << (frameQLParser.MEDIUM - 370)) | (1 << (frameQLParser.MERGE - 370)) | (1 << (frameQLParser.MID - 370)) | (1 << (frameQLParser.MIGRATE - 370)) | (1 << (frameQLParser.MIN_ROWS - 370)) | (1 << (frameQLParser.MODIFY - 370)) | (1 << (frameQLParser.MUTEX - 370)) | (1 << (frameQLParser.MYSQL - 370)) | (1 << (frameQLParser.NAME - 370)) | (1 << (frameQLParser.NAMES - 370)) | (1 << (frameQLParser.NCHAR - 370)) | (1 << (frameQLParser.NEVER - 370)) | (1 << (frameQLParser.NO - 370)) | (1 << (frameQLParser.NODEGROUP - 370)) | (1 << (frameQLParser.NONE - 370)) | (1 << (frameQLParser.OFFLINE - 370)) | (1 << (frameQLParser.OFFSET - 370)) | (1 << (frameQLParser.OJ - 370)) | (1 << (frameQLParser.OLD_PASSWORD - 370)) | (1 << (frameQLParser.ONE - 370)) | (1 << (frameQLParser.ONLINE - 370)) | (1 << (frameQLParser.ONLY - 370)) | (1 << (frameQLParser.OPEN - 370)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 370)) | (1 << (frameQLParser.OPTIONS - 370)) | (1 << (frameQLParser.OWNER - 370)) | (1 << (frameQLParser.PACK_KEYS - 370)) | (1 << (frameQLParser.PAGE - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (frameQLParser.PARSER - 434)) | (1 << (frameQLParser.PARTIAL - 434)) | (1 << (frameQLParser.PARTITIONING - 434)) | (1 << (frameQLParser.PARTITIONS - 434)) | (1 << (frameQLParser.PASSWORD - 434)) | (1 << (frameQLParser.PHASE - 434)) | (1 << (frameQLParser.PLUGIN_DIR - 434)) | (1 << (frameQLParser.PLUGINS - 434)) | (1 << (frameQLParser.PORT - 434)) | (1 << (frameQLParser.PRECEDES - 434)) | (1 << (frameQLParser.PREPARE - 434)) | (1 << (frameQLParser.PRESERVE - 434)) | (1 << (frameQLParser.PREV - 434)) | (1 << (frameQLParser.PROCESSLIST - 434)) | (1 << (frameQLParser.PROFILE - 434)) | (1 << (frameQLParser.PROFILES - 434)) | (1 << (frameQLParser.PROXY - 434)) | (1 << (frameQLParser.QUERY - 434)) | (1 << (frameQLParser.QUICK - 434)) | (1 << (frameQLParser.REBUILD - 434)) | (1 << (frameQLParser.RECOVER - 434)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 434)) | (1 << (frameQLParser.REDUNDANT - 434)) | (1 << (frameQLParser.RELAY_LOG_FILE - 434)) | (1 << (frameQLParser.RELAY_LOG_POS - 434)) | (1 << (frameQLParser.RELAYLOG - 434)) | (1 << (frameQLParser.REMOVE - 434)) | (1 << (frameQLParser.REORGANIZE - 434)) | (1 << (frameQLParser.REPAIR - 434)) | (1 << (frameQLParser.REPLICATE_DO_DB - 434)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 434)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 434)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 434)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 434)) | (1 << (frameQLParser.REPLICATION - 434)) | (1 << (frameQLParser.RESET - 434)) | (1 << (frameQLParser.RESUME - 434)) | (1 << (frameQLParser.RETURNS - 434)) | (1 << (frameQLParser.ROLLBACK - 434)) | (1 << (frameQLParser.ROLLUP - 434)) | (1 << (frameQLParser.ROTATE - 434)) | (1 << (frameQLParser.ROW - 434)) | (1 << (frameQLParser.ROWS - 434)) | (1 << (frameQLParser.ROW_FORMAT - 434)) | (1 << (frameQLParser.SAVEPOINT - 434)) | (1 << (frameQLParser.SCHEDULE - 434)) | (1 << (frameQLParser.SECURITY - 434)) | (1 << (frameQLParser.SERVER - 434)) | (1 << (frameQLParser.SESSION - 434)) | (1 << (frameQLParser.SHARE - 434)) | (1 << (frameQLParser.SHARED - 434)) | (1 << (frameQLParser.SIGNED - 434)) | (1 << (frameQLParser.SIMPLE - 434)) | (1 << (frameQLParser.SLAVE - 434)) | (1 << (frameQLParser.SNAPSHOT - 434)) | (1 << (frameQLParser.SOCKET - 434)) | (1 << (frameQLParser.SOME - 434)) | (1 << (frameQLParser.SOUNDS - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (frameQLParser.SOURCE - 498)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 498)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 498)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 498)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 498)) | (1 << (frameQLParser.SQL_CACHE - 498)) | (1 << (frameQLParser.SQL_NO_CACHE - 498)) | (1 << (frameQLParser.SQL_THREAD - 498)) | (1 << (frameQLParser.START - 498)) | (1 << (frameQLParser.STARTS - 498)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 498)) | (1 << (frameQLParser.STATS_PERSISTENT - 498)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 498)) | (1 << (frameQLParser.STATUS - 498)) | (1 << (frameQLParser.STOP - 498)) | (1 << (frameQLParser.STORAGE - 498)) | (1 << (frameQLParser.STRING - 498)) | (1 << (frameQLParser.SUBJECT - 498)) | (1 << (frameQLParser.SUBPARTITION - 498)) | (1 << (frameQLParser.SUBPARTITIONS - 498)) | (1 << (frameQLParser.SUSPEND - 498)) | (1 << (frameQLParser.SWAPS - 498)) | (1 << (frameQLParser.SWITCHES - 498)) | (1 << (frameQLParser.TABLESPACE - 498)) | (1 << (frameQLParser.TEMPORARY - 498)) | (1 << (frameQLParser.TEMPTABLE - 498)) | (1 << (frameQLParser.THAN - 498)) | (1 << (frameQLParser.TRANSACTION - 498)) | (1 << (frameQLParser.TRUNCATE - 498)) | (1 << (frameQLParser.UNDEFINED - 498)) | (1 << (frameQLParser.UNDOFILE - 498)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 498)) | (1 << (frameQLParser.UNINSTALL - 498)) | (1 << (frameQLParser.UNKNOWN - 498)) | (1 << (frameQLParser.UPGRADE - 498)) | (1 << (frameQLParser.USER - 498)) | (1 << (frameQLParser.VALIDATION - 498)) | (1 << (frameQLParser.VALUE - 498)) | (1 << (frameQLParser.VARIABLES - 498)) | (1 << (frameQLParser.VIEW - 498)) | (1 << (frameQLParser.WAIT - 498)) | (1 << (frameQLParser.WARNINGS - 498)) | (1 << (frameQLParser.WITHOUT - 498)) | (1 << (frameQLParser.WORK - 498)) | (1 << (frameQLParser.WRAPPER - 498)) | (1 << (frameQLParser.X509 - 498)) | (1 << (frameQLParser.XA - 498)) | (1 << (frameQLParser.XML - 498)) | (1 << (frameQLParser.QUARTER - 498)) | (1 << (frameQLParser.MONTH - 498)) | (1 << (frameQLParser.DAY - 498)) | (1 << (frameQLParser.HOUR - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (frameQLParser.MINUTE - 562)) | (1 << (frameQLParser.WEEK - 562)) | (1 << (frameQLParser.SECOND - 562)) | (1 << (frameQLParser.MICROSECOND - 562)) | (1 << (frameQLParser.TABLES - 562)) | (1 << (frameQLParser.ROUTINE - 562)) | (1 << (frameQLParser.EXECUTE - 562)) | (1 << (frameQLParser.FILE - 562)) | (1 << (frameQLParser.PROCESS - 562)) | (1 << (frameQLParser.RELOAD - 562)) | (1 << (frameQLParser.SHUTDOWN - 562)) | (1 << (frameQLParser.SUPER - 562)) | (1 << (frameQLParser.PRIVILEGES - 562)) | (1 << (frameQLParser.ARMSCII8 - 562)) | (1 << (frameQLParser.ASCII - 562)) | (1 << (frameQLParser.BIG5 - 562)) | (1 << (frameQLParser.CP1250 - 562)) | (1 << (frameQLParser.CP1251 - 562)) | (1 << (frameQLParser.CP1256 - 562)) | (1 << (frameQLParser.CP1257 - 562)) | (1 << (frameQLParser.CP850 - 562)) | (1 << (frameQLParser.CP852 - 562)) | (1 << (frameQLParser.CP866 - 562)) | (1 << (frameQLParser.CP932 - 562)) | (1 << (frameQLParser.DEC8 - 562)) | (1 << (frameQLParser.EUCJPMS - 562)) | (1 << (frameQLParser.EUCKR - 562)) | (1 << (frameQLParser.GB2312 - 562)) | (1 << (frameQLParser.GBK - 562)) | (1 << (frameQLParser.GEOSTD8 - 562)) | (1 << (frameQLParser.GREEK - 562)) | (1 << (frameQLParser.HEBREW - 562)) | (1 << (frameQLParser.HP8 - 562)) | (1 << (frameQLParser.KEYBCS2 - 562)) | (1 << (frameQLParser.KOI8R - 562)) | (1 << (frameQLParser.KOI8U - 562)) | (1 << (frameQLParser.LATIN1 - 562)) | (1 << (frameQLParser.LATIN2 - 562)) | (1 << (frameQLParser.LATIN5 - 562)) | (1 << (frameQLParser.LATIN7 - 562)) | (1 << (frameQLParser.MACCE - 562)) | (1 << (frameQLParser.MACROMAN - 562)) | (1 << (frameQLParser.SJIS - 562)) | (1 << (frameQLParser.SWE7 - 562)) | (1 << (frameQLParser.TIS620 - 562)) | (1 << (frameQLParser.UCS2 - 562)) | (1 << (frameQLParser.UJIS - 562)) | (1 << (frameQLParser.UTF16 - 562)) | (1 << (frameQLParser.UTF16LE - 562)) | (1 << (frameQLParser.UTF32 - 562)) | (1 << (frameQLParser.UTF8 - 562)) | (1 << (frameQLParser.UTF8MB3 - 562)) | (1 << (frameQLParser.UTF8MB4 - 562)) | (1 << (frameQLParser.ARCHIVE - 562)) | (1 << (frameQLParser.BLACKHOLE - 562)) | (1 << (frameQLParser.CSV - 562)) | (1 << (frameQLParser.FEDERATED - 562)) | (1 << (frameQLParser.INNODB - 562)) | (1 << (frameQLParser.MEMORY - 562)) | (1 << (frameQLParser.MRG_MYISAM - 562)) | (1 << (frameQLParser.MYISAM - 562)) | (1 << (frameQLParser.NDB - 562)) | (1 << (frameQLParser.NDBCLUSTER - 562)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 562)))) != 0) or ((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 626)) | (1 << (frameQLParser.LINESTRING - 626)) | (1 << (frameQLParser.MULTILINESTRING - 626)) | (1 << (frameQLParser.MULTIPOINT - 626)) | (1 << (frameQLParser.MULTIPOLYGON - 626)) | (1 << (frameQLParser.POINT - 626)) | (1 << (frameQLParser.POLYGON - 626)) | (1 << (frameQLParser.ABS - 626)) | (1 << (frameQLParser.ACOS - 626)) | (1 << (frameQLParser.ADDDATE - 626)) | (1 << (frameQLParser.ADDTIME - 626)) | (1 << (frameQLParser.AES_DECRYPT - 626)) | (1 << (frameQLParser.AES_ENCRYPT - 626)) | (1 << (frameQLParser.AREA - 626)) | (1 << (frameQLParser.ASBINARY - 626)) | (1 << (frameQLParser.ASIN - 626)) | (1 << (frameQLParser.ASTEXT - 626)) | (1 << (frameQLParser.ASWKB - 626)) | (1 << (frameQLParser.ASWKT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 626)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 626)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 626)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 626)) | (1 << (frameQLParser.ATAN - 626)) | (1 << (frameQLParser.ATAN2 - 626)) | (1 << (frameQLParser.BENCHMARK - 626)) | (1 << (frameQLParser.BIN - 626)) | (1 << (frameQLParser.BIT_COUNT - 626)) | (1 << (frameQLParser.BIT_LENGTH - 626)) | (1 << (frameQLParser.BUFFER - 626)) | (1 << (frameQLParser.CEIL - 626)) | (1 << (frameQLParser.CEILING - 626)) | (1 << (frameQLParser.CENTROID - 626)) | (1 << (frameQLParser.CHARACTER_LENGTH - 626)) | (1 << (frameQLParser.CHARSET - 626)) | (1 << (frameQLParser.CHAR_LENGTH - 626)) | (1 << (frameQLParser.COERCIBILITY - 626)) | (1 << (frameQLParser.COLLATION - 626)) | (1 << (frameQLParser.COMPRESS - 626)) | (1 << (frameQLParser.CONCAT - 626)) | (1 << (frameQLParser.CONCAT_WS - 626)) | (1 << (frameQLParser.CONNECTION_ID - 626)) | (1 << (frameQLParser.CONV - 626)) | (1 << (frameQLParser.CONVERT_TZ - 626)) | (1 << (frameQLParser.COS - 626)) | (1 << (frameQLParser.COT - 626)) | (1 << (frameQLParser.CRC32 - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 626)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 626)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 626)) | (1 << (frameQLParser.CREATE_DIGEST - 626)) | (1 << (frameQLParser.CROSSES - 626)) | (1 << (frameQLParser.DATEDIFF - 626)) | (1 << (frameQLParser.DATE_FORMAT - 626)) | (1 << (frameQLParser.DAYNAME - 626)) | (1 << (frameQLParser.DAYOFMONTH - 626)) | (1 << (frameQLParser.DAYOFWEEK - 626)) | (1 << (frameQLParser.DAYOFYEAR - 626)) | (1 << (frameQLParser.DECODE - 626)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (frameQLParser.DEGREES - 690)) | (1 << (frameQLParser.DES_DECRYPT - 690)) | (1 << (frameQLParser.DES_ENCRYPT - 690)) | (1 << (frameQLParser.DIMENSION - 690)) | (1 << (frameQLParser.DISJOINT - 690)) | (1 << (frameQLParser.ELT - 690)) | (1 << (frameQLParser.ENCODE - 690)) | (1 << (frameQLParser.ENCRYPT - 690)) | (1 << (frameQLParser.ENDPOINT - 690)) | (1 << (frameQLParser.ENVELOPE - 690)) | (1 << (frameQLParser.EQUALS - 690)) | (1 << (frameQLParser.EXP - 690)) | (1 << (frameQLParser.EXPORT_SET - 690)) | (1 << (frameQLParser.EXTERIORRING - 690)) | (1 << (frameQLParser.EXTRACTVALUE - 690)) | (1 << (frameQLParser.FIELD - 690)) | (1 << (frameQLParser.FIND_IN_SET - 690)) | (1 << (frameQLParser.FLOOR - 690)) | (1 << (frameQLParser.FORMAT - 690)) | (1 << (frameQLParser.FOUND_ROWS - 690)) | (1 << (frameQLParser.FROM_BASE64 - 690)) | (1 << (frameQLParser.FROM_DAYS - 690)) | (1 << (frameQLParser.FROM_UNIXTIME - 690)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 690)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 690)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 690)) | (1 << (frameQLParser.GEOMETRYN - 690)) | (1 << (frameQLParser.GEOMETRYTYPE - 690)) | (1 << (frameQLParser.GEOMFROMTEXT - 690)) | (1 << (frameQLParser.GEOMFROMWKB - 690)) | (1 << (frameQLParser.GET_FORMAT - 690)) | (1 << (frameQLParser.GET_LOCK - 690)) | (1 << (frameQLParser.GLENGTH - 690)) | (1 << (frameQLParser.GREATEST - 690)) | (1 << (frameQLParser.GTID_SUBSET - 690)) | (1 << (frameQLParser.GTID_SUBTRACT - 690)) | (1 << (frameQLParser.HEX - 690)) | (1 << (frameQLParser.IFNULL - 690)) | (1 << (frameQLParser.INET6_ATON - 690)) | (1 << (frameQLParser.INET6_NTOA - 690)) | (1 << (frameQLParser.INET_ATON - 690)) | (1 << (frameQLParser.INET_NTOA - 690)) | (1 << (frameQLParser.INSTR - 690)) | (1 << (frameQLParser.INTERIORRINGN - 690)) | (1 << (frameQLParser.INTERSECTS - 690)) | (1 << (frameQLParser.ISCLOSED - 690)) | (1 << (frameQLParser.ISEMPTY - 690)) | (1 << (frameQLParser.ISNULL - 690)) | (1 << (frameQLParser.ISSIMPLE - 690)) | (1 << (frameQLParser.IS_FREE_LOCK - 690)) | (1 << (frameQLParser.IS_IPV4 - 690)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 690)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 690)) | (1 << (frameQLParser.IS_IPV6 - 690)) | (1 << (frameQLParser.IS_USED_LOCK - 690)) | (1 << (frameQLParser.LAST_INSERT_ID - 690)) | (1 << (frameQLParser.LCASE - 690)) | (1 << (frameQLParser.LEAST - 690)) | (1 << (frameQLParser.LENGTH - 690)) | (1 << (frameQLParser.LINEFROMTEXT - 690)) | (1 << (frameQLParser.LINEFROMWKB - 690)))) != 0) or ((((_la - 754)) & ~0x3f) == 0 and ((1 << (_la - 754)) & ((1 << (frameQLParser.LINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.LN - 754)) | (1 << (frameQLParser.LOAD_FILE - 754)) | (1 << (frameQLParser.LOCATE - 754)) | (1 << (frameQLParser.LOG - 754)) | (1 << (frameQLParser.LOG10 - 754)) | (1 << (frameQLParser.LOG2 - 754)) | (1 << (frameQLParser.LOWER - 754)) | (1 << (frameQLParser.LPAD - 754)) | (1 << (frameQLParser.LTRIM - 754)) | (1 << (frameQLParser.MAKEDATE - 754)) | (1 << (frameQLParser.MAKETIME - 754)) | (1 << (frameQLParser.MAKE_SET - 754)) | (1 << (frameQLParser.MASTER_POS_WAIT - 754)) | (1 << (frameQLParser.MBRCONTAINS - 754)) | (1 << (frameQLParser.MBRDISJOINT - 754)) | (1 << (frameQLParser.MBREQUAL - 754)) | (1 << (frameQLParser.MBRINTERSECTS - 754)) | (1 << (frameQLParser.MBROVERLAPS - 754)) | (1 << (frameQLParser.MBRTOUCHES - 754)) | (1 << (frameQLParser.MBRWITHIN - 754)) | (1 << (frameQLParser.MD5 - 754)) | (1 << (frameQLParser.MLINEFROMTEXT - 754)) | (1 << (frameQLParser.MLINEFROMWKB - 754)) | (1 << (frameQLParser.MONTHNAME - 754)) | (1 << (frameQLParser.MPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MPOINTFROMWKB - 754)) | (1 << (frameQLParser.MPOLYFROMTEXT - 754)) | (1 << (frameQLParser.MPOLYFROMWKB - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 754)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 754)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 754)) | (1 << (frameQLParser.NAME_CONST - 754)) | (1 << (frameQLParser.NULLIF - 754)) | (1 << (frameQLParser.NUMGEOMETRIES - 754)) | (1 << (frameQLParser.NUMINTERIORRINGS - 754)) | (1 << (frameQLParser.NUMPOINTS - 754)) | (1 << (frameQLParser.OCT - 754)) | (1 << (frameQLParser.OCTET_LENGTH - 754)) | (1 << (frameQLParser.ORD - 754)) | (1 << (frameQLParser.OVERLAPS - 754)) | (1 << (frameQLParser.PERIOD_ADD - 754)) | (1 << (frameQLParser.PERIOD_DIFF - 754)) | (1 << (frameQLParser.PI - 754)) | (1 << (frameQLParser.POINTFROMTEXT - 754)) | (1 << (frameQLParser.POINTFROMWKB - 754)) | (1 << (frameQLParser.POINTN - 754)) | (1 << (frameQLParser.POLYFROMTEXT - 754)) | (1 << (frameQLParser.POLYFROMWKB - 754)) | (1 << (frameQLParser.POLYGONFROMTEXT - 754)) | (1 << (frameQLParser.POLYGONFROMWKB - 754)) | (1 << (frameQLParser.POW - 754)) | (1 << (frameQLParser.POWER - 754)) | (1 << (frameQLParser.QUOTE - 754)) | (1 << (frameQLParser.RADIANS - 754)) | (1 << (frameQLParser.RAND - 754)) | (1 << (frameQLParser.RANDOM_BYTES - 754)) | (1 << (frameQLParser.RELEASE_LOCK - 754)) | (1 << (frameQLParser.REVERSE - 754)) | (1 << (frameQLParser.ROUND - 754)))) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & ((1 << (frameQLParser.ROW_COUNT - 818)) | (1 << (frameQLParser.RPAD - 818)) | (1 << (frameQLParser.RTRIM - 818)) | (1 << (frameQLParser.SEC_TO_TIME - 818)) | (1 << (frameQLParser.SESSION_USER - 818)) | (1 << (frameQLParser.SHA - 818)) | (1 << (frameQLParser.SHA1 - 818)) | (1 << (frameQLParser.SHA2 - 818)) | (1 << (frameQLParser.SIGN - 818)) | (1 << (frameQLParser.SIN - 818)) | (1 << (frameQLParser.SLEEP - 818)) | (1 << (frameQLParser.SOUNDEX - 818)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 818)) | (1 << (frameQLParser.SQRT - 818)) | (1 << (frameQLParser.SRID - 818)) | (1 << (frameQLParser.STARTPOINT - 818)) | (1 << (frameQLParser.STRCMP - 818)) | (1 << (frameQLParser.STR_TO_DATE - 818)) | (1 << (frameQLParser.ST_AREA - 818)) | (1 << (frameQLParser.ST_ASBINARY - 818)) | (1 << (frameQLParser.ST_ASTEXT - 818)) | (1 << (frameQLParser.ST_ASWKB - 818)) | (1 << (frameQLParser.ST_ASWKT - 818)) | (1 << (frameQLParser.ST_BUFFER - 818)) | (1 << (frameQLParser.ST_CENTROID - 818)) | (1 << (frameQLParser.ST_CONTAINS - 818)) | (1 << (frameQLParser.ST_CROSSES - 818)) | (1 << (frameQLParser.ST_DIFFERENCE - 818)) | (1 << (frameQLParser.ST_DIMENSION - 818)) | (1 << (frameQLParser.ST_DISJOINT - 818)) | (1 << (frameQLParser.ST_DISTANCE - 818)) | (1 << (frameQLParser.ST_ENDPOINT - 818)) | (1 << (frameQLParser.ST_ENVELOPE - 818)) | (1 << (frameQLParser.ST_EQUALS - 818)) | (1 << (frameQLParser.ST_EXTERIORRING - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 818)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 818)) | (1 << (frameQLParser.ST_GEOMETRYN - 818)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 818)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 818)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 818)) | (1 << (frameQLParser.ST_INTERIORRINGN - 818)) | (1 << (frameQLParser.ST_INTERSECTION - 818)) | (1 << (frameQLParser.ST_INTERSECTS - 818)) | (1 << (frameQLParser.ST_ISCLOSED - 818)) | (1 << (frameQLParser.ST_ISEMPTY - 818)) | (1 << (frameQLParser.ST_ISSIMPLE - 818)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINEFROMWKB - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 818)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 818)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 818)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 818)) | (1 << (frameQLParser.ST_NUMPOINTS - 818)) | (1 << (frameQLParser.ST_OVERLAPS - 818)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 818)) | (1 << (frameQLParser.ST_POINTFROMWKB - 818)) | (1 << (frameQLParser.ST_POINTN - 818)))) != 0) or ((((_la - 882)) & ~0x3f) == 0 and ((1 << (_la - 882)) & ((1 << (frameQLParser.ST_POLYFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYFROMWKB - 882)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 882)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 882)) | (1 << (frameQLParser.ST_SRID - 882)) | (1 << (frameQLParser.ST_STARTPOINT - 882)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 882)) | (1 << (frameQLParser.ST_TOUCHES - 882)) | (1 << (frameQLParser.ST_UNION - 882)) | (1 << (frameQLParser.ST_WITHIN - 882)) | (1 << (frameQLParser.ST_X - 882)) | (1 << (frameQLParser.ST_Y - 882)) | (1 << (frameQLParser.SUBDATE - 882)) | (1 << (frameQLParser.SUBSTRING_INDEX - 882)) | (1 << (frameQLParser.SUBTIME - 882)) | (1 << (frameQLParser.SYSTEM_USER - 882)) | (1 << (frameQLParser.TAN - 882)) | (1 << (frameQLParser.TIMEDIFF - 882)) | (1 << (frameQLParser.TIMESTAMPADD - 882)) | (1 << (frameQLParser.TIMESTAMPDIFF - 882)) | (1 << (frameQLParser.TIME_FORMAT - 882)) | (1 << (frameQLParser.TIME_TO_SEC - 882)) | (1 << (frameQLParser.TOUCHES - 882)) | (1 << (frameQLParser.TO_BASE64 - 882)) | (1 << (frameQLParser.TO_DAYS - 882)) | (1 << (frameQLParser.TO_SECONDS - 882)) | (1 << (frameQLParser.UCASE - 882)) | (1 << (frameQLParser.UNCOMPRESS - 882)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 882)) | (1 << (frameQLParser.UNHEX - 882)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 882)) | (1 << (frameQLParser.UPDATEXML - 882)) | (1 << (frameQLParser.UPPER - 882)) | (1 << (frameQLParser.UUID - 882)) | (1 << (frameQLParser.UUID_SHORT - 882)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 882)) | (1 << (frameQLParser.VERSION - 882)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 882)) | (1 << (frameQLParser.WEEKDAY - 882)) | (1 << (frameQLParser.WEEKOFYEAR - 882)) | (1 << (frameQLParser.WEIGHT_STRING - 882)) | (1 << (frameQLParser.WITHIN - 882)) | (1 << (frameQLParser.YEARWEEK - 882)) | (1 << (frameQLParser.Y_FUNCTION - 882)) | (1 << (frameQLParser.X_FUNCTION - 882)))) != 0) or ((((_la - 953)) & ~0x3f) == 0 and ((1 << (_la - 953)) & ((1 << (frameQLParser.LR_BRACKET - 953)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 953)) | (1 << (frameQLParser.STRING_LITERAL - 953)) | (1 << (frameQLParser.ID - 953)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 953)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_alterUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUserMysqlV56Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)
        def USER(self):
            return self.getToken(frameQLParser.USER, 0)
        def userSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserSpecificationContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserSpecificationContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV56" ):
                listener.enterAlterUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV56" ):
                listener.exitAlterUserMysqlV56(self)


    class AlterUserMysqlV57Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.AlterUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)
        def USER(self):
            return self.getToken(frameQLParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserAuthOptionContext,i)

        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(frameQLParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserLockOptionContext,i)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(frameQLParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.AND)
            else:
                return self.getToken(frameQLParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV57" ):
                listener.enterAlterUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV57" ):
                listener.exitAlterUserMysqlV57(self)



    def alterUser(self):

        localctx = frameQLParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_alterUser)
        self._la = 0 # Token type
        try:
            self.state = 4331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.AlterUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4277
                self.match(frameQLParser.ALTER)
                self.state = 4278
                self.match(frameQLParser.USER)
                self.state = 4279
                self.userSpecification()
                self.state = 4284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 4280
                    self.match(frameQLParser.COMMA)
                    self.state = 4281
                    self.userSpecification()
                    self.state = 4286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = frameQLParser.AlterUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4287
                self.match(frameQLParser.ALTER)
                self.state = 4288
                self.match(frameQLParser.USER)
                self.state = 4290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.IF:
                    self.state = 4289
                    self.ifExists()


                self.state = 4292
                self.userAuthOption()
                self.state = 4297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 4293
                    self.match(frameQLParser.COMMA)
                    self.state = 4294
                    self.userAuthOption()
                    self.state = 4299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.REQUIRE:
                    self.state = 4300
                    self.match(frameQLParser.REQUIRE)
                    self.state = 4312
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [frameQLParser.NONE]:
                        self.state = 4301
                        localctx.tlsNone = self.match(frameQLParser.NONE)
                        pass
                    elif token in [frameQLParser.SSL, frameQLParser.CIPHER, frameQLParser.ISSUER, frameQLParser.SUBJECT, frameQLParser.X509]:
                        self.state = 4302
                        self.tlsOption()
                        self.state = 4309
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==frameQLParser.AND or _la==frameQLParser.SSL or _la==frameQLParser.CIPHER or _la==frameQLParser.ISSUER or _la==frameQLParser.SUBJECT or _la==frameQLParser.X509:
                            self.state = 4304
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==frameQLParser.AND:
                                self.state = 4303
                                self.match(frameQLParser.AND)


                            self.state = 4306
                            self.tlsOption()
                            self.state = 4311
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.WITH:
                    self.state = 4316
                    self.match(frameQLParser.WITH)
                    self.state = 4318 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4317
                        self.userResourceOption()
                        self.state = 4320 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 398)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 398)))) != 0)):
                            break



                self.state = 4328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.ACCOUNT or _la==frameQLParser.PASSWORD:
                    self.state = 4326
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [frameQLParser.PASSWORD]:
                        self.state = 4324
                        self.userPasswordOption()
                        pass
                    elif token in [frameQLParser.ACCOUNT]:
                        self.state = 4325
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_createUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateUserMysqlV57Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CreateUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)
        def USER(self):
            return self.getToken(frameQLParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserAuthOptionContext,i)

        def ifNotExists(self):
            return self.getTypedRuleContext(frameQLParser.IfNotExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(frameQLParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserLockOptionContext,i)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(frameQLParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.AND)
            else:
                return self.getToken(frameQLParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV57" ):
                listener.enterCreateUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV57" ):
                listener.exitCreateUserMysqlV57(self)


    class CreateUserMysqlV56Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.CreateUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)
        def USER(self):
            return self.getToken(frameQLParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserAuthOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV56" ):
                listener.enterCreateUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV56" ):
                listener.exitCreateUserMysqlV56(self)



    def createUser(self):

        localctx = frameQLParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_createUser)
        self._la = 0 # Token type
        try:
            self.state = 4387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,634,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.CreateUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4333
                self.match(frameQLParser.CREATE)
                self.state = 4334
                self.match(frameQLParser.USER)
                self.state = 4335
                self.userAuthOption()
                self.state = 4340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 4336
                    self.match(frameQLParser.COMMA)
                    self.state = 4337
                    self.userAuthOption()
                    self.state = 4342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = frameQLParser.CreateUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4343
                self.match(frameQLParser.CREATE)
                self.state = 4344
                self.match(frameQLParser.USER)
                self.state = 4346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.IF:
                    self.state = 4345
                    self.ifNotExists()


                self.state = 4348
                self.userAuthOption()
                self.state = 4353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 4349
                    self.match(frameQLParser.COMMA)
                    self.state = 4350
                    self.userAuthOption()
                    self.state = 4355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.REQUIRE:
                    self.state = 4356
                    self.match(frameQLParser.REQUIRE)
                    self.state = 4368
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [frameQLParser.NONE]:
                        self.state = 4357
                        localctx.tlsNone = self.match(frameQLParser.NONE)
                        pass
                    elif token in [frameQLParser.SSL, frameQLParser.CIPHER, frameQLParser.ISSUER, frameQLParser.SUBJECT, frameQLParser.X509]:
                        self.state = 4358
                        self.tlsOption()
                        self.state = 4365
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==frameQLParser.AND or _la==frameQLParser.SSL or _la==frameQLParser.CIPHER or _la==frameQLParser.ISSUER or _la==frameQLParser.SUBJECT or _la==frameQLParser.X509:
                            self.state = 4360
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==frameQLParser.AND:
                                self.state = 4359
                                self.match(frameQLParser.AND)


                            self.state = 4362
                            self.tlsOption()
                            self.state = 4367
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.WITH:
                    self.state = 4372
                    self.match(frameQLParser.WITH)
                    self.state = 4374 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4373
                        self.userResourceOption()
                        self.state = 4376 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 398)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 398)))) != 0)):
                            break



                self.state = 4384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.ACCOUNT or _la==frameQLParser.PASSWORD:
                    self.state = 4382
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [frameQLParser.PASSWORD]:
                        self.state = 4380
                        self.userPasswordOption()
                        pass
                    elif token in [frameQLParser.ACCOUNT]:
                        self.state = 4381
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def USER(self):
            return self.getToken(frameQLParser.USER, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserNameContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(frameQLParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)




    def dropUser(self):

        localctx = frameQLParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_dropUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4389
            self.match(frameQLParser.DROP)
            self.state = 4390
            self.match(frameQLParser.USER)
            self.state = 4392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IF:
                self.state = 4391
                self.ifExists()


            self.state = 4394
            self.userName()
            self.state = 4399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 4395
                self.match(frameQLParser.COMMA)
                self.state = 4396
                self.userName()
                self.state = 4401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.privilegeObject = None # Token
            self.tlsNone = None # Token

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.GRANT)
            else:
                return self.getToken(frameQLParser.GRANT, i)

        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PrivelegeClauseContext,i)


        def ON(self):
            return self.getToken(frameQLParser.ON, 0)

        def privilegeLevel(self):
            return self.getTypedRuleContext(frameQLParser.PrivilegeLevelContext,0)


        def TO(self):
            return self.getToken(frameQLParser.TO, 0)

        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserAuthOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def REQUIRE(self):
            return self.getToken(frameQLParser.REQUIRE, 0)

        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(frameQLParser.PROCEDURE, 0)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TlsOptionContext,i)


        def NONE(self):
            return self.getToken(frameQLParser.NONE, 0)

        def OPTION(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.OPTION)
            else:
                return self.getToken(frameQLParser.OPTION, i)

        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserResourceOptionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.AND)
            else:
                return self.getToken(frameQLParser.AND, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_grantStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantStatement" ):
                listener.enterGrantStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantStatement" ):
                listener.exitGrantStatement(self)




    def grantStatement(self):

        localctx = frameQLParser.GrantStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_grantStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4402
            self.match(frameQLParser.GRANT)
            self.state = 4403
            self.privelegeClause()
            self.state = 4408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 4404
                self.match(frameQLParser.COMMA)
                self.state = 4405
                self.privelegeClause()
                self.state = 4410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4411
            self.match(frameQLParser.ON)
            self.state = 4413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,638,self._ctx)
            if la_ == 1:
                self.state = 4412
                localctx.privilegeObject = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.PROCEDURE or _la==frameQLParser.TABLE or _la==frameQLParser.FUNCTION):
                    localctx.privilegeObject = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4415
            self.privilegeLevel()
            self.state = 4416
            self.match(frameQLParser.TO)
            self.state = 4417
            self.userAuthOption()
            self.state = 4422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 4418
                self.match(frameQLParser.COMMA)
                self.state = 4419
                self.userAuthOption()
                self.state = 4424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.REQUIRE:
                self.state = 4425
                self.match(frameQLParser.REQUIRE)
                self.state = 4437
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.NONE]:
                    self.state = 4426
                    localctx.tlsNone = self.match(frameQLParser.NONE)
                    pass
                elif token in [frameQLParser.SSL, frameQLParser.CIPHER, frameQLParser.ISSUER, frameQLParser.SUBJECT, frameQLParser.X509]:
                    self.state = 4427
                    self.tlsOption()
                    self.state = 4434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==frameQLParser.AND or _la==frameQLParser.SSL or _la==frameQLParser.CIPHER or _la==frameQLParser.ISSUER or _la==frameQLParser.SUBJECT or _la==frameQLParser.X509:
                        self.state = 4429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==frameQLParser.AND:
                            self.state = 4428
                            self.match(frameQLParser.AND)


                        self.state = 4431
                        self.tlsOption()
                        self.state = 4436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 4450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WITH:
                self.state = 4441
                self.match(frameQLParser.WITH)
                self.state = 4447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.GRANT or ((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 398)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 398)))) != 0):
                    self.state = 4445
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [frameQLParser.GRANT]:
                        self.state = 4442
                        self.match(frameQLParser.GRANT)
                        self.state = 4443
                        self.match(frameQLParser.OPTION)
                        pass
                    elif token in [frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS]:
                        self.state = 4444
                        self.userResourceOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantProxyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.toOther = list() # of UserNameContexts

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.GRANT)
            else:
                return self.getToken(frameQLParser.GRANT, i)

        def PROXY(self):
            return self.getToken(frameQLParser.PROXY, 0)

        def ON(self):
            return self.getToken(frameQLParser.ON, 0)

        def TO(self):
            return self.getToken(frameQLParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)

        def OPTION(self):
            return self.getToken(frameQLParser.OPTION, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_grantProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantProxy" ):
                listener.enterGrantProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantProxy" ):
                listener.exitGrantProxy(self)




    def grantProxy(self):

        localctx = frameQLParser.GrantProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_grantProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4452
            self.match(frameQLParser.GRANT)
            self.state = 4453
            self.match(frameQLParser.PROXY)
            self.state = 4454
            self.match(frameQLParser.ON)
            self.state = 4455
            localctx.fromFirst = self.userName()
            self.state = 4456
            self.match(frameQLParser.TO)
            self.state = 4457
            localctx.toFirst = self.userName()
            self.state = 4462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 4458
                self.match(frameQLParser.COMMA)
                self.state = 4459
                localctx._userName = self.userName()
                localctx.toOther.append(localctx._userName)
                self.state = 4464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.WITH:
                self.state = 4465
                self.match(frameQLParser.WITH)
                self.state = 4466
                self.match(frameQLParser.GRANT)
                self.state = 4467
                self.match(frameQLParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(frameQLParser.RENAME, 0)

        def USER(self):
            return self.getToken(frameQLParser.USER, 0)

        def renameUserClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.RenameUserClauseContext)
            else:
                return self.getTypedRuleContext(frameQLParser.RenameUserClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)




    def renameUser(self):

        localctx = frameQLParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4470
            self.match(frameQLParser.RENAME)
            self.state = 4471
            self.match(frameQLParser.USER)
            self.state = 4472
            self.renameUserClause()
            self.state = 4477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 4473
                self.match(frameQLParser.COMMA)
                self.state = 4474
                self.renameUserClause()
                self.state = 4479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_revokeStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DetailRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.RevokeStatementContext
            super().__init__(parser)
            self.privilegeObject = None # Token
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(frameQLParser.REVOKE, 0)
        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PrivelegeClauseContext,i)

        def ON(self):
            return self.getToken(frameQLParser.ON, 0)
        def privilegeLevel(self):
            return self.getTypedRuleContext(frameQLParser.PrivilegeLevelContext,0)

        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserNameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)
        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)
        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(frameQLParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetailRevoke" ):
                listener.enterDetailRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetailRevoke" ):
                listener.exitDetailRevoke(self)


    class ShortRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(frameQLParser.REVOKE, 0)
        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)
        def GRANT(self):
            return self.getToken(frameQLParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(frameQLParser.OPTION, 0)
        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserNameContext,i)

        def PRIVILEGES(self):
            return self.getToken(frameQLParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortRevoke" ):
                listener.enterShortRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortRevoke" ):
                listener.exitShortRevoke(self)



    def revokeStatement(self):

        localctx = frameQLParser.RevokeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_revokeStatement)
        self._la = 0 # Token type
        try:
            self.state = 4520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,655,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.DetailRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4480
                self.match(frameQLParser.REVOKE)
                self.state = 4481
                self.privelegeClause()
                self.state = 4486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 4482
                    self.match(frameQLParser.COMMA)
                    self.state = 4483
                    self.privelegeClause()
                    self.state = 4488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4489
                self.match(frameQLParser.ON)
                self.state = 4491
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
                if la_ == 1:
                    self.state = 4490
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.PROCEDURE or _la==frameQLParser.TABLE or _la==frameQLParser.FUNCTION):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4493
                self.privilegeLevel()
                self.state = 4494
                self.match(frameQLParser.FROM)
                self.state = 4495
                self.userName()
                self.state = 4500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 4496
                    self.match(frameQLParser.COMMA)
                    self.state = 4497
                    self.userName()
                    self.state = 4502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = frameQLParser.ShortRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4503
                self.match(frameQLParser.REVOKE)
                self.state = 4504
                self.match(frameQLParser.ALL)
                self.state = 4506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.PRIVILEGES:
                    self.state = 4505
                    self.match(frameQLParser.PRIVILEGES)


                self.state = 4508
                self.match(frameQLParser.COMMA)
                self.state = 4509
                self.match(frameQLParser.GRANT)
                self.state = 4510
                self.match(frameQLParser.OPTION)
                self.state = 4511
                self.match(frameQLParser.FROM)
                self.state = 4512
                self.userName()
                self.state = 4517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 4513
                    self.match(frameQLParser.COMMA)
                    self.state = 4514
                    self.userName()
                    self.state = 4519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeProxyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onUser = None # UserNameContext
            self.fromFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.fromOther = list() # of UserNameContexts

        def REVOKE(self):
            return self.getToken(frameQLParser.REVOKE, 0)

        def PROXY(self):
            return self.getToken(frameQLParser.PROXY, 0)

        def ON(self):
            return self.getToken(frameQLParser.ON, 0)

        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_revokeProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeProxy" ):
                listener.enterRevokeProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeProxy" ):
                listener.exitRevokeProxy(self)




    def revokeProxy(self):

        localctx = frameQLParser.RevokeProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_revokeProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4522
            self.match(frameQLParser.REVOKE)
            self.state = 4523
            self.match(frameQLParser.PROXY)
            self.state = 4524
            self.match(frameQLParser.ON)
            self.state = 4525
            localctx.onUser = self.userName()
            self.state = 4526
            self.match(frameQLParser.FROM)
            self.state = 4527
            localctx.fromFirst = self.userName()
            self.state = 4532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 4528
                self.match(frameQLParser.COMMA)
                self.state = 4529
                localctx._userName = self.userName()
                localctx.fromOther.append(localctx._userName)
                self.state = 4534
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetPasswordStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def PASSWORD(self):
            return self.getToken(frameQLParser.PASSWORD, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(frameQLParser.PasswordFunctionClauseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def userName(self):
            return self.getTypedRuleContext(frameQLParser.UserNameContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_setPasswordStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPasswordStatement" ):
                listener.enterSetPasswordStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPasswordStatement" ):
                listener.exitSetPasswordStatement(self)




    def setPasswordStatement(self):

        localctx = frameQLParser.SetPasswordStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_setPasswordStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4535
            self.match(frameQLParser.SET)
            self.state = 4536
            self.match(frameQLParser.PASSWORD)
            self.state = 4539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.FOR:
                self.state = 4537
                self.match(frameQLParser.FOR)
                self.state = 4538
                self.userName()


            self.state = 4541
            self.match(frameQLParser.EQUAL_SYMBOL)
            self.state = 4544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.OLD_PASSWORD, frameQLParser.PASSWORD]:
                self.state = 4542
                self.passwordFunctionClause()
                pass
            elif token in [frameQLParser.STRING_LITERAL]:
                self.state = 4543
                self.match(frameQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userName(self):
            return self.getTypedRuleContext(frameQLParser.UserNameContext,0)


        def userPasswordOption(self):
            return self.getTypedRuleContext(frameQLParser.UserPasswordOptionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_userSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserSpecification" ):
                listener.enterUserSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserSpecification" ):
                listener.exitUserSpecification(self)




    def userSpecification(self):

        localctx = frameQLParser.UserSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_userSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4546
            self.userName()
            self.state = 4547
            self.userPasswordOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserAuthOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_userAuthOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(frameQLParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleAuthOption" ):
                listener.enterSimpleAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleAuthOption" ):
                listener.exitSimpleAuthOption(self)


    class PasswordAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.UserAuthOptionContext
            super().__init__(parser)
            self.hashed = None # Token
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(frameQLParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(frameQLParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(frameQLParser.BY, 0)
        def PASSWORD(self):
            return self.getToken(frameQLParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordAuthOption" ):
                listener.enterPasswordAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordAuthOption" ):
                listener.exitPasswordAuthOption(self)


    class StringAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(frameQLParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(frameQLParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(frameQLParser.BY, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(frameQLParser.AuthPluginContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringAuthOption" ):
                listener.enterStringAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringAuthOption" ):
                listener.exitStringAuthOption(self)


    class HashAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(frameQLParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(frameQLParser.IDENTIFIED, 0)
        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(frameQLParser.AuthPluginContext,0)

        def AS(self):
            return self.getToken(frameQLParser.AS, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashAuthOption" ):
                listener.enterHashAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashAuthOption" ):
                listener.exitHashAuthOption(self)



    def userAuthOption(self):

        localctx = frameQLParser.UserAuthOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_userAuthOption)
        self._la = 0 # Token type
        try:
            self.state = 4573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.PasswordAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4549
                self.userName()
                self.state = 4550
                self.match(frameQLParser.IDENTIFIED)
                self.state = 4551
                self.match(frameQLParser.BY)
                self.state = 4552
                self.match(frameQLParser.PASSWORD)
                self.state = 4553
                localctx.hashed = self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                localctx = frameQLParser.StringAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4555
                self.userName()
                self.state = 4556
                self.match(frameQLParser.IDENTIFIED)
                self.state = 4559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.WITH:
                    self.state = 4557
                    self.match(frameQLParser.WITH)
                    self.state = 4558
                    self.authPlugin()


                self.state = 4561
                self.match(frameQLParser.BY)
                self.state = 4562
                self.match(frameQLParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = frameQLParser.HashAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4564
                self.userName()
                self.state = 4565
                self.match(frameQLParser.IDENTIFIED)
                self.state = 4566
                self.match(frameQLParser.WITH)
                self.state = 4567
                self.authPlugin()
                self.state = 4570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.AS:
                    self.state = 4568
                    self.match(frameQLParser.AS)
                    self.state = 4569
                    self.match(frameQLParser.STRING_LITERAL)


                pass

            elif la_ == 4:
                localctx = frameQLParser.SimpleAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4572
                self.userName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlsOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SSL(self):
            return self.getToken(frameQLParser.SSL, 0)

        def X509(self):
            return self.getToken(frameQLParser.X509, 0)

        def CIPHER(self):
            return self.getToken(frameQLParser.CIPHER, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def ISSUER(self):
            return self.getToken(frameQLParser.ISSUER, 0)

        def SUBJECT(self):
            return self.getToken(frameQLParser.SUBJECT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_tlsOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTlsOption" ):
                listener.enterTlsOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTlsOption" ):
                listener.exitTlsOption(self)




    def tlsOption(self):

        localctx = frameQLParser.TlsOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_tlsOption)
        try:
            self.state = 4583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.SSL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4575
                self.match(frameQLParser.SSL)
                pass
            elif token in [frameQLParser.X509]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4576
                self.match(frameQLParser.X509)
                pass
            elif token in [frameQLParser.CIPHER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4577
                self.match(frameQLParser.CIPHER)
                self.state = 4578
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.ISSUER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4579
                self.match(frameQLParser.ISSUER)
                self.state = 4580
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.SUBJECT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4581
                self.match(frameQLParser.SUBJECT)
                self.state = 4582
                self.match(frameQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserResourceOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(frameQLParser.MAX_QUERIES_PER_HOUR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(frameQLParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(frameQLParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(frameQLParser.MAX_USER_CONNECTIONS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_userResourceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserResourceOption" ):
                listener.enterUserResourceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserResourceOption" ):
                listener.exitUserResourceOption(self)




    def userResourceOption(self):

        localctx = frameQLParser.UserResourceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_userResourceOption)
        try:
            self.state = 4593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.MAX_QUERIES_PER_HOUR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4585
                self.match(frameQLParser.MAX_QUERIES_PER_HOUR)
                self.state = 4586
                self.decimalLiteral()
                pass
            elif token in [frameQLParser.MAX_UPDATES_PER_HOUR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4587
                self.match(frameQLParser.MAX_UPDATES_PER_HOUR)
                self.state = 4588
                self.decimalLiteral()
                pass
            elif token in [frameQLParser.MAX_CONNECTIONS_PER_HOUR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4589
                self.match(frameQLParser.MAX_CONNECTIONS_PER_HOUR)
                self.state = 4590
                self.decimalLiteral()
                pass
            elif token in [frameQLParser.MAX_USER_CONNECTIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4591
                self.match(frameQLParser.MAX_USER_CONNECTIONS)
                self.state = 4592
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expireType = None # Token

        def PASSWORD(self):
            return self.getToken(frameQLParser.PASSWORD, 0)

        def EXPIRE(self):
            return self.getToken(frameQLParser.EXPIRE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def DAY(self):
            return self.getToken(frameQLParser.DAY, 0)

        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def NEVER(self):
            return self.getToken(frameQLParser.NEVER, 0)

        def INTERVAL(self):
            return self.getToken(frameQLParser.INTERVAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_userPasswordOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPasswordOption" ):
                listener.enterUserPasswordOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPasswordOption" ):
                listener.exitUserPasswordOption(self)




    def userPasswordOption(self):

        localctx = frameQLParser.UserPasswordOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_userPasswordOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4595
            self.match(frameQLParser.PASSWORD)
            self.state = 4596
            self.match(frameQLParser.EXPIRE)
            self.state = 4603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.DEFAULT]:
                self.state = 4597
                localctx.expireType = self.match(frameQLParser.DEFAULT)
                pass
            elif token in [frameQLParser.NEVER]:
                self.state = 4598
                localctx.expireType = self.match(frameQLParser.NEVER)
                pass
            elif token in [frameQLParser.INTERVAL]:
                self.state = 4599
                localctx.expireType = self.match(frameQLParser.INTERVAL)
                self.state = 4600
                self.decimalLiteral()
                self.state = 4601
                self.match(frameQLParser.DAY)
                pass
            elif token in [frameQLParser.EOF, frameQLParser.ACCOUNT, frameQLParser.PASSWORD, frameQLParser.MINUSMINUS, frameQLParser.COMMA, frameQLParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserLockOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lockType = None # Token

        def ACCOUNT(self):
            return self.getToken(frameQLParser.ACCOUNT, 0)

        def LOCK(self):
            return self.getToken(frameQLParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(frameQLParser.UNLOCK, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_userLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserLockOption" ):
                listener.enterUserLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserLockOption" ):
                listener.exitUserLockOption(self)




    def userLockOption(self):

        localctx = frameQLParser.UserLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_userLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4605
            self.match(frameQLParser.ACCOUNT)
            self.state = 4606
            localctx.lockType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.LOCK or _la==frameQLParser.UNLOCK):
                localctx.lockType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivelegeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(frameQLParser.PrivilegeContext,0)


        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_privelegeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivelegeClause" ):
                listener.enterPrivelegeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivelegeClause" ):
                listener.exitPrivelegeClause(self)




    def privelegeClause(self):

        localctx = frameQLParser.PrivelegeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_privelegeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4608
            self.privilege()
            self.state = 4613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LR_BRACKET:
                self.state = 4609
                self.match(frameQLParser.LR_BRACKET)
                self.state = 4610
                self.uidList()
                self.state = 4611
                self.match(frameQLParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(frameQLParser.PRIVILEGES, 0)

        def ALTER(self):
            return self.getToken(frameQLParser.ALTER, 0)

        def ROUTINE(self):
            return self.getToken(frameQLParser.ROUTINE, 0)

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(frameQLParser.TEMPORARY, 0)

        def TABLES(self):
            return self.getToken(frameQLParser.TABLES, 0)

        def VIEW(self):
            return self.getToken(frameQLParser.VIEW, 0)

        def USER(self):
            return self.getToken(frameQLParser.USER, 0)

        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)

        def DELETE(self):
            return self.getToken(frameQLParser.DELETE, 0)

        def DROP(self):
            return self.getToken(frameQLParser.DROP, 0)

        def EVENT(self):
            return self.getToken(frameQLParser.EVENT, 0)

        def EXECUTE(self):
            return self.getToken(frameQLParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(frameQLParser.FILE, 0)

        def GRANT(self):
            return self.getToken(frameQLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(frameQLParser.OPTION, 0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(frameQLParser.INSERT, 0)

        def LOCK(self):
            return self.getToken(frameQLParser.LOCK, 0)

        def PROCESS(self):
            return self.getToken(frameQLParser.PROCESS, 0)

        def PROXY(self):
            return self.getToken(frameQLParser.PROXY, 0)

        def REFERENCES(self):
            return self.getToken(frameQLParser.REFERENCES, 0)

        def RELOAD(self):
            return self.getToken(frameQLParser.RELOAD, 0)

        def REPLICATION(self):
            return self.getToken(frameQLParser.REPLICATION, 0)

        def CLIENT(self):
            return self.getToken(frameQLParser.CLIENT, 0)

        def SLAVE(self):
            return self.getToken(frameQLParser.SLAVE, 0)

        def SELECT(self):
            return self.getToken(frameQLParser.SELECT, 0)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(frameQLParser.DATABASES, 0)

        def SHUTDOWN(self):
            return self.getToken(frameQLParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(frameQLParser.SUPER, 0)

        def TRIGGER(self):
            return self.getToken(frameQLParser.TRIGGER, 0)

        def UPDATE(self):
            return self.getToken(frameQLParser.UPDATE, 0)

        def USAGE(self):
            return self.getToken(frameQLParser.USAGE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = frameQLParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.state = 4657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4615
                self.match(frameQLParser.ALL)
                self.state = 4617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.PRIVILEGES:
                    self.state = 4616
                    self.match(frameQLParser.PRIVILEGES)


                pass
            elif token in [frameQLParser.ALTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4619
                self.match(frameQLParser.ALTER)
                self.state = 4621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ROUTINE:
                    self.state = 4620
                    self.match(frameQLParser.ROUTINE)


                pass
            elif token in [frameQLParser.CREATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4623
                self.match(frameQLParser.CREATE)
                self.state = 4630
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.TEMPORARY]:
                    self.state = 4624
                    self.match(frameQLParser.TEMPORARY)
                    self.state = 4625
                    self.match(frameQLParser.TABLES)
                    pass
                elif token in [frameQLParser.ROUTINE]:
                    self.state = 4626
                    self.match(frameQLParser.ROUTINE)
                    pass
                elif token in [frameQLParser.VIEW]:
                    self.state = 4627
                    self.match(frameQLParser.VIEW)
                    pass
                elif token in [frameQLParser.USER]:
                    self.state = 4628
                    self.match(frameQLParser.USER)
                    pass
                elif token in [frameQLParser.TABLESPACE]:
                    self.state = 4629
                    self.match(frameQLParser.TABLESPACE)
                    pass
                elif token in [frameQLParser.ON, frameQLParser.LR_BRACKET, frameQLParser.COMMA]:
                    pass
                else:
                    pass
                pass
            elif token in [frameQLParser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4632
                self.match(frameQLParser.DELETE)
                pass
            elif token in [frameQLParser.DROP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4633
                self.match(frameQLParser.DROP)
                pass
            elif token in [frameQLParser.EVENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4634
                self.match(frameQLParser.EVENT)
                pass
            elif token in [frameQLParser.EXECUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4635
                self.match(frameQLParser.EXECUTE)
                pass
            elif token in [frameQLParser.FILE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4636
                self.match(frameQLParser.FILE)
                pass
            elif token in [frameQLParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4637
                self.match(frameQLParser.GRANT)
                self.state = 4638
                self.match(frameQLParser.OPTION)
                pass
            elif token in [frameQLParser.INDEX]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4639
                self.match(frameQLParser.INDEX)
                pass
            elif token in [frameQLParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4640
                self.match(frameQLParser.INSERT)
                pass
            elif token in [frameQLParser.LOCK]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4641
                self.match(frameQLParser.LOCK)
                self.state = 4642
                self.match(frameQLParser.TABLES)
                pass
            elif token in [frameQLParser.PROCESS]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4643
                self.match(frameQLParser.PROCESS)
                pass
            elif token in [frameQLParser.PROXY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4644
                self.match(frameQLParser.PROXY)
                pass
            elif token in [frameQLParser.REFERENCES]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4645
                self.match(frameQLParser.REFERENCES)
                pass
            elif token in [frameQLParser.RELOAD]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4646
                self.match(frameQLParser.RELOAD)
                pass
            elif token in [frameQLParser.REPLICATION]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4647
                self.match(frameQLParser.REPLICATION)
                self.state = 4648
                _la = self._input.LA(1)
                if not(_la==frameQLParser.CLIENT or _la==frameQLParser.SLAVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.SELECT]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4649
                self.match(frameQLParser.SELECT)
                pass
            elif token in [frameQLParser.SHOW]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4650
                self.match(frameQLParser.SHOW)
                self.state = 4651
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DATABASES or _la==frameQLParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 20)
                self.state = 4652
                self.match(frameQLParser.SHUTDOWN)
                pass
            elif token in [frameQLParser.SUPER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 4653
                self.match(frameQLParser.SUPER)
                pass
            elif token in [frameQLParser.TRIGGER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 4654
                self.match(frameQLParser.TRIGGER)
                pass
            elif token in [frameQLParser.UPDATE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 4655
                self.match(frameQLParser.UPDATE)
                pass
            elif token in [frameQLParser.USAGE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 4656
                self.match(frameQLParser.USAGE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeLevelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_privilegeLevel

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefiniteSchemaPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def DOT(self):
            return self.getToken(frameQLParser.DOT, 0)
        def STAR(self):
            return self.getToken(frameQLParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteSchemaPrivLevel" ):
                listener.enterDefiniteSchemaPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteSchemaPrivLevel" ):
                listener.exitDefiniteSchemaPrivLevel(self)


    class DefiniteFullTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)

        def DOT(self):
            return self.getToken(frameQLParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteFullTablePrivLevel" ):
                listener.enterDefiniteFullTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteFullTablePrivLevel" ):
                listener.exitDefiniteFullTablePrivLevel(self)


    class GlobalPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.STAR)
            else:
                return self.getToken(frameQLParser.STAR, i)
        def DOT(self):
            return self.getToken(frameQLParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalPrivLevel" ):
                listener.enterGlobalPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalPrivLevel" ):
                listener.exitGlobalPrivLevel(self)


    class DefiniteTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteTablePrivLevel" ):
                listener.enterDefiniteTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteTablePrivLevel" ):
                listener.exitDefiniteTablePrivLevel(self)


    class CurrentSchemaPriviLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(frameQLParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchemaPriviLevel" ):
                listener.enterCurrentSchemaPriviLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchemaPriviLevel" ):
                listener.exitCurrentSchemaPriviLevel(self)



    def privilegeLevel(self):

        localctx = frameQLParser.PrivilegeLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_privilegeLevel)
        try:
            self.state = 4672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,670,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.CurrentSchemaPriviLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4659
                self.match(frameQLParser.STAR)
                pass

            elif la_ == 2:
                localctx = frameQLParser.GlobalPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4660
                self.match(frameQLParser.STAR)
                self.state = 4661
                self.match(frameQLParser.DOT)
                self.state = 4662
                self.match(frameQLParser.STAR)
                pass

            elif la_ == 3:
                localctx = frameQLParser.DefiniteSchemaPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4663
                self.uid()
                self.state = 4664
                self.match(frameQLParser.DOT)
                self.state = 4665
                self.match(frameQLParser.STAR)
                pass

            elif la_ == 4:
                localctx = frameQLParser.DefiniteFullTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4667
                self.uid()
                self.state = 4668
                self.match(frameQLParser.DOT)
                self.state = 4669
                self.uid()
                pass

            elif la_ == 5:
                localctx = frameQLParser.DefiniteTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4671
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext

        def TO(self):
            return self.getToken(frameQLParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UserNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UserNameContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_renameUserClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUserClause" ):
                listener.enterRenameUserClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUserClause" ):
                listener.exitRenameUserClause(self)




    def renameUserClause(self):

        localctx = frameQLParser.RenameUserClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_renameUserClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4674
            localctx.fromFirst = self.userName()
            self.state = 4675
            self.match(frameQLParser.TO)
            self.state = 4676
            localctx.toFirst = self.userName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def ANALYZE(self):
            return self.getToken(frameQLParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)


        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(frameQLParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_analyzeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeTable" ):
                listener.enterAnalyzeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeTable" ):
                listener.exitAnalyzeTable(self)




    def analyzeTable(self):

        localctx = frameQLParser.AnalyzeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_analyzeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4678
            self.match(frameQLParser.ANALYZE)
            self.state = 4680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.NO_WRITE_TO_BINLOG or _la==frameQLParser.LOCAL:
                self.state = 4679
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.NO_WRITE_TO_BINLOG or _la==frameQLParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4682
            self.match(frameQLParser.TABLE)
            self.state = 4683
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(frameQLParser.CHECK, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)


        def checkTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.CheckTableOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.CheckTableOptionContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_checkTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTable" ):
                listener.enterCheckTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTable" ):
                listener.exitCheckTable(self)




    def checkTable(self):

        localctx = frameQLParser.CheckTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_checkTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4685
            self.match(frameQLParser.CHECK)
            self.state = 4686
            self.match(frameQLParser.TABLE)
            self.state = 4687
            self.tables()
            self.state = 4691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.FOR or ((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & ((1 << (frameQLParser.CHANGED - 272)) | (1 << (frameQLParser.EXTENDED - 272)) | (1 << (frameQLParser.FAST - 272)))) != 0) or _la==frameQLParser.MEDIUM or _la==frameQLParser.QUICK:
                self.state = 4688
                self.checkTableOption()
                self.state = 4693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChecksumTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def CHECKSUM(self):
            return self.getToken(frameQLParser.CHECKSUM, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(frameQLParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(frameQLParser.EXTENDED, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_checksumTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecksumTable" ):
                listener.enterChecksumTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecksumTable" ):
                listener.exitChecksumTable(self)




    def checksumTable(self):

        localctx = frameQLParser.ChecksumTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_checksumTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4694
            self.match(frameQLParser.CHECKSUM)
            self.state = 4695
            self.match(frameQLParser.TABLE)
            self.state = 4696
            self.tables()
            self.state = 4698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.EXTENDED or _la==frameQLParser.QUICK:
                self.state = 4697
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.EXTENDED or _la==frameQLParser.QUICK):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizeTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def OPTIMIZE(self):
            return self.getToken(frameQLParser.OPTIMIZE, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)


        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(frameQLParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_optimizeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimizeTable" ):
                listener.enterOptimizeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimizeTable" ):
                listener.exitOptimizeTable(self)




    def optimizeTable(self):

        localctx = frameQLParser.OptimizeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_optimizeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4700
            self.match(frameQLParser.OPTIMIZE)
            self.state = 4702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.NO_WRITE_TO_BINLOG or _la==frameQLParser.LOCAL:
                self.state = 4701
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.NO_WRITE_TO_BINLOG or _la==frameQLParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4704
            self.match(frameQLParser.TABLE)
            self.state = 4705
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepairTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def REPAIR(self):
            return self.getToken(frameQLParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(frameQLParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(frameQLParser.EXTENDED, 0)

        def USE_FRM(self):
            return self.getToken(frameQLParser.USE_FRM, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(frameQLParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_repairTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)




    def repairTable(self):

        localctx = frameQLParser.RepairTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_repairTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4707
            self.match(frameQLParser.REPAIR)
            self.state = 4709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.NO_WRITE_TO_BINLOG or _la==frameQLParser.LOCAL:
                self.state = 4708
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.NO_WRITE_TO_BINLOG or _la==frameQLParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4711
            self.match(frameQLParser.TABLE)
            self.state = 4712
            self.tables()
            self.state = 4714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.QUICK:
                self.state = 4713
                self.match(frameQLParser.QUICK)


            self.state = 4717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.EXTENDED:
                self.state = 4716
                self.match(frameQLParser.EXTENDED)


            self.state = 4720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.USE_FRM:
                self.state = 4719
                self.match(frameQLParser.USE_FRM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def UPGRADE(self):
            return self.getToken(frameQLParser.UPGRADE, 0)

        def QUICK(self):
            return self.getToken(frameQLParser.QUICK, 0)

        def FAST(self):
            return self.getToken(frameQLParser.FAST, 0)

        def MEDIUM(self):
            return self.getToken(frameQLParser.MEDIUM, 0)

        def EXTENDED(self):
            return self.getToken(frameQLParser.EXTENDED, 0)

        def CHANGED(self):
            return self.getToken(frameQLParser.CHANGED, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_checkTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableOption" ):
                listener.enterCheckTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableOption" ):
                listener.exitCheckTableOption(self)




    def checkTableOption(self):

        localctx = frameQLParser.CheckTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_checkTableOption)
        try:
            self.state = 4729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4722
                self.match(frameQLParser.FOR)
                self.state = 4723
                self.match(frameQLParser.UPGRADE)
                pass
            elif token in [frameQLParser.QUICK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4724
                self.match(frameQLParser.QUICK)
                pass
            elif token in [frameQLParser.FAST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4725
                self.match(frameQLParser.FAST)
                pass
            elif token in [frameQLParser.MEDIUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4726
                self.match(frameQLParser.MEDIUM)
                pass
            elif token in [frameQLParser.EXTENDED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4727
                self.match(frameQLParser.EXTENDED)
                pass
            elif token in [frameQLParser.CHANGED]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4728
                self.match(frameQLParser.CHANGED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returnType = None # Token

        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def RETURNS(self):
            return self.getToken(frameQLParser.RETURNS, 0)

        def SONAME(self):
            return self.getToken(frameQLParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def STRING(self):
            return self.getToken(frameQLParser.STRING, 0)

        def INTEGER(self):
            return self.getToken(frameQLParser.INTEGER, 0)

        def REAL(self):
            return self.getToken(frameQLParser.REAL, 0)

        def DECIMAL(self):
            return self.getToken(frameQLParser.DECIMAL, 0)

        def AGGREGATE(self):
            return self.getToken(frameQLParser.AGGREGATE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_createUdfunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdfunction" ):
                listener.enterCreateUdfunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdfunction" ):
                listener.exitCreateUdfunction(self)




    def createUdfunction(self):

        localctx = frameQLParser.CreateUdfunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_createUdfunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4731
            self.match(frameQLParser.CREATE)
            self.state = 4733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.AGGREGATE:
                self.state = 4732
                self.match(frameQLParser.AGGREGATE)


            self.state = 4735
            self.match(frameQLParser.FUNCTION)
            self.state = 4736
            self.uid()
            self.state = 4737
            self.match(frameQLParser.RETURNS)
            self.state = 4738
            localctx.returnType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (frameQLParser.INTEGER - 177)) | (1 << (frameQLParser.REAL - 177)) | (1 << (frameQLParser.DECIMAL - 177)))) != 0) or _la==frameQLParser.STRING):
                localctx.returnType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4739
            self.match(frameQLParser.SONAME)
            self.state = 4740
            self.match(frameQLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallPluginContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTALL(self):
            return self.getToken(frameQLParser.INSTALL, 0)

        def PLUGIN(self):
            return self.getToken(frameQLParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def SONAME(self):
            return self.getToken(frameQLParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_installPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallPlugin" ):
                listener.enterInstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallPlugin" ):
                listener.exitInstallPlugin(self)




    def installPlugin(self):

        localctx = frameQLParser.InstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_installPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4742
            self.match(frameQLParser.INSTALL)
            self.state = 4743
            self.match(frameQLParser.PLUGIN)
            self.state = 4744
            self.uid()
            self.state = 4745
            self.match(frameQLParser.SONAME)
            self.state = 4746
            self.match(frameQLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UninstallPluginContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNINSTALL(self):
            return self.getToken(frameQLParser.UNINSTALL, 0)

        def PLUGIN(self):
            return self.getToken(frameQLParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_uninstallPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUninstallPlugin" ):
                listener.enterUninstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUninstallPlugin" ):
                listener.exitUninstallPlugin(self)




    def uninstallPlugin(self):

        localctx = frameQLParser.UninstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_uninstallPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4748
            self.match(frameQLParser.UNINSTALL)
            self.state = 4749
            self.match(frameQLParser.PLUGIN)
            self.state = 4750
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_setStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SetTransactionContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setTransactionStatement(self):
            return self.getTypedRuleContext(frameQLParser.SetTransactionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransaction" ):
                listener.enterSetTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransaction" ):
                listener.exitSetTransaction(self)


    class SetCharsetContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.SET)
            else:
                return self.getToken(frameQLParser.SET, i)
        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)
        def CHARSET(self):
            return self.getToken(frameQLParser.CHARSET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCharset" ):
                listener.enterSetCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCharset" ):
                listener.exitSetCharset(self)


    class SetNamesContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)
        def NAMES(self):
            return self.getToken(frameQLParser.NAMES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(frameQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(frameQLParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNames" ):
                listener.enterSetNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNames" ):
                listener.exitSetNames(self)


    class SetPasswordContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setPasswordStatement(self):
            return self.getTypedRuleContext(frameQLParser.SetPasswordStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPassword" ):
                listener.enterSetPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPassword" ):
                listener.exitSetPassword(self)


    class SetAutocommitContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setAutocommitStatement(self):
            return self.getTypedRuleContext(frameQLParser.SetAutocommitStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommit" ):
                listener.enterSetAutocommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommit" ):
                listener.exitSetAutocommit(self)


    class SetVariableContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)
        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(frameQLParser.VariableClauseContext,i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.EQUAL_SYMBOL)
            else:
                return self.getToken(frameQLParser.EQUAL_SYMBOL, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVariable" ):
                listener.enterSetVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVariable" ):
                listener.exitSetVariable(self)



    def setStatement(self):

        localctx = frameQLParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.state = 4789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4752
                self.match(frameQLParser.SET)
                self.state = 4753
                self.variableClause()
                self.state = 4754
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 4755
                self.expression(0)
                self.state = 4763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 4756
                    self.match(frameQLParser.COMMA)
                    self.state = 4757
                    self.variableClause()
                    self.state = 4758
                    self.match(frameQLParser.EQUAL_SYMBOL)
                    self.state = 4759
                    self.expression(0)
                    self.state = 4765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = frameQLParser.SetCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4766
                self.match(frameQLParser.SET)
                self.state = 4770
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.CHARACTER]:
                    self.state = 4767
                    self.match(frameQLParser.CHARACTER)
                    self.state = 4768
                    self.match(frameQLParser.SET)
                    pass
                elif token in [frameQLParser.CHARSET]:
                    self.state = 4769
                    self.match(frameQLParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4774
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.BINARY, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL]:
                    self.state = 4772
                    self.charsetName()
                    pass
                elif token in [frameQLParser.DEFAULT]:
                    self.state = 4773
                    self.match(frameQLParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = frameQLParser.SetNamesContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4776
                self.match(frameQLParser.SET)
                self.state = 4777
                self.match(frameQLParser.NAMES)
                self.state = 4784
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.BINARY, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL]:
                    self.state = 4778
                    self.charsetName()
                    self.state = 4781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.COLLATE:
                        self.state = 4779
                        self.match(frameQLParser.COLLATE)
                        self.state = 4780
                        self.collationName()


                    pass
                elif token in [frameQLParser.DEFAULT]:
                    self.state = 4783
                    self.match(frameQLParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = frameQLParser.SetPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4786
                self.setPasswordStatement()
                pass

            elif la_ == 5:
                localctx = frameQLParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4787
                self.setTransactionStatement()
                pass

            elif la_ == 6:
                localctx = frameQLParser.SetAutocommitContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4788
                self.setAutocommitStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_showStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowOpenTablesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def OPEN(self):
            return self.getToken(frameQLParser.OPEN, 0)
        def TABLES(self):
            return self.getToken(frameQLParser.TABLES, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(frameQLParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)
        def IN(self):
            return self.getToken(frameQLParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowOpenTables" ):
                listener.enterShowOpenTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowOpenTables" ):
                listener.exitShowOpenTables(self)


    class ShowGlobalInfoContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def showGlobalInfoClause(self):
            return self.getTypedRuleContext(frameQLParser.ShowGlobalInfoClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfo" ):
                listener.enterShowGlobalInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfo" ):
                listener.exitShowGlobalInfo(self)


    class ShowCreateFullIdObjectContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.namedEntity = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)
        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)

        def EVENT(self):
            return self.getToken(frameQLParser.EVENT, 0)
        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(frameQLParser.PROCEDURE, 0)
        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)
        def TRIGGER(self):
            return self.getToken(frameQLParser.TRIGGER, 0)
        def VIEW(self):
            return self.getToken(frameQLParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateFullIdObject" ):
                listener.enterShowCreateFullIdObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateFullIdObject" ):
                listener.exitShowCreateFullIdObject(self)


    class ShowCreateUserContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)
        def USER(self):
            return self.getToken(frameQLParser.USER, 0)
        def userName(self):
            return self.getTypedRuleContext(frameQLParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateUser" ):
                listener.enterShowCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateUser" ):
                listener.exitShowCreateUser(self)


    class ShowErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def ERRORS(self):
            return self.getToken(frameQLParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(frameQLParser.WARNINGS, 0)
        def LIMIT(self):
            return self.getToken(frameQLParser.LIMIT, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowErrors" ):
                listener.enterShowErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowErrors" ):
                listener.exitShowErrors(self)


    class ShowCountErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def COUNT(self):
            return self.getToken(frameQLParser.COUNT, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(frameQLParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def ERRORS(self):
            return self.getToken(frameQLParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(frameQLParser.WARNINGS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCountErrors" ):
                listener.enterShowCountErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCountErrors" ):
                listener.exitShowCountErrors(self)


    class ShowObjectFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def showCommonEntity(self):
            return self.getTypedRuleContext(frameQLParser.ShowCommonEntityContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(frameQLParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowObjectFilter" ):
                listener.enterShowObjectFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowObjectFilter" ):
                listener.exitShowObjectFilter(self)


    class ShowCreateDbContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(frameQLParser.CREATE, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def DATABASE(self):
            return self.getToken(frameQLParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(frameQLParser.SCHEMA, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(frameQLParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateDb" ):
                listener.enterShowCreateDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateDb" ):
                listener.exitShowCreateDb(self)


    class ShowEngineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.engineOption = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)

        def STATUS(self):
            return self.getToken(frameQLParser.STATUS, 0)
        def MUTEX(self):
            return self.getToken(frameQLParser.MUTEX, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowEngine" ):
                listener.enterShowEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowEngine" ):
                listener.exitShowEngine(self)


    class ShowSchemaFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def showSchemaEntity(self):
            return self.getTypedRuleContext(frameQLParser.ShowSchemaEntityContext,0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(frameQLParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)
        def IN(self):
            return self.getToken(frameQLParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaFilter" ):
                listener.enterShowSchemaFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaFilter" ):
                listener.exitShowSchemaFilter(self)


    class ShowIndexesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)
        def INDEXES(self):
            return self.getToken(frameQLParser.INDEXES, 0)
        def KEYS(self):
            return self.getToken(frameQLParser.KEYS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.FROM)
            else:
                return self.getToken(frameQLParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.IN)
            else:
                return self.getToken(frameQLParser.IN, i)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def WHERE(self):
            return self.getToken(frameQLParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowIndexes" ):
                listener.enterShowIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowIndexes" ):
                listener.exitShowIndexes(self)


    class ShowLogEventsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.filename = None # Token
            self.fromPosition = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def EVENTS(self):
            return self.getToken(frameQLParser.EVENTS, 0)
        def BINLOG(self):
            return self.getToken(frameQLParser.BINLOG, 0)
        def RELAYLOG(self):
            return self.getToken(frameQLParser.RELAYLOG, 0)
        def IN(self):
            return self.getToken(frameQLParser.IN, 0)
        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)
        def LIMIT(self):
            return self.getToken(frameQLParser.LIMIT, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowLogEvents" ):
                listener.enterShowLogEvents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowLogEvents" ):
                listener.exitShowLogEvents(self)


    class ShowMasterLogsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def LOGS(self):
            return self.getToken(frameQLParser.LOGS, 0)
        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)
        def MASTER(self):
            return self.getToken(frameQLParser.MASTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMasterLogs" ):
                listener.enterShowMasterLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMasterLogs" ):
                listener.exitShowMasterLogs(self)


    class ShowGrantsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(frameQLParser.GRANTS, 0)
        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)
        def userName(self):
            return self.getTypedRuleContext(frameQLParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)


    class ShowSlaveStatusContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def SLAVE(self):
            return self.getToken(frameQLParser.SLAVE, 0)
        def STATUS(self):
            return self.getToken(frameQLParser.STATUS, 0)
        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)
        def CHANNEL(self):
            return self.getToken(frameQLParser.CHANNEL, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSlaveStatus" ):
                listener.enterShowSlaveStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSlaveStatus" ):
                listener.exitShowSlaveStatus(self)


    class ShowRoutineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.routine = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def CODE(self):
            return self.getToken(frameQLParser.CODE, 0)
        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)

        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(frameQLParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoutine" ):
                listener.enterShowRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoutine" ):
                listener.exitShowRoutine(self)


    class ShowProfileContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.queryCount = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def PROFILE(self):
            return self.getToken(frameQLParser.PROFILE, 0)
        def showProfileType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ShowProfileTypeContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ShowProfileTypeContext,i)

        def LIMIT(self):
            return self.getToken(frameQLParser.LIMIT, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)
        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)
        def QUERY(self):
            return self.getToken(frameQLParser.QUERY, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfile" ):
                listener.enterShowProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfile" ):
                listener.exitShowProfile(self)


    class ShowColumnsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ShowStatementContext
            super().__init__(parser)
            self.columnsFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(frameQLParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)

        def COLUMNS(self):
            return self.getToken(frameQLParser.COLUMNS, 0)
        def FIELDS(self):
            return self.getToken(frameQLParser.FIELDS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.FROM)
            else:
                return self.getToken(frameQLParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.IN)
            else:
                return self.getToken(frameQLParser.IN, i)
        def FULL(self):
            return self.getToken(frameQLParser.FULL, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(frameQLParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)



    def showStatement(self):

        localctx = frameQLParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 4942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,708,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.ShowMasterLogsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4791
                self.match(frameQLParser.SHOW)
                self.state = 4792
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.BINARY or _la==frameQLParser.MASTER):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4793
                self.match(frameQLParser.LOGS)
                pass

            elif la_ == 2:
                localctx = frameQLParser.ShowLogEventsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4794
                self.match(frameQLParser.SHOW)
                self.state = 4795
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.BINLOG or _la==frameQLParser.RELAYLOG):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4796
                self.match(frameQLParser.EVENTS)
                self.state = 4799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.IN:
                    self.state = 4797
                    self.match(frameQLParser.IN)
                    self.state = 4798
                    localctx.filename = self.match(frameQLParser.STRING_LITERAL)


                self.state = 4803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FROM:
                    self.state = 4801
                    self.match(frameQLParser.FROM)
                    self.state = 4802
                    localctx.fromPosition = self.decimalLiteral()


                self.state = 4812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LIMIT:
                    self.state = 4805
                    self.match(frameQLParser.LIMIT)
                    self.state = 4809
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
                    if la_ == 1:
                        self.state = 4806
                        localctx.offset = self.decimalLiteral()
                        self.state = 4807
                        self.match(frameQLParser.COMMA)


                    self.state = 4811
                    localctx.rowCount = self.decimalLiteral()


                pass

            elif la_ == 3:
                localctx = frameQLParser.ShowObjectFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4814
                self.match(frameQLParser.SHOW)
                self.state = 4815
                self.showCommonEntity()
                self.state = 4817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LIKE or _la==frameQLParser.WHERE:
                    self.state = 4816
                    self.showFilter()


                pass

            elif la_ == 4:
                localctx = frameQLParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4819
                self.match(frameQLParser.SHOW)
                self.state = 4821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FULL:
                    self.state = 4820
                    self.match(frameQLParser.FULL)


                self.state = 4823
                localctx.columnsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.COLUMNS or _la==frameQLParser.FIELDS):
                    localctx.columnsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4824
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FROM or _la==frameQLParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4825
                self.tableName()
                self.state = 4828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FROM or _la==frameQLParser.IN:
                    self.state = 4826
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.FROM or _la==frameQLParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4827
                    self.uid()


                self.state = 4831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LIKE or _la==frameQLParser.WHERE:
                    self.state = 4830
                    self.showFilter()


                pass

            elif la_ == 5:
                localctx = frameQLParser.ShowCreateDbContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4833
                self.match(frameQLParser.SHOW)
                self.state = 4834
                self.match(frameQLParser.CREATE)
                self.state = 4835
                localctx.schemaFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DATABASE or _la==frameQLParser.SCHEMA):
                    localctx.schemaFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.IF:
                    self.state = 4836
                    self.ifNotExists()


                self.state = 4839
                self.uid()
                pass

            elif la_ == 6:
                localctx = frameQLParser.ShowCreateFullIdObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4840
                self.match(frameQLParser.SHOW)
                self.state = 4841
                self.match(frameQLParser.CREATE)
                self.state = 4842
                localctx.namedEntity = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (frameQLParser.PROCEDURE - 115)) | (1 << (frameQLParser.TABLE - 115)) | (1 << (frameQLParser.TRIGGER - 115)))) != 0) or _la==frameQLParser.EVENT or _la==frameQLParser.FUNCTION or _la==frameQLParser.VIEW):
                    localctx.namedEntity = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4843
                self.fullId()
                pass

            elif la_ == 7:
                localctx = frameQLParser.ShowCreateUserContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4844
                self.match(frameQLParser.SHOW)
                self.state = 4845
                self.match(frameQLParser.CREATE)
                self.state = 4846
                self.match(frameQLParser.USER)
                self.state = 4847
                self.userName()
                pass

            elif la_ == 8:
                localctx = frameQLParser.ShowEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 4848
                self.match(frameQLParser.SHOW)
                self.state = 4849
                self.match(frameQLParser.ENGINE)
                self.state = 4850
                self.engineName()
                self.state = 4851
                localctx.engineOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.MUTEX or _la==frameQLParser.STATUS):
                    localctx.engineOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = frameQLParser.ShowGlobalInfoContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 4853
                self.match(frameQLParser.SHOW)
                self.state = 4854
                self.showGlobalInfoClause()
                pass

            elif la_ == 10:
                localctx = frameQLParser.ShowErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 4855
                self.match(frameQLParser.SHOW)
                self.state = 4856
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ERRORS or _la==frameQLParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

                self.state = 4857
                self.match(frameQLParser.LIMIT)
                self.state = 4861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,696,self._ctx)
                if la_ == 1:
                    self.state = 4858
                    localctx.offset = self.decimalLiteral()
                    self.state = 4859
                    self.match(frameQLParser.COMMA)


                self.state = 4863
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 11:
                localctx = frameQLParser.ShowCountErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 4864
                self.match(frameQLParser.SHOW)
                self.state = 4865
                self.match(frameQLParser.COUNT)
                self.state = 4866
                self.match(frameQLParser.LR_BRACKET)
                self.state = 4867
                self.match(frameQLParser.STAR)
                self.state = 4868
                self.match(frameQLParser.RR_BRACKET)
                self.state = 4869
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ERRORS or _la==frameQLParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = frameQLParser.ShowSchemaFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 4870
                self.match(frameQLParser.SHOW)
                self.state = 4871
                self.showSchemaEntity()
                self.state = 4874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FROM or _la==frameQLParser.IN:
                    self.state = 4872
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.FROM or _la==frameQLParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4873
                    self.uid()


                self.state = 4877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LIKE or _la==frameQLParser.WHERE:
                    self.state = 4876
                    self.showFilter()


                pass

            elif la_ == 13:
                localctx = frameQLParser.ShowRoutineContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 4879
                self.match(frameQLParser.SHOW)
                self.state = 4880
                localctx.routine = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.PROCEDURE or _la==frameQLParser.FUNCTION):
                    localctx.routine = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4881
                self.match(frameQLParser.CODE)
                self.state = 4882
                self.fullId()
                pass

            elif la_ == 14:
                localctx = frameQLParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 4883
                self.match(frameQLParser.SHOW)
                self.state = 4884
                self.match(frameQLParser.GRANTS)
                self.state = 4887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR:
                    self.state = 4885
                    self.match(frameQLParser.FOR)
                    self.state = 4886
                    self.userName()


                pass

            elif la_ == 15:
                localctx = frameQLParser.ShowIndexesContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 4889
                self.match(frameQLParser.SHOW)
                self.state = 4890
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEYS or _la==frameQLParser.INDEXES):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4891
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FROM or _la==frameQLParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4892
                self.tableName()
                self.state = 4895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FROM or _la==frameQLParser.IN:
                    self.state = 4893
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.FROM or _la==frameQLParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4894
                    self.uid()


                self.state = 4899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.WHERE:
                    self.state = 4897
                    self.match(frameQLParser.WHERE)
                    self.state = 4898
                    self.expression(0)


                pass

            elif la_ == 16:
                localctx = frameQLParser.ShowOpenTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 4901
                self.match(frameQLParser.SHOW)
                self.state = 4902
                self.match(frameQLParser.OPEN)
                self.state = 4903
                self.match(frameQLParser.TABLES)
                self.state = 4906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FROM or _la==frameQLParser.IN:
                    self.state = 4904
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.FROM or _la==frameQLParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4905
                    self.uid()


                self.state = 4909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LIKE or _la==frameQLParser.WHERE:
                    self.state = 4908
                    self.showFilter()


                pass

            elif la_ == 17:
                localctx = frameQLParser.ShowProfileContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 4911
                self.match(frameQLParser.SHOW)
                self.state = 4912
                self.match(frameQLParser.PROFILE)
                self.state = 4913
                self.showProfileType()
                self.state = 4918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 4914
                    self.match(frameQLParser.COMMA)
                    self.state = 4915
                    self.showProfileType()
                    self.state = 4920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR:
                    self.state = 4921
                    self.match(frameQLParser.FOR)
                    self.state = 4922
                    self.match(frameQLParser.QUERY)
                    self.state = 4923
                    localctx.queryCount = self.decimalLiteral()


                self.state = 4926
                self.match(frameQLParser.LIMIT)
                self.state = 4930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
                if la_ == 1:
                    self.state = 4927
                    localctx.offset = self.decimalLiteral()
                    self.state = 4928
                    self.match(frameQLParser.COMMA)


                self.state = 4932
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = frameQLParser.ShowSlaveStatusContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 4934
                self.match(frameQLParser.SHOW)
                self.state = 4935
                self.match(frameQLParser.SLAVE)
                self.state = 4936
                self.match(frameQLParser.STATUS)
                self.state = 4940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR:
                    self.state = 4937
                    self.match(frameQLParser.FOR)
                    self.state = 4938
                    self.match(frameQLParser.CHANNEL)
                    self.state = 4939
                    self.match(frameQLParser.STRING_LITERAL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(frameQLParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(frameQLParser.GLOBAL_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def GLOBAL(self):
            return self.getToken(frameQLParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(frameQLParser.SESSION, 0)

        def AT_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.AT_SIGN)
            else:
                return self.getToken(frameQLParser.AT_SIGN, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_variableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableClause" ):
                listener.enterVariableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableClause" ):
                listener.exitVariableClause(self)




    def variableClause(self):

        localctx = frameQLParser.VariableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_variableClause)
        self._la = 0 # Token type
        try:
            self.state = 4954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4944
                self.match(frameQLParser.LOCAL_ID)
                pass
            elif token in [frameQLParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4945
                self.match(frameQLParser.GLOBAL_ID)
                pass
            elif token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.AT_SIGN, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,710,self._ctx)
                if la_ == 1:
                    self.state = 4948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.AT_SIGN:
                        self.state = 4946
                        self.match(frameQLParser.AT_SIGN)
                        self.state = 4947
                        self.match(frameQLParser.AT_SIGN)


                    self.state = 4950
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.GLOBAL or _la==frameQLParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4953
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommonEntityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def COLLATION(self):
            return self.getToken(frameQLParser.COLLATION, 0)

        def DATABASES(self):
            return self.getToken(frameQLParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(frameQLParser.SCHEMAS, 0)

        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)

        def STATUS(self):
            return self.getToken(frameQLParser.STATUS, 0)

        def PROCEDURE(self):
            return self.getToken(frameQLParser.PROCEDURE, 0)

        def VARIABLES(self):
            return self.getToken(frameQLParser.VARIABLES, 0)

        def GLOBAL(self):
            return self.getToken(frameQLParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(frameQLParser.SESSION, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_showCommonEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommonEntity" ):
                listener.enterShowCommonEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommonEntity" ):
                listener.exitShowCommonEntity(self)




    def showCommonEntity(self):

        localctx = frameQLParser.ShowCommonEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_showCommonEntity)
        self._la = 0 # Token type
        try:
            self.state = 4969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.CHARACTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4956
                self.match(frameQLParser.CHARACTER)
                self.state = 4957
                self.match(frameQLParser.SET)
                pass
            elif token in [frameQLParser.COLLATION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4958
                self.match(frameQLParser.COLLATION)
                pass
            elif token in [frameQLParser.DATABASES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4959
                self.match(frameQLParser.DATABASES)
                pass
            elif token in [frameQLParser.SCHEMAS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4960
                self.match(frameQLParser.SCHEMAS)
                pass
            elif token in [frameQLParser.FUNCTION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4961
                self.match(frameQLParser.FUNCTION)
                self.state = 4962
                self.match(frameQLParser.STATUS)
                pass
            elif token in [frameQLParser.PROCEDURE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4963
                self.match(frameQLParser.PROCEDURE)
                self.state = 4964
                self.match(frameQLParser.STATUS)
                pass
            elif token in [frameQLParser.GLOBAL, frameQLParser.SESSION, frameQLParser.STATUS, frameQLParser.VARIABLES]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.GLOBAL or _la==frameQLParser.SESSION:
                    self.state = 4965
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.GLOBAL or _la==frameQLParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4968
                _la = self._input.LA(1)
                if not(_la==frameQLParser.STATUS or _la==frameQLParser.VARIABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFilterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(frameQLParser.LIKE, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def WHERE(self):
            return self.getToken(frameQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_showFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFilter" ):
                listener.enterShowFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFilter" ):
                listener.exitShowFilter(self)




    def showFilter(self):

        localctx = frameQLParser.ShowFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_showFilter)
        try:
            self.state = 4975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.LIKE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4971
                self.match(frameQLParser.LIKE)
                self.state = 4972
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.WHERE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4973
                self.match(frameQLParser.WHERE)
                self.state = 4974
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGlobalInfoClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINES(self):
            return self.getToken(frameQLParser.ENGINES, 0)

        def STORAGE(self):
            return self.getToken(frameQLParser.STORAGE, 0)

        def MASTER(self):
            return self.getToken(frameQLParser.MASTER, 0)

        def STATUS(self):
            return self.getToken(frameQLParser.STATUS, 0)

        def PLUGINS(self):
            return self.getToken(frameQLParser.PLUGINS, 0)

        def PRIVILEGES(self):
            return self.getToken(frameQLParser.PRIVILEGES, 0)

        def PROCESSLIST(self):
            return self.getToken(frameQLParser.PROCESSLIST, 0)

        def FULL(self):
            return self.getToken(frameQLParser.FULL, 0)

        def PROFILES(self):
            return self.getToken(frameQLParser.PROFILES, 0)

        def SLAVE(self):
            return self.getToken(frameQLParser.SLAVE, 0)

        def HOSTS(self):
            return self.getToken(frameQLParser.HOSTS, 0)

        def AUTHORS(self):
            return self.getToken(frameQLParser.AUTHORS, 0)

        def CONTRIBUTORS(self):
            return self.getToken(frameQLParser.CONTRIBUTORS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_showGlobalInfoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfoClause" ):
                listener.enterShowGlobalInfoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfoClause" ):
                listener.exitShowGlobalInfoClause(self)




    def showGlobalInfoClause(self):

        localctx = frameQLParser.ShowGlobalInfoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_showGlobalInfoClause)
        self._la = 0 # Token type
        try:
            self.state = 4994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ENGINES, frameQLParser.STORAGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.STORAGE:
                    self.state = 4977
                    self.match(frameQLParser.STORAGE)


                self.state = 4980
                self.match(frameQLParser.ENGINES)
                pass
            elif token in [frameQLParser.MASTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4981
                self.match(frameQLParser.MASTER)
                self.state = 4982
                self.match(frameQLParser.STATUS)
                pass
            elif token in [frameQLParser.PLUGINS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4983
                self.match(frameQLParser.PLUGINS)
                pass
            elif token in [frameQLParser.PRIVILEGES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4984
                self.match(frameQLParser.PRIVILEGES)
                pass
            elif token in [frameQLParser.FULL, frameQLParser.PROCESSLIST]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FULL:
                    self.state = 4985
                    self.match(frameQLParser.FULL)


                self.state = 4988
                self.match(frameQLParser.PROCESSLIST)
                pass
            elif token in [frameQLParser.PROFILES]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4989
                self.match(frameQLParser.PROFILES)
                pass
            elif token in [frameQLParser.SLAVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4990
                self.match(frameQLParser.SLAVE)
                self.state = 4991
                self.match(frameQLParser.HOSTS)
                pass
            elif token in [frameQLParser.AUTHORS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4992
                self.match(frameQLParser.AUTHORS)
                pass
            elif token in [frameQLParser.CONTRIBUTORS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4993
                self.match(frameQLParser.CONTRIBUTORS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSchemaEntityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENTS(self):
            return self.getToken(frameQLParser.EVENTS, 0)

        def TABLE(self):
            return self.getToken(frameQLParser.TABLE, 0)

        def STATUS(self):
            return self.getToken(frameQLParser.STATUS, 0)

        def TABLES(self):
            return self.getToken(frameQLParser.TABLES, 0)

        def FULL(self):
            return self.getToken(frameQLParser.FULL, 0)

        def TRIGGERS(self):
            return self.getToken(frameQLParser.TRIGGERS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_showSchemaEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaEntity" ):
                listener.enterShowSchemaEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaEntity" ):
                listener.exitShowSchemaEntity(self)




    def showSchemaEntity(self):

        localctx = frameQLParser.ShowSchemaEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_showSchemaEntity)
        self._la = 0 # Token type
        try:
            self.state = 5004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.EVENTS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4996
                self.match(frameQLParser.EVENTS)
                pass
            elif token in [frameQLParser.TABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4997
                self.match(frameQLParser.TABLE)
                self.state = 4998
                self.match(frameQLParser.STATUS)
                pass
            elif token in [frameQLParser.FULL, frameQLParser.TABLES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FULL:
                    self.state = 4999
                    self.match(frameQLParser.FULL)


                self.state = 5002
                self.match(frameQLParser.TABLES)
                pass
            elif token in [frameQLParser.TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5003
                self.match(frameQLParser.TRIGGERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProfileTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def BLOCK(self):
            return self.getToken(frameQLParser.BLOCK, 0)

        def IO(self):
            return self.getToken(frameQLParser.IO, 0)

        def CONTEXT(self):
            return self.getToken(frameQLParser.CONTEXT, 0)

        def SWITCHES(self):
            return self.getToken(frameQLParser.SWITCHES, 0)

        def CPU(self):
            return self.getToken(frameQLParser.CPU, 0)

        def IPC(self):
            return self.getToken(frameQLParser.IPC, 0)

        def MEMORY(self):
            return self.getToken(frameQLParser.MEMORY, 0)

        def PAGE(self):
            return self.getToken(frameQLParser.PAGE, 0)

        def FAULTS(self):
            return self.getToken(frameQLParser.FAULTS, 0)

        def SOURCE(self):
            return self.getToken(frameQLParser.SOURCE, 0)

        def SWAPS(self):
            return self.getToken(frameQLParser.SWAPS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_showProfileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfileType" ):
                listener.enterShowProfileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfileType" ):
                listener.exitShowProfileType(self)




    def showProfileType(self):

        localctx = frameQLParser.ShowProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_showProfileType)
        try:
            self.state = 5018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5006
                self.match(frameQLParser.ALL)
                pass
            elif token in [frameQLParser.BLOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5007
                self.match(frameQLParser.BLOCK)
                self.state = 5008
                self.match(frameQLParser.IO)
                pass
            elif token in [frameQLParser.CONTEXT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5009
                self.match(frameQLParser.CONTEXT)
                self.state = 5010
                self.match(frameQLParser.SWITCHES)
                pass
            elif token in [frameQLParser.CPU]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5011
                self.match(frameQLParser.CPU)
                pass
            elif token in [frameQLParser.IPC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5012
                self.match(frameQLParser.IPC)
                pass
            elif token in [frameQLParser.MEMORY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5013
                self.match(frameQLParser.MEMORY)
                pass
            elif token in [frameQLParser.PAGE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5014
                self.match(frameQLParser.PAGE)
                self.state = 5015
                self.match(frameQLParser.FAULTS)
                pass
            elif token in [frameQLParser.SOURCE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5016
                self.match(frameQLParser.SOURCE)
                pass
            elif token in [frameQLParser.SWAPS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5017
                self.match(frameQLParser.SWAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinlogStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINLOG(self):
            return self.getToken(frameQLParser.BINLOG, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_binlogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinlogStatement" ):
                listener.enterBinlogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinlogStatement" ):
                listener.exitBinlogStatement(self)




    def binlogStatement(self):

        localctx = frameQLParser.BinlogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_binlogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5020
            self.match(frameQLParser.BINLOG)
            self.state = 5021
            self.match(frameQLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CacheIndexStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # UidContext

        def CACHE(self):
            return self.getToken(frameQLParser.CACHE, 0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)

        def tableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableIndexesContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableIndexesContext,i)


        def IN(self):
            return self.getToken(frameQLParser.IN, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_cacheIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheIndexStatement" ):
                listener.enterCacheIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheIndexStatement" ):
                listener.exitCacheIndexStatement(self)




    def cacheIndexStatement(self):

        localctx = frameQLParser.CacheIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_cacheIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5023
            self.match(frameQLParser.CACHE)
            self.state = 5024
            self.match(frameQLParser.INDEX)
            self.state = 5025
            self.tableIndexes()
            self.state = 5030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5026
                self.match(frameQLParser.COMMA)
                self.state = 5027
                self.tableIndexes()
                self.state = 5032
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.PARTITION:
                self.state = 5033
                self.match(frameQLParser.PARTITION)
                self.state = 5034
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5037
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 5035
                    self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 5036
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5039
                self.match(frameQLParser.RR_BRACKET)


            self.state = 5042
            self.match(frameQLParser.IN)
            self.state = 5043
            localctx.schema = self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.flushFormat = None # Token

        def FLUSH(self):
            return self.getToken(frameQLParser.FLUSH, 0)

        def flushOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FlushOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(frameQLParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_flushStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushStatement" ):
                listener.enterFlushStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushStatement" ):
                listener.exitFlushStatement(self)




    def flushStatement(self):

        localctx = frameQLParser.FlushStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_flushStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5045
            self.match(frameQLParser.FLUSH)
            self.state = 5047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.NO_WRITE_TO_BINLOG or _la==frameQLParser.LOCAL:
                self.state = 5046
                localctx.flushFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.NO_WRITE_TO_BINLOG or _la==frameQLParser.LOCAL):
                    localctx.flushFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5049
            self.flushOption()
            self.state = 5054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5050
                self.match(frameQLParser.COMMA)
                self.state = 5051
                self.flushOption()
                self.state = 5056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.connectionFormat = None # Token

        def KILL(self):
            return self.getToken(frameQLParser.KILL, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)


        def CONNECTION(self):
            return self.getToken(frameQLParser.CONNECTION, 0)

        def QUERY(self):
            return self.getToken(frameQLParser.QUERY, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_killStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStatement" ):
                listener.enterKillStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStatement" ):
                listener.exitKillStatement(self)




    def killStatement(self):

        localctx = frameQLParser.KillStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_killStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5057
            self.match(frameQLParser.KILL)
            self.state = 5059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.CONNECTION or _la==frameQLParser.QUERY:
                self.state = 5058
                localctx.connectionFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.CONNECTION or _la==frameQLParser.QUERY):
                    localctx.connectionFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5062 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5061
                self.decimalLiteral()
                self.state = 5064 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 958)) & ~0x3f) == 0 and ((1 << (_la - 958)) & ((1 << (frameQLParser.ZERO_DECIMAL - 958)) | (1 << (frameQLParser.ONE_DECIMAL - 958)) | (1 << (frameQLParser.TWO_DECIMAL - 958)) | (1 << (frameQLParser.DECIMAL_LITERAL - 958)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadIndexIntoCacheContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(frameQLParser.LOAD, 0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)

        def INTO(self):
            return self.getToken(frameQLParser.INTO, 0)

        def CACHE(self):
            return self.getToken(frameQLParser.CACHE, 0)

        def loadedTableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.LoadedTableIndexesContext)
            else:
                return self.getTypedRuleContext(frameQLParser.LoadedTableIndexesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_loadIndexIntoCache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadIndexIntoCache" ):
                listener.enterLoadIndexIntoCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadIndexIntoCache" ):
                listener.exitLoadIndexIntoCache(self)




    def loadIndexIntoCache(self):

        localctx = frameQLParser.LoadIndexIntoCacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_loadIndexIntoCache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5066
            self.match(frameQLParser.LOAD)
            self.state = 5067
            self.match(frameQLParser.INDEX)
            self.state = 5068
            self.match(frameQLParser.INTO)
            self.state = 5069
            self.match(frameQLParser.CACHE)
            self.state = 5070
            self.loadedTableIndexes()
            self.state = 5075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5071
                self.match(frameQLParser.COMMA)
                self.state = 5072
                self.loadedTableIndexes()
                self.state = 5077
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(frameQLParser.RESET, 0)

        def QUERY(self):
            return self.getToken(frameQLParser.QUERY, 0)

        def CACHE(self):
            return self.getToken(frameQLParser.CACHE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)




    def resetStatement(self):

        localctx = frameQLParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5078
            self.match(frameQLParser.RESET)
            self.state = 5079
            self.match(frameQLParser.QUERY)
            self.state = 5080
            self.match(frameQLParser.CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShutdownStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(frameQLParser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_shutdownStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdownStatement" ):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdownStatement" ):
                listener.exitShutdownStatement(self)




    def shutdownStatement(self):

        localctx = frameQLParser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5082
            self.match(frameQLParser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIndexesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexFormat = None # Token

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(frameQLParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)

        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_tableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIndexes" ):
                listener.enterTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIndexes" ):
                listener.exitTableIndexes(self)




    def tableIndexes(self):

        localctx = frameQLParser.TableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_tableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5084
            self.tableName()
            self.state = 5092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.INDEX or _la==frameQLParser.KEY or _la==frameQLParser.LR_BRACKET:
                self.state = 5086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.INDEX or _la==frameQLParser.KEY:
                    self.state = 5085
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5088
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5089
                self.uidList()
                self.state = 5090
                self.match(frameQLParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_flushOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLES(self):
            return self.getToken(frameQLParser.TABLES, 0)
        def tables(self):
            return self.getTypedRuleContext(frameQLParser.TablesContext,0)

        def flushTableOption(self):
            return self.getTypedRuleContext(frameQLParser.FlushTableOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFlushOption" ):
                listener.enterTableFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFlushOption" ):
                listener.exitTableFlushOption(self)


    class ChannelFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY(self):
            return self.getToken(frameQLParser.RELAY, 0)
        def LOGS(self):
            return self.getToken(frameQLParser.LOGS, 0)
        def channelOption(self):
            return self.getTypedRuleContext(frameQLParser.ChannelOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelFlushOption" ):
                listener.enterChannelFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelFlushOption" ):
                listener.exitChannelFlushOption(self)


    class SimpleFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DES_KEY_FILE(self):
            return self.getToken(frameQLParser.DES_KEY_FILE, 0)
        def HOSTS(self):
            return self.getToken(frameQLParser.HOSTS, 0)
        def LOGS(self):
            return self.getToken(frameQLParser.LOGS, 0)
        def OPTIMIZER_COSTS(self):
            return self.getToken(frameQLParser.OPTIMIZER_COSTS, 0)
        def PRIVILEGES(self):
            return self.getToken(frameQLParser.PRIVILEGES, 0)
        def QUERY(self):
            return self.getToken(frameQLParser.QUERY, 0)
        def CACHE(self):
            return self.getToken(frameQLParser.CACHE, 0)
        def STATUS(self):
            return self.getToken(frameQLParser.STATUS, 0)
        def USER_RESOURCES(self):
            return self.getToken(frameQLParser.USER_RESOURCES, 0)
        def TABLES(self):
            return self.getToken(frameQLParser.TABLES, 0)
        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)
        def READ(self):
            return self.getToken(frameQLParser.READ, 0)
        def LOCK(self):
            return self.getToken(frameQLParser.LOCK, 0)
        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)
        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)
        def ERROR(self):
            return self.getToken(frameQLParser.ERROR, 0)
        def GENERAL(self):
            return self.getToken(frameQLParser.GENERAL, 0)
        def RELAY(self):
            return self.getToken(frameQLParser.RELAY, 0)
        def SLOW(self):
            return self.getToken(frameQLParser.SLOW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFlushOption" ):
                listener.enterSimpleFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFlushOption" ):
                listener.exitSimpleFlushOption(self)



    def flushOption(self):

        localctx = frameQLParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 5124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,736,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.SimpleFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5112
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DES_KEY_FILE]:
                    self.state = 5094
                    self.match(frameQLParser.DES_KEY_FILE)
                    pass
                elif token in [frameQLParser.HOSTS]:
                    self.state = 5095
                    self.match(frameQLParser.HOSTS)
                    pass
                elif token in [frameQLParser.BINARY, frameQLParser.ENGINE, frameQLParser.ERROR, frameQLParser.GENERAL, frameQLParser.LOGS, frameQLParser.RELAY, frameQLParser.SLOW]:
                    self.state = 5097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.BINARY or ((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & ((1 << (frameQLParser.ENGINE - 315)) | (1 << (frameQLParser.ERROR - 315)) | (1 << (frameQLParser.GENERAL - 315)))) != 0) or _la==frameQLParser.RELAY or _la==frameQLParser.SLOW:
                        self.state = 5096
                        _la = self._input.LA(1)
                        if not(_la==frameQLParser.BINARY or ((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & ((1 << (frameQLParser.ENGINE - 315)) | (1 << (frameQLParser.ERROR - 315)) | (1 << (frameQLParser.GENERAL - 315)))) != 0) or _la==frameQLParser.RELAY or _la==frameQLParser.SLOW):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 5099
                    self.match(frameQLParser.LOGS)
                    pass
                elif token in [frameQLParser.OPTIMIZER_COSTS]:
                    self.state = 5100
                    self.match(frameQLParser.OPTIMIZER_COSTS)
                    pass
                elif token in [frameQLParser.PRIVILEGES]:
                    self.state = 5101
                    self.match(frameQLParser.PRIVILEGES)
                    pass
                elif token in [frameQLParser.QUERY]:
                    self.state = 5102
                    self.match(frameQLParser.QUERY)
                    self.state = 5103
                    self.match(frameQLParser.CACHE)
                    pass
                elif token in [frameQLParser.STATUS]:
                    self.state = 5104
                    self.match(frameQLParser.STATUS)
                    pass
                elif token in [frameQLParser.USER_RESOURCES]:
                    self.state = 5105
                    self.match(frameQLParser.USER_RESOURCES)
                    pass
                elif token in [frameQLParser.TABLES]:
                    self.state = 5106
                    self.match(frameQLParser.TABLES)
                    self.state = 5110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.WITH:
                        self.state = 5107
                        self.match(frameQLParser.WITH)
                        self.state = 5108
                        self.match(frameQLParser.READ)
                        self.state = 5109
                        self.match(frameQLParser.LOCK)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = frameQLParser.ChannelFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5114
                self.match(frameQLParser.RELAY)
                self.state = 5115
                self.match(frameQLParser.LOGS)
                self.state = 5117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR:
                    self.state = 5116
                    self.channelOption()


                pass

            elif la_ == 3:
                localctx = frameQLParser.TableFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5119
                self.match(frameQLParser.TABLES)
                self.state = 5120
                self.tables()
                self.state = 5122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR or _la==frameQLParser.WITH:
                    self.state = 5121
                    self.flushTableOption()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTableOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(frameQLParser.WITH, 0)

        def READ(self):
            return self.getToken(frameQLParser.READ, 0)

        def LOCK(self):
            return self.getToken(frameQLParser.LOCK, 0)

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def EXPORT(self):
            return self.getToken(frameQLParser.EXPORT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_flushTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTableOption" ):
                listener.enterFlushTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTableOption" ):
                listener.exitFlushTableOption(self)




    def flushTableOption(self):

        localctx = frameQLParser.FlushTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_flushTableOption)
        try:
            self.state = 5131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5126
                self.match(frameQLParser.WITH)
                self.state = 5127
                self.match(frameQLParser.READ)
                self.state = 5128
                self.match(frameQLParser.LOCK)
                pass
            elif token in [frameQLParser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5129
                self.match(frameQLParser.FOR)
                self.state = 5130
                self.match(frameQLParser.EXPORT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadedTableIndexesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partitionList = None # UidListContext
            self.indexFormat = None # Token
            self.indexList = None # UidListContext

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def PARTITION(self):
            return self.getToken(frameQLParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LR_BRACKET)
            else:
                return self.getToken(frameQLParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.RR_BRACKET)
            else:
                return self.getToken(frameQLParser.RR_BRACKET, i)

        def IGNORE(self):
            return self.getToken(frameQLParser.IGNORE, 0)

        def LEAVES(self):
            return self.getToken(frameQLParser.LEAVES, 0)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidListContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidListContext,i)


        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def INDEX(self):
            return self.getToken(frameQLParser.INDEX, 0)

        def KEY(self):
            return self.getToken(frameQLParser.KEY, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_loadedTableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadedTableIndexes" ):
                listener.enterLoadedTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadedTableIndexes" ):
                listener.exitLoadedTableIndexes(self)




    def loadedTableIndexes(self):

        localctx = frameQLParser.LoadedTableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_loadedTableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5133
            self.tableName()
            self.state = 5141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.PARTITION:
                self.state = 5134
                self.match(frameQLParser.PARTITION)
                self.state = 5135
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5138
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.STRING_LITERAL, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID]:
                    self.state = 5136
                    localctx.partitionList = self.uidList()
                    pass
                elif token in [frameQLParser.ALL]:
                    self.state = 5137
                    self.match(frameQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5140
                self.match(frameQLParser.RR_BRACKET)


            self.state = 5150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.INDEX or _la==frameQLParser.KEY or _la==frameQLParser.LR_BRACKET:
                self.state = 5144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.INDEX or _la==frameQLParser.KEY:
                    self.state = 5143
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.INDEX or _la==frameQLParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5146
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5147
                localctx.indexList = self.uidList()
                self.state = 5148
                self.match(frameQLParser.RR_BRACKET)


            self.state = 5154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.IGNORE:
                self.state = 5152
                self.match(frameQLParser.IGNORE)
                self.state = 5153
                self.match(frameQLParser.LEAVES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.column = None # UidContext
            self.pattern = None # Token

        def tableName(self):
            return self.getTypedRuleContext(frameQLParser.TableNameContext,0)


        def EXPLAIN(self):
            return self.getToken(frameQLParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(frameQLParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(frameQLParser.DESC, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_simpleDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDescribeStatement" ):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDescribeStatement" ):
                listener.exitSimpleDescribeStatement(self)




    def simpleDescribeStatement(self):

        localctx = frameQLParser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_simpleDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5156
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << frameQLParser.DESC) | (1 << frameQLParser.DESCRIBE) | (1 << frameQLParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5157
            self.tableName()
            self.state = 5160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,743,self._ctx)
            if la_ == 1:
                self.state = 5158
                localctx.column = self.uid()

            elif la_ == 2:
                self.state = 5159
                localctx.pattern = self.match(frameQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullDescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.formatType = None # Token
            self.formatValue = None # Token

        def describeObjectClause(self):
            return self.getTypedRuleContext(frameQLParser.DescribeObjectClauseContext,0)


        def EXPLAIN(self):
            return self.getToken(frameQLParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(frameQLParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(frameQLParser.DESC, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def EXTENDED(self):
            return self.getToken(frameQLParser.EXTENDED, 0)

        def PARTITIONS(self):
            return self.getToken(frameQLParser.PARTITIONS, 0)

        def FORMAT(self):
            return self.getToken(frameQLParser.FORMAT, 0)

        def TRADITIONAL(self):
            return self.getToken(frameQLParser.TRADITIONAL, 0)

        def JSON(self):
            return self.getToken(frameQLParser.JSON, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_fullDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullDescribeStatement" ):
                listener.enterFullDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullDescribeStatement" ):
                listener.exitFullDescribeStatement(self)




    def fullDescribeStatement(self):

        localctx = frameQLParser.FullDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_fullDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5162
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << frameQLParser.DESC) | (1 << frameQLParser.DESCRIBE) | (1 << frameQLParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.EXTENDED or _la==frameQLParser.PARTITIONS or _la==frameQLParser.FORMAT:
                self.state = 5163
                localctx.formatType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.EXTENDED or _la==frameQLParser.PARTITIONS or _la==frameQLParser.FORMAT):
                    localctx.formatType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5164
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 5165
                localctx.formatValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.JSON or _la==frameQLParser.TRADITIONAL):
                    localctx.formatValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5168
            self.describeObjectClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(frameQLParser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)




    def helpStatement(self):

        localctx = frameQLParser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5170
            self.match(frameQLParser.HELP)
            self.state = 5171
            self.match(frameQLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(frameQLParser.USE, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = frameQLParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5173
            self.match(frameQLParser.USE)
            self.state = 5174
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeObjectClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_describeObjectClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DescribeStatementsContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)

        def deleteStatement(self):
            return self.getTypedRuleContext(frameQLParser.DeleteStatementContext,0)

        def insertStatement(self):
            return self.getTypedRuleContext(frameQLParser.InsertStatementContext,0)

        def replaceStatement(self):
            return self.getTypedRuleContext(frameQLParser.ReplaceStatementContext,0)

        def updateStatement(self):
            return self.getTypedRuleContext(frameQLParser.UpdateStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStatements" ):
                listener.enterDescribeStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStatements" ):
                listener.exitDescribeStatements(self)


    class DescribeConnectionContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)
        def CONNECTION(self):
            return self.getToken(frameQLParser.CONNECTION, 0)
        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeConnection" ):
                listener.enterDescribeConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeConnection" ):
                listener.exitDescribeConnection(self)



    def describeObjectClause(self):

        localctx = frameQLParser.DescribeObjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_describeObjectClause)
        try:
            self.state = 5186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.DELETE, frameQLParser.INSERT, frameQLParser.REPLACE, frameQLParser.SELECT, frameQLParser.UPDATE, frameQLParser.LR_BRACKET]:
                localctx = frameQLParser.DescribeStatementsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5181
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.SELECT, frameQLParser.LR_BRACKET]:
                    self.state = 5176
                    self.selectStatement()
                    pass
                elif token in [frameQLParser.DELETE]:
                    self.state = 5177
                    self.deleteStatement()
                    pass
                elif token in [frameQLParser.INSERT]:
                    self.state = 5178
                    self.insertStatement()
                    pass
                elif token in [frameQLParser.REPLACE]:
                    self.state = 5179
                    self.replaceStatement()
                    pass
                elif token in [frameQLParser.UPDATE]:
                    self.state = 5180
                    self.updateStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [frameQLParser.FOR]:
                localctx = frameQLParser.DescribeConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5183
                self.match(frameQLParser.FOR)
                self.state = 5184
                self.match(frameQLParser.CONNECTION)
                self.state = 5185
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(frameQLParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(frameQLParser.DOT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)




    def fullId(self):

        localctx = frameQLParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5188
            self.uid()
            self.state = 5192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,747,self._ctx)
            if la_ == 1:
                self.state = 5189
                self.match(frameQLParser.DOT_ID)

            elif la_ == 2:
                self.state = 5190
                self.match(frameQLParser.DOT)
                self.state = 5191
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = frameQLParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5194
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DottedIdContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)




    def fullColumnName(self):

        localctx = frameQLParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5196
            self.uid()
            self.state = 5201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,749,self._ctx)
            if la_ == 1:
                self.state = 5197
                self.dottedId()
                self.state = 5199
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,748,self._ctx)
                if la_ == 1:
                    self.state = 5198
                    self.dottedId()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def ASC(self):
            return self.getToken(frameQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(frameQLParser.DESC, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)




    def indexColumnName(self):

        localctx = frameQLParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5203
            self.uid()
            self.state = 5208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.LR_BRACKET:
                self.state = 5204
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5205
                self.decimalLiteral()
                self.state = 5206
                self.match(frameQLParser.RR_BRACKET)


            self.state = 5211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ASC or _la==frameQLParser.DESC:
                self.state = 5210
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ASC or _la==frameQLParser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(frameQLParser.STRING_USER_NAME, 0)

        def ID(self):
            return self.getToken(frameQLParser.ID, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = frameQLParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_userName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5213
            _la = self._input.LA(1)
            if not(_la==frameQLParser.ID or _la==frameQLParser.STRING_USER_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MysqlVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(frameQLParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(frameQLParser.GLOBAL_ID, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_mysqlVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariable" ):
                listener.enterMysqlVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariable" ):
                listener.exitMysqlVariable(self)




    def mysqlVariable(self):

        localctx = frameQLParser.MysqlVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_mysqlVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5215
            _la = self._input.LA(1)
            if not(_la==frameQLParser.LOCAL_ID or _la==frameQLParser.GLOBAL_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameBaseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(frameQLParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)




    def charsetName(self):

        localctx = frameQLParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_charsetName)
        try:
            self.state = 5221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5217
                self.match(frameQLParser.BINARY)
                pass
            elif token in [frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5218
                self.charsetNameBase()
                pass
            elif token in [frameQLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5219
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.CHARSET_REVERSE_QOUTE_STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5220
                self.match(frameQLParser.CHARSET_REVERSE_QOUTE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollationNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)




    def collationName(self):

        localctx = frameQLParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_collationName)
        try:
            self.state = 5225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,753,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5223
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5224
                self.match(frameQLParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE(self):
            return self.getToken(frameQLParser.ARCHIVE, 0)

        def BLACKHOLE(self):
            return self.getToken(frameQLParser.BLACKHOLE, 0)

        def CSV(self):
            return self.getToken(frameQLParser.CSV, 0)

        def FEDERATED(self):
            return self.getToken(frameQLParser.FEDERATED, 0)

        def INNODB(self):
            return self.getToken(frameQLParser.INNODB, 0)

        def MEMORY(self):
            return self.getToken(frameQLParser.MEMORY, 0)

        def MRG_MYISAM(self):
            return self.getToken(frameQLParser.MRG_MYISAM, 0)

        def MYISAM(self):
            return self.getToken(frameQLParser.MYISAM, 0)

        def NDB(self):
            return self.getToken(frameQLParser.NDB, 0)

        def NDBCLUSTER(self):
            return self.getToken(frameQLParser.NDBCLUSTER, 0)

        def PERFOMANCE_SCHEMA(self):
            return self.getToken(frameQLParser.PERFOMANCE_SCHEMA, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(frameQLParser.REVERSE_QUOTE_ID, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_engineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineName" ):
                listener.enterEngineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineName" ):
                listener.exitEngineName(self)




    def engineName(self):

        localctx = frameQLParser.EngineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_engineName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5227
            _la = self._input.LA(1)
            if not(((((_la - 615)) & ~0x3f) == 0 and ((1 << (_la - 615)) & ((1 << (frameQLParser.ARCHIVE - 615)) | (1 << (frameQLParser.BLACKHOLE - 615)) | (1 << (frameQLParser.CSV - 615)) | (1 << (frameQLParser.FEDERATED - 615)) | (1 << (frameQLParser.INNODB - 615)) | (1 << (frameQLParser.MEMORY - 615)) | (1 << (frameQLParser.MRG_MYISAM - 615)) | (1 << (frameQLParser.MYISAM - 615)) | (1 << (frameQLParser.NDB - 615)) | (1 << (frameQLParser.NDBCLUSTER - 615)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 615)))) != 0) or _la==frameQLParser.STRING_LITERAL or _la==frameQLParser.REVERSE_QUOTE_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.MINUS)
            else:
                return self.getToken(frameQLParser.MINUS, i)

        def COLON_SYMB(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COLON_SYMB)
            else:
                return self.getToken(frameQLParser.COLON_SYMB, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)




    def uuidSet(self):

        localctx = frameQLParser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5229
            self.decimalLiteral()
            self.state = 5230
            self.match(frameQLParser.MINUS)
            self.state = 5231
            self.decimalLiteral()
            self.state = 5232
            self.match(frameQLParser.MINUS)
            self.state = 5233
            self.decimalLiteral()
            self.state = 5234
            self.match(frameQLParser.MINUS)
            self.state = 5235
            self.decimalLiteral()
            self.state = 5236
            self.match(frameQLParser.MINUS)
            self.state = 5237
            self.decimalLiteral()
            self.state = 5243 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5238
                self.match(frameQLParser.COLON_SYMB)
                self.state = 5239
                self.decimalLiteral()
                self.state = 5240
                self.match(frameQLParser.MINUS)
                self.state = 5241
                self.decimalLiteral()
                self.state = 5245 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==frameQLParser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.globalTableUid = None # XuidStringIdContext
            self.qualifier = None # XuidStringIdContext
            self.idFormat = None # DecimalLiteralContext

        def xuidStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.XuidStringIdContext)
            else:
                return self.getTypedRuleContext(frameQLParser.XuidStringIdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)




    def xid(self):

        localctx = frameQLParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5247
            localctx.globalTableUid = self.xuidStringId()
            self.state = 5254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.COMMA:
                self.state = 5248
                self.match(frameQLParser.COMMA)
                self.state = 5249
                localctx.qualifier = self.xuidStringId()
                self.state = 5252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COMMA:
                    self.state = 5250
                    self.match(frameQLParser.COMMA)
                    self.state = 5251
                    localctx.idFormat = self.decimalLiteral()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XuidStringIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(frameQLParser.BIT_STRING, 0)

        def HEXADECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.HEXADECIMAL_LITERAL)
            else:
                return self.getToken(frameQLParser.HEXADECIMAL_LITERAL, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_xuidStringId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXuidStringId" ):
                listener.enterXuidStringId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXuidStringId" ):
                listener.exitXuidStringId(self)




    def xuidStringId(self):

        localctx = frameQLParser.XuidStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_xuidStringId)
        self._la = 0 # Token type
        try:
            self.state = 5263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5256
                self.match(frameQLParser.STRING_LITERAL)
                pass
            elif token in [frameQLParser.BIT_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5257
                self.match(frameQLParser.BIT_STRING)
                pass
            elif token in [frameQLParser.HEXADECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5259 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5258
                    self.match(frameQLParser.HEXADECIMAL_LITERAL)
                    self.state = 5261 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==frameQLParser.HEXADECIMAL_LITERAL):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPluginContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_authPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPlugin" ):
                listener.enterAuthPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPlugin" ):
                listener.exitAuthPlugin(self)




    def authPlugin(self):

        localctx = frameQLParser.AuthPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_authPlugin)
        try:
            self.state = 5267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,759,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5265
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5266
                self.match(frameQLParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(frameQLParser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(frameQLParser.REVERSE_QUOTE_ID, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(frameQLParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)




    def uid(self):

        localctx = frameQLParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_uid)
        try:
            self.state = 5272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,760,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5269
                self.simpleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5270
                self.match(frameQLParser.REVERSE_QUOTE_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5271
                self.match(frameQLParser.CHARSET_REVERSE_QOUTE_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(frameQLParser.ID, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameBaseContext,0)


        def transactionLevelBase(self):
            return self.getTypedRuleContext(frameQLParser.TransactionLevelBaseContext,0)


        def engineName(self):
            return self.getTypedRuleContext(frameQLParser.EngineNameContext,0)


        def privilegesBase(self):
            return self.getTypedRuleContext(frameQLParser.PrivilegesBaseContext,0)


        def intervalTypeBase(self):
            return self.getTypedRuleContext(frameQLParser.IntervalTypeBaseContext,0)


        def dataTypeBase(self):
            return self.getTypedRuleContext(frameQLParser.DataTypeBaseContext,0)


        def keywordsCanBeId(self):
            return self.getTypedRuleContext(frameQLParser.KeywordsCanBeIdContext,0)


        def functionNameBase(self):
            return self.getTypedRuleContext(frameQLParser.FunctionNameBaseContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)




    def simpleId(self):

        localctx = frameQLParser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_simpleId)
        try:
            self.state = 5283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,761,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5274
                self.match(frameQLParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5275
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5276
                self.transactionLevelBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5277
                self.engineName()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5278
                self.privilegesBase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5279
                self.intervalTypeBase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5280
                self.dataTypeBase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5281
                self.keywordsCanBeId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5282
                self.functionNameBase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(frameQLParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(frameQLParser.DOT, 0)

        def uid(self):
            return self.getTypedRuleContext(frameQLParser.UidContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)




    def dottedId(self):

        localctx = frameQLParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_dottedId)
        try:
            self.state = 5288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5285
                self.match(frameQLParser.DOT_ID)
                pass
            elif token in [frameQLParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5286
                self.match(frameQLParser.DOT)
                self.state = 5287
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(frameQLParser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(frameQLParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(frameQLParser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(frameQLParser.TWO_DECIMAL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)




    def decimalLiteral(self):

        localctx = frameQLParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5290
            _la = self._input.LA(1)
            if not(((((_la - 958)) & ~0x3f) == 0 and ((1 << (_la - 958)) & ((1 << (frameQLParser.ZERO_DECIMAL - 958)) | (1 << (frameQLParser.ONE_DECIMAL - 958)) | (1 << (frameQLParser.TWO_DECIMAL - 958)) | (1 << (frameQLParser.DECIMAL_LITERAL - 958)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSizeLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESIZE_LITERAL(self):
            return self.getToken(frameQLParser.FILESIZE_LITERAL, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_fileSizeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSizeLiteral" ):
                listener.enterFileSizeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSizeLiteral" ):
                listener.exitFileSizeLiteral(self)




    def fileSizeLiteral(self):

        localctx = frameQLParser.FileSizeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_fileSizeLiteral)
        try:
            self.state = 5294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.FILESIZE_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5292
                self.match(frameQLParser.FILESIZE_LITERAL)
                pass
            elif token in [frameQLParser.ZERO_DECIMAL, frameQLParser.ONE_DECIMAL, frameQLParser.TWO_DECIMAL, frameQLParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5293
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.STRING_LITERAL)
            else:
                return self.getToken(frameQLParser.STRING_LITERAL, i)

        def START_NATIONAL_STRING_LITERAL(self):
            return self.getToken(frameQLParser.START_NATIONAL_STRING_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(frameQLParser.STRING_CHARSET_NAME, 0)

        def COLLATE(self):
            return self.getToken(frameQLParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(frameQLParser.CollationNameContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = frameQLParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 5319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,770,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5301
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.STRING_LITERAL, frameQLParser.STRING_CHARSET_NAME]:
                    self.state = 5297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.STRING_CHARSET_NAME:
                        self.state = 5296
                        self.match(frameQLParser.STRING_CHARSET_NAME)


                    self.state = 5299
                    self.match(frameQLParser.STRING_LITERAL)
                    pass
                elif token in [frameQLParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5300
                    self.match(frameQLParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5304 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5303
                        self.match(frameQLParser.STRING_LITERAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 5306 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,766,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5313
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.STRING_LITERAL, frameQLParser.STRING_CHARSET_NAME]:
                    self.state = 5309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.STRING_CHARSET_NAME:
                        self.state = 5308
                        self.match(frameQLParser.STRING_CHARSET_NAME)


                    self.state = 5311
                    self.match(frameQLParser.STRING_LITERAL)
                    pass
                elif token in [frameQLParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5312
                    self.match(frameQLParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,769,self._ctx)
                if la_ == 1:
                    self.state = 5315
                    self.match(frameQLParser.COLLATE)
                    self.state = 5316
                    self.collationName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(frameQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(frameQLParser.FALSE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = frameQLParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5321
            _la = self._input.LA(1)
            if not(_la==frameQLParser.FALSE or _la==frameQLParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexadecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(frameQLParser.HEXADECIMAL_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(frameQLParser.STRING_CHARSET_NAME, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_hexadecimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)




    def hexadecimalLiteral(self):

        localctx = frameQLParser.HexadecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_hexadecimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.STRING_CHARSET_NAME:
                self.state = 5323
                self.match(frameQLParser.STRING_CHARSET_NAME)


            self.state = 5326
            self.match(frameQLParser.HEXADECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullNotnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(frameQLParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(frameQLParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)




    def nullNotnull(self):

        localctx = frameQLParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.NOT:
                self.state = 5328
                self.match(frameQLParser.NOT)


            self.state = 5331
            _la = self._input.LA(1)
            if not(_la==frameQLParser.NULL_LITERAL or _la==frameQLParser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(frameQLParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def MINUS(self):
            return self.getToken(frameQLParser.MINUS, 0)

        def hexadecimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.HexadecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(frameQLParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(frameQLParser.REAL_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(frameQLParser.BIT_STRING, 0)

        def NULL_LITERAL(self):
            return self.getToken(frameQLParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(frameQLParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = frameQLParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 5345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,774,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5333
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5334
                self.decimalLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5335
                self.match(frameQLParser.MINUS)
                self.state = 5336
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5337
                self.hexadecimalLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5338
                self.booleanLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5339
                self.match(frameQLParser.REAL_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5340
                self.match(frameQLParser.BIT_STRING)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.NOT:
                    self.state = 5341
                    self.match(frameQLParser.NOT)


                self.state = 5344
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.NULL_LITERAL or _la==frameQLParser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpatialDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(frameQLParser.GEOMETRYCOLLECTION, 0)
        def LINESTRING(self):
            return self.getToken(frameQLParser.LINESTRING, 0)
        def MULTILINESTRING(self):
            return self.getToken(frameQLParser.MULTILINESTRING, 0)
        def MULTIPOINT(self):
            return self.getToken(frameQLParser.MULTIPOINT, 0)
        def MULTIPOLYGON(self):
            return self.getToken(frameQLParser.MULTIPOLYGON, 0)
        def POINT(self):
            return self.getToken(frameQLParser.POINT, 0)
        def POLYGON(self):
            return self.getToken(frameQLParser.POLYGON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialDataType" ):
                listener.enterSpatialDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialDataType" ):
                listener.exitSpatialDataType(self)


    class CollectionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.STRING_LITERAL)
            else:
                return self.getToken(frameQLParser.STRING_LITERAL, i)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def ENUM(self):
            return self.getToken(frameQLParser.ENUM, 0)
        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.SET)
            else:
                return self.getToken(frameQLParser.SET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)
        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)
        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)
        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(frameQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(frameQLParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionDataType" ):
                listener.enterCollectionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionDataType" ):
                listener.exitCollectionDataType(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def TINYINT(self):
            return self.getToken(frameQLParser.TINYINT, 0)
        def SMALLINT(self):
            return self.getToken(frameQLParser.SMALLINT, 0)
        def MEDIUMINT(self):
            return self.getToken(frameQLParser.MEDIUMINT, 0)
        def INT(self):
            return self.getToken(frameQLParser.INT, 0)
        def INTEGER(self):
            return self.getToken(frameQLParser.INTEGER, 0)
        def BIGINT(self):
            return self.getToken(frameQLParser.BIGINT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(frameQLParser.LengthOneDimensionContext,0)

        def UNSIGNED(self):
            return self.getToken(frameQLParser.UNSIGNED, 0)
        def ZEROFILL(self):
            return self.getToken(frameQLParser.ZEROFILL, 0)
        def REAL(self):
            return self.getToken(frameQLParser.REAL, 0)
        def DOUBLE(self):
            return self.getToken(frameQLParser.DOUBLE, 0)
        def FLOAT(self):
            return self.getToken(frameQLParser.FLOAT, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(frameQLParser.LengthTwoDimensionContext,0)

        def DECIMAL(self):
            return self.getToken(frameQLParser.DECIMAL, 0)
        def NUMERIC(self):
            return self.getToken(frameQLParser.NUMERIC, 0)
        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(frameQLParser.LengthTwoOptionalDimensionContext,0)

        def BIT(self):
            return self.getToken(frameQLParser.BIT, 0)
        def TIME(self):
            return self.getToken(frameQLParser.TIME, 0)
        def TIMESTAMP(self):
            return self.getToken(frameQLParser.TIMESTAMP, 0)
        def DATETIME(self):
            return self.getToken(frameQLParser.DATETIME, 0)
        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)
        def VARBINARY(self):
            return self.getToken(frameQLParser.VARBINARY, 0)
        def YEAR(self):
            return self.getToken(frameQLParser.YEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)


    class StringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(frameQLParser.CHAR, 0)
        def VARCHAR(self):
            return self.getToken(frameQLParser.VARCHAR, 0)
        def TINYTEXT(self):
            return self.getToken(frameQLParser.TINYTEXT, 0)
        def TEXT(self):
            return self.getToken(frameQLParser.TEXT, 0)
        def MEDIUMTEXT(self):
            return self.getToken(frameQLParser.MEDIUMTEXT, 0)
        def LONGTEXT(self):
            return self.getToken(frameQLParser.LONGTEXT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(frameQLParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)
        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(frameQLParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(frameQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(frameQLParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringDataType" ):
                listener.enterStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringDataType" ):
                listener.exitStringDataType(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(frameQLParser.DATE, 0)
        def TINYBLOB(self):
            return self.getToken(frameQLParser.TINYBLOB, 0)
        def BLOB(self):
            return self.getToken(frameQLParser.BLOB, 0)
        def MEDIUMBLOB(self):
            return self.getToken(frameQLParser.MEDIUMBLOB, 0)
        def LONGBLOB(self):
            return self.getToken(frameQLParser.LONGBLOB, 0)
        def BOOL(self):
            return self.getToken(frameQLParser.BOOL, 0)
        def BOOLEAN(self):
            return self.getToken(frameQLParser.BOOLEAN, 0)
        def SERIAL(self):
            return self.getToken(frameQLParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)



    def dataType(self):

        localctx = frameQLParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 5422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.CHAR, frameQLParser.VARCHAR, frameQLParser.TINYTEXT, frameQLParser.TEXT, frameQLParser.MEDIUMTEXT, frameQLParser.LONGTEXT]:
                localctx = frameQLParser.StringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5347
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (frameQLParser.CHAR - 189)) | (1 << (frameQLParser.VARCHAR - 189)) | (1 << (frameQLParser.TINYTEXT - 189)) | (1 << (frameQLParser.TEXT - 189)) | (1 << (frameQLParser.MEDIUMTEXT - 189)) | (1 << (frameQLParser.LONGTEXT - 189)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,775,self._ctx)
                if la_ == 1:
                    self.state = 5348
                    self.lengthOneDimension()


                self.state = 5352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.BINARY:
                    self.state = 5351
                    self.match(frameQLParser.BINARY)


                self.state = 5357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CHARACTER:
                    self.state = 5354
                    self.match(frameQLParser.CHARACTER)
                    self.state = 5355
                    self.match(frameQLParser.SET)
                    self.state = 5356
                    self.charsetName()


                self.state = 5361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLLATE:
                    self.state = 5359
                    self.match(frameQLParser.COLLATE)
                    self.state = 5360
                    self.collationName()


                pass
            elif token in [frameQLParser.TINYINT, frameQLParser.SMALLINT, frameQLParser.MEDIUMINT, frameQLParser.INT, frameQLParser.INTEGER, frameQLParser.BIGINT]:
                localctx = frameQLParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5363
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (frameQLParser.TINYINT - 173)) | (1 << (frameQLParser.SMALLINT - 173)) | (1 << (frameQLParser.MEDIUMINT - 173)) | (1 << (frameQLParser.INT - 173)) | (1 << (frameQLParser.INTEGER - 173)) | (1 << (frameQLParser.BIGINT - 173)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,779,self._ctx)
                if la_ == 1:
                    self.state = 5364
                    self.lengthOneDimension()


                self.state = 5368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.UNSIGNED:
                    self.state = 5367
                    self.match(frameQLParser.UNSIGNED)


                self.state = 5371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ZEROFILL:
                    self.state = 5370
                    self.match(frameQLParser.ZEROFILL)


                pass
            elif token in [frameQLParser.REAL, frameQLParser.DOUBLE, frameQLParser.FLOAT]:
                localctx = frameQLParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5373
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (frameQLParser.REAL - 179)) | (1 << (frameQLParser.DOUBLE - 179)) | (1 << (frameQLParser.FLOAT - 179)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,782,self._ctx)
                if la_ == 1:
                    self.state = 5374
                    self.lengthTwoDimension()


                self.state = 5378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.UNSIGNED:
                    self.state = 5377
                    self.match(frameQLParser.UNSIGNED)


                self.state = 5381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ZEROFILL:
                    self.state = 5380
                    self.match(frameQLParser.ZEROFILL)


                pass
            elif token in [frameQLParser.DECIMAL, frameQLParser.NUMERIC]:
                localctx = frameQLParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5383
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.DECIMAL or _la==frameQLParser.NUMERIC):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
                if la_ == 1:
                    self.state = 5384
                    self.lengthTwoOptionalDimension()


                self.state = 5388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.UNSIGNED:
                    self.state = 5387
                    self.match(frameQLParser.UNSIGNED)


                self.state = 5391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ZEROFILL:
                    self.state = 5390
                    self.match(frameQLParser.ZEROFILL)


                pass
            elif token in [frameQLParser.DATE, frameQLParser.TINYBLOB, frameQLParser.BLOB, frameQLParser.MEDIUMBLOB, frameQLParser.LONGBLOB, frameQLParser.SERIAL, frameQLParser.BOOL, frameQLParser.BOOLEAN]:
                localctx = frameQLParser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5393
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TINYBLOB - 184)) | (1 << (frameQLParser.BLOB - 184)) | (1 << (frameQLParser.MEDIUMBLOB - 184)) | (1 << (frameQLParser.LONGBLOB - 184)) | (1 << (frameQLParser.SERIAL - 184)))) != 0) or _la==frameQLParser.BOOL or _la==frameQLParser.BOOLEAN):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.BINARY, frameQLParser.VARBINARY, frameQLParser.BIT]:
                localctx = frameQLParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5394
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (frameQLParser.TIME - 185)) | (1 << (frameQLParser.TIMESTAMP - 185)) | (1 << (frameQLParser.DATETIME - 185)) | (1 << (frameQLParser.YEAR - 185)) | (1 << (frameQLParser.BINARY - 185)) | (1 << (frameQLParser.VARBINARY - 185)))) != 0) or _la==frameQLParser.BIT):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,788,self._ctx)
                if la_ == 1:
                    self.state = 5395
                    self.lengthOneDimension()


                pass
            elif token in [frameQLParser.SET, frameQLParser.ENUM]:
                localctx = frameQLParser.CollectionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5398
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.SET or _la==frameQLParser.ENUM):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5399
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5400
                self.match(frameQLParser.STRING_LITERAL)
                self.state = 5405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 5401
                    self.match(frameQLParser.COMMA)
                    self.state = 5402
                    self.match(frameQLParser.STRING_LITERAL)
                    self.state = 5407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5408
                self.match(frameQLParser.RR_BRACKET)
                self.state = 5410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.BINARY:
                    self.state = 5409
                    self.match(frameQLParser.BINARY)


                self.state = 5415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CHARACTER:
                    self.state = 5412
                    self.match(frameQLParser.CHARACTER)
                    self.state = 5413
                    self.match(frameQLParser.SET)
                    self.state = 5414
                    self.charsetName()


                self.state = 5419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.COLLATE:
                    self.state = 5417
                    self.match(frameQLParser.COLLATE)
                    self.state = 5418
                    self.collationName()


                pass
            elif token in [frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON]:
                localctx = frameQLParser.SpatialDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5421
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 630)) & ~0x3f) == 0 and ((1 << (_la - 630)) & ((1 << (frameQLParser.GEOMETRYCOLLECTION - 630)) | (1 << (frameQLParser.LINESTRING - 630)) | (1 << (frameQLParser.MULTILINESTRING - 630)) | (1 << (frameQLParser.MULTIPOINT - 630)) | (1 << (frameQLParser.MULTIPOLYGON - 630)) | (1 << (frameQLParser.POINT - 630)) | (1 << (frameQLParser.POLYGON - 630)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConvertedDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)

        def NCHAR(self):
            return self.getToken(frameQLParser.NCHAR, 0)

        def lengthOneDimension(self):
            return self.getTypedRuleContext(frameQLParser.LengthOneDimensionContext,0)


        def CHAR(self):
            return self.getToken(frameQLParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(frameQLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(frameQLParser.SET, 0)

        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)


        def DATE(self):
            return self.getToken(frameQLParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(frameQLParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(frameQLParser.TIME, 0)

        def DECIMAL(self):
            return self.getToken(frameQLParser.DECIMAL, 0)

        def lengthTwoDimension(self):
            return self.getTypedRuleContext(frameQLParser.LengthTwoDimensionContext,0)


        def SIGNED(self):
            return self.getToken(frameQLParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(frameQLParser.UNSIGNED, 0)

        def INTEGER(self):
            return self.getToken(frameQLParser.INTEGER, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_convertedDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConvertedDataType" ):
                listener.enterConvertedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConvertedDataType" ):
                listener.exitConvertedDataType(self)




    def convertedDataType(self):

        localctx = frameQLParser.ConvertedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_convertedDataType)
        self._la = 0 # Token type
        try:
            self.state = 5446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.BINARY, frameQLParser.NCHAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5424
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.BINARY or _la==frameQLParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LR_BRACKET:
                    self.state = 5425
                    self.lengthOneDimension()


                pass
            elif token in [frameQLParser.CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5428
                localctx.typeName = self.match(frameQLParser.CHAR)
                self.state = 5430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LR_BRACKET:
                    self.state = 5429
                    self.lengthOneDimension()


                self.state = 5435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.CHARACTER:
                    self.state = 5432
                    self.match(frameQLParser.CHARACTER)
                    self.state = 5433
                    self.match(frameQLParser.SET)
                    self.state = 5434
                    self.charsetName()


                pass
            elif token in [frameQLParser.DATE, frameQLParser.TIME, frameQLParser.DATETIME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5437
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.DATETIME - 184)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [frameQLParser.DECIMAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5438
                localctx.typeName = self.match(frameQLParser.DECIMAL)
                self.state = 5440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LR_BRACKET:
                    self.state = 5439
                    self.lengthTwoDimension()


                pass
            elif token in [frameQLParser.UNSIGNED, frameQLParser.SIGNED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5442
                _la = self._input.LA(1)
                if not(_la==frameQLParser.UNSIGNED or _la==frameQLParser.SIGNED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.INTEGER:
                    self.state = 5443
                    self.match(frameQLParser.INTEGER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthOneDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)




    def lengthOneDimension(self):

        localctx = frameQLParser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5448
            self.match(frameQLParser.LR_BRACKET)
            self.state = 5449
            self.decimalLiteral()
            self.state = 5450
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)




    def lengthTwoDimension(self):

        localctx = frameQLParser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5452
            self.match(frameQLParser.LR_BRACKET)
            self.state = 5453
            self.decimalLiteral()
            self.state = 5454
            self.match(frameQLParser.COMMA)
            self.state = 5455
            self.decimalLiteral()
            self.state = 5456
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoOptionalDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_lengthTwoOptionalDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoOptionalDimension" ):
                listener.enterLengthTwoOptionalDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoOptionalDimension" ):
                listener.exitLengthTwoOptionalDimension(self)




    def lengthTwoOptionalDimension(self):

        localctx = frameQLParser.LengthTwoOptionalDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_lengthTwoOptionalDimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5458
            self.match(frameQLParser.LR_BRACKET)
            self.state = 5459
            self.decimalLiteral()
            self.state = 5462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.COMMA:
                self.state = 5460
                self.match(frameQLParser.COMMA)
                self.state = 5461
                self.decimalLiteral()


            self.state = 5464
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.UidContext)
            else:
                return self.getTypedRuleContext(frameQLParser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)




    def uidList(self):

        localctx = frameQLParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_uidList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5466
            self.uid()
            self.state = 5471
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,801,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5467
                    self.match(frameQLParser.COMMA)
                    self.state = 5468
                    self.uid() 
                self.state = 5473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,801,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.TableNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.TableNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)




    def tables(self):

        localctx = frameQLParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_tables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5474
            self.tableName()
            self.state = 5479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,802,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5475
                    self.match(frameQLParser.COMMA)
                    self.state = 5476
                    self.tableName() 
                self.state = 5481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,802,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.IndexColumnNameContext,i)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)




    def indexColumnNames(self):

        localctx = frameQLParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5482
            self.match(frameQLParser.LR_BRACKET)
            self.state = 5483
            self.indexColumnName()
            self.state = 5488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5484
                self.match(frameQLParser.COMMA)
                self.state = 5485
                self.indexColumnName()
                self.state = 5490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5491
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = frameQLParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5493
            self.expression(0)
            self.state = 5498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5494
                self.match(frameQLParser.COMMA)
                self.state = 5495
                self.expression(0)
                self.state = 5500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionOrDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)




    def expressionsWithDefaults(self):

        localctx = frameQLParser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5501
            self.expressionOrDefault()
            self.state = 5506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5502
                self.match(frameQLParser.COMMA)
                self.state = 5503
                self.expressionOrDefault()
                self.state = 5508
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ConstantContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_constants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstants" ):
                listener.enterConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstants" ):
                listener.exitConstants(self)




    def constants(self):

        localctx = frameQLParser.ConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_constants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5509
            self.constant()
            self.state = 5514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5510
                self.match(frameQLParser.COMMA)
                self.state = 5511
                self.constant()
                self.state = 5516
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStringsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.STRING_LITERAL)
            else:
                return self.getToken(frameQLParser.STRING_LITERAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_simpleStrings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStrings" ):
                listener.enterSimpleStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStrings" ):
                listener.exitSimpleStrings(self)




    def simpleStrings(self):

        localctx = frameQLParser.SimpleStringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_simpleStrings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5517
            self.match(frameQLParser.STRING_LITERAL)
            self.state = 5522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5518
                self.match(frameQLParser.COMMA)
                self.state = 5519
                self.match(frameQLParser.STRING_LITERAL)
                self.state = 5524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LOCAL_ID)
            else:
                return self.getToken(frameQLParser.LOCAL_ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_userVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariables" ):
                listener.enterUserVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariables" ):
                listener.exitUserVariables(self)




    def userVariables(self):

        localctx = frameQLParser.UserVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_userVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5525
            self.match(frameQLParser.LOCAL_ID)
            self.state = 5530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5526
                self.match(frameQLParser.COMMA)
                self.state = 5527
                self.match(frameQLParser.LOCAL_ID)
                self.state = 5532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(frameQLParser.NULL_LITERAL, 0)

        def constant(self):
            return self.getTypedRuleContext(frameQLParser.ConstantContext,0)


        def currentTimestamp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.CurrentTimestampContext)
            else:
                return self.getTypedRuleContext(frameQLParser.CurrentTimestampContext,i)


        def ON(self):
            return self.getToken(frameQLParser.ON, 0)

        def UPDATE(self):
            return self.getToken(frameQLParser.UPDATE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = frameQLParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_defaultValue)
        self._la = 0 # Token type
        try:
            self.state = 5541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,810,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5533
                self.match(frameQLParser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5534
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5535
                self.currentTimestamp()
                self.state = 5539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ON:
                    self.state = 5536
                    self.match(frameQLParser.ON)
                    self.state = 5537
                    self.match(frameQLParser.UPDATE)
                    self.state = 5538
                    self.currentTimestamp()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrentTimestampContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOW(self):
            return self.getToken(frameQLParser.NOW, 0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(frameQLParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(frameQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(frameQLParser.LOCALTIMESTAMP, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_currentTimestamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentTimestamp" ):
                listener.enterCurrentTimestamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentTimestamp" ):
                listener.exitCurrentTimestamp(self)




    def currentTimestamp(self):

        localctx = frameQLParser.CurrentTimestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_currentTimestamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.CURRENT_TIMESTAMP, frameQLParser.LOCALTIME, frameQLParser.LOCALTIMESTAMP]:
                self.state = 5543
                _la = self._input.LA(1)
                if not(((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & ((1 << (frameQLParser.CURRENT_TIMESTAMP - 233)) | (1 << (frameQLParser.LOCALTIME - 233)) | (1 << (frameQLParser.LOCALTIMESTAMP - 233)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LR_BRACKET:
                    self.state = 5544
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 5546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 958)) & ~0x3f) == 0 and ((1 << (_la - 958)) & ((1 << (frameQLParser.ZERO_DECIMAL - 958)) | (1 << (frameQLParser.ONE_DECIMAL - 958)) | (1 << (frameQLParser.TWO_DECIMAL - 958)) | (1 << (frameQLParser.DECIMAL_LITERAL - 958)))) != 0):
                        self.state = 5545
                        self.decimalLiteral()


                    self.state = 5548
                    self.match(frameQLParser.RR_BRACKET)


                pass
            elif token in [frameQLParser.NOW]:
                self.state = 5551
                self.match(frameQLParser.NOW)
                self.state = 5552
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 958)) & ~0x3f) == 0 and ((1 << (_la - 958)) & ((1 << (frameQLParser.ZERO_DECIMAL - 958)) | (1 << (frameQLParser.ONE_DECIMAL - 958)) | (1 << (frameQLParser.TWO_DECIMAL - 958)) | (1 << (frameQLParser.DECIMAL_LITERAL - 958)))) != 0):
                    self.state = 5553
                    self.decimalLiteral()


                self.state = 5556
                self.match(frameQLParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(frameQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = frameQLParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_expressionOrDefault)
        try:
            self.state = 5561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.CASE, frameQLParser.CAST, frameQLParser.CONVERT, frameQLParser.CURRENT_USER, frameQLParser.DATABASE, frameQLParser.EXISTS, frameQLParser.FALSE, frameQLParser.IF, frameQLParser.INSERT, frameQLParser.INTERVAL, frameQLParser.LEFT, frameQLParser.NOT, frameQLParser.NULL_LITERAL, frameQLParser.REPLACE, frameQLParser.RIGHT, frameQLParser.TRUE, frameQLParser.VALUES, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.CHAR, frameQLParser.BINARY, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.AVG, frameQLParser.BIT_AND, frameQLParser.BIT_OR, frameQLParser.BIT_XOR, frameQLParser.COUNT, frameQLParser.GROUP_CONCAT, frameQLParser.MAX, frameQLParser.MIN, frameQLParser.STD, frameQLParser.STDDEV, frameQLParser.STDDEV_POP, frameQLParser.STDDEV_SAMP, frameQLParser.SUM, frameQLParser.VAR_POP, frameQLParser.VAR_SAMP, frameQLParser.VARIANCE, frameQLParser.FCOUNT, frameQLParser.CURRENT_DATE, frameQLParser.CURRENT_TIME, frameQLParser.CURRENT_TIMESTAMP, frameQLParser.LOCALTIME, frameQLParser.CURDATE, frameQLParser.CURTIME, frameQLParser.DATE_ADD, frameQLParser.DATE_SUB, frameQLParser.EXTRACT, frameQLParser.LOCALTIMESTAMP, frameQLParser.NOW, frameQLParser.POSITION, frameQLParser.SUBSTR, frameQLParser.SUBSTRING, frameQLParser.SYSDATE, frameQLParser.TRIM, frameQLParser.UTC_DATE, frameQLParser.UTC_TIME, frameQLParser.UTC_TIMESTAMP, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.PLUS, frameQLParser.MINUS, frameQLParser.EXCLAMATION_SYMBOL, frameQLParser.BIT_NOT_OP, frameQLParser.LR_BRACKET, frameQLParser.ZERO_DECIMAL, frameQLParser.ONE_DECIMAL, frameQLParser.TWO_DECIMAL, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.START_NATIONAL_STRING_LITERAL, frameQLParser.STRING_LITERAL, frameQLParser.DECIMAL_LITERAL, frameQLParser.HEXADECIMAL_LITERAL, frameQLParser.REAL_LITERAL, frameQLParser.NULL_SPEC_LITERAL, frameQLParser.BIT_STRING, frameQLParser.STRING_CHARSET_NAME, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID, frameQLParser.LOCAL_ID, frameQLParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5559
                self.expression(0)
                pass
            elif token in [frameQLParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5560
                self.match(frameQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(frameQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(frameQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = frameQLParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5563
            self.match(frameQLParser.IF)
            self.state = 5564
            self.match(frameQLParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(frameQLParser.IF, 0)

        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(frameQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = frameQLParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5566
            self.match(frameQLParser.IF)
            self.state = 5567
            self.match(frameQLParser.NOT)
            self.state = 5568
            self.match(frameQLParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecificFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specificFunction(self):
            return self.getTypedRuleContext(frameQLParser.SpecificFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecificFunctionCall" ):
                listener.enterSpecificFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecificFunctionCall" ):
                listener.exitSpecificFunctionCall(self)


    class PasswordFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(frameQLParser.PasswordFunctionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionCall" ):
                listener.enterPasswordFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionCall" ):
                listener.exitPasswordFunctionCall(self)


    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(frameQLParser.FullIdContext,0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(frameQLParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(frameQLParser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)


    class ScalarFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalarFunctionName(self):
            return self.getTypedRuleContext(frameQLParser.ScalarFunctionNameContext,0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(frameQLParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionCall" ):
                listener.enterScalarFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionCall" ):
                listener.exitScalarFunctionCall(self)



    def functionCall(self):

        localctx = frameQLParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 5587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,818,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.SpecificFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5570
                self.specificFunction()
                pass

            elif la_ == 2:
                localctx = frameQLParser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5571
                self.aggregateWindowedFunction()
                pass

            elif la_ == 3:
                localctx = frameQLParser.ScalarFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5572
                self.scalarFunctionName()
                self.state = 5573
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << frameQLParser.CASE) | (1 << frameQLParser.CAST) | (1 << frameQLParser.CONVERT) | (1 << frameQLParser.CURRENT_USER) | (1 << frameQLParser.DATABASE) | (1 << frameQLParser.EXISTS) | (1 << frameQLParser.FALSE))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (frameQLParser.IF - 68)) | (1 << (frameQLParser.INSERT - 68)) | (1 << (frameQLParser.INTERVAL - 68)) | (1 << (frameQLParser.LEFT - 68)) | (1 << (frameQLParser.NOT - 68)) | (1 << (frameQLParser.NULL_LITERAL - 68)) | (1 << (frameQLParser.REPLACE - 68)) | (1 << (frameQLParser.RIGHT - 68)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (frameQLParser.TRUE - 155)) | (1 << (frameQLParser.VALUES - 155)) | (1 << (frameQLParser.DATE - 155)) | (1 << (frameQLParser.TIME - 155)) | (1 << (frameQLParser.TIMESTAMP - 155)) | (1 << (frameQLParser.DATETIME - 155)) | (1 << (frameQLParser.YEAR - 155)) | (1 << (frameQLParser.CHAR - 155)) | (1 << (frameQLParser.BINARY - 155)) | (1 << (frameQLParser.TEXT - 155)) | (1 << (frameQLParser.ENUM - 155)) | (1 << (frameQLParser.SERIAL - 155)) | (1 << (frameQLParser.AVG - 155)) | (1 << (frameQLParser.BIT_AND - 155)) | (1 << (frameQLParser.BIT_OR - 155)) | (1 << (frameQLParser.BIT_XOR - 155)) | (1 << (frameQLParser.COUNT - 155)))) != 0) or ((((_la - 219)) & ~0x3f) == 0 and ((1 << (_la - 219)) & ((1 << (frameQLParser.GROUP_CONCAT - 219)) | (1 << (frameQLParser.MAX - 219)) | (1 << (frameQLParser.MIN - 219)) | (1 << (frameQLParser.STD - 219)) | (1 << (frameQLParser.STDDEV - 219)) | (1 << (frameQLParser.STDDEV_POP - 219)) | (1 << (frameQLParser.STDDEV_SAMP - 219)) | (1 << (frameQLParser.SUM - 219)) | (1 << (frameQLParser.VAR_POP - 219)) | (1 << (frameQLParser.VAR_SAMP - 219)) | (1 << (frameQLParser.VARIANCE - 219)) | (1 << (frameQLParser.FCOUNT - 219)) | (1 << (frameQLParser.CURRENT_DATE - 219)) | (1 << (frameQLParser.CURRENT_TIME - 219)) | (1 << (frameQLParser.CURRENT_TIMESTAMP - 219)) | (1 << (frameQLParser.LOCALTIME - 219)) | (1 << (frameQLParser.CURDATE - 219)) | (1 << (frameQLParser.CURTIME - 219)) | (1 << (frameQLParser.DATE_ADD - 219)) | (1 << (frameQLParser.DATE_SUB - 219)) | (1 << (frameQLParser.EXTRACT - 219)) | (1 << (frameQLParser.LOCALTIMESTAMP - 219)) | (1 << (frameQLParser.NOW - 219)) | (1 << (frameQLParser.POSITION - 219)) | (1 << (frameQLParser.SUBSTR - 219)) | (1 << (frameQLParser.SUBSTRING - 219)) | (1 << (frameQLParser.SYSDATE - 219)) | (1 << (frameQLParser.TRIM - 219)) | (1 << (frameQLParser.UTC_DATE - 219)) | (1 << (frameQLParser.UTC_TIME - 219)) | (1 << (frameQLParser.UTC_TIMESTAMP - 219)) | (1 << (frameQLParser.ACCOUNT - 219)) | (1 << (frameQLParser.ACTION - 219)) | (1 << (frameQLParser.AFTER - 219)) | (1 << (frameQLParser.AGGREGATE - 219)) | (1 << (frameQLParser.ALGORITHM - 219)) | (1 << (frameQLParser.ANY - 219)) | (1 << (frameQLParser.AT - 219)) | (1 << (frameQLParser.AUTHORS - 219)) | (1 << (frameQLParser.AUTOCOMMIT - 219)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 219)) | (1 << (frameQLParser.AUTO_INCREMENT - 219)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 219)) | (1 << (frameQLParser.BEGIN - 219)) | (1 << (frameQLParser.BINLOG - 219)) | (1 << (frameQLParser.BIT - 219)) | (1 << (frameQLParser.BLOCK - 219)) | (1 << (frameQLParser.BOOL - 219)) | (1 << (frameQLParser.BOOLEAN - 219)) | (1 << (frameQLParser.BTREE - 219)) | (1 << (frameQLParser.CASCADED - 219)) | (1 << (frameQLParser.CHAIN - 219)) | (1 << (frameQLParser.CHANGED - 219)) | (1 << (frameQLParser.CHANNEL - 219)) | (1 << (frameQLParser.CHECKSUM - 219)) | (1 << (frameQLParser.CIPHER - 219)) | (1 << (frameQLParser.CLIENT - 219)) | (1 << (frameQLParser.COALESCE - 219)) | (1 << (frameQLParser.CODE - 219)) | (1 << (frameQLParser.COLUMNS - 219)) | (1 << (frameQLParser.COLUMN_FORMAT - 219)) | (1 << (frameQLParser.COMMENT - 219)))) != 0) or ((((_la - 283)) & ~0x3f) == 0 and ((1 << (_la - 283)) & ((1 << (frameQLParser.COMMIT - 283)) | (1 << (frameQLParser.COMPACT - 283)) | (1 << (frameQLParser.COMPLETION - 283)) | (1 << (frameQLParser.COMPRESSED - 283)) | (1 << (frameQLParser.COMPRESSION - 283)) | (1 << (frameQLParser.CONCURRENT - 283)) | (1 << (frameQLParser.CONNECTION - 283)) | (1 << (frameQLParser.CONSISTENT - 283)) | (1 << (frameQLParser.CONTAINS - 283)) | (1 << (frameQLParser.CONTEXT - 283)) | (1 << (frameQLParser.CONTRIBUTORS - 283)) | (1 << (frameQLParser.COPY - 283)) | (1 << (frameQLParser.CPU - 283)) | (1 << (frameQLParser.DATA - 283)) | (1 << (frameQLParser.DATAFILE - 283)) | (1 << (frameQLParser.DEALLOCATE - 283)) | (1 << (frameQLParser.DEFAULT_AUTH - 283)) | (1 << (frameQLParser.DEFINER - 283)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 283)) | (1 << (frameQLParser.DIRECTORY - 283)) | (1 << (frameQLParser.DISABLE - 283)) | (1 << (frameQLParser.DISCARD - 283)) | (1 << (frameQLParser.DISK - 283)) | (1 << (frameQLParser.DO - 283)) | (1 << (frameQLParser.DUMPFILE - 283)) | (1 << (frameQLParser.DUPLICATE - 283)) | (1 << (frameQLParser.DYNAMIC - 283)) | (1 << (frameQLParser.ENABLE - 283)) | (1 << (frameQLParser.ENCRYPTION - 283)) | (1 << (frameQLParser.ENDS - 283)) | (1 << (frameQLParser.ENGINE - 283)) | (1 << (frameQLParser.ENGINES - 283)) | (1 << (frameQLParser.ERROR - 283)) | (1 << (frameQLParser.ERRORS - 283)) | (1 << (frameQLParser.ESCAPE - 283)) | (1 << (frameQLParser.EVEN - 283)) | (1 << (frameQLParser.EVENT - 283)) | (1 << (frameQLParser.EVENTS - 283)) | (1 << (frameQLParser.EVERY - 283)) | (1 << (frameQLParser.EXCHANGE - 283)) | (1 << (frameQLParser.EXCLUSIVE - 283)) | (1 << (frameQLParser.EXPIRE - 283)) | (1 << (frameQLParser.EXTENDED - 283)) | (1 << (frameQLParser.EXTENT_SIZE - 283)) | (1 << (frameQLParser.FAST - 283)) | (1 << (frameQLParser.FAULTS - 283)) | (1 << (frameQLParser.FIELDS - 283)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 283)) | (1 << (frameQLParser.FILTER - 283)) | (1 << (frameQLParser.FIRST - 283)) | (1 << (frameQLParser.FIXED - 283)) | (1 << (frameQLParser.FOLLOWS - 283)) | (1 << (frameQLParser.FULL - 283)) | (1 << (frameQLParser.FUNCTION - 283)) | (1 << (frameQLParser.GLOBAL - 283)) | (1 << (frameQLParser.GRANTS - 283)) | (1 << (frameQLParser.GROUP_REPLICATION - 283)))) != 0) or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (frameQLParser.HASH - 347)) | (1 << (frameQLParser.HOST - 347)) | (1 << (frameQLParser.IDENTIFIED - 347)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 347)) | (1 << (frameQLParser.IMPORT - 347)) | (1 << (frameQLParser.INDEXES - 347)) | (1 << (frameQLParser.INITIAL_SIZE - 347)) | (1 << (frameQLParser.INPLACE - 347)) | (1 << (frameQLParser.INSERT_METHOD - 347)) | (1 << (frameQLParser.INSTANCE - 347)) | (1 << (frameQLParser.INVOKER - 347)) | (1 << (frameQLParser.IO - 347)) | (1 << (frameQLParser.IO_THREAD - 347)) | (1 << (frameQLParser.IPC - 347)) | (1 << (frameQLParser.ISOLATION - 347)) | (1 << (frameQLParser.ISSUER - 347)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 347)) | (1 << (frameQLParser.LANGUAGE - 347)) | (1 << (frameQLParser.LAST - 347)) | (1 << (frameQLParser.LEAVES - 347)) | (1 << (frameQLParser.LESS - 347)) | (1 << (frameQLParser.LEVEL - 347)) | (1 << (frameQLParser.LIST - 347)) | (1 << (frameQLParser.LOCAL - 347)) | (1 << (frameQLParser.LOGFILE - 347)) | (1 << (frameQLParser.LOGS - 347)) | (1 << (frameQLParser.MASTER - 347)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 347)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 347)) | (1 << (frameQLParser.MASTER_DELAY - 347)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 347)) | (1 << (frameQLParser.MASTER_HOST - 347)) | (1 << (frameQLParser.MASTER_LOG_FILE - 347)) | (1 << (frameQLParser.MASTER_LOG_POS - 347)) | (1 << (frameQLParser.MASTER_PASSWORD - 347)) | (1 << (frameQLParser.MASTER_PORT - 347)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 347)) | (1 << (frameQLParser.MASTER_SSL - 347)) | (1 << (frameQLParser.MASTER_SSL_CA - 347)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 347)) | (1 << (frameQLParser.MASTER_SSL_CERT - 347)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 347)) | (1 << (frameQLParser.MASTER_SSL_CRL - 347)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 347)) | (1 << (frameQLParser.MASTER_SSL_KEY - 347)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 347)) | (1 << (frameQLParser.MASTER_USER - 347)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 347)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 347)) | (1 << (frameQLParser.MAX_ROWS - 347)) | (1 << (frameQLParser.MAX_SIZE - 347)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 347)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 347)) | (1 << (frameQLParser.MEDIUM - 347)) | (1 << (frameQLParser.MERGE - 347)) | (1 << (frameQLParser.MID - 347)) | (1 << (frameQLParser.MIGRATE - 347)) | (1 << (frameQLParser.MIN_ROWS - 347)) | (1 << (frameQLParser.MODIFY - 347)))) != 0) or ((((_la - 411)) & ~0x3f) == 0 and ((1 << (_la - 411)) & ((1 << (frameQLParser.MUTEX - 411)) | (1 << (frameQLParser.MYSQL - 411)) | (1 << (frameQLParser.NAME - 411)) | (1 << (frameQLParser.NAMES - 411)) | (1 << (frameQLParser.NCHAR - 411)) | (1 << (frameQLParser.NEVER - 411)) | (1 << (frameQLParser.NO - 411)) | (1 << (frameQLParser.NODEGROUP - 411)) | (1 << (frameQLParser.NONE - 411)) | (1 << (frameQLParser.OFFLINE - 411)) | (1 << (frameQLParser.OFFSET - 411)) | (1 << (frameQLParser.OJ - 411)) | (1 << (frameQLParser.OLD_PASSWORD - 411)) | (1 << (frameQLParser.ONE - 411)) | (1 << (frameQLParser.ONLINE - 411)) | (1 << (frameQLParser.ONLY - 411)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 411)) | (1 << (frameQLParser.OPTIONS - 411)) | (1 << (frameQLParser.OWNER - 411)) | (1 << (frameQLParser.PACK_KEYS - 411)) | (1 << (frameQLParser.PAGE - 411)) | (1 << (frameQLParser.PARSER - 411)) | (1 << (frameQLParser.PARTIAL - 411)) | (1 << (frameQLParser.PARTITIONING - 411)) | (1 << (frameQLParser.PARTITIONS - 411)) | (1 << (frameQLParser.PASSWORD - 411)) | (1 << (frameQLParser.PHASE - 411)) | (1 << (frameQLParser.PLUGIN_DIR - 411)) | (1 << (frameQLParser.PLUGINS - 411)) | (1 << (frameQLParser.PORT - 411)) | (1 << (frameQLParser.PRECEDES - 411)) | (1 << (frameQLParser.PREPARE - 411)) | (1 << (frameQLParser.PRESERVE - 411)) | (1 << (frameQLParser.PREV - 411)) | (1 << (frameQLParser.PROCESSLIST - 411)) | (1 << (frameQLParser.PROFILE - 411)) | (1 << (frameQLParser.PROFILES - 411)) | (1 << (frameQLParser.PROXY - 411)) | (1 << (frameQLParser.QUERY - 411)) | (1 << (frameQLParser.QUICK - 411)) | (1 << (frameQLParser.REBUILD - 411)) | (1 << (frameQLParser.RECOVER - 411)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 411)) | (1 << (frameQLParser.REDUNDANT - 411)) | (1 << (frameQLParser.RELAY_LOG_FILE - 411)) | (1 << (frameQLParser.RELAY_LOG_POS - 411)) | (1 << (frameQLParser.RELAYLOG - 411)) | (1 << (frameQLParser.REMOVE - 411)) | (1 << (frameQLParser.REORGANIZE - 411)) | (1 << (frameQLParser.REPAIR - 411)) | (1 << (frameQLParser.REPLICATE_DO_DB - 411)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 411)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 411)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 411)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 411)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 411)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 411)) | (1 << (frameQLParser.REPLICATION - 411)) | (1 << (frameQLParser.RESUME - 411)))) != 0) or ((((_la - 475)) & ~0x3f) == 0 and ((1 << (_la - 475)) & ((1 << (frameQLParser.RETURNS - 475)) | (1 << (frameQLParser.ROLLBACK - 475)) | (1 << (frameQLParser.ROLLUP - 475)) | (1 << (frameQLParser.ROTATE - 475)) | (1 << (frameQLParser.ROW - 475)) | (1 << (frameQLParser.ROWS - 475)) | (1 << (frameQLParser.ROW_FORMAT - 475)) | (1 << (frameQLParser.SAVEPOINT - 475)) | (1 << (frameQLParser.SCHEDULE - 475)) | (1 << (frameQLParser.SECURITY - 475)) | (1 << (frameQLParser.SERVER - 475)) | (1 << (frameQLParser.SESSION - 475)) | (1 << (frameQLParser.SHARE - 475)) | (1 << (frameQLParser.SHARED - 475)) | (1 << (frameQLParser.SIGNED - 475)) | (1 << (frameQLParser.SIMPLE - 475)) | (1 << (frameQLParser.SLAVE - 475)) | (1 << (frameQLParser.SNAPSHOT - 475)) | (1 << (frameQLParser.SOCKET - 475)) | (1 << (frameQLParser.SOME - 475)) | (1 << (frameQLParser.SOUNDS - 475)) | (1 << (frameQLParser.SOURCE - 475)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 475)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 475)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 475)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 475)) | (1 << (frameQLParser.SQL_CACHE - 475)) | (1 << (frameQLParser.SQL_NO_CACHE - 475)) | (1 << (frameQLParser.SQL_THREAD - 475)) | (1 << (frameQLParser.START - 475)) | (1 << (frameQLParser.STARTS - 475)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 475)) | (1 << (frameQLParser.STATS_PERSISTENT - 475)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 475)) | (1 << (frameQLParser.STATUS - 475)) | (1 << (frameQLParser.STOP - 475)) | (1 << (frameQLParser.STORAGE - 475)) | (1 << (frameQLParser.STRING - 475)) | (1 << (frameQLParser.SUBJECT - 475)) | (1 << (frameQLParser.SUBPARTITION - 475)) | (1 << (frameQLParser.SUBPARTITIONS - 475)) | (1 << (frameQLParser.SUSPEND - 475)) | (1 << (frameQLParser.SWAPS - 475)) | (1 << (frameQLParser.SWITCHES - 475)) | (1 << (frameQLParser.TABLESPACE - 475)) | (1 << (frameQLParser.TEMPORARY - 475)) | (1 << (frameQLParser.TEMPTABLE - 475)) | (1 << (frameQLParser.THAN - 475)) | (1 << (frameQLParser.TRANSACTION - 475)) | (1 << (frameQLParser.TRUNCATE - 475)) | (1 << (frameQLParser.UNDEFINED - 475)) | (1 << (frameQLParser.UNDOFILE - 475)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 475)) | (1 << (frameQLParser.UNKNOWN - 475)) | (1 << (frameQLParser.UPGRADE - 475)) | (1 << (frameQLParser.USER - 475)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (frameQLParser.VALIDATION - 540)) | (1 << (frameQLParser.VALUE - 540)) | (1 << (frameQLParser.VARIABLES - 540)) | (1 << (frameQLParser.VIEW - 540)) | (1 << (frameQLParser.WAIT - 540)) | (1 << (frameQLParser.WARNINGS - 540)) | (1 << (frameQLParser.WITHOUT - 540)) | (1 << (frameQLParser.WORK - 540)) | (1 << (frameQLParser.WRAPPER - 540)) | (1 << (frameQLParser.X509 - 540)) | (1 << (frameQLParser.XA - 540)) | (1 << (frameQLParser.XML - 540)) | (1 << (frameQLParser.QUARTER - 540)) | (1 << (frameQLParser.MONTH - 540)) | (1 << (frameQLParser.DAY - 540)) | (1 << (frameQLParser.HOUR - 540)) | (1 << (frameQLParser.MINUTE - 540)) | (1 << (frameQLParser.WEEK - 540)) | (1 << (frameQLParser.SECOND - 540)) | (1 << (frameQLParser.MICROSECOND - 540)) | (1 << (frameQLParser.TABLES - 540)) | (1 << (frameQLParser.ROUTINE - 540)) | (1 << (frameQLParser.EXECUTE - 540)) | (1 << (frameQLParser.FILE - 540)) | (1 << (frameQLParser.PROCESS - 540)) | (1 << (frameQLParser.RELOAD - 540)) | (1 << (frameQLParser.SHUTDOWN - 540)) | (1 << (frameQLParser.SUPER - 540)) | (1 << (frameQLParser.PRIVILEGES - 540)) | (1 << (frameQLParser.ARMSCII8 - 540)) | (1 << (frameQLParser.ASCII - 540)) | (1 << (frameQLParser.BIG5 - 540)) | (1 << (frameQLParser.CP1250 - 540)) | (1 << (frameQLParser.CP1251 - 540)) | (1 << (frameQLParser.CP1256 - 540)) | (1 << (frameQLParser.CP1257 - 540)) | (1 << (frameQLParser.CP850 - 540)) | (1 << (frameQLParser.CP852 - 540)) | (1 << (frameQLParser.CP866 - 540)) | (1 << (frameQLParser.CP932 - 540)) | (1 << (frameQLParser.DEC8 - 540)) | (1 << (frameQLParser.EUCJPMS - 540)) | (1 << (frameQLParser.EUCKR - 540)) | (1 << (frameQLParser.GB2312 - 540)) | (1 << (frameQLParser.GBK - 540)) | (1 << (frameQLParser.GEOSTD8 - 540)) | (1 << (frameQLParser.GREEK - 540)) | (1 << (frameQLParser.HEBREW - 540)) | (1 << (frameQLParser.HP8 - 540)) | (1 << (frameQLParser.KEYBCS2 - 540)) | (1 << (frameQLParser.KOI8R - 540)) | (1 << (frameQLParser.KOI8U - 540)) | (1 << (frameQLParser.LATIN1 - 540)) | (1 << (frameQLParser.LATIN2 - 540)) | (1 << (frameQLParser.LATIN5 - 540)) | (1 << (frameQLParser.LATIN7 - 540)) | (1 << (frameQLParser.MACCE - 540)) | (1 << (frameQLParser.MACROMAN - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (frameQLParser.SJIS - 604)) | (1 << (frameQLParser.SWE7 - 604)) | (1 << (frameQLParser.TIS620 - 604)) | (1 << (frameQLParser.UCS2 - 604)) | (1 << (frameQLParser.UJIS - 604)) | (1 << (frameQLParser.UTF16 - 604)) | (1 << (frameQLParser.UTF16LE - 604)) | (1 << (frameQLParser.UTF32 - 604)) | (1 << (frameQLParser.UTF8 - 604)) | (1 << (frameQLParser.UTF8MB3 - 604)) | (1 << (frameQLParser.UTF8MB4 - 604)) | (1 << (frameQLParser.ARCHIVE - 604)) | (1 << (frameQLParser.BLACKHOLE - 604)) | (1 << (frameQLParser.CSV - 604)) | (1 << (frameQLParser.FEDERATED - 604)) | (1 << (frameQLParser.INNODB - 604)) | (1 << (frameQLParser.MEMORY - 604)) | (1 << (frameQLParser.MRG_MYISAM - 604)) | (1 << (frameQLParser.MYISAM - 604)) | (1 << (frameQLParser.NDB - 604)) | (1 << (frameQLParser.NDBCLUSTER - 604)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 604)) | (1 << (frameQLParser.REPEATABLE - 604)) | (1 << (frameQLParser.COMMITTED - 604)) | (1 << (frameQLParser.UNCOMMITTED - 604)) | (1 << (frameQLParser.SERIALIZABLE - 604)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 604)) | (1 << (frameQLParser.LINESTRING - 604)) | (1 << (frameQLParser.MULTILINESTRING - 604)) | (1 << (frameQLParser.MULTIPOINT - 604)) | (1 << (frameQLParser.MULTIPOLYGON - 604)) | (1 << (frameQLParser.POINT - 604)) | (1 << (frameQLParser.POLYGON - 604)) | (1 << (frameQLParser.ABS - 604)) | (1 << (frameQLParser.ACOS - 604)) | (1 << (frameQLParser.ADDDATE - 604)) | (1 << (frameQLParser.ADDTIME - 604)) | (1 << (frameQLParser.AES_DECRYPT - 604)) | (1 << (frameQLParser.AES_ENCRYPT - 604)) | (1 << (frameQLParser.AREA - 604)) | (1 << (frameQLParser.ASBINARY - 604)) | (1 << (frameQLParser.ASIN - 604)) | (1 << (frameQLParser.ASTEXT - 604)) | (1 << (frameQLParser.ASWKB - 604)) | (1 << (frameQLParser.ASWKT - 604)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 604)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 604)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 604)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 604)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 604)) | (1 << (frameQLParser.ATAN - 604)) | (1 << (frameQLParser.ATAN2 - 604)) | (1 << (frameQLParser.BENCHMARK - 604)) | (1 << (frameQLParser.BIN - 604)) | (1 << (frameQLParser.BIT_COUNT - 604)) | (1 << (frameQLParser.BIT_LENGTH - 604)) | (1 << (frameQLParser.BUFFER - 604)) | (1 << (frameQLParser.CEIL - 604)) | (1 << (frameQLParser.CEILING - 604)) | (1 << (frameQLParser.CENTROID - 604)) | (1 << (frameQLParser.CHARACTER_LENGTH - 604)) | (1 << (frameQLParser.CHARSET - 604)) | (1 << (frameQLParser.CHAR_LENGTH - 604)) | (1 << (frameQLParser.COERCIBILITY - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (frameQLParser.COLLATION - 668)) | (1 << (frameQLParser.COMPRESS - 668)) | (1 << (frameQLParser.CONCAT - 668)) | (1 << (frameQLParser.CONCAT_WS - 668)) | (1 << (frameQLParser.CONNECTION_ID - 668)) | (1 << (frameQLParser.CONV - 668)) | (1 << (frameQLParser.CONVERT_TZ - 668)) | (1 << (frameQLParser.COS - 668)) | (1 << (frameQLParser.COT - 668)) | (1 << (frameQLParser.CRC32 - 668)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 668)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 668)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 668)) | (1 << (frameQLParser.CREATE_DIGEST - 668)) | (1 << (frameQLParser.CROSSES - 668)) | (1 << (frameQLParser.DATEDIFF - 668)) | (1 << (frameQLParser.DATE_FORMAT - 668)) | (1 << (frameQLParser.DAYNAME - 668)) | (1 << (frameQLParser.DAYOFMONTH - 668)) | (1 << (frameQLParser.DAYOFWEEK - 668)) | (1 << (frameQLParser.DAYOFYEAR - 668)) | (1 << (frameQLParser.DECODE - 668)) | (1 << (frameQLParser.DEGREES - 668)) | (1 << (frameQLParser.DES_DECRYPT - 668)) | (1 << (frameQLParser.DES_ENCRYPT - 668)) | (1 << (frameQLParser.DIMENSION - 668)) | (1 << (frameQLParser.DISJOINT - 668)) | (1 << (frameQLParser.ELT - 668)) | (1 << (frameQLParser.ENCODE - 668)) | (1 << (frameQLParser.ENCRYPT - 668)) | (1 << (frameQLParser.ENDPOINT - 668)) | (1 << (frameQLParser.ENVELOPE - 668)) | (1 << (frameQLParser.EQUALS - 668)) | (1 << (frameQLParser.EXP - 668)) | (1 << (frameQLParser.EXPORT_SET - 668)) | (1 << (frameQLParser.EXTERIORRING - 668)) | (1 << (frameQLParser.EXTRACTVALUE - 668)) | (1 << (frameQLParser.FIELD - 668)) | (1 << (frameQLParser.FIND_IN_SET - 668)) | (1 << (frameQLParser.FLOOR - 668)) | (1 << (frameQLParser.FORMAT - 668)) | (1 << (frameQLParser.FOUND_ROWS - 668)) | (1 << (frameQLParser.FROM_BASE64 - 668)) | (1 << (frameQLParser.FROM_DAYS - 668)) | (1 << (frameQLParser.FROM_UNIXTIME - 668)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 668)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 668)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 668)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 668)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 668)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 668)) | (1 << (frameQLParser.GEOMETRYN - 668)) | (1 << (frameQLParser.GEOMETRYTYPE - 668)) | (1 << (frameQLParser.GEOMFROMTEXT - 668)) | (1 << (frameQLParser.GEOMFROMWKB - 668)) | (1 << (frameQLParser.GET_FORMAT - 668)) | (1 << (frameQLParser.GET_LOCK - 668)) | (1 << (frameQLParser.GLENGTH - 668)) | (1 << (frameQLParser.GREATEST - 668)) | (1 << (frameQLParser.GTID_SUBSET - 668)) | (1 << (frameQLParser.GTID_SUBTRACT - 668)) | (1 << (frameQLParser.HEX - 668)) | (1 << (frameQLParser.IFNULL - 668)) | (1 << (frameQLParser.INET6_ATON - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (frameQLParser.INET6_NTOA - 732)) | (1 << (frameQLParser.INET_ATON - 732)) | (1 << (frameQLParser.INET_NTOA - 732)) | (1 << (frameQLParser.INSTR - 732)) | (1 << (frameQLParser.INTERIORRINGN - 732)) | (1 << (frameQLParser.INTERSECTS - 732)) | (1 << (frameQLParser.ISCLOSED - 732)) | (1 << (frameQLParser.ISEMPTY - 732)) | (1 << (frameQLParser.ISNULL - 732)) | (1 << (frameQLParser.ISSIMPLE - 732)) | (1 << (frameQLParser.IS_FREE_LOCK - 732)) | (1 << (frameQLParser.IS_IPV4 - 732)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 732)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 732)) | (1 << (frameQLParser.IS_IPV6 - 732)) | (1 << (frameQLParser.IS_USED_LOCK - 732)) | (1 << (frameQLParser.LAST_INSERT_ID - 732)) | (1 << (frameQLParser.LCASE - 732)) | (1 << (frameQLParser.LEAST - 732)) | (1 << (frameQLParser.LENGTH - 732)) | (1 << (frameQLParser.LINEFROMTEXT - 732)) | (1 << (frameQLParser.LINEFROMWKB - 732)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 732)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 732)) | (1 << (frameQLParser.LN - 732)) | (1 << (frameQLParser.LOAD_FILE - 732)) | (1 << (frameQLParser.LOCATE - 732)) | (1 << (frameQLParser.LOG - 732)) | (1 << (frameQLParser.LOG10 - 732)) | (1 << (frameQLParser.LOG2 - 732)) | (1 << (frameQLParser.LOWER - 732)) | (1 << (frameQLParser.LPAD - 732)) | (1 << (frameQLParser.LTRIM - 732)) | (1 << (frameQLParser.MAKEDATE - 732)) | (1 << (frameQLParser.MAKETIME - 732)) | (1 << (frameQLParser.MAKE_SET - 732)) | (1 << (frameQLParser.MASTER_POS_WAIT - 732)) | (1 << (frameQLParser.MBRCONTAINS - 732)) | (1 << (frameQLParser.MBRDISJOINT - 732)) | (1 << (frameQLParser.MBREQUAL - 732)) | (1 << (frameQLParser.MBRINTERSECTS - 732)) | (1 << (frameQLParser.MBROVERLAPS - 732)) | (1 << (frameQLParser.MBRTOUCHES - 732)) | (1 << (frameQLParser.MBRWITHIN - 732)) | (1 << (frameQLParser.MD5 - 732)) | (1 << (frameQLParser.MLINEFROMTEXT - 732)) | (1 << (frameQLParser.MLINEFROMWKB - 732)) | (1 << (frameQLParser.MONTHNAME - 732)) | (1 << (frameQLParser.MPOINTFROMTEXT - 732)) | (1 << (frameQLParser.MPOINTFROMWKB - 732)) | (1 << (frameQLParser.MPOLYFROMTEXT - 732)) | (1 << (frameQLParser.MPOLYFROMWKB - 732)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 732)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 732)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 732)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 732)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 732)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 732)) | (1 << (frameQLParser.NAME_CONST - 732)) | (1 << (frameQLParser.NULLIF - 732)) | (1 << (frameQLParser.NUMGEOMETRIES - 732)) | (1 << (frameQLParser.NUMINTERIORRINGS - 732)) | (1 << (frameQLParser.NUMPOINTS - 732)) | (1 << (frameQLParser.OCT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (frameQLParser.OCTET_LENGTH - 796)) | (1 << (frameQLParser.ORD - 796)) | (1 << (frameQLParser.OVERLAPS - 796)) | (1 << (frameQLParser.PERIOD_ADD - 796)) | (1 << (frameQLParser.PERIOD_DIFF - 796)) | (1 << (frameQLParser.PI - 796)) | (1 << (frameQLParser.POINTFROMTEXT - 796)) | (1 << (frameQLParser.POINTFROMWKB - 796)) | (1 << (frameQLParser.POINTN - 796)) | (1 << (frameQLParser.POLYFROMTEXT - 796)) | (1 << (frameQLParser.POLYFROMWKB - 796)) | (1 << (frameQLParser.POLYGONFROMTEXT - 796)) | (1 << (frameQLParser.POLYGONFROMWKB - 796)) | (1 << (frameQLParser.POW - 796)) | (1 << (frameQLParser.POWER - 796)) | (1 << (frameQLParser.QUOTE - 796)) | (1 << (frameQLParser.RADIANS - 796)) | (1 << (frameQLParser.RAND - 796)) | (1 << (frameQLParser.RANDOM_BYTES - 796)) | (1 << (frameQLParser.RELEASE_LOCK - 796)) | (1 << (frameQLParser.REVERSE - 796)) | (1 << (frameQLParser.ROUND - 796)) | (1 << (frameQLParser.ROW_COUNT - 796)) | (1 << (frameQLParser.RPAD - 796)) | (1 << (frameQLParser.RTRIM - 796)) | (1 << (frameQLParser.SEC_TO_TIME - 796)) | (1 << (frameQLParser.SESSION_USER - 796)) | (1 << (frameQLParser.SHA - 796)) | (1 << (frameQLParser.SHA1 - 796)) | (1 << (frameQLParser.SHA2 - 796)) | (1 << (frameQLParser.SIGN - 796)) | (1 << (frameQLParser.SIN - 796)) | (1 << (frameQLParser.SLEEP - 796)) | (1 << (frameQLParser.SOUNDEX - 796)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 796)) | (1 << (frameQLParser.SQRT - 796)) | (1 << (frameQLParser.SRID - 796)) | (1 << (frameQLParser.STARTPOINT - 796)) | (1 << (frameQLParser.STRCMP - 796)) | (1 << (frameQLParser.STR_TO_DATE - 796)) | (1 << (frameQLParser.ST_AREA - 796)) | (1 << (frameQLParser.ST_ASBINARY - 796)) | (1 << (frameQLParser.ST_ASTEXT - 796)) | (1 << (frameQLParser.ST_ASWKB - 796)) | (1 << (frameQLParser.ST_ASWKT - 796)) | (1 << (frameQLParser.ST_BUFFER - 796)) | (1 << (frameQLParser.ST_CENTROID - 796)) | (1 << (frameQLParser.ST_CONTAINS - 796)) | (1 << (frameQLParser.ST_CROSSES - 796)) | (1 << (frameQLParser.ST_DIFFERENCE - 796)) | (1 << (frameQLParser.ST_DIMENSION - 796)) | (1 << (frameQLParser.ST_DISJOINT - 796)) | (1 << (frameQLParser.ST_DISTANCE - 796)) | (1 << (frameQLParser.ST_ENDPOINT - 796)) | (1 << (frameQLParser.ST_ENVELOPE - 796)) | (1 << (frameQLParser.ST_EQUALS - 796)) | (1 << (frameQLParser.ST_EXTERIORRING - 796)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 796)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 796)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 796)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 796)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 796)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 796)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (frameQLParser.ST_GEOMETRYN - 860)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 860)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 860)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 860)) | (1 << (frameQLParser.ST_INTERIORRINGN - 860)) | (1 << (frameQLParser.ST_INTERSECTION - 860)) | (1 << (frameQLParser.ST_INTERSECTS - 860)) | (1 << (frameQLParser.ST_ISCLOSED - 860)) | (1 << (frameQLParser.ST_ISEMPTY - 860)) | (1 << (frameQLParser.ST_ISSIMPLE - 860)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 860)) | (1 << (frameQLParser.ST_LINEFROMWKB - 860)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 860)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 860)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 860)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 860)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 860)) | (1 << (frameQLParser.ST_NUMPOINTS - 860)) | (1 << (frameQLParser.ST_OVERLAPS - 860)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 860)) | (1 << (frameQLParser.ST_POINTFROMWKB - 860)) | (1 << (frameQLParser.ST_POINTN - 860)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 860)) | (1 << (frameQLParser.ST_POLYFROMWKB - 860)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 860)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 860)) | (1 << (frameQLParser.ST_SRID - 860)) | (1 << (frameQLParser.ST_STARTPOINT - 860)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 860)) | (1 << (frameQLParser.ST_TOUCHES - 860)) | (1 << (frameQLParser.ST_UNION - 860)) | (1 << (frameQLParser.ST_WITHIN - 860)) | (1 << (frameQLParser.ST_X - 860)) | (1 << (frameQLParser.ST_Y - 860)) | (1 << (frameQLParser.SUBDATE - 860)) | (1 << (frameQLParser.SUBSTRING_INDEX - 860)) | (1 << (frameQLParser.SUBTIME - 860)) | (1 << (frameQLParser.SYSTEM_USER - 860)) | (1 << (frameQLParser.TAN - 860)) | (1 << (frameQLParser.TIMEDIFF - 860)) | (1 << (frameQLParser.TIMESTAMPADD - 860)) | (1 << (frameQLParser.TIMESTAMPDIFF - 860)) | (1 << (frameQLParser.TIME_FORMAT - 860)) | (1 << (frameQLParser.TIME_TO_SEC - 860)) | (1 << (frameQLParser.TOUCHES - 860)) | (1 << (frameQLParser.TO_BASE64 - 860)) | (1 << (frameQLParser.TO_DAYS - 860)) | (1 << (frameQLParser.TO_SECONDS - 860)) | (1 << (frameQLParser.UCASE - 860)) | (1 << (frameQLParser.UNCOMPRESS - 860)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 860)) | (1 << (frameQLParser.UNHEX - 860)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 860)) | (1 << (frameQLParser.UPDATEXML - 860)) | (1 << (frameQLParser.UPPER - 860)) | (1 << (frameQLParser.UUID - 860)) | (1 << (frameQLParser.UUID_SHORT - 860)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 860)) | (1 << (frameQLParser.VERSION - 860)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 860)) | (1 << (frameQLParser.WEEKDAY - 860)) | (1 << (frameQLParser.WEEKOFYEAR - 860)) | (1 << (frameQLParser.WEIGHT_STRING - 860)) | (1 << (frameQLParser.WITHIN - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (frameQLParser.YEARWEEK - 924)) | (1 << (frameQLParser.Y_FUNCTION - 924)) | (1 << (frameQLParser.X_FUNCTION - 924)) | (1 << (frameQLParser.PLUS - 924)) | (1 << (frameQLParser.MINUS - 924)) | (1 << (frameQLParser.EXCLAMATION_SYMBOL - 924)) | (1 << (frameQLParser.BIT_NOT_OP - 924)) | (1 << (frameQLParser.LR_BRACKET - 924)) | (1 << (frameQLParser.ZERO_DECIMAL - 924)) | (1 << (frameQLParser.ONE_DECIMAL - 924)) | (1 << (frameQLParser.TWO_DECIMAL - 924)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 924)) | (1 << (frameQLParser.START_NATIONAL_STRING_LITERAL - 924)) | (1 << (frameQLParser.STRING_LITERAL - 924)) | (1 << (frameQLParser.DECIMAL_LITERAL - 924)) | (1 << (frameQLParser.HEXADECIMAL_LITERAL - 924)) | (1 << (frameQLParser.REAL_LITERAL - 924)) | (1 << (frameQLParser.NULL_SPEC_LITERAL - 924)) | (1 << (frameQLParser.BIT_STRING - 924)) | (1 << (frameQLParser.STRING_CHARSET_NAME - 924)) | (1 << (frameQLParser.ID - 924)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 924)) | (1 << (frameQLParser.LOCAL_ID - 924)) | (1 << (frameQLParser.GLOBAL_ID - 924)))) != 0):
                    self.state = 5574
                    self.functionArgs()


                self.state = 5577
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = frameQLParser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5579
                self.fullId()
                self.state = 5580
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << frameQLParser.CASE) | (1 << frameQLParser.CAST) | (1 << frameQLParser.CONVERT) | (1 << frameQLParser.CURRENT_USER) | (1 << frameQLParser.DATABASE) | (1 << frameQLParser.EXISTS) | (1 << frameQLParser.FALSE))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (frameQLParser.IF - 68)) | (1 << (frameQLParser.INSERT - 68)) | (1 << (frameQLParser.INTERVAL - 68)) | (1 << (frameQLParser.LEFT - 68)) | (1 << (frameQLParser.NOT - 68)) | (1 << (frameQLParser.NULL_LITERAL - 68)) | (1 << (frameQLParser.REPLACE - 68)) | (1 << (frameQLParser.RIGHT - 68)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (frameQLParser.TRUE - 155)) | (1 << (frameQLParser.VALUES - 155)) | (1 << (frameQLParser.DATE - 155)) | (1 << (frameQLParser.TIME - 155)) | (1 << (frameQLParser.TIMESTAMP - 155)) | (1 << (frameQLParser.DATETIME - 155)) | (1 << (frameQLParser.YEAR - 155)) | (1 << (frameQLParser.CHAR - 155)) | (1 << (frameQLParser.BINARY - 155)) | (1 << (frameQLParser.TEXT - 155)) | (1 << (frameQLParser.ENUM - 155)) | (1 << (frameQLParser.SERIAL - 155)) | (1 << (frameQLParser.AVG - 155)) | (1 << (frameQLParser.BIT_AND - 155)) | (1 << (frameQLParser.BIT_OR - 155)) | (1 << (frameQLParser.BIT_XOR - 155)) | (1 << (frameQLParser.COUNT - 155)))) != 0) or ((((_la - 219)) & ~0x3f) == 0 and ((1 << (_la - 219)) & ((1 << (frameQLParser.GROUP_CONCAT - 219)) | (1 << (frameQLParser.MAX - 219)) | (1 << (frameQLParser.MIN - 219)) | (1 << (frameQLParser.STD - 219)) | (1 << (frameQLParser.STDDEV - 219)) | (1 << (frameQLParser.STDDEV_POP - 219)) | (1 << (frameQLParser.STDDEV_SAMP - 219)) | (1 << (frameQLParser.SUM - 219)) | (1 << (frameQLParser.VAR_POP - 219)) | (1 << (frameQLParser.VAR_SAMP - 219)) | (1 << (frameQLParser.VARIANCE - 219)) | (1 << (frameQLParser.FCOUNT - 219)) | (1 << (frameQLParser.CURRENT_DATE - 219)) | (1 << (frameQLParser.CURRENT_TIME - 219)) | (1 << (frameQLParser.CURRENT_TIMESTAMP - 219)) | (1 << (frameQLParser.LOCALTIME - 219)) | (1 << (frameQLParser.CURDATE - 219)) | (1 << (frameQLParser.CURTIME - 219)) | (1 << (frameQLParser.DATE_ADD - 219)) | (1 << (frameQLParser.DATE_SUB - 219)) | (1 << (frameQLParser.EXTRACT - 219)) | (1 << (frameQLParser.LOCALTIMESTAMP - 219)) | (1 << (frameQLParser.NOW - 219)) | (1 << (frameQLParser.POSITION - 219)) | (1 << (frameQLParser.SUBSTR - 219)) | (1 << (frameQLParser.SUBSTRING - 219)) | (1 << (frameQLParser.SYSDATE - 219)) | (1 << (frameQLParser.TRIM - 219)) | (1 << (frameQLParser.UTC_DATE - 219)) | (1 << (frameQLParser.UTC_TIME - 219)) | (1 << (frameQLParser.UTC_TIMESTAMP - 219)) | (1 << (frameQLParser.ACCOUNT - 219)) | (1 << (frameQLParser.ACTION - 219)) | (1 << (frameQLParser.AFTER - 219)) | (1 << (frameQLParser.AGGREGATE - 219)) | (1 << (frameQLParser.ALGORITHM - 219)) | (1 << (frameQLParser.ANY - 219)) | (1 << (frameQLParser.AT - 219)) | (1 << (frameQLParser.AUTHORS - 219)) | (1 << (frameQLParser.AUTOCOMMIT - 219)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 219)) | (1 << (frameQLParser.AUTO_INCREMENT - 219)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 219)) | (1 << (frameQLParser.BEGIN - 219)) | (1 << (frameQLParser.BINLOG - 219)) | (1 << (frameQLParser.BIT - 219)) | (1 << (frameQLParser.BLOCK - 219)) | (1 << (frameQLParser.BOOL - 219)) | (1 << (frameQLParser.BOOLEAN - 219)) | (1 << (frameQLParser.BTREE - 219)) | (1 << (frameQLParser.CASCADED - 219)) | (1 << (frameQLParser.CHAIN - 219)) | (1 << (frameQLParser.CHANGED - 219)) | (1 << (frameQLParser.CHANNEL - 219)) | (1 << (frameQLParser.CHECKSUM - 219)) | (1 << (frameQLParser.CIPHER - 219)) | (1 << (frameQLParser.CLIENT - 219)) | (1 << (frameQLParser.COALESCE - 219)) | (1 << (frameQLParser.CODE - 219)) | (1 << (frameQLParser.COLUMNS - 219)) | (1 << (frameQLParser.COLUMN_FORMAT - 219)) | (1 << (frameQLParser.COMMENT - 219)))) != 0) or ((((_la - 283)) & ~0x3f) == 0 and ((1 << (_la - 283)) & ((1 << (frameQLParser.COMMIT - 283)) | (1 << (frameQLParser.COMPACT - 283)) | (1 << (frameQLParser.COMPLETION - 283)) | (1 << (frameQLParser.COMPRESSED - 283)) | (1 << (frameQLParser.COMPRESSION - 283)) | (1 << (frameQLParser.CONCURRENT - 283)) | (1 << (frameQLParser.CONNECTION - 283)) | (1 << (frameQLParser.CONSISTENT - 283)) | (1 << (frameQLParser.CONTAINS - 283)) | (1 << (frameQLParser.CONTEXT - 283)) | (1 << (frameQLParser.CONTRIBUTORS - 283)) | (1 << (frameQLParser.COPY - 283)) | (1 << (frameQLParser.CPU - 283)) | (1 << (frameQLParser.DATA - 283)) | (1 << (frameQLParser.DATAFILE - 283)) | (1 << (frameQLParser.DEALLOCATE - 283)) | (1 << (frameQLParser.DEFAULT_AUTH - 283)) | (1 << (frameQLParser.DEFINER - 283)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 283)) | (1 << (frameQLParser.DIRECTORY - 283)) | (1 << (frameQLParser.DISABLE - 283)) | (1 << (frameQLParser.DISCARD - 283)) | (1 << (frameQLParser.DISK - 283)) | (1 << (frameQLParser.DO - 283)) | (1 << (frameQLParser.DUMPFILE - 283)) | (1 << (frameQLParser.DUPLICATE - 283)) | (1 << (frameQLParser.DYNAMIC - 283)) | (1 << (frameQLParser.ENABLE - 283)) | (1 << (frameQLParser.ENCRYPTION - 283)) | (1 << (frameQLParser.ENDS - 283)) | (1 << (frameQLParser.ENGINE - 283)) | (1 << (frameQLParser.ENGINES - 283)) | (1 << (frameQLParser.ERROR - 283)) | (1 << (frameQLParser.ERRORS - 283)) | (1 << (frameQLParser.ESCAPE - 283)) | (1 << (frameQLParser.EVEN - 283)) | (1 << (frameQLParser.EVENT - 283)) | (1 << (frameQLParser.EVENTS - 283)) | (1 << (frameQLParser.EVERY - 283)) | (1 << (frameQLParser.EXCHANGE - 283)) | (1 << (frameQLParser.EXCLUSIVE - 283)) | (1 << (frameQLParser.EXPIRE - 283)) | (1 << (frameQLParser.EXTENDED - 283)) | (1 << (frameQLParser.EXTENT_SIZE - 283)) | (1 << (frameQLParser.FAST - 283)) | (1 << (frameQLParser.FAULTS - 283)) | (1 << (frameQLParser.FIELDS - 283)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 283)) | (1 << (frameQLParser.FILTER - 283)) | (1 << (frameQLParser.FIRST - 283)) | (1 << (frameQLParser.FIXED - 283)) | (1 << (frameQLParser.FOLLOWS - 283)) | (1 << (frameQLParser.FULL - 283)) | (1 << (frameQLParser.FUNCTION - 283)) | (1 << (frameQLParser.GLOBAL - 283)) | (1 << (frameQLParser.GRANTS - 283)) | (1 << (frameQLParser.GROUP_REPLICATION - 283)))) != 0) or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (frameQLParser.HASH - 347)) | (1 << (frameQLParser.HOST - 347)) | (1 << (frameQLParser.IDENTIFIED - 347)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 347)) | (1 << (frameQLParser.IMPORT - 347)) | (1 << (frameQLParser.INDEXES - 347)) | (1 << (frameQLParser.INITIAL_SIZE - 347)) | (1 << (frameQLParser.INPLACE - 347)) | (1 << (frameQLParser.INSERT_METHOD - 347)) | (1 << (frameQLParser.INSTANCE - 347)) | (1 << (frameQLParser.INVOKER - 347)) | (1 << (frameQLParser.IO - 347)) | (1 << (frameQLParser.IO_THREAD - 347)) | (1 << (frameQLParser.IPC - 347)) | (1 << (frameQLParser.ISOLATION - 347)) | (1 << (frameQLParser.ISSUER - 347)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 347)) | (1 << (frameQLParser.LANGUAGE - 347)) | (1 << (frameQLParser.LAST - 347)) | (1 << (frameQLParser.LEAVES - 347)) | (1 << (frameQLParser.LESS - 347)) | (1 << (frameQLParser.LEVEL - 347)) | (1 << (frameQLParser.LIST - 347)) | (1 << (frameQLParser.LOCAL - 347)) | (1 << (frameQLParser.LOGFILE - 347)) | (1 << (frameQLParser.LOGS - 347)) | (1 << (frameQLParser.MASTER - 347)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 347)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 347)) | (1 << (frameQLParser.MASTER_DELAY - 347)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 347)) | (1 << (frameQLParser.MASTER_HOST - 347)) | (1 << (frameQLParser.MASTER_LOG_FILE - 347)) | (1 << (frameQLParser.MASTER_LOG_POS - 347)) | (1 << (frameQLParser.MASTER_PASSWORD - 347)) | (1 << (frameQLParser.MASTER_PORT - 347)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 347)) | (1 << (frameQLParser.MASTER_SSL - 347)) | (1 << (frameQLParser.MASTER_SSL_CA - 347)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 347)) | (1 << (frameQLParser.MASTER_SSL_CERT - 347)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 347)) | (1 << (frameQLParser.MASTER_SSL_CRL - 347)) | (1 << (frameQLParser.MASTER_SSL_CRLPATH - 347)) | (1 << (frameQLParser.MASTER_SSL_KEY - 347)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 347)) | (1 << (frameQLParser.MASTER_USER - 347)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 347)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 347)) | (1 << (frameQLParser.MAX_ROWS - 347)) | (1 << (frameQLParser.MAX_SIZE - 347)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 347)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 347)) | (1 << (frameQLParser.MEDIUM - 347)) | (1 << (frameQLParser.MERGE - 347)) | (1 << (frameQLParser.MID - 347)) | (1 << (frameQLParser.MIGRATE - 347)) | (1 << (frameQLParser.MIN_ROWS - 347)) | (1 << (frameQLParser.MODIFY - 347)))) != 0) or ((((_la - 411)) & ~0x3f) == 0 and ((1 << (_la - 411)) & ((1 << (frameQLParser.MUTEX - 411)) | (1 << (frameQLParser.MYSQL - 411)) | (1 << (frameQLParser.NAME - 411)) | (1 << (frameQLParser.NAMES - 411)) | (1 << (frameQLParser.NCHAR - 411)) | (1 << (frameQLParser.NEVER - 411)) | (1 << (frameQLParser.NO - 411)) | (1 << (frameQLParser.NODEGROUP - 411)) | (1 << (frameQLParser.NONE - 411)) | (1 << (frameQLParser.OFFLINE - 411)) | (1 << (frameQLParser.OFFSET - 411)) | (1 << (frameQLParser.OJ - 411)) | (1 << (frameQLParser.OLD_PASSWORD - 411)) | (1 << (frameQLParser.ONE - 411)) | (1 << (frameQLParser.ONLINE - 411)) | (1 << (frameQLParser.ONLY - 411)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 411)) | (1 << (frameQLParser.OPTIONS - 411)) | (1 << (frameQLParser.OWNER - 411)) | (1 << (frameQLParser.PACK_KEYS - 411)) | (1 << (frameQLParser.PAGE - 411)) | (1 << (frameQLParser.PARSER - 411)) | (1 << (frameQLParser.PARTIAL - 411)) | (1 << (frameQLParser.PARTITIONING - 411)) | (1 << (frameQLParser.PARTITIONS - 411)) | (1 << (frameQLParser.PASSWORD - 411)) | (1 << (frameQLParser.PHASE - 411)) | (1 << (frameQLParser.PLUGIN_DIR - 411)) | (1 << (frameQLParser.PLUGINS - 411)) | (1 << (frameQLParser.PORT - 411)) | (1 << (frameQLParser.PRECEDES - 411)) | (1 << (frameQLParser.PREPARE - 411)) | (1 << (frameQLParser.PRESERVE - 411)) | (1 << (frameQLParser.PREV - 411)) | (1 << (frameQLParser.PROCESSLIST - 411)) | (1 << (frameQLParser.PROFILE - 411)) | (1 << (frameQLParser.PROFILES - 411)) | (1 << (frameQLParser.PROXY - 411)) | (1 << (frameQLParser.QUERY - 411)) | (1 << (frameQLParser.QUICK - 411)) | (1 << (frameQLParser.REBUILD - 411)) | (1 << (frameQLParser.RECOVER - 411)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 411)) | (1 << (frameQLParser.REDUNDANT - 411)) | (1 << (frameQLParser.RELAY_LOG_FILE - 411)) | (1 << (frameQLParser.RELAY_LOG_POS - 411)) | (1 << (frameQLParser.RELAYLOG - 411)) | (1 << (frameQLParser.REMOVE - 411)) | (1 << (frameQLParser.REORGANIZE - 411)) | (1 << (frameQLParser.REPAIR - 411)) | (1 << (frameQLParser.REPLICATE_DO_DB - 411)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 411)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 411)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 411)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 411)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 411)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 411)) | (1 << (frameQLParser.REPLICATION - 411)) | (1 << (frameQLParser.RESUME - 411)))) != 0) or ((((_la - 475)) & ~0x3f) == 0 and ((1 << (_la - 475)) & ((1 << (frameQLParser.RETURNS - 475)) | (1 << (frameQLParser.ROLLBACK - 475)) | (1 << (frameQLParser.ROLLUP - 475)) | (1 << (frameQLParser.ROTATE - 475)) | (1 << (frameQLParser.ROW - 475)) | (1 << (frameQLParser.ROWS - 475)) | (1 << (frameQLParser.ROW_FORMAT - 475)) | (1 << (frameQLParser.SAVEPOINT - 475)) | (1 << (frameQLParser.SCHEDULE - 475)) | (1 << (frameQLParser.SECURITY - 475)) | (1 << (frameQLParser.SERVER - 475)) | (1 << (frameQLParser.SESSION - 475)) | (1 << (frameQLParser.SHARE - 475)) | (1 << (frameQLParser.SHARED - 475)) | (1 << (frameQLParser.SIGNED - 475)) | (1 << (frameQLParser.SIMPLE - 475)) | (1 << (frameQLParser.SLAVE - 475)) | (1 << (frameQLParser.SNAPSHOT - 475)) | (1 << (frameQLParser.SOCKET - 475)) | (1 << (frameQLParser.SOME - 475)) | (1 << (frameQLParser.SOUNDS - 475)) | (1 << (frameQLParser.SOURCE - 475)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 475)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 475)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 475)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 475)) | (1 << (frameQLParser.SQL_CACHE - 475)) | (1 << (frameQLParser.SQL_NO_CACHE - 475)) | (1 << (frameQLParser.SQL_THREAD - 475)) | (1 << (frameQLParser.START - 475)) | (1 << (frameQLParser.STARTS - 475)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 475)) | (1 << (frameQLParser.STATS_PERSISTENT - 475)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 475)) | (1 << (frameQLParser.STATUS - 475)) | (1 << (frameQLParser.STOP - 475)) | (1 << (frameQLParser.STORAGE - 475)) | (1 << (frameQLParser.STRING - 475)) | (1 << (frameQLParser.SUBJECT - 475)) | (1 << (frameQLParser.SUBPARTITION - 475)) | (1 << (frameQLParser.SUBPARTITIONS - 475)) | (1 << (frameQLParser.SUSPEND - 475)) | (1 << (frameQLParser.SWAPS - 475)) | (1 << (frameQLParser.SWITCHES - 475)) | (1 << (frameQLParser.TABLESPACE - 475)) | (1 << (frameQLParser.TEMPORARY - 475)) | (1 << (frameQLParser.TEMPTABLE - 475)) | (1 << (frameQLParser.THAN - 475)) | (1 << (frameQLParser.TRANSACTION - 475)) | (1 << (frameQLParser.TRUNCATE - 475)) | (1 << (frameQLParser.UNDEFINED - 475)) | (1 << (frameQLParser.UNDOFILE - 475)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 475)) | (1 << (frameQLParser.UNKNOWN - 475)) | (1 << (frameQLParser.UPGRADE - 475)) | (1 << (frameQLParser.USER - 475)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (frameQLParser.VALIDATION - 540)) | (1 << (frameQLParser.VALUE - 540)) | (1 << (frameQLParser.VARIABLES - 540)) | (1 << (frameQLParser.VIEW - 540)) | (1 << (frameQLParser.WAIT - 540)) | (1 << (frameQLParser.WARNINGS - 540)) | (1 << (frameQLParser.WITHOUT - 540)) | (1 << (frameQLParser.WORK - 540)) | (1 << (frameQLParser.WRAPPER - 540)) | (1 << (frameQLParser.X509 - 540)) | (1 << (frameQLParser.XA - 540)) | (1 << (frameQLParser.XML - 540)) | (1 << (frameQLParser.QUARTER - 540)) | (1 << (frameQLParser.MONTH - 540)) | (1 << (frameQLParser.DAY - 540)) | (1 << (frameQLParser.HOUR - 540)) | (1 << (frameQLParser.MINUTE - 540)) | (1 << (frameQLParser.WEEK - 540)) | (1 << (frameQLParser.SECOND - 540)) | (1 << (frameQLParser.MICROSECOND - 540)) | (1 << (frameQLParser.TABLES - 540)) | (1 << (frameQLParser.ROUTINE - 540)) | (1 << (frameQLParser.EXECUTE - 540)) | (1 << (frameQLParser.FILE - 540)) | (1 << (frameQLParser.PROCESS - 540)) | (1 << (frameQLParser.RELOAD - 540)) | (1 << (frameQLParser.SHUTDOWN - 540)) | (1 << (frameQLParser.SUPER - 540)) | (1 << (frameQLParser.PRIVILEGES - 540)) | (1 << (frameQLParser.ARMSCII8 - 540)) | (1 << (frameQLParser.ASCII - 540)) | (1 << (frameQLParser.BIG5 - 540)) | (1 << (frameQLParser.CP1250 - 540)) | (1 << (frameQLParser.CP1251 - 540)) | (1 << (frameQLParser.CP1256 - 540)) | (1 << (frameQLParser.CP1257 - 540)) | (1 << (frameQLParser.CP850 - 540)) | (1 << (frameQLParser.CP852 - 540)) | (1 << (frameQLParser.CP866 - 540)) | (1 << (frameQLParser.CP932 - 540)) | (1 << (frameQLParser.DEC8 - 540)) | (1 << (frameQLParser.EUCJPMS - 540)) | (1 << (frameQLParser.EUCKR - 540)) | (1 << (frameQLParser.GB2312 - 540)) | (1 << (frameQLParser.GBK - 540)) | (1 << (frameQLParser.GEOSTD8 - 540)) | (1 << (frameQLParser.GREEK - 540)) | (1 << (frameQLParser.HEBREW - 540)) | (1 << (frameQLParser.HP8 - 540)) | (1 << (frameQLParser.KEYBCS2 - 540)) | (1 << (frameQLParser.KOI8R - 540)) | (1 << (frameQLParser.KOI8U - 540)) | (1 << (frameQLParser.LATIN1 - 540)) | (1 << (frameQLParser.LATIN2 - 540)) | (1 << (frameQLParser.LATIN5 - 540)) | (1 << (frameQLParser.LATIN7 - 540)) | (1 << (frameQLParser.MACCE - 540)) | (1 << (frameQLParser.MACROMAN - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (frameQLParser.SJIS - 604)) | (1 << (frameQLParser.SWE7 - 604)) | (1 << (frameQLParser.TIS620 - 604)) | (1 << (frameQLParser.UCS2 - 604)) | (1 << (frameQLParser.UJIS - 604)) | (1 << (frameQLParser.UTF16 - 604)) | (1 << (frameQLParser.UTF16LE - 604)) | (1 << (frameQLParser.UTF32 - 604)) | (1 << (frameQLParser.UTF8 - 604)) | (1 << (frameQLParser.UTF8MB3 - 604)) | (1 << (frameQLParser.UTF8MB4 - 604)) | (1 << (frameQLParser.ARCHIVE - 604)) | (1 << (frameQLParser.BLACKHOLE - 604)) | (1 << (frameQLParser.CSV - 604)) | (1 << (frameQLParser.FEDERATED - 604)) | (1 << (frameQLParser.INNODB - 604)) | (1 << (frameQLParser.MEMORY - 604)) | (1 << (frameQLParser.MRG_MYISAM - 604)) | (1 << (frameQLParser.MYISAM - 604)) | (1 << (frameQLParser.NDB - 604)) | (1 << (frameQLParser.NDBCLUSTER - 604)) | (1 << (frameQLParser.PERFOMANCE_SCHEMA - 604)) | (1 << (frameQLParser.REPEATABLE - 604)) | (1 << (frameQLParser.COMMITTED - 604)) | (1 << (frameQLParser.UNCOMMITTED - 604)) | (1 << (frameQLParser.SERIALIZABLE - 604)) | (1 << (frameQLParser.GEOMETRYCOLLECTION - 604)) | (1 << (frameQLParser.LINESTRING - 604)) | (1 << (frameQLParser.MULTILINESTRING - 604)) | (1 << (frameQLParser.MULTIPOINT - 604)) | (1 << (frameQLParser.MULTIPOLYGON - 604)) | (1 << (frameQLParser.POINT - 604)) | (1 << (frameQLParser.POLYGON - 604)) | (1 << (frameQLParser.ABS - 604)) | (1 << (frameQLParser.ACOS - 604)) | (1 << (frameQLParser.ADDDATE - 604)) | (1 << (frameQLParser.ADDTIME - 604)) | (1 << (frameQLParser.AES_DECRYPT - 604)) | (1 << (frameQLParser.AES_ENCRYPT - 604)) | (1 << (frameQLParser.AREA - 604)) | (1 << (frameQLParser.ASBINARY - 604)) | (1 << (frameQLParser.ASIN - 604)) | (1 << (frameQLParser.ASTEXT - 604)) | (1 << (frameQLParser.ASWKB - 604)) | (1 << (frameQLParser.ASWKT - 604)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 604)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 604)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 604)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 604)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 604)) | (1 << (frameQLParser.ATAN - 604)) | (1 << (frameQLParser.ATAN2 - 604)) | (1 << (frameQLParser.BENCHMARK - 604)) | (1 << (frameQLParser.BIN - 604)) | (1 << (frameQLParser.BIT_COUNT - 604)) | (1 << (frameQLParser.BIT_LENGTH - 604)) | (1 << (frameQLParser.BUFFER - 604)) | (1 << (frameQLParser.CEIL - 604)) | (1 << (frameQLParser.CEILING - 604)) | (1 << (frameQLParser.CENTROID - 604)) | (1 << (frameQLParser.CHARACTER_LENGTH - 604)) | (1 << (frameQLParser.CHARSET - 604)) | (1 << (frameQLParser.CHAR_LENGTH - 604)) | (1 << (frameQLParser.COERCIBILITY - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (frameQLParser.COLLATION - 668)) | (1 << (frameQLParser.COMPRESS - 668)) | (1 << (frameQLParser.CONCAT - 668)) | (1 << (frameQLParser.CONCAT_WS - 668)) | (1 << (frameQLParser.CONNECTION_ID - 668)) | (1 << (frameQLParser.CONV - 668)) | (1 << (frameQLParser.CONVERT_TZ - 668)) | (1 << (frameQLParser.COS - 668)) | (1 << (frameQLParser.COT - 668)) | (1 << (frameQLParser.CRC32 - 668)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 668)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 668)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 668)) | (1 << (frameQLParser.CREATE_DIGEST - 668)) | (1 << (frameQLParser.CROSSES - 668)) | (1 << (frameQLParser.DATEDIFF - 668)) | (1 << (frameQLParser.DATE_FORMAT - 668)) | (1 << (frameQLParser.DAYNAME - 668)) | (1 << (frameQLParser.DAYOFMONTH - 668)) | (1 << (frameQLParser.DAYOFWEEK - 668)) | (1 << (frameQLParser.DAYOFYEAR - 668)) | (1 << (frameQLParser.DECODE - 668)) | (1 << (frameQLParser.DEGREES - 668)) | (1 << (frameQLParser.DES_DECRYPT - 668)) | (1 << (frameQLParser.DES_ENCRYPT - 668)) | (1 << (frameQLParser.DIMENSION - 668)) | (1 << (frameQLParser.DISJOINT - 668)) | (1 << (frameQLParser.ELT - 668)) | (1 << (frameQLParser.ENCODE - 668)) | (1 << (frameQLParser.ENCRYPT - 668)) | (1 << (frameQLParser.ENDPOINT - 668)) | (1 << (frameQLParser.ENVELOPE - 668)) | (1 << (frameQLParser.EQUALS - 668)) | (1 << (frameQLParser.EXP - 668)) | (1 << (frameQLParser.EXPORT_SET - 668)) | (1 << (frameQLParser.EXTERIORRING - 668)) | (1 << (frameQLParser.EXTRACTVALUE - 668)) | (1 << (frameQLParser.FIELD - 668)) | (1 << (frameQLParser.FIND_IN_SET - 668)) | (1 << (frameQLParser.FLOOR - 668)) | (1 << (frameQLParser.FORMAT - 668)) | (1 << (frameQLParser.FOUND_ROWS - 668)) | (1 << (frameQLParser.FROM_BASE64 - 668)) | (1 << (frameQLParser.FROM_DAYS - 668)) | (1 << (frameQLParser.FROM_UNIXTIME - 668)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 668)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 668)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 668)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 668)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 668)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 668)) | (1 << (frameQLParser.GEOMETRYN - 668)) | (1 << (frameQLParser.GEOMETRYTYPE - 668)) | (1 << (frameQLParser.GEOMFROMTEXT - 668)) | (1 << (frameQLParser.GEOMFROMWKB - 668)) | (1 << (frameQLParser.GET_FORMAT - 668)) | (1 << (frameQLParser.GET_LOCK - 668)) | (1 << (frameQLParser.GLENGTH - 668)) | (1 << (frameQLParser.GREATEST - 668)) | (1 << (frameQLParser.GTID_SUBSET - 668)) | (1 << (frameQLParser.GTID_SUBTRACT - 668)) | (1 << (frameQLParser.HEX - 668)) | (1 << (frameQLParser.IFNULL - 668)) | (1 << (frameQLParser.INET6_ATON - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (frameQLParser.INET6_NTOA - 732)) | (1 << (frameQLParser.INET_ATON - 732)) | (1 << (frameQLParser.INET_NTOA - 732)) | (1 << (frameQLParser.INSTR - 732)) | (1 << (frameQLParser.INTERIORRINGN - 732)) | (1 << (frameQLParser.INTERSECTS - 732)) | (1 << (frameQLParser.ISCLOSED - 732)) | (1 << (frameQLParser.ISEMPTY - 732)) | (1 << (frameQLParser.ISNULL - 732)) | (1 << (frameQLParser.ISSIMPLE - 732)) | (1 << (frameQLParser.IS_FREE_LOCK - 732)) | (1 << (frameQLParser.IS_IPV4 - 732)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 732)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 732)) | (1 << (frameQLParser.IS_IPV6 - 732)) | (1 << (frameQLParser.IS_USED_LOCK - 732)) | (1 << (frameQLParser.LAST_INSERT_ID - 732)) | (1 << (frameQLParser.LCASE - 732)) | (1 << (frameQLParser.LEAST - 732)) | (1 << (frameQLParser.LENGTH - 732)) | (1 << (frameQLParser.LINEFROMTEXT - 732)) | (1 << (frameQLParser.LINEFROMWKB - 732)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 732)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 732)) | (1 << (frameQLParser.LN - 732)) | (1 << (frameQLParser.LOAD_FILE - 732)) | (1 << (frameQLParser.LOCATE - 732)) | (1 << (frameQLParser.LOG - 732)) | (1 << (frameQLParser.LOG10 - 732)) | (1 << (frameQLParser.LOG2 - 732)) | (1 << (frameQLParser.LOWER - 732)) | (1 << (frameQLParser.LPAD - 732)) | (1 << (frameQLParser.LTRIM - 732)) | (1 << (frameQLParser.MAKEDATE - 732)) | (1 << (frameQLParser.MAKETIME - 732)) | (1 << (frameQLParser.MAKE_SET - 732)) | (1 << (frameQLParser.MASTER_POS_WAIT - 732)) | (1 << (frameQLParser.MBRCONTAINS - 732)) | (1 << (frameQLParser.MBRDISJOINT - 732)) | (1 << (frameQLParser.MBREQUAL - 732)) | (1 << (frameQLParser.MBRINTERSECTS - 732)) | (1 << (frameQLParser.MBROVERLAPS - 732)) | (1 << (frameQLParser.MBRTOUCHES - 732)) | (1 << (frameQLParser.MBRWITHIN - 732)) | (1 << (frameQLParser.MD5 - 732)) | (1 << (frameQLParser.MLINEFROMTEXT - 732)) | (1 << (frameQLParser.MLINEFROMWKB - 732)) | (1 << (frameQLParser.MONTHNAME - 732)) | (1 << (frameQLParser.MPOINTFROMTEXT - 732)) | (1 << (frameQLParser.MPOINTFROMWKB - 732)) | (1 << (frameQLParser.MPOLYFROMTEXT - 732)) | (1 << (frameQLParser.MPOLYFROMWKB - 732)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 732)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 732)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 732)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 732)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 732)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 732)) | (1 << (frameQLParser.NAME_CONST - 732)) | (1 << (frameQLParser.NULLIF - 732)) | (1 << (frameQLParser.NUMGEOMETRIES - 732)) | (1 << (frameQLParser.NUMINTERIORRINGS - 732)) | (1 << (frameQLParser.NUMPOINTS - 732)) | (1 << (frameQLParser.OCT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (frameQLParser.OCTET_LENGTH - 796)) | (1 << (frameQLParser.ORD - 796)) | (1 << (frameQLParser.OVERLAPS - 796)) | (1 << (frameQLParser.PERIOD_ADD - 796)) | (1 << (frameQLParser.PERIOD_DIFF - 796)) | (1 << (frameQLParser.PI - 796)) | (1 << (frameQLParser.POINTFROMTEXT - 796)) | (1 << (frameQLParser.POINTFROMWKB - 796)) | (1 << (frameQLParser.POINTN - 796)) | (1 << (frameQLParser.POLYFROMTEXT - 796)) | (1 << (frameQLParser.POLYFROMWKB - 796)) | (1 << (frameQLParser.POLYGONFROMTEXT - 796)) | (1 << (frameQLParser.POLYGONFROMWKB - 796)) | (1 << (frameQLParser.POW - 796)) | (1 << (frameQLParser.POWER - 796)) | (1 << (frameQLParser.QUOTE - 796)) | (1 << (frameQLParser.RADIANS - 796)) | (1 << (frameQLParser.RAND - 796)) | (1 << (frameQLParser.RANDOM_BYTES - 796)) | (1 << (frameQLParser.RELEASE_LOCK - 796)) | (1 << (frameQLParser.REVERSE - 796)) | (1 << (frameQLParser.ROUND - 796)) | (1 << (frameQLParser.ROW_COUNT - 796)) | (1 << (frameQLParser.RPAD - 796)) | (1 << (frameQLParser.RTRIM - 796)) | (1 << (frameQLParser.SEC_TO_TIME - 796)) | (1 << (frameQLParser.SESSION_USER - 796)) | (1 << (frameQLParser.SHA - 796)) | (1 << (frameQLParser.SHA1 - 796)) | (1 << (frameQLParser.SHA2 - 796)) | (1 << (frameQLParser.SIGN - 796)) | (1 << (frameQLParser.SIN - 796)) | (1 << (frameQLParser.SLEEP - 796)) | (1 << (frameQLParser.SOUNDEX - 796)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 796)) | (1 << (frameQLParser.SQRT - 796)) | (1 << (frameQLParser.SRID - 796)) | (1 << (frameQLParser.STARTPOINT - 796)) | (1 << (frameQLParser.STRCMP - 796)) | (1 << (frameQLParser.STR_TO_DATE - 796)) | (1 << (frameQLParser.ST_AREA - 796)) | (1 << (frameQLParser.ST_ASBINARY - 796)) | (1 << (frameQLParser.ST_ASTEXT - 796)) | (1 << (frameQLParser.ST_ASWKB - 796)) | (1 << (frameQLParser.ST_ASWKT - 796)) | (1 << (frameQLParser.ST_BUFFER - 796)) | (1 << (frameQLParser.ST_CENTROID - 796)) | (1 << (frameQLParser.ST_CONTAINS - 796)) | (1 << (frameQLParser.ST_CROSSES - 796)) | (1 << (frameQLParser.ST_DIFFERENCE - 796)) | (1 << (frameQLParser.ST_DIMENSION - 796)) | (1 << (frameQLParser.ST_DISJOINT - 796)) | (1 << (frameQLParser.ST_DISTANCE - 796)) | (1 << (frameQLParser.ST_ENDPOINT - 796)) | (1 << (frameQLParser.ST_ENVELOPE - 796)) | (1 << (frameQLParser.ST_EQUALS - 796)) | (1 << (frameQLParser.ST_EXTERIORRING - 796)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 796)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 796)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 796)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 796)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 796)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 796)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (frameQLParser.ST_GEOMETRYN - 860)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 860)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 860)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 860)) | (1 << (frameQLParser.ST_INTERIORRINGN - 860)) | (1 << (frameQLParser.ST_INTERSECTION - 860)) | (1 << (frameQLParser.ST_INTERSECTS - 860)) | (1 << (frameQLParser.ST_ISCLOSED - 860)) | (1 << (frameQLParser.ST_ISEMPTY - 860)) | (1 << (frameQLParser.ST_ISSIMPLE - 860)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 860)) | (1 << (frameQLParser.ST_LINEFROMWKB - 860)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 860)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 860)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 860)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 860)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 860)) | (1 << (frameQLParser.ST_NUMPOINTS - 860)) | (1 << (frameQLParser.ST_OVERLAPS - 860)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 860)) | (1 << (frameQLParser.ST_POINTFROMWKB - 860)) | (1 << (frameQLParser.ST_POINTN - 860)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 860)) | (1 << (frameQLParser.ST_POLYFROMWKB - 860)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 860)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 860)) | (1 << (frameQLParser.ST_SRID - 860)) | (1 << (frameQLParser.ST_STARTPOINT - 860)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 860)) | (1 << (frameQLParser.ST_TOUCHES - 860)) | (1 << (frameQLParser.ST_UNION - 860)) | (1 << (frameQLParser.ST_WITHIN - 860)) | (1 << (frameQLParser.ST_X - 860)) | (1 << (frameQLParser.ST_Y - 860)) | (1 << (frameQLParser.SUBDATE - 860)) | (1 << (frameQLParser.SUBSTRING_INDEX - 860)) | (1 << (frameQLParser.SUBTIME - 860)) | (1 << (frameQLParser.SYSTEM_USER - 860)) | (1 << (frameQLParser.TAN - 860)) | (1 << (frameQLParser.TIMEDIFF - 860)) | (1 << (frameQLParser.TIMESTAMPADD - 860)) | (1 << (frameQLParser.TIMESTAMPDIFF - 860)) | (1 << (frameQLParser.TIME_FORMAT - 860)) | (1 << (frameQLParser.TIME_TO_SEC - 860)) | (1 << (frameQLParser.TOUCHES - 860)) | (1 << (frameQLParser.TO_BASE64 - 860)) | (1 << (frameQLParser.TO_DAYS - 860)) | (1 << (frameQLParser.TO_SECONDS - 860)) | (1 << (frameQLParser.UCASE - 860)) | (1 << (frameQLParser.UNCOMPRESS - 860)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 860)) | (1 << (frameQLParser.UNHEX - 860)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 860)) | (1 << (frameQLParser.UPDATEXML - 860)) | (1 << (frameQLParser.UPPER - 860)) | (1 << (frameQLParser.UUID - 860)) | (1 << (frameQLParser.UUID_SHORT - 860)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 860)) | (1 << (frameQLParser.VERSION - 860)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 860)) | (1 << (frameQLParser.WEEKDAY - 860)) | (1 << (frameQLParser.WEEKOFYEAR - 860)) | (1 << (frameQLParser.WEIGHT_STRING - 860)) | (1 << (frameQLParser.WITHIN - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (frameQLParser.YEARWEEK - 924)) | (1 << (frameQLParser.Y_FUNCTION - 924)) | (1 << (frameQLParser.X_FUNCTION - 924)) | (1 << (frameQLParser.PLUS - 924)) | (1 << (frameQLParser.MINUS - 924)) | (1 << (frameQLParser.EXCLAMATION_SYMBOL - 924)) | (1 << (frameQLParser.BIT_NOT_OP - 924)) | (1 << (frameQLParser.LR_BRACKET - 924)) | (1 << (frameQLParser.ZERO_DECIMAL - 924)) | (1 << (frameQLParser.ONE_DECIMAL - 924)) | (1 << (frameQLParser.TWO_DECIMAL - 924)) | (1 << (frameQLParser.CHARSET_REVERSE_QOUTE_STRING - 924)) | (1 << (frameQLParser.START_NATIONAL_STRING_LITERAL - 924)) | (1 << (frameQLParser.STRING_LITERAL - 924)) | (1 << (frameQLParser.DECIMAL_LITERAL - 924)) | (1 << (frameQLParser.HEXADECIMAL_LITERAL - 924)) | (1 << (frameQLParser.REAL_LITERAL - 924)) | (1 << (frameQLParser.NULL_SPEC_LITERAL - 924)) | (1 << (frameQLParser.BIT_STRING - 924)) | (1 << (frameQLParser.STRING_CHARSET_NAME - 924)) | (1 << (frameQLParser.ID - 924)) | (1 << (frameQLParser.REVERSE_QUOTE_ID - 924)) | (1 << (frameQLParser.LOCAL_ID - 924)) | (1 << (frameQLParser.GLOBAL_ID - 924)))) != 0):
                    self.state = 5581
                    self.functionArgs()


                self.state = 5584
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = frameQLParser.PasswordFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5586
                self.passwordFunctionClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecificFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_specificFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.positionString = None # StringLiteralContext
            self.positionExpression = None # ExpressionContext
            self.inString = None # StringLiteralContext
            self.inExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(frameQLParser.POSITION, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def IN(self):
            return self.getToken(frameQLParser.IN, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionFunctionCall" ):
                listener.enterPositionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionFunctionCall" ):
                listener.exitPositionFunctionCall(self)


    class TrimFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.positioinForm = None # Token
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromString = None # StringLiteralContext
            self.fromExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(frameQLParser.TRIM, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def BOTH(self):
            return self.getToken(frameQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(frameQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(frameQLParser.TRAILING, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunctionCall" ):
                listener.enterTrimFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunctionCall" ):
                listener.exitTrimFunctionCall(self)


    class SimpleFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(frameQLParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(frameQLParser.CURRENT_TIME, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(frameQLParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(frameQLParser.CURRENT_USER, 0)
        def LOCALTIME(self):
            return self.getToken(frameQLParser.LOCALTIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionCall" ):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionCall" ):
                listener.exitSimpleFunctionCall(self)


    class CharFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(frameQLParser.CHAR, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(frameQLParser.FunctionArgsContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def USING(self):
            return self.getToken(frameQLParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharFunctionCall" ):
                listener.enterCharFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharFunctionCall" ):
                listener.exitCharFunctionCall(self)


    class WeightFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.stringFormat = None # Token
            self.copyFrom(ctx)

        def WEIGHT_STRING(self):
            return self.getToken(frameQLParser.WEIGHT_STRING, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LR_BRACKET)
            else:
                return self.getToken(frameQLParser.LR_BRACKET, i)
        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.RR_BRACKET)
            else:
                return self.getToken(frameQLParser.RR_BRACKET, i)
        def stringLiteral(self):
            return self.getTypedRuleContext(frameQLParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(frameQLParser.AS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)

        def levelsInWeightString(self):
            return self.getTypedRuleContext(frameQLParser.LevelsInWeightStringContext,0)

        def CHAR(self):
            return self.getToken(frameQLParser.CHAR, 0)
        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightFunctionCall" ):
                listener.enterWeightFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightFunctionCall" ):
                listener.exitWeightFunctionCall(self)


    class GetFormatFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.datetimeFormat = None # Token
            self.copyFrom(ctx)

        def GET_FORMAT(self):
            return self.getToken(frameQLParser.GET_FORMAT, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(frameQLParser.StringLiteralContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def DATE(self):
            return self.getToken(frameQLParser.DATE, 0)
        def TIME(self):
            return self.getToken(frameQLParser.TIME, 0)
        def DATETIME(self):
            return self.getToken(frameQLParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetFormatFunctionCall" ):
                listener.enterGetFormatFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetFormatFunctionCall" ):
                listener.exitGetFormatFunctionCall(self)


    class CaseFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(frameQLParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def END(self):
            return self.getToken(frameQLParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(frameQLParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(frameQLParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(frameQLParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFunctionCall" ):
                listener.enterCaseFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFunctionCall" ):
                listener.exitCaseFunctionCall(self)


    class ExtractFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(frameQLParser.EXTRACT, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def intervalType(self):
            return self.getTypedRuleContext(frameQLParser.IntervalTypeContext,0)

        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(frameQLParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractFunctionCall" ):
                listener.enterExtractFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractFunctionCall" ):
                listener.exitExtractFunctionCall(self)


    class DataTypeFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.separator = None # Token
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(frameQLParser.CONVERT, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def convertedDataType(self):
            return self.getTypedRuleContext(frameQLParser.ConvertedDataTypeContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(frameQLParser.COMMA, 0)
        def USING(self):
            return self.getToken(frameQLParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(frameQLParser.CharsetNameContext,0)

        def CAST(self):
            return self.getToken(frameQLParser.CAST, 0)
        def AS(self):
            return self.getToken(frameQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeFunctionCall" ):
                listener.enterDataTypeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeFunctionCall" ):
                listener.exitDataTypeFunctionCall(self)


    class ValuesFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(frameQLParser.VALUES, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def fullColumnName(self):
            return self.getTypedRuleContext(frameQLParser.FullColumnNameContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesFunctionCall" ):
                listener.enterValuesFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesFunctionCall" ):
                listener.exitValuesFunctionCall(self)


    class SubstrFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromDecimal = None # DecimalLiteralContext
            self.fromExpression = None # ExpressionContext
            self.forDecimal = None # DecimalLiteralContext
            self.forExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(frameQLParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def SUBSTR(self):
            return self.getToken(frameQLParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(frameQLParser.SUBSTRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(frameQLParser.StringLiteralContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)

        def FOR(self):
            return self.getToken(frameQLParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstrFunctionCall" ):
                listener.enterSubstrFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstrFunctionCall" ):
                listener.exitSubstrFunctionCall(self)



    def specificFunction(self):

        localctx = frameQLParser.SpecificFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_specificFunction)
        self._la = 0 # Token type
        try:
            self.state = 5746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,838,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.SimpleFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5589
                _la = self._input.LA(1)
                if not(_la==frameQLParser.CURRENT_USER or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (frameQLParser.CURRENT_DATE - 231)) | (1 << (frameQLParser.CURRENT_TIME - 231)) | (1 << (frameQLParser.CURRENT_TIMESTAMP - 231)) | (1 << (frameQLParser.LOCALTIME - 231)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = frameQLParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5590
                self.match(frameQLParser.CONVERT)
                self.state = 5591
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5592
                self.expression(0)
                self.state = 5593
                localctx.separator = self.match(frameQLParser.COMMA)
                self.state = 5594
                self.convertedDataType()
                self.state = 5595
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = frameQLParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5597
                self.match(frameQLParser.CONVERT)
                self.state = 5598
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5599
                self.expression(0)
                self.state = 5600
                self.match(frameQLParser.USING)
                self.state = 5601
                self.charsetName()
                self.state = 5602
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = frameQLParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5604
                self.match(frameQLParser.CAST)
                self.state = 5605
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5606
                self.expression(0)
                self.state = 5607
                self.match(frameQLParser.AS)
                self.state = 5608
                self.convertedDataType()
                self.state = 5609
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = frameQLParser.ValuesFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5611
                self.match(frameQLParser.VALUES)
                self.state = 5612
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5613
                self.fullColumnName()
                self.state = 5614
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = frameQLParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5616
                self.match(frameQLParser.CASE)
                self.state = 5617
                self.expression(0)
                self.state = 5619 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5618
                    self.caseFuncAlternative()
                    self.state = 5621 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==frameQLParser.WHEN):
                        break

                self.state = 5625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ELSE:
                    self.state = 5623
                    self.match(frameQLParser.ELSE)
                    self.state = 5624
                    localctx.elseArg = self.functionArg()


                self.state = 5627
                self.match(frameQLParser.END)
                pass

            elif la_ == 7:
                localctx = frameQLParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5629
                self.match(frameQLParser.CASE)
                self.state = 5631 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5630
                    self.caseFuncAlternative()
                    self.state = 5633 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==frameQLParser.WHEN):
                        break

                self.state = 5637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ELSE:
                    self.state = 5635
                    self.match(frameQLParser.ELSE)
                    self.state = 5636
                    localctx.elseArg = self.functionArg()


                self.state = 5639
                self.match(frameQLParser.END)
                pass

            elif la_ == 8:
                localctx = frameQLParser.CharFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5641
                self.match(frameQLParser.CHAR)
                self.state = 5642
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5643
                self.functionArgs()
                self.state = 5646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.USING:
                    self.state = 5644
                    self.match(frameQLParser.USING)
                    self.state = 5645
                    self.charsetName()


                self.state = 5648
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = frameQLParser.PositionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5650
                self.match(frameQLParser.POSITION)
                self.state = 5651
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
                if la_ == 1:
                    self.state = 5652
                    localctx.positionString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5653
                    localctx.positionExpression = self.expression(0)
                    pass


                self.state = 5656
                self.match(frameQLParser.IN)
                self.state = 5659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,825,self._ctx)
                if la_ == 1:
                    self.state = 5657
                    localctx.inString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5658
                    localctx.inExpression = self.expression(0)
                    pass


                self.state = 5661
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = frameQLParser.SubstrFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 5663
                _la = self._input.LA(1)
                if not(_la==frameQLParser.SUBSTR or _la==frameQLParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5664
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,826,self._ctx)
                if la_ == 1:
                    self.state = 5665
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5666
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 5669
                self.match(frameQLParser.FROM)
                self.state = 5672
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,827,self._ctx)
                if la_ == 1:
                    self.state = 5670
                    localctx.fromDecimal = self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5671
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 5679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.FOR:
                    self.state = 5674
                    self.match(frameQLParser.FOR)
                    self.state = 5677
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,828,self._ctx)
                    if la_ == 1:
                        self.state = 5675
                        localctx.forDecimal = self.decimalLiteral()
                        pass

                    elif la_ == 2:
                        self.state = 5676
                        localctx.forExpression = self.expression(0)
                        pass




                self.state = 5681
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = frameQLParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 5683
                self.match(frameQLParser.TRIM)
                self.state = 5684
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5685
                localctx.positioinForm = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.BOTH or _la==frameQLParser.LEADING or _la==frameQLParser.TRAILING):
                    localctx.positioinForm = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,830,self._ctx)
                if la_ == 1:
                    self.state = 5686
                    localctx.sourceString = self.stringLiteral()

                elif la_ == 2:
                    self.state = 5687
                    localctx.sourceExpression = self.expression(0)


                self.state = 5690
                self.match(frameQLParser.FROM)
                self.state = 5693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,831,self._ctx)
                if la_ == 1:
                    self.state = 5691
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5692
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 5695
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = frameQLParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 5697
                self.match(frameQLParser.TRIM)
                self.state = 5698
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,832,self._ctx)
                if la_ == 1:
                    self.state = 5699
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5700
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 5703
                self.match(frameQLParser.FROM)
                self.state = 5706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
                if la_ == 1:
                    self.state = 5704
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5705
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 5708
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = frameQLParser.WeightFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 5710
                self.match(frameQLParser.WEIGHT_STRING)
                self.state = 5711
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,834,self._ctx)
                if la_ == 1:
                    self.state = 5712
                    self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5713
                    self.expression(0)
                    pass


                self.state = 5722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.AS:
                    self.state = 5716
                    self.match(frameQLParser.AS)
                    self.state = 5717
                    localctx.stringFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.CHAR or _la==frameQLParser.BINARY):
                        localctx.stringFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5718
                    self.match(frameQLParser.LR_BRACKET)
                    self.state = 5719
                    self.decimalLiteral()
                    self.state = 5720
                    self.match(frameQLParser.RR_BRACKET)


                self.state = 5725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.LEVEL:
                    self.state = 5724
                    self.levelsInWeightString()


                self.state = 5727
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = frameQLParser.ExtractFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 5729
                self.match(frameQLParser.EXTRACT)
                self.state = 5730
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5731
                self.intervalType()
                self.state = 5732
                self.match(frameQLParser.FROM)
                self.state = 5735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,837,self._ctx)
                if la_ == 1:
                    self.state = 5733
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5734
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 5737
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = frameQLParser.GetFormatFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 5739
                self.match(frameQLParser.GET_FORMAT)
                self.state = 5740
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5741
                localctx.datetimeFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.DATETIME - 184)))) != 0)):
                    localctx.datetimeFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5742
                self.match(frameQLParser.COMMA)
                self.state = 5743
                self.stringLiteral()
                self.state = 5744
                self.match(frameQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseFuncAlternativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # FunctionArgContext
            self.consequent = None # FunctionArgContext

        def WHEN(self):
            return self.getToken(frameQLParser.WHEN, 0)

        def THEN(self):
            return self.getToken(frameQLParser.THEN, 0)

        def functionArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FunctionArgContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FunctionArgContext,i)


        def getRuleIndex(self):
            return frameQLParser.RULE_caseFuncAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFuncAlternative" ):
                listener.enterCaseFuncAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFuncAlternative" ):
                listener.exitCaseFuncAlternative(self)




    def caseFuncAlternative(self):

        localctx = frameQLParser.CaseFuncAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_caseFuncAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5748
            self.match(frameQLParser.WHEN)
            self.state = 5749
            localctx.condition = self.functionArg()
            self.state = 5750
            self.match(frameQLParser.THEN)
            self.state = 5751
            localctx.consequent = self.functionArg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelsInWeightStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_levelsInWeightString

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LevelWeightRangeContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.firstLevel = None # DecimalLiteralContext
            self.lastLevel = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(frameQLParser.LEVEL, 0)
        def MINUS(self):
            return self.getToken(frameQLParser.MINUS, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightRange" ):
                listener.enterLevelWeightRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightRange" ):
                listener.exitLevelWeightRange(self)


    class LevelWeightListContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(frameQLParser.LEVEL, 0)
        def levelInWeightListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.LevelInWeightListElementContext)
            else:
                return self.getTypedRuleContext(frameQLParser.LevelInWeightListElementContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightList" ):
                listener.enterLevelWeightList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightList" ):
                listener.exitLevelWeightList(self)



    def levelsInWeightString(self):

        localctx = frameQLParser.LevelsInWeightStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_levelsInWeightString)
        self._la = 0 # Token type
        try:
            self.state = 5767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,840,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.LevelWeightListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5753
                self.match(frameQLParser.LEVEL)
                self.state = 5754
                self.levelInWeightListElement()
                self.state = 5759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 5755
                    self.match(frameQLParser.COMMA)
                    self.state = 5756
                    self.levelInWeightListElement()
                    self.state = 5761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = frameQLParser.LevelWeightRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5762
                self.match(frameQLParser.LEVEL)
                self.state = 5763
                localctx.firstLevel = self.decimalLiteral()
                self.state = 5764
                self.match(frameQLParser.MINUS)
                self.state = 5765
                localctx.lastLevel = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelInWeightListElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.orderType = None # Token

        def decimalLiteral(self):
            return self.getTypedRuleContext(frameQLParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(frameQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(frameQLParser.DESC, 0)

        def REVERSE(self):
            return self.getToken(frameQLParser.REVERSE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_levelInWeightListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelInWeightListElement" ):
                listener.enterLevelInWeightListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelInWeightListElement" ):
                listener.exitLevelInWeightListElement(self)




    def levelInWeightListElement(self):

        localctx = frameQLParser.LevelInWeightListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_levelInWeightListElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5769
            self.decimalLiteral()
            self.state = 5771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==frameQLParser.ASC or _la==frameQLParser.DESC or _la==frameQLParser.REVERSE:
                self.state = 5770
                localctx.orderType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.ASC or _la==frameQLParser.DESC or _la==frameQLParser.REVERSE):
                    localctx.orderType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token
            self.separator = None # Token

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(frameQLParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(frameQLParser.AVG, 0)

        def MAX(self):
            return self.getToken(frameQLParser.MAX, 0)

        def MIN(self):
            return self.getToken(frameQLParser.MIN, 0)

        def SUM(self):
            return self.getToken(frameQLParser.SUM, 0)

        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(frameQLParser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(frameQLParser.COUNT, 0)

        def STAR(self):
            return self.getToken(frameQLParser.STAR, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(frameQLParser.FunctionArgsContext,0)


        def FCOUNT(self):
            return self.getToken(frameQLParser.FCOUNT, 0)

        def BIT_AND(self):
            return self.getToken(frameQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(frameQLParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(frameQLParser.BIT_XOR, 0)

        def STD(self):
            return self.getToken(frameQLParser.STD, 0)

        def STDDEV(self):
            return self.getToken(frameQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(frameQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(frameQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(frameQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(frameQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(frameQLParser.VARIANCE, 0)

        def GROUP_CONCAT(self):
            return self.getToken(frameQLParser.GROUP_CONCAT, 0)

        def ORDER(self):
            return self.getToken(frameQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(frameQLParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.OrderByExpressionContext,i)


        def SEPARATOR(self):
            return self.getToken(frameQLParser.SEPARATOR, 0)

        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)




    def aggregateWindowedFunction(self):

        localctx = frameQLParser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 5833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5773
                _la = self._input.LA(1)
                if not(((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (frameQLParser.AVG - 214)) | (1 << (frameQLParser.MAX - 214)) | (1 << (frameQLParser.MIN - 214)) | (1 << (frameQLParser.SUM - 214)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5774
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ALL or _la==frameQLParser.DISTINCT:
                    self.state = 5775
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==frameQLParser.ALL or _la==frameQLParser.DISTINCT):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5778
                self.functionArg()
                self.state = 5779
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5781
                self.match(frameQLParser.COUNT)
                self.state = 5782
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5788
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [frameQLParser.STAR]:
                    self.state = 5783
                    localctx.starArg = self.match(frameQLParser.STAR)
                    pass
                elif token in [frameQLParser.ALL, frameQLParser.CASE, frameQLParser.CAST, frameQLParser.CONVERT, frameQLParser.CURRENT_USER, frameQLParser.DATABASE, frameQLParser.EXISTS, frameQLParser.FALSE, frameQLParser.IF, frameQLParser.INSERT, frameQLParser.INTERVAL, frameQLParser.LEFT, frameQLParser.NOT, frameQLParser.NULL_LITERAL, frameQLParser.REPLACE, frameQLParser.RIGHT, frameQLParser.TRUE, frameQLParser.VALUES, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.DATETIME, frameQLParser.YEAR, frameQLParser.CHAR, frameQLParser.BINARY, frameQLParser.TEXT, frameQLParser.ENUM, frameQLParser.SERIAL, frameQLParser.AVG, frameQLParser.BIT_AND, frameQLParser.BIT_OR, frameQLParser.BIT_XOR, frameQLParser.COUNT, frameQLParser.GROUP_CONCAT, frameQLParser.MAX, frameQLParser.MIN, frameQLParser.STD, frameQLParser.STDDEV, frameQLParser.STDDEV_POP, frameQLParser.STDDEV_SAMP, frameQLParser.SUM, frameQLParser.VAR_POP, frameQLParser.VAR_SAMP, frameQLParser.VARIANCE, frameQLParser.FCOUNT, frameQLParser.CURRENT_DATE, frameQLParser.CURRENT_TIME, frameQLParser.CURRENT_TIMESTAMP, frameQLParser.LOCALTIME, frameQLParser.CURDATE, frameQLParser.CURTIME, frameQLParser.DATE_ADD, frameQLParser.DATE_SUB, frameQLParser.EXTRACT, frameQLParser.LOCALTIMESTAMP, frameQLParser.NOW, frameQLParser.POSITION, frameQLParser.SUBSTR, frameQLParser.SUBSTRING, frameQLParser.SYSDATE, frameQLParser.TRIM, frameQLParser.UTC_DATE, frameQLParser.UTC_TIME, frameQLParser.UTC_TIMESTAMP, frameQLParser.ACCOUNT, frameQLParser.ACTION, frameQLParser.AFTER, frameQLParser.AGGREGATE, frameQLParser.ALGORITHM, frameQLParser.ANY, frameQLParser.AT, frameQLParser.AUTHORS, frameQLParser.AUTOCOMMIT, frameQLParser.AUTOEXTEND_SIZE, frameQLParser.AUTO_INCREMENT, frameQLParser.AVG_ROW_LENGTH, frameQLParser.BEGIN, frameQLParser.BINLOG, frameQLParser.BIT, frameQLParser.BLOCK, frameQLParser.BOOL, frameQLParser.BOOLEAN, frameQLParser.BTREE, frameQLParser.CASCADED, frameQLParser.CHAIN, frameQLParser.CHANGED, frameQLParser.CHANNEL, frameQLParser.CHECKSUM, frameQLParser.CIPHER, frameQLParser.CLIENT, frameQLParser.COALESCE, frameQLParser.CODE, frameQLParser.COLUMNS, frameQLParser.COLUMN_FORMAT, frameQLParser.COMMENT, frameQLParser.COMMIT, frameQLParser.COMPACT, frameQLParser.COMPLETION, frameQLParser.COMPRESSED, frameQLParser.COMPRESSION, frameQLParser.CONCURRENT, frameQLParser.CONNECTION, frameQLParser.CONSISTENT, frameQLParser.CONTAINS, frameQLParser.CONTEXT, frameQLParser.CONTRIBUTORS, frameQLParser.COPY, frameQLParser.CPU, frameQLParser.DATA, frameQLParser.DATAFILE, frameQLParser.DEALLOCATE, frameQLParser.DEFAULT_AUTH, frameQLParser.DEFINER, frameQLParser.DELAY_KEY_WRITE, frameQLParser.DIRECTORY, frameQLParser.DISABLE, frameQLParser.DISCARD, frameQLParser.DISK, frameQLParser.DO, frameQLParser.DUMPFILE, frameQLParser.DUPLICATE, frameQLParser.DYNAMIC, frameQLParser.ENABLE, frameQLParser.ENCRYPTION, frameQLParser.ENDS, frameQLParser.ENGINE, frameQLParser.ENGINES, frameQLParser.ERROR, frameQLParser.ERRORS, frameQLParser.ESCAPE, frameQLParser.EVEN, frameQLParser.EVENT, frameQLParser.EVENTS, frameQLParser.EVERY, frameQLParser.EXCHANGE, frameQLParser.EXCLUSIVE, frameQLParser.EXPIRE, frameQLParser.EXTENDED, frameQLParser.EXTENT_SIZE, frameQLParser.FAST, frameQLParser.FAULTS, frameQLParser.FIELDS, frameQLParser.FILE_BLOCK_SIZE, frameQLParser.FILTER, frameQLParser.FIRST, frameQLParser.FIXED, frameQLParser.FOLLOWS, frameQLParser.FULL, frameQLParser.FUNCTION, frameQLParser.GLOBAL, frameQLParser.GRANTS, frameQLParser.GROUP_REPLICATION, frameQLParser.HASH, frameQLParser.HOST, frameQLParser.IDENTIFIED, frameQLParser.IGNORE_SERVER_IDS, frameQLParser.IMPORT, frameQLParser.INDEXES, frameQLParser.INITIAL_SIZE, frameQLParser.INPLACE, frameQLParser.INSERT_METHOD, frameQLParser.INSTANCE, frameQLParser.INVOKER, frameQLParser.IO, frameQLParser.IO_THREAD, frameQLParser.IPC, frameQLParser.ISOLATION, frameQLParser.ISSUER, frameQLParser.KEY_BLOCK_SIZE, frameQLParser.LANGUAGE, frameQLParser.LAST, frameQLParser.LEAVES, frameQLParser.LESS, frameQLParser.LEVEL, frameQLParser.LIST, frameQLParser.LOCAL, frameQLParser.LOGFILE, frameQLParser.LOGS, frameQLParser.MASTER, frameQLParser.MASTER_AUTO_POSITION, frameQLParser.MASTER_CONNECT_RETRY, frameQLParser.MASTER_DELAY, frameQLParser.MASTER_HEARTBEAT_PERIOD, frameQLParser.MASTER_HOST, frameQLParser.MASTER_LOG_FILE, frameQLParser.MASTER_LOG_POS, frameQLParser.MASTER_PASSWORD, frameQLParser.MASTER_PORT, frameQLParser.MASTER_RETRY_COUNT, frameQLParser.MASTER_SSL, frameQLParser.MASTER_SSL_CA, frameQLParser.MASTER_SSL_CAPATH, frameQLParser.MASTER_SSL_CERT, frameQLParser.MASTER_SSL_CIPHER, frameQLParser.MASTER_SSL_CRL, frameQLParser.MASTER_SSL_CRLPATH, frameQLParser.MASTER_SSL_KEY, frameQLParser.MASTER_TLS_VERSION, frameQLParser.MASTER_USER, frameQLParser.MAX_CONNECTIONS_PER_HOUR, frameQLParser.MAX_QUERIES_PER_HOUR, frameQLParser.MAX_ROWS, frameQLParser.MAX_SIZE, frameQLParser.MAX_UPDATES_PER_HOUR, frameQLParser.MAX_USER_CONNECTIONS, frameQLParser.MEDIUM, frameQLParser.MERGE, frameQLParser.MID, frameQLParser.MIGRATE, frameQLParser.MIN_ROWS, frameQLParser.MODIFY, frameQLParser.MUTEX, frameQLParser.MYSQL, frameQLParser.NAME, frameQLParser.NAMES, frameQLParser.NCHAR, frameQLParser.NEVER, frameQLParser.NO, frameQLParser.NODEGROUP, frameQLParser.NONE, frameQLParser.OFFLINE, frameQLParser.OFFSET, frameQLParser.OJ, frameQLParser.OLD_PASSWORD, frameQLParser.ONE, frameQLParser.ONLINE, frameQLParser.ONLY, frameQLParser.OPTIMIZER_COSTS, frameQLParser.OPTIONS, frameQLParser.OWNER, frameQLParser.PACK_KEYS, frameQLParser.PAGE, frameQLParser.PARSER, frameQLParser.PARTIAL, frameQLParser.PARTITIONING, frameQLParser.PARTITIONS, frameQLParser.PASSWORD, frameQLParser.PHASE, frameQLParser.PLUGIN_DIR, frameQLParser.PLUGINS, frameQLParser.PORT, frameQLParser.PRECEDES, frameQLParser.PREPARE, frameQLParser.PRESERVE, frameQLParser.PREV, frameQLParser.PROCESSLIST, frameQLParser.PROFILE, frameQLParser.PROFILES, frameQLParser.PROXY, frameQLParser.QUERY, frameQLParser.QUICK, frameQLParser.REBUILD, frameQLParser.RECOVER, frameQLParser.REDO_BUFFER_SIZE, frameQLParser.REDUNDANT, frameQLParser.RELAY_LOG_FILE, frameQLParser.RELAY_LOG_POS, frameQLParser.RELAYLOG, frameQLParser.REMOVE, frameQLParser.REORGANIZE, frameQLParser.REPAIR, frameQLParser.REPLICATE_DO_DB, frameQLParser.REPLICATE_DO_TABLE, frameQLParser.REPLICATE_IGNORE_DB, frameQLParser.REPLICATE_IGNORE_TABLE, frameQLParser.REPLICATE_REWRITE_DB, frameQLParser.REPLICATE_WILD_DO_TABLE, frameQLParser.REPLICATE_WILD_IGNORE_TABLE, frameQLParser.REPLICATION, frameQLParser.RESUME, frameQLParser.RETURNS, frameQLParser.ROLLBACK, frameQLParser.ROLLUP, frameQLParser.ROTATE, frameQLParser.ROW, frameQLParser.ROWS, frameQLParser.ROW_FORMAT, frameQLParser.SAVEPOINT, frameQLParser.SCHEDULE, frameQLParser.SECURITY, frameQLParser.SERVER, frameQLParser.SESSION, frameQLParser.SHARE, frameQLParser.SHARED, frameQLParser.SIGNED, frameQLParser.SIMPLE, frameQLParser.SLAVE, frameQLParser.SNAPSHOT, frameQLParser.SOCKET, frameQLParser.SOME, frameQLParser.SOUNDS, frameQLParser.SOURCE, frameQLParser.SQL_AFTER_GTIDS, frameQLParser.SQL_AFTER_MTS_GAPS, frameQLParser.SQL_BEFORE_GTIDS, frameQLParser.SQL_BUFFER_RESULT, frameQLParser.SQL_CACHE, frameQLParser.SQL_NO_CACHE, frameQLParser.SQL_THREAD, frameQLParser.START, frameQLParser.STARTS, frameQLParser.STATS_AUTO_RECALC, frameQLParser.STATS_PERSISTENT, frameQLParser.STATS_SAMPLE_PAGES, frameQLParser.STATUS, frameQLParser.STOP, frameQLParser.STORAGE, frameQLParser.STRING, frameQLParser.SUBJECT, frameQLParser.SUBPARTITION, frameQLParser.SUBPARTITIONS, frameQLParser.SUSPEND, frameQLParser.SWAPS, frameQLParser.SWITCHES, frameQLParser.TABLESPACE, frameQLParser.TEMPORARY, frameQLParser.TEMPTABLE, frameQLParser.THAN, frameQLParser.TRANSACTION, frameQLParser.TRUNCATE, frameQLParser.UNDEFINED, frameQLParser.UNDOFILE, frameQLParser.UNDO_BUFFER_SIZE, frameQLParser.UNKNOWN, frameQLParser.UPGRADE, frameQLParser.USER, frameQLParser.VALIDATION, frameQLParser.VALUE, frameQLParser.VARIABLES, frameQLParser.VIEW, frameQLParser.WAIT, frameQLParser.WARNINGS, frameQLParser.WITHOUT, frameQLParser.WORK, frameQLParser.WRAPPER, frameQLParser.X509, frameQLParser.XA, frameQLParser.XML, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.TABLES, frameQLParser.ROUTINE, frameQLParser.EXECUTE, frameQLParser.FILE, frameQLParser.PROCESS, frameQLParser.RELOAD, frameQLParser.SHUTDOWN, frameQLParser.SUPER, frameQLParser.PRIVILEGES, frameQLParser.ARMSCII8, frameQLParser.ASCII, frameQLParser.BIG5, frameQLParser.CP1250, frameQLParser.CP1251, frameQLParser.CP1256, frameQLParser.CP1257, frameQLParser.CP850, frameQLParser.CP852, frameQLParser.CP866, frameQLParser.CP932, frameQLParser.DEC8, frameQLParser.EUCJPMS, frameQLParser.EUCKR, frameQLParser.GB2312, frameQLParser.GBK, frameQLParser.GEOSTD8, frameQLParser.GREEK, frameQLParser.HEBREW, frameQLParser.HP8, frameQLParser.KEYBCS2, frameQLParser.KOI8R, frameQLParser.KOI8U, frameQLParser.LATIN1, frameQLParser.LATIN2, frameQLParser.LATIN5, frameQLParser.LATIN7, frameQLParser.MACCE, frameQLParser.MACROMAN, frameQLParser.SJIS, frameQLParser.SWE7, frameQLParser.TIS620, frameQLParser.UCS2, frameQLParser.UJIS, frameQLParser.UTF16, frameQLParser.UTF16LE, frameQLParser.UTF32, frameQLParser.UTF8, frameQLParser.UTF8MB3, frameQLParser.UTF8MB4, frameQLParser.ARCHIVE, frameQLParser.BLACKHOLE, frameQLParser.CSV, frameQLParser.FEDERATED, frameQLParser.INNODB, frameQLParser.MEMORY, frameQLParser.MRG_MYISAM, frameQLParser.MYISAM, frameQLParser.NDB, frameQLParser.NDBCLUSTER, frameQLParser.PERFOMANCE_SCHEMA, frameQLParser.REPEATABLE, frameQLParser.COMMITTED, frameQLParser.UNCOMMITTED, frameQLParser.SERIALIZABLE, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION, frameQLParser.PLUS, frameQLParser.MINUS, frameQLParser.EXCLAMATION_SYMBOL, frameQLParser.BIT_NOT_OP, frameQLParser.LR_BRACKET, frameQLParser.ZERO_DECIMAL, frameQLParser.ONE_DECIMAL, frameQLParser.TWO_DECIMAL, frameQLParser.CHARSET_REVERSE_QOUTE_STRING, frameQLParser.START_NATIONAL_STRING_LITERAL, frameQLParser.STRING_LITERAL, frameQLParser.DECIMAL_LITERAL, frameQLParser.HEXADECIMAL_LITERAL, frameQLParser.REAL_LITERAL, frameQLParser.NULL_SPEC_LITERAL, frameQLParser.BIT_STRING, frameQLParser.STRING_CHARSET_NAME, frameQLParser.ID, frameQLParser.REVERSE_QUOTE_ID, frameQLParser.LOCAL_ID, frameQLParser.GLOBAL_ID]:
                    self.state = 5785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==frameQLParser.ALL:
                        self.state = 5784
                        localctx.aggregator = self.match(frameQLParser.ALL)


                    self.state = 5787
                    self.functionArg()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5790
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5791
                self.match(frameQLParser.COUNT)
                self.state = 5792
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5793
                localctx.aggregator = self.match(frameQLParser.DISTINCT)
                self.state = 5794
                self.functionArgs()
                self.state = 5795
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5797
                self.match(frameQLParser.FCOUNT)
                self.state = 5798
                self.match(frameQLParser.LR_BRACKET)

                self.state = 5799
                localctx.starArg = self.match(frameQLParser.STAR)
                self.state = 5800
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5801
                _la = self._input.LA(1)
                if not(((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & ((1 << (frameQLParser.BIT_AND - 215)) | (1 << (frameQLParser.BIT_OR - 215)) | (1 << (frameQLParser.BIT_XOR - 215)) | (1 << (frameQLParser.STD - 215)) | (1 << (frameQLParser.STDDEV - 215)) | (1 << (frameQLParser.STDDEV_POP - 215)) | (1 << (frameQLParser.STDDEV_SAMP - 215)) | (1 << (frameQLParser.VAR_POP - 215)) | (1 << (frameQLParser.VAR_SAMP - 215)) | (1 << (frameQLParser.VARIANCE - 215)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5802
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ALL:
                    self.state = 5803
                    localctx.aggregator = self.match(frameQLParser.ALL)


                self.state = 5806
                self.functionArg()
                self.state = 5807
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5809
                self.match(frameQLParser.GROUP_CONCAT)
                self.state = 5810
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.DISTINCT:
                    self.state = 5811
                    localctx.aggregator = self.match(frameQLParser.DISTINCT)


                self.state = 5814
                self.functionArgs()
                self.state = 5825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.ORDER:
                    self.state = 5815
                    self.match(frameQLParser.ORDER)
                    self.state = 5816
                    self.match(frameQLParser.BY)
                    self.state = 5817
                    self.orderByExpression()
                    self.state = 5822
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==frameQLParser.COMMA:
                        self.state = 5818
                        self.match(frameQLParser.COMMA)
                        self.state = 5819
                        self.orderByExpression()
                        self.state = 5824
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.SEPARATOR:
                    self.state = 5827
                    self.match(frameQLParser.SEPARATOR)
                    self.state = 5828
                    localctx.separator = self.match(frameQLParser.STRING_LITERAL)


                self.state = 5831
                self.match(frameQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarFunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionNameBase(self):
            return self.getTypedRuleContext(frameQLParser.FunctionNameBaseContext,0)


        def ASCII(self):
            return self.getToken(frameQLParser.ASCII, 0)

        def CURDATE(self):
            return self.getToken(frameQLParser.CURDATE, 0)

        def CURRENT_DATE(self):
            return self.getToken(frameQLParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(frameQLParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(frameQLParser.CURRENT_TIMESTAMP, 0)

        def CURTIME(self):
            return self.getToken(frameQLParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(frameQLParser.DATE_ADD, 0)

        def DATE_SUB(self):
            return self.getToken(frameQLParser.DATE_SUB, 0)

        def IF(self):
            return self.getToken(frameQLParser.IF, 0)

        def INSERT(self):
            return self.getToken(frameQLParser.INSERT, 0)

        def LOCALTIME(self):
            return self.getToken(frameQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(frameQLParser.LOCALTIMESTAMP, 0)

        def MID(self):
            return self.getToken(frameQLParser.MID, 0)

        def NOW(self):
            return self.getToken(frameQLParser.NOW, 0)

        def REPLACE(self):
            return self.getToken(frameQLParser.REPLACE, 0)

        def SUBSTR(self):
            return self.getToken(frameQLParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(frameQLParser.SUBSTRING, 0)

        def SYSDATE(self):
            return self.getToken(frameQLParser.SYSDATE, 0)

        def TRIM(self):
            return self.getToken(frameQLParser.TRIM, 0)

        def UTC_DATE(self):
            return self.getToken(frameQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(frameQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(frameQLParser.UTC_TIMESTAMP, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_scalarFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionName" ):
                listener.enterScalarFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionName" ):
                listener.exitScalarFunctionName(self)




    def scalarFunctionName(self):

        localctx = frameQLParser.ScalarFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_scalarFunctionName)
        try:
            self.state = 5858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.DATABASE, frameQLParser.LEFT, frameQLParser.RIGHT, frameQLParser.DATE, frameQLParser.TIME, frameQLParser.TIMESTAMP, frameQLParser.YEAR, frameQLParser.COUNT, frameQLParser.POSITION, frameQLParser.QUARTER, frameQLParser.MONTH, frameQLParser.DAY, frameQLParser.HOUR, frameQLParser.MINUTE, frameQLParser.WEEK, frameQLParser.SECOND, frameQLParser.MICROSECOND, frameQLParser.GEOMETRYCOLLECTION, frameQLParser.LINESTRING, frameQLParser.MULTILINESTRING, frameQLParser.MULTIPOINT, frameQLParser.MULTIPOLYGON, frameQLParser.POINT, frameQLParser.POLYGON, frameQLParser.ABS, frameQLParser.ACOS, frameQLParser.ADDDATE, frameQLParser.ADDTIME, frameQLParser.AES_DECRYPT, frameQLParser.AES_ENCRYPT, frameQLParser.AREA, frameQLParser.ASBINARY, frameQLParser.ASIN, frameQLParser.ASTEXT, frameQLParser.ASWKB, frameQLParser.ASWKT, frameQLParser.ASYMMETRIC_DECRYPT, frameQLParser.ASYMMETRIC_DERIVE, frameQLParser.ASYMMETRIC_ENCRYPT, frameQLParser.ASYMMETRIC_SIGN, frameQLParser.ASYMMETRIC_VERIFY, frameQLParser.ATAN, frameQLParser.ATAN2, frameQLParser.BENCHMARK, frameQLParser.BIN, frameQLParser.BIT_COUNT, frameQLParser.BIT_LENGTH, frameQLParser.BUFFER, frameQLParser.CEIL, frameQLParser.CEILING, frameQLParser.CENTROID, frameQLParser.CHARACTER_LENGTH, frameQLParser.CHARSET, frameQLParser.CHAR_LENGTH, frameQLParser.COERCIBILITY, frameQLParser.COLLATION, frameQLParser.COMPRESS, frameQLParser.CONCAT, frameQLParser.CONCAT_WS, frameQLParser.CONNECTION_ID, frameQLParser.CONV, frameQLParser.CONVERT_TZ, frameQLParser.COS, frameQLParser.COT, frameQLParser.CRC32, frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, frameQLParser.CREATE_DH_PARAMETERS, frameQLParser.CREATE_DIGEST, frameQLParser.CROSSES, frameQLParser.DATEDIFF, frameQLParser.DATE_FORMAT, frameQLParser.DAYNAME, frameQLParser.DAYOFMONTH, frameQLParser.DAYOFWEEK, frameQLParser.DAYOFYEAR, frameQLParser.DECODE, frameQLParser.DEGREES, frameQLParser.DES_DECRYPT, frameQLParser.DES_ENCRYPT, frameQLParser.DIMENSION, frameQLParser.DISJOINT, frameQLParser.ELT, frameQLParser.ENCODE, frameQLParser.ENCRYPT, frameQLParser.ENDPOINT, frameQLParser.ENVELOPE, frameQLParser.EQUALS, frameQLParser.EXP, frameQLParser.EXPORT_SET, frameQLParser.EXTERIORRING, frameQLParser.EXTRACTVALUE, frameQLParser.FIELD, frameQLParser.FIND_IN_SET, frameQLParser.FLOOR, frameQLParser.FORMAT, frameQLParser.FOUND_ROWS, frameQLParser.FROM_BASE64, frameQLParser.FROM_DAYS, frameQLParser.FROM_UNIXTIME, frameQLParser.GEOMCOLLFROMTEXT, frameQLParser.GEOMCOLLFROMWKB, frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.GEOMETRYCOLLECTIONFROMWKB, frameQLParser.GEOMETRYFROMTEXT, frameQLParser.GEOMETRYFROMWKB, frameQLParser.GEOMETRYN, frameQLParser.GEOMETRYTYPE, frameQLParser.GEOMFROMTEXT, frameQLParser.GEOMFROMWKB, frameQLParser.GET_FORMAT, frameQLParser.GET_LOCK, frameQLParser.GLENGTH, frameQLParser.GREATEST, frameQLParser.GTID_SUBSET, frameQLParser.GTID_SUBTRACT, frameQLParser.HEX, frameQLParser.IFNULL, frameQLParser.INET6_ATON, frameQLParser.INET6_NTOA, frameQLParser.INET_ATON, frameQLParser.INET_NTOA, frameQLParser.INSTR, frameQLParser.INTERIORRINGN, frameQLParser.INTERSECTS, frameQLParser.ISCLOSED, frameQLParser.ISEMPTY, frameQLParser.ISNULL, frameQLParser.ISSIMPLE, frameQLParser.IS_FREE_LOCK, frameQLParser.IS_IPV4, frameQLParser.IS_IPV4_COMPAT, frameQLParser.IS_IPV4_MAPPED, frameQLParser.IS_IPV6, frameQLParser.IS_USED_LOCK, frameQLParser.LAST_INSERT_ID, frameQLParser.LCASE, frameQLParser.LEAST, frameQLParser.LENGTH, frameQLParser.LINEFROMTEXT, frameQLParser.LINEFROMWKB, frameQLParser.LINESTRINGFROMTEXT, frameQLParser.LINESTRINGFROMWKB, frameQLParser.LN, frameQLParser.LOAD_FILE, frameQLParser.LOCATE, frameQLParser.LOG, frameQLParser.LOG10, frameQLParser.LOG2, frameQLParser.LOWER, frameQLParser.LPAD, frameQLParser.LTRIM, frameQLParser.MAKEDATE, frameQLParser.MAKETIME, frameQLParser.MAKE_SET, frameQLParser.MASTER_POS_WAIT, frameQLParser.MBRCONTAINS, frameQLParser.MBRDISJOINT, frameQLParser.MBREQUAL, frameQLParser.MBRINTERSECTS, frameQLParser.MBROVERLAPS, frameQLParser.MBRTOUCHES, frameQLParser.MBRWITHIN, frameQLParser.MD5, frameQLParser.MLINEFROMTEXT, frameQLParser.MLINEFROMWKB, frameQLParser.MONTHNAME, frameQLParser.MPOINTFROMTEXT, frameQLParser.MPOINTFROMWKB, frameQLParser.MPOLYFROMTEXT, frameQLParser.MPOLYFROMWKB, frameQLParser.MULTILINESTRINGFROMTEXT, frameQLParser.MULTILINESTRINGFROMWKB, frameQLParser.MULTIPOINTFROMTEXT, frameQLParser.MULTIPOINTFROMWKB, frameQLParser.MULTIPOLYGONFROMTEXT, frameQLParser.MULTIPOLYGONFROMWKB, frameQLParser.NAME_CONST, frameQLParser.NULLIF, frameQLParser.NUMGEOMETRIES, frameQLParser.NUMINTERIORRINGS, frameQLParser.NUMPOINTS, frameQLParser.OCT, frameQLParser.OCTET_LENGTH, frameQLParser.ORD, frameQLParser.OVERLAPS, frameQLParser.PERIOD_ADD, frameQLParser.PERIOD_DIFF, frameQLParser.PI, frameQLParser.POINTFROMTEXT, frameQLParser.POINTFROMWKB, frameQLParser.POINTN, frameQLParser.POLYFROMTEXT, frameQLParser.POLYFROMWKB, frameQLParser.POLYGONFROMTEXT, frameQLParser.POLYGONFROMWKB, frameQLParser.POW, frameQLParser.POWER, frameQLParser.QUOTE, frameQLParser.RADIANS, frameQLParser.RAND, frameQLParser.RANDOM_BYTES, frameQLParser.RELEASE_LOCK, frameQLParser.REVERSE, frameQLParser.ROUND, frameQLParser.ROW_COUNT, frameQLParser.RPAD, frameQLParser.RTRIM, frameQLParser.SEC_TO_TIME, frameQLParser.SESSION_USER, frameQLParser.SHA, frameQLParser.SHA1, frameQLParser.SHA2, frameQLParser.SIGN, frameQLParser.SIN, frameQLParser.SLEEP, frameQLParser.SOUNDEX, frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, frameQLParser.SQRT, frameQLParser.SRID, frameQLParser.STARTPOINT, frameQLParser.STRCMP, frameQLParser.STR_TO_DATE, frameQLParser.ST_AREA, frameQLParser.ST_ASBINARY, frameQLParser.ST_ASTEXT, frameQLParser.ST_ASWKB, frameQLParser.ST_ASWKT, frameQLParser.ST_BUFFER, frameQLParser.ST_CENTROID, frameQLParser.ST_CONTAINS, frameQLParser.ST_CROSSES, frameQLParser.ST_DIFFERENCE, frameQLParser.ST_DIMENSION, frameQLParser.ST_DISJOINT, frameQLParser.ST_DISTANCE, frameQLParser.ST_ENDPOINT, frameQLParser.ST_ENVELOPE, frameQLParser.ST_EQUALS, frameQLParser.ST_EXTERIORRING, frameQLParser.ST_GEOMCOLLFROMTEXT, frameQLParser.ST_GEOMCOLLFROMTXT, frameQLParser.ST_GEOMCOLLFROMWKB, frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, frameQLParser.ST_GEOMETRYFROMTEXT, frameQLParser.ST_GEOMETRYFROMWKB, frameQLParser.ST_GEOMETRYN, frameQLParser.ST_GEOMETRYTYPE, frameQLParser.ST_GEOMFROMTEXT, frameQLParser.ST_GEOMFROMWKB, frameQLParser.ST_INTERIORRINGN, frameQLParser.ST_INTERSECTION, frameQLParser.ST_INTERSECTS, frameQLParser.ST_ISCLOSED, frameQLParser.ST_ISEMPTY, frameQLParser.ST_ISSIMPLE, frameQLParser.ST_LINEFROMTEXT, frameQLParser.ST_LINEFROMWKB, frameQLParser.ST_LINESTRINGFROMTEXT, frameQLParser.ST_LINESTRINGFROMWKB, frameQLParser.ST_NUMGEOMETRIES, frameQLParser.ST_NUMINTERIORRING, frameQLParser.ST_NUMINTERIORRINGS, frameQLParser.ST_NUMPOINTS, frameQLParser.ST_OVERLAPS, frameQLParser.ST_POINTFROMTEXT, frameQLParser.ST_POINTFROMWKB, frameQLParser.ST_POINTN, frameQLParser.ST_POLYFROMTEXT, frameQLParser.ST_POLYFROMWKB, frameQLParser.ST_POLYGONFROMTEXT, frameQLParser.ST_POLYGONFROMWKB, frameQLParser.ST_SRID, frameQLParser.ST_STARTPOINT, frameQLParser.ST_SYMDIFFERENCE, frameQLParser.ST_TOUCHES, frameQLParser.ST_UNION, frameQLParser.ST_WITHIN, frameQLParser.ST_X, frameQLParser.ST_Y, frameQLParser.SUBDATE, frameQLParser.SUBSTRING_INDEX, frameQLParser.SUBTIME, frameQLParser.SYSTEM_USER, frameQLParser.TAN, frameQLParser.TIMEDIFF, frameQLParser.TIMESTAMPADD, frameQLParser.TIMESTAMPDIFF, frameQLParser.TIME_FORMAT, frameQLParser.TIME_TO_SEC, frameQLParser.TOUCHES, frameQLParser.TO_BASE64, frameQLParser.TO_DAYS, frameQLParser.TO_SECONDS, frameQLParser.UCASE, frameQLParser.UNCOMPRESS, frameQLParser.UNCOMPRESSED_LENGTH, frameQLParser.UNHEX, frameQLParser.UNIX_TIMESTAMP, frameQLParser.UPDATEXML, frameQLParser.UPPER, frameQLParser.UUID, frameQLParser.UUID_SHORT, frameQLParser.VALIDATE_PASSWORD_STRENGTH, frameQLParser.VERSION, frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, frameQLParser.WEEKDAY, frameQLParser.WEEKOFYEAR, frameQLParser.WEIGHT_STRING, frameQLParser.WITHIN, frameQLParser.YEARWEEK, frameQLParser.Y_FUNCTION, frameQLParser.X_FUNCTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5835
                self.functionNameBase()
                pass
            elif token in [frameQLParser.ASCII]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5836
                self.match(frameQLParser.ASCII)
                pass
            elif token in [frameQLParser.CURDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5837
                self.match(frameQLParser.CURDATE)
                pass
            elif token in [frameQLParser.CURRENT_DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5838
                self.match(frameQLParser.CURRENT_DATE)
                pass
            elif token in [frameQLParser.CURRENT_TIME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5839
                self.match(frameQLParser.CURRENT_TIME)
                pass
            elif token in [frameQLParser.CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5840
                self.match(frameQLParser.CURRENT_TIMESTAMP)
                pass
            elif token in [frameQLParser.CURTIME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5841
                self.match(frameQLParser.CURTIME)
                pass
            elif token in [frameQLParser.DATE_ADD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5842
                self.match(frameQLParser.DATE_ADD)
                pass
            elif token in [frameQLParser.DATE_SUB]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5843
                self.match(frameQLParser.DATE_SUB)
                pass
            elif token in [frameQLParser.IF]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5844
                self.match(frameQLParser.IF)
                pass
            elif token in [frameQLParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5845
                self.match(frameQLParser.INSERT)
                pass
            elif token in [frameQLParser.LOCALTIME]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5846
                self.match(frameQLParser.LOCALTIME)
                pass
            elif token in [frameQLParser.LOCALTIMESTAMP]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5847
                self.match(frameQLParser.LOCALTIMESTAMP)
                pass
            elif token in [frameQLParser.MID]:
                self.enterOuterAlt(localctx, 14)
                self.state = 5848
                self.match(frameQLParser.MID)
                pass
            elif token in [frameQLParser.NOW]:
                self.enterOuterAlt(localctx, 15)
                self.state = 5849
                self.match(frameQLParser.NOW)
                pass
            elif token in [frameQLParser.REPLACE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 5850
                self.match(frameQLParser.REPLACE)
                pass
            elif token in [frameQLParser.SUBSTR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 5851
                self.match(frameQLParser.SUBSTR)
                pass
            elif token in [frameQLParser.SUBSTRING]:
                self.enterOuterAlt(localctx, 18)
                self.state = 5852
                self.match(frameQLParser.SUBSTRING)
                pass
            elif token in [frameQLParser.SYSDATE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 5853
                self.match(frameQLParser.SYSDATE)
                pass
            elif token in [frameQLParser.TRIM]:
                self.enterOuterAlt(localctx, 20)
                self.state = 5854
                self.match(frameQLParser.TRIM)
                pass
            elif token in [frameQLParser.UTC_DATE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 5855
                self.match(frameQLParser.UTC_DATE)
                pass
            elif token in [frameQLParser.UTC_TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 5856
                self.match(frameQLParser.UTC_TIME)
                pass
            elif token in [frameQLParser.UTC_TIMESTAMP]:
                self.enterOuterAlt(localctx, 23)
                self.state = 5857
                self.match(frameQLParser.UTC_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordFunctionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None # Token

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(frameQLParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def PASSWORD(self):
            return self.getToken(frameQLParser.PASSWORD, 0)

        def OLD_PASSWORD(self):
            return self.getToken(frameQLParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_passwordFunctionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionClause" ):
                listener.enterPasswordFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionClause" ):
                listener.exitPasswordFunctionClause(self)




    def passwordFunctionClause(self):

        localctx = frameQLParser.PasswordFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_passwordFunctionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5860
            localctx.functionName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==frameQLParser.OLD_PASSWORD or _la==frameQLParser.PASSWORD):
                localctx.functionName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5861
            self.match(frameQLParser.LR_BRACKET)
            self.state = 5862
            self.functionArg()
            self.state = 5863
            self.match(frameQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ConstantContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(frameQLParser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)




    def functionArgs(self):

        localctx = frameQLParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,852,self._ctx)
            if la_ == 1:
                self.state = 5865
                self.constant()
                pass

            elif la_ == 2:
                self.state = 5866
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 5867
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 5868
                self.expression(0)
                pass


            self.state = 5880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==frameQLParser.COMMA:
                self.state = 5871
                self.match(frameQLParser.COMMA)
                self.state = 5876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
                if la_ == 1:
                    self.state = 5872
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 5873
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 5874
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 5875
                    self.expression(0)
                    pass


                self.state = 5882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(frameQLParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(frameQLParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(frameQLParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return frameQLParser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)




    def functionArg(self):

        localctx = frameQLParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_functionArg)
        try:
            self.state = 5887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,855,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5883
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5884
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5885
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5886
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(frameQLParser.PredicateContext,0)

        def IS(self):
            return self.getToken(frameQLParser.IS, 0)
        def TRUE(self):
            return self.getToken(frameQLParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(frameQLParser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(frameQLParser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)
        def EXCLAMATION_SYMBOL(self):
            return self.getToken(frameQLParser.EXCLAMATION_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(frameQLParser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(frameQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = frameQLParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 590
        self.enterRecursionRule(localctx, 590, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,857,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5890
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.NOT or _la==frameQLParser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5891
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = frameQLParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5892
                self.predicate(0)
                self.state = 5893
                self.match(frameQLParser.IS)
                self.state = 5895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==frameQLParser.NOT:
                    self.state = 5894
                    self.match(frameQLParser.NOT)


                self.state = 5897
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==frameQLParser.FALSE or _la==frameQLParser.TRUE or _la==frameQLParser.UNKNOWN):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = frameQLParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5899
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,858,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = frameQLParser.LogicalExpressionContext(self, frameQLParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 5902
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 5903
                    self.logicalOperator()
                    self.state = 5904
                    self.expression(4) 
                self.state = 5910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,858,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SoundsLikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PredicateContext,i)

        def SOUNDS(self):
            return self.getToken(frameQLParser.SOUNDS, 0)
        def LIKE(self):
            return self.getToken(frameQLParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoundsLikePredicate" ):
                listener.enterSoundsLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoundsLikePredicate" ):
                listener.exitSoundsLikePredicate(self)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(frameQLParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(frameQLParser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(frameQLParser.PredicateContext,0)

        def IN(self):
            return self.getToken(frameQLParser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)


    class SubqueryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(frameQLParser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(frameQLParser.ComparisonOperatorContext,0)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def ALL(self):
            return self.getToken(frameQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(frameQLParser.ANY, 0)
        def SOME(self):
            return self.getToken(frameQLParser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparasionPredicate" ):
                listener.enterSubqueryComparasionPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparasionPredicate" ):
                listener.exitSubqueryComparasionPredicate(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(frameQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(frameQLParser.AND, 0)
        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)


    class BinaryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(frameQLParser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparasionPredicate" ):
                listener.enterBinaryComparasionPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparasionPredicate" ):
                listener.exitBinaryComparasionPredicate(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(frameQLParser.PredicateContext,0)

        def IS(self):
            return self.getToken(frameQLParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(frameQLParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(frameQLParser.LIKE, 0)
        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(frameQLParser.ESCAPE, 0)
        def STRING_LITERAL(self):
            return self.getToken(frameQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)


    class RegexpPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.PredicateContext
            super().__init__(parser)
            self.regex = None # Token
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(frameQLParser.PredicateContext,i)

        def REGEXP(self):
            return self.getToken(frameQLParser.REGEXP, 0)
        def RLIKE(self):
            return self.getToken(frameQLParser.RLIKE, 0)
        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexpPredicate" ):
                listener.enterRegexpPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexpPredicate" ):
                listener.exitRegexpPredicate(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = frameQLParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 592
        self.enterRecursionRule(localctx, 592, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = frameQLParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 5914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,859,self._ctx)
            if la_ == 1:
                self.state = 5912
                self.match(frameQLParser.LOCAL_ID)
                self.state = 5913
                self.match(frameQLParser.VAR_ASSIGN)


            self.state = 5916
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 5975
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,867,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5973
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,866,self._ctx)
                    if la_ == 1:
                        localctx = frameQLParser.BinaryComparasionPredicateContext(self, frameQLParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5918
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 5919
                        self.comparisonOperator()
                        self.state = 5920
                        localctx.right = self.predicate(8)
                        pass

                    elif la_ == 2:
                        localctx = frameQLParser.BetweenPredicateContext(self, frameQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5922
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 5924
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==frameQLParser.NOT:
                            self.state = 5923
                            self.match(frameQLParser.NOT)


                        self.state = 5926
                        self.match(frameQLParser.BETWEEN)
                        self.state = 5927
                        self.predicate(0)
                        self.state = 5928
                        self.match(frameQLParser.AND)
                        self.state = 5929
                        self.predicate(6)
                        pass

                    elif la_ == 3:
                        localctx = frameQLParser.SoundsLikePredicateContext(self, frameQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5931
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 5932
                        self.match(frameQLParser.SOUNDS)
                        self.state = 5933
                        self.match(frameQLParser.LIKE)
                        self.state = 5934
                        self.predicate(5)
                        pass

                    elif la_ == 4:
                        localctx = frameQLParser.RegexpPredicateContext(self, frameQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5935
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5937
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==frameQLParser.NOT:
                            self.state = 5936
                            self.match(frameQLParser.NOT)


                        self.state = 5939
                        localctx.regex = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==frameQLParser.REGEXP or _la==frameQLParser.RLIKE):
                            localctx.regex = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5940
                        self.predicate(3)
                        pass

                    elif la_ == 5:
                        localctx = frameQLParser.InPredicateContext(self, frameQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5941
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 5943
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==frameQLParser.NOT:
                            self.state = 5942
                            self.match(frameQLParser.NOT)


                        self.state = 5945
                        self.match(frameQLParser.IN)
                        self.state = 5946
                        self.match(frameQLParser.LR_BRACKET)
                        self.state = 5949
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,863,self._ctx)
                        if la_ == 1:
                            self.state = 5947
                            self.selectStatement()
                            pass

                        elif la_ == 2:
                            self.state = 5948
                            self.expressions()
                            pass


                        self.state = 5951
                        self.match(frameQLParser.RR_BRACKET)
                        pass

                    elif la_ == 6:
                        localctx = frameQLParser.IsNullPredicateContext(self, frameQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5953
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 5954
                        self.match(frameQLParser.IS)
                        self.state = 5955
                        self.nullNotnull()
                        pass

                    elif la_ == 7:
                        localctx = frameQLParser.SubqueryComparasionPredicateContext(self, frameQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5956
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 5957
                        self.comparisonOperator()
                        self.state = 5958
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==frameQLParser.ALL or _la==frameQLParser.ANY or _la==frameQLParser.SOME):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5959
                        self.match(frameQLParser.LR_BRACKET)
                        self.state = 5960
                        self.selectStatement()
                        self.state = 5961
                        self.match(frameQLParser.RR_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = frameQLParser.LikePredicateContext(self, frameQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5963
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5965
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==frameQLParser.NOT:
                            self.state = 5964
                            self.match(frameQLParser.NOT)


                        self.state = 5967
                        self.match(frameQLParser.LIKE)
                        self.state = 5968
                        self.predicate(0)
                        self.state = 5971
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,865,self._ctx)
                        if la_ == 1:
                            self.state = 5969
                            self.match(frameQLParser.ESCAPE)
                            self.state = 5970
                            self.match(frameQLParser.STRING_LITERAL)


                        pass

             
                self.state = 5977
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,867,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return frameQLParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(frameQLParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)


    class CollateExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionAtomContext,0)

        def COLLATE(self):
            return self.getToken(frameQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(frameQLParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateExpressionAtom" ):
                listener.enterCollateExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateExpressionAtom" ):
                listener.exitCollateExpressionAtom(self)


    class SubqueryExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpessionAtom" ):
                listener.enterSubqueryExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpessionAtom" ):
                listener.exitSubqueryExpessionAtom(self)


    class MysqlVariableExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mysqlVariable(self):
            return self.getTypedRuleContext(frameQLParser.MysqlVariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariableExpressionAtom" ):
                listener.enterMysqlVariableExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariableExpressionAtom" ):
                listener.exitMysqlVariableExpressionAtom(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)


    class NestedRowExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(frameQLParser.ROW, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.COMMA)
            else:
                return self.getToken(frameQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedRowExpressionAtom" ):
                listener.enterNestedRowExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedRowExpressionAtom" ):
                listener.exitNestedRowExpressionAtom(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(frameQLParser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)


    class IntervalExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(frameQLParser.INTERVAL, 0)
        def expression(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionContext,0)

        def intervalType(self):
            return self.getTypedRuleContext(frameQLParser.IntervalTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpressionAtom" ):
                listener.enterIntervalExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpressionAtom" ):
                listener.exitIntervalExpressionAtom(self)


    class ExistsExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(frameQLParser.EXISTS, 0)
        def LR_BRACKET(self):
            return self.getToken(frameQLParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(frameQLParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(frameQLParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpessionAtom" ):
                listener.enterExistsExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpessionAtom" ):
                listener.exitExistsExpessionAtom(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(frameQLParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(frameQLParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(frameQLParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(frameQLParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpressionAtom" ):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpressionAtom" ):
                listener.exitBinaryExpressionAtom(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(frameQLParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a frameQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(frameQLParser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(frameQLParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(frameQLParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = frameQLParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 594
        self.enterRecursionRule(localctx, 594, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,870,self._ctx)
            if la_ == 1:
                localctx = frameQLParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5979
                self.constant()
                pass

            elif la_ == 2:
                localctx = frameQLParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5980
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = frameQLParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5981
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = frameQLParser.MysqlVariableExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5982
                self.mysqlVariable()
                pass

            elif la_ == 5:
                localctx = frameQLParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5983
                self.unaryOperator()
                self.state = 5984
                self.expressionAtom(9)
                pass

            elif la_ == 6:
                localctx = frameQLParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5986
                self.match(frameQLParser.BINARY)
                self.state = 5987
                self.expressionAtom(8)
                pass

            elif la_ == 7:
                localctx = frameQLParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5988
                self.match(frameQLParser.LR_BRACKET)
                self.state = 5989
                self.expression(0)
                self.state = 5994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==frameQLParser.COMMA:
                    self.state = 5990
                    self.match(frameQLParser.COMMA)
                    self.state = 5991
                    self.expression(0)
                    self.state = 5996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5997
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = frameQLParser.NestedRowExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5999
                self.match(frameQLParser.ROW)
                self.state = 6000
                self.match(frameQLParser.LR_BRACKET)
                self.state = 6001
                self.expression(0)
                self.state = 6004 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6002
                    self.match(frameQLParser.COMMA)
                    self.state = 6003
                    self.expression(0)
                    self.state = 6006 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==frameQLParser.COMMA):
                        break

                self.state = 6008
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = frameQLParser.ExistsExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6010
                self.match(frameQLParser.EXISTS)
                self.state = 6011
                self.match(frameQLParser.LR_BRACKET)
                self.state = 6012
                self.selectStatement()
                self.state = 6013
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = frameQLParser.SubqueryExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6015
                self.match(frameQLParser.LR_BRACKET)
                self.state = 6016
                self.selectStatement()
                self.state = 6017
                self.match(frameQLParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = frameQLParser.IntervalExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6019
                self.match(frameQLParser.INTERVAL)
                self.state = 6020
                self.expression(0)
                self.state = 6021
                self.intervalType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6038
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,872,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6036
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,871,self._ctx)
                    if la_ == 1:
                        localctx = frameQLParser.BitExpressionAtomContext(self, frameQLParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6025
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6026
                        self.bitOperator()
                        self.state = 6027
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 2:
                        localctx = frameQLParser.MathExpressionAtomContext(self, frameQLParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6029
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6030
                        self.mathOperator()
                        self.state = 6031
                        localctx.right = self.expressionAtom(2)
                        pass

                    elif la_ == 3:
                        localctx = frameQLParser.CollateExpressionAtomContext(self, frameQLParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6033
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 6034
                        self.match(frameQLParser.COLLATE)
                        self.state = 6035
                        self.collationName()
                        pass

             
                self.state = 6040
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,872,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(frameQLParser.EXCLAMATION_SYMBOL, 0)

        def BIT_NOT_OP(self):
            return self.getToken(frameQLParser.BIT_NOT_OP, 0)

        def PLUS(self):
            return self.getToken(frameQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(frameQLParser.MINUS, 0)

        def NOT(self):
            return self.getToken(frameQLParser.NOT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = frameQLParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6041
            _la = self._input.LA(1)
            if not(_la==frameQLParser.NOT or ((((_la - 939)) & ~0x3f) == 0 and ((1 << (_la - 939)) & ((1 << (frameQLParser.PLUS - 939)) | (1 << (frameQLParser.MINUS - 939)) | (1 << (frameQLParser.EXCLAMATION_SYMBOL - 939)) | (1 << (frameQLParser.BIT_NOT_OP - 939)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(frameQLParser.EQUAL_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(frameQLParser.GREATER_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(frameQLParser.LESS_SYMBOL, 0)

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(frameQLParser.EXCLAMATION_SYMBOL, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = frameQLParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_comparisonOperator)
        try:
            self.state = 6057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6043
                self.match(frameQLParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6044
                self.match(frameQLParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6045
                self.match(frameQLParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6046
                self.match(frameQLParser.LESS_SYMBOL)
                self.state = 6047
                self.match(frameQLParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6048
                self.match(frameQLParser.GREATER_SYMBOL)
                self.state = 6049
                self.match(frameQLParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6050
                self.match(frameQLParser.LESS_SYMBOL)
                self.state = 6051
                self.match(frameQLParser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6052
                self.match(frameQLParser.EXCLAMATION_SYMBOL)
                self.state = 6053
                self.match(frameQLParser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6054
                self.match(frameQLParser.LESS_SYMBOL)
                self.state = 6055
                self.match(frameQLParser.EQUAL_SYMBOL)
                self.state = 6056
                self.match(frameQLParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(frameQLParser.AND, 0)

        def BIT_AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.BIT_AND_OP)
            else:
                return self.getToken(frameQLParser.BIT_AND_OP, i)

        def XOR(self):
            return self.getToken(frameQLParser.XOR, 0)

        def OR(self):
            return self.getToken(frameQLParser.OR, 0)

        def BIT_OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.BIT_OR_OP)
            else:
                return self.getToken(frameQLParser.BIT_OR_OP, i)

        def getRuleIndex(self):
            return frameQLParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)




    def logicalOperator(self):

        localctx = frameQLParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_logicalOperator)
        try:
            self.state = 6066
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6059
                self.match(frameQLParser.AND)
                pass
            elif token in [frameQLParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6060
                self.match(frameQLParser.BIT_AND_OP)
                self.state = 6061
                self.match(frameQLParser.BIT_AND_OP)
                pass
            elif token in [frameQLParser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6062
                self.match(frameQLParser.XOR)
                pass
            elif token in [frameQLParser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6063
                self.match(frameQLParser.OR)
                pass
            elif token in [frameQLParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6064
                self.match(frameQLParser.BIT_OR_OP)
                self.state = 6065
                self.match(frameQLParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.LESS_SYMBOL)
            else:
                return self.getToken(frameQLParser.LESS_SYMBOL, i)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(frameQLParser.GREATER_SYMBOL)
            else:
                return self.getToken(frameQLParser.GREATER_SYMBOL, i)

        def BIT_AND_OP(self):
            return self.getToken(frameQLParser.BIT_AND_OP, 0)

        def BIT_XOR_OP(self):
            return self.getToken(frameQLParser.BIT_XOR_OP, 0)

        def BIT_OR_OP(self):
            return self.getToken(frameQLParser.BIT_OR_OP, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)




    def bitOperator(self):

        localctx = frameQLParser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_bitOperator)
        try:
            self.state = 6075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [frameQLParser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6068
                self.match(frameQLParser.LESS_SYMBOL)
                self.state = 6069
                self.match(frameQLParser.LESS_SYMBOL)
                pass
            elif token in [frameQLParser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6070
                self.match(frameQLParser.GREATER_SYMBOL)
                self.state = 6071
                self.match(frameQLParser.GREATER_SYMBOL)
                pass
            elif token in [frameQLParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6072
                self.match(frameQLParser.BIT_AND_OP)
                pass
            elif token in [frameQLParser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6073
                self.match(frameQLParser.BIT_XOR_OP)
                pass
            elif token in [frameQLParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6074
                self.match(frameQLParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(frameQLParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(frameQLParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(frameQLParser.MODULE, 0)

        def DIV(self):
            return self.getToken(frameQLParser.DIV, 0)

        def MOD(self):
            return self.getToken(frameQLParser.MOD, 0)

        def PLUS(self):
            return self.getToken(frameQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(frameQLParser.MINUS, 0)

        def MINUSMINUS(self):
            return self.getToken(frameQLParser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)




    def mathOperator(self):

        localctx = frameQLParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6077
            _la = self._input.LA(1)
            if not(((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & ((1 << (frameQLParser.STAR - 936)) | (1 << (frameQLParser.DIVIDE - 936)) | (1 << (frameQLParser.MODULE - 936)) | (1 << (frameQLParser.PLUS - 936)) | (1 << (frameQLParser.MINUSMINUS - 936)) | (1 << (frameQLParser.MINUS - 936)) | (1 << (frameQLParser.DIV - 936)) | (1 << (frameQLParser.MOD - 936)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARMSCII8(self):
            return self.getToken(frameQLParser.ARMSCII8, 0)

        def ASCII(self):
            return self.getToken(frameQLParser.ASCII, 0)

        def BIG5(self):
            return self.getToken(frameQLParser.BIG5, 0)

        def CP1250(self):
            return self.getToken(frameQLParser.CP1250, 0)

        def CP1251(self):
            return self.getToken(frameQLParser.CP1251, 0)

        def CP1256(self):
            return self.getToken(frameQLParser.CP1256, 0)

        def CP1257(self):
            return self.getToken(frameQLParser.CP1257, 0)

        def CP850(self):
            return self.getToken(frameQLParser.CP850, 0)

        def CP852(self):
            return self.getToken(frameQLParser.CP852, 0)

        def CP866(self):
            return self.getToken(frameQLParser.CP866, 0)

        def CP932(self):
            return self.getToken(frameQLParser.CP932, 0)

        def DEC8(self):
            return self.getToken(frameQLParser.DEC8, 0)

        def EUCJPMS(self):
            return self.getToken(frameQLParser.EUCJPMS, 0)

        def EUCKR(self):
            return self.getToken(frameQLParser.EUCKR, 0)

        def GB2312(self):
            return self.getToken(frameQLParser.GB2312, 0)

        def GBK(self):
            return self.getToken(frameQLParser.GBK, 0)

        def GEOSTD8(self):
            return self.getToken(frameQLParser.GEOSTD8, 0)

        def GREEK(self):
            return self.getToken(frameQLParser.GREEK, 0)

        def HEBREW(self):
            return self.getToken(frameQLParser.HEBREW, 0)

        def HP8(self):
            return self.getToken(frameQLParser.HP8, 0)

        def KEYBCS2(self):
            return self.getToken(frameQLParser.KEYBCS2, 0)

        def KOI8R(self):
            return self.getToken(frameQLParser.KOI8R, 0)

        def KOI8U(self):
            return self.getToken(frameQLParser.KOI8U, 0)

        def LATIN1(self):
            return self.getToken(frameQLParser.LATIN1, 0)

        def LATIN2(self):
            return self.getToken(frameQLParser.LATIN2, 0)

        def LATIN5(self):
            return self.getToken(frameQLParser.LATIN5, 0)

        def LATIN7(self):
            return self.getToken(frameQLParser.LATIN7, 0)

        def MACCE(self):
            return self.getToken(frameQLParser.MACCE, 0)

        def MACROMAN(self):
            return self.getToken(frameQLParser.MACROMAN, 0)

        def SJIS(self):
            return self.getToken(frameQLParser.SJIS, 0)

        def SWE7(self):
            return self.getToken(frameQLParser.SWE7, 0)

        def TIS620(self):
            return self.getToken(frameQLParser.TIS620, 0)

        def UCS2(self):
            return self.getToken(frameQLParser.UCS2, 0)

        def UJIS(self):
            return self.getToken(frameQLParser.UJIS, 0)

        def UTF16(self):
            return self.getToken(frameQLParser.UTF16, 0)

        def UTF16LE(self):
            return self.getToken(frameQLParser.UTF16LE, 0)

        def UTF32(self):
            return self.getToken(frameQLParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(frameQLParser.UTF8, 0)

        def UTF8MB3(self):
            return self.getToken(frameQLParser.UTF8MB3, 0)

        def UTF8MB4(self):
            return self.getToken(frameQLParser.UTF8MB4, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_charsetNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetNameBase" ):
                listener.enterCharsetNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetNameBase" ):
                listener.exitCharsetNameBase(self)




    def charsetNameBase(self):

        localctx = frameQLParser.CharsetNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_charsetNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6079
            _la = self._input.LA(1)
            if not(((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (frameQLParser.ARMSCII8 - 575)) | (1 << (frameQLParser.ASCII - 575)) | (1 << (frameQLParser.BIG5 - 575)) | (1 << (frameQLParser.CP1250 - 575)) | (1 << (frameQLParser.CP1251 - 575)) | (1 << (frameQLParser.CP1256 - 575)) | (1 << (frameQLParser.CP1257 - 575)) | (1 << (frameQLParser.CP850 - 575)) | (1 << (frameQLParser.CP852 - 575)) | (1 << (frameQLParser.CP866 - 575)) | (1 << (frameQLParser.CP932 - 575)) | (1 << (frameQLParser.DEC8 - 575)) | (1 << (frameQLParser.EUCJPMS - 575)) | (1 << (frameQLParser.EUCKR - 575)) | (1 << (frameQLParser.GB2312 - 575)) | (1 << (frameQLParser.GBK - 575)) | (1 << (frameQLParser.GEOSTD8 - 575)) | (1 << (frameQLParser.GREEK - 575)) | (1 << (frameQLParser.HEBREW - 575)) | (1 << (frameQLParser.HP8 - 575)) | (1 << (frameQLParser.KEYBCS2 - 575)) | (1 << (frameQLParser.KOI8R - 575)) | (1 << (frameQLParser.KOI8U - 575)) | (1 << (frameQLParser.LATIN1 - 575)) | (1 << (frameQLParser.LATIN2 - 575)) | (1 << (frameQLParser.LATIN5 - 575)) | (1 << (frameQLParser.LATIN7 - 575)) | (1 << (frameQLParser.MACCE - 575)) | (1 << (frameQLParser.MACROMAN - 575)) | (1 << (frameQLParser.SJIS - 575)) | (1 << (frameQLParser.SWE7 - 575)) | (1 << (frameQLParser.TIS620 - 575)) | (1 << (frameQLParser.UCS2 - 575)) | (1 << (frameQLParser.UJIS - 575)) | (1 << (frameQLParser.UTF16 - 575)) | (1 << (frameQLParser.UTF16LE - 575)) | (1 << (frameQLParser.UTF32 - 575)) | (1 << (frameQLParser.UTF8 - 575)) | (1 << (frameQLParser.UTF8MB3 - 575)) | (1 << (frameQLParser.UTF8MB4 - 575)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(frameQLParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(frameQLParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(frameQLParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(frameQLParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_transactionLevelBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevelBase" ):
                listener.enterTransactionLevelBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevelBase" ):
                listener.exitTransactionLevelBase(self)




    def transactionLevelBase(self):

        localctx = frameQLParser.TransactionLevelBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_transactionLevelBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6081
            _la = self._input.LA(1)
            if not(((((_la - 626)) & ~0x3f) == 0 and ((1 << (_la - 626)) & ((1 << (frameQLParser.REPEATABLE - 626)) | (1 << (frameQLParser.COMMITTED - 626)) | (1 << (frameQLParser.UNCOMMITTED - 626)) | (1 << (frameQLParser.SERIALIZABLE - 626)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegesBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(frameQLParser.TABLES, 0)

        def ROUTINE(self):
            return self.getToken(frameQLParser.ROUTINE, 0)

        def EXECUTE(self):
            return self.getToken(frameQLParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(frameQLParser.FILE, 0)

        def PROCESS(self):
            return self.getToken(frameQLParser.PROCESS, 0)

        def RELOAD(self):
            return self.getToken(frameQLParser.RELOAD, 0)

        def SHUTDOWN(self):
            return self.getToken(frameQLParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(frameQLParser.SUPER, 0)

        def PRIVILEGES(self):
            return self.getToken(frameQLParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_privilegesBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegesBase" ):
                listener.enterPrivilegesBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegesBase" ):
                listener.exitPrivilegesBase(self)




    def privilegesBase(self):

        localctx = frameQLParser.PrivilegesBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_privilegesBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6083
            _la = self._input.LA(1)
            if not(((((_la - 566)) & ~0x3f) == 0 and ((1 << (_la - 566)) & ((1 << (frameQLParser.TABLES - 566)) | (1 << (frameQLParser.ROUTINE - 566)) | (1 << (frameQLParser.EXECUTE - 566)) | (1 << (frameQLParser.FILE - 566)) | (1 << (frameQLParser.PROCESS - 566)) | (1 << (frameQLParser.RELOAD - 566)) | (1 << (frameQLParser.SHUTDOWN - 566)) | (1 << (frameQLParser.SUPER - 566)) | (1 << (frameQLParser.PRIVILEGES - 566)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUARTER(self):
            return self.getToken(frameQLParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(frameQLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(frameQLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(frameQLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(frameQLParser.MINUTE, 0)

        def WEEK(self):
            return self.getToken(frameQLParser.WEEK, 0)

        def SECOND(self):
            return self.getToken(frameQLParser.SECOND, 0)

        def MICROSECOND(self):
            return self.getToken(frameQLParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_intervalTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTypeBase" ):
                listener.enterIntervalTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTypeBase" ):
                listener.exitIntervalTypeBase(self)




    def intervalTypeBase(self):

        localctx = frameQLParser.IntervalTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_intervalTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6085
            _la = self._input.LA(1)
            if not(((((_la - 558)) & ~0x3f) == 0 and ((1 << (_la - 558)) & ((1 << (frameQLParser.QUARTER - 558)) | (1 << (frameQLParser.MONTH - 558)) | (1 << (frameQLParser.DAY - 558)) | (1 << (frameQLParser.HOUR - 558)) | (1 << (frameQLParser.MINUTE - 558)) | (1 << (frameQLParser.WEEK - 558)) | (1 << (frameQLParser.SECOND - 558)) | (1 << (frameQLParser.MICROSECOND - 558)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(frameQLParser.DATE, 0)

        def TIME(self):
            return self.getToken(frameQLParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(frameQLParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(frameQLParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(frameQLParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(frameQLParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(frameQLParser.TEXT, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_dataTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeBase" ):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeBase" ):
                listener.exitDataTypeBase(self)




    def dataTypeBase(self):

        localctx = frameQLParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6087
            _la = self._input.LA(1)
            if not(((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.DATETIME - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.TEXT - 184)) | (1 << (frameQLParser.ENUM - 184)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordsCanBeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(frameQLParser.ACCOUNT, 0)

        def ACTION(self):
            return self.getToken(frameQLParser.ACTION, 0)

        def AFTER(self):
            return self.getToken(frameQLParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(frameQLParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(frameQLParser.ALGORITHM, 0)

        def ANY(self):
            return self.getToken(frameQLParser.ANY, 0)

        def AT(self):
            return self.getToken(frameQLParser.AT, 0)

        def AUTHORS(self):
            return self.getToken(frameQLParser.AUTHORS, 0)

        def AUTOCOMMIT(self):
            return self.getToken(frameQLParser.AUTOCOMMIT, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(frameQLParser.AUTOEXTEND_SIZE, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(frameQLParser.AUTO_INCREMENT, 0)

        def AVG_ROW_LENGTH(self):
            return self.getToken(frameQLParser.AVG_ROW_LENGTH, 0)

        def BEGIN(self):
            return self.getToken(frameQLParser.BEGIN, 0)

        def BINLOG(self):
            return self.getToken(frameQLParser.BINLOG, 0)

        def BIT(self):
            return self.getToken(frameQLParser.BIT, 0)

        def BLOCK(self):
            return self.getToken(frameQLParser.BLOCK, 0)

        def BOOL(self):
            return self.getToken(frameQLParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(frameQLParser.BOOLEAN, 0)

        def BTREE(self):
            return self.getToken(frameQLParser.BTREE, 0)

        def CASCADED(self):
            return self.getToken(frameQLParser.CASCADED, 0)

        def CHAIN(self):
            return self.getToken(frameQLParser.CHAIN, 0)

        def CHANGED(self):
            return self.getToken(frameQLParser.CHANGED, 0)

        def CHANNEL(self):
            return self.getToken(frameQLParser.CHANNEL, 0)

        def CHECKSUM(self):
            return self.getToken(frameQLParser.CHECKSUM, 0)

        def CIPHER(self):
            return self.getToken(frameQLParser.CIPHER, 0)

        def CLIENT(self):
            return self.getToken(frameQLParser.CLIENT, 0)

        def COALESCE(self):
            return self.getToken(frameQLParser.COALESCE, 0)

        def CODE(self):
            return self.getToken(frameQLParser.CODE, 0)

        def COLUMNS(self):
            return self.getToken(frameQLParser.COLUMNS, 0)

        def COLUMN_FORMAT(self):
            return self.getToken(frameQLParser.COLUMN_FORMAT, 0)

        def COMMENT(self):
            return self.getToken(frameQLParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(frameQLParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(frameQLParser.COMPACT, 0)

        def COMPLETION(self):
            return self.getToken(frameQLParser.COMPLETION, 0)

        def COMPRESSED(self):
            return self.getToken(frameQLParser.COMPRESSED, 0)

        def COMPRESSION(self):
            return self.getToken(frameQLParser.COMPRESSION, 0)

        def CONCURRENT(self):
            return self.getToken(frameQLParser.CONCURRENT, 0)

        def CONNECTION(self):
            return self.getToken(frameQLParser.CONNECTION, 0)

        def CONSISTENT(self):
            return self.getToken(frameQLParser.CONSISTENT, 0)

        def CONTAINS(self):
            return self.getToken(frameQLParser.CONTAINS, 0)

        def CONTEXT(self):
            return self.getToken(frameQLParser.CONTEXT, 0)

        def CONTRIBUTORS(self):
            return self.getToken(frameQLParser.CONTRIBUTORS, 0)

        def COPY(self):
            return self.getToken(frameQLParser.COPY, 0)

        def CPU(self):
            return self.getToken(frameQLParser.CPU, 0)

        def DATA(self):
            return self.getToken(frameQLParser.DATA, 0)

        def DATAFILE(self):
            return self.getToken(frameQLParser.DATAFILE, 0)

        def DEALLOCATE(self):
            return self.getToken(frameQLParser.DEALLOCATE, 0)

        def DEFAULT_AUTH(self):
            return self.getToken(frameQLParser.DEFAULT_AUTH, 0)

        def DEFINER(self):
            return self.getToken(frameQLParser.DEFINER, 0)

        def DELAY_KEY_WRITE(self):
            return self.getToken(frameQLParser.DELAY_KEY_WRITE, 0)

        def DIRECTORY(self):
            return self.getToken(frameQLParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(frameQLParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(frameQLParser.DISCARD, 0)

        def DISK(self):
            return self.getToken(frameQLParser.DISK, 0)

        def DO(self):
            return self.getToken(frameQLParser.DO, 0)

        def DUMPFILE(self):
            return self.getToken(frameQLParser.DUMPFILE, 0)

        def DUPLICATE(self):
            return self.getToken(frameQLParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(frameQLParser.DYNAMIC, 0)

        def ENABLE(self):
            return self.getToken(frameQLParser.ENABLE, 0)

        def ENCRYPTION(self):
            return self.getToken(frameQLParser.ENCRYPTION, 0)

        def ENDS(self):
            return self.getToken(frameQLParser.ENDS, 0)

        def ENGINE(self):
            return self.getToken(frameQLParser.ENGINE, 0)

        def ENGINES(self):
            return self.getToken(frameQLParser.ENGINES, 0)

        def ERROR(self):
            return self.getToken(frameQLParser.ERROR, 0)

        def ERRORS(self):
            return self.getToken(frameQLParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(frameQLParser.ESCAPE, 0)

        def EVEN(self):
            return self.getToken(frameQLParser.EVEN, 0)

        def EVENT(self):
            return self.getToken(frameQLParser.EVENT, 0)

        def EVENTS(self):
            return self.getToken(frameQLParser.EVENTS, 0)

        def EVERY(self):
            return self.getToken(frameQLParser.EVERY, 0)

        def EXCHANGE(self):
            return self.getToken(frameQLParser.EXCHANGE, 0)

        def EXCLUSIVE(self):
            return self.getToken(frameQLParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(frameQLParser.EXPIRE, 0)

        def EXTENDED(self):
            return self.getToken(frameQLParser.EXTENDED, 0)

        def EXTENT_SIZE(self):
            return self.getToken(frameQLParser.EXTENT_SIZE, 0)

        def FAST(self):
            return self.getToken(frameQLParser.FAST, 0)

        def FAULTS(self):
            return self.getToken(frameQLParser.FAULTS, 0)

        def FIELDS(self):
            return self.getToken(frameQLParser.FIELDS, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(frameQLParser.FILE_BLOCK_SIZE, 0)

        def FILTER(self):
            return self.getToken(frameQLParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(frameQLParser.FIRST, 0)

        def FIXED(self):
            return self.getToken(frameQLParser.FIXED, 0)

        def FOLLOWS(self):
            return self.getToken(frameQLParser.FOLLOWS, 0)

        def FULL(self):
            return self.getToken(frameQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(frameQLParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(frameQLParser.GLOBAL, 0)

        def GRANTS(self):
            return self.getToken(frameQLParser.GRANTS, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(frameQLParser.GROUP_REPLICATION, 0)

        def HASH(self):
            return self.getToken(frameQLParser.HASH, 0)

        def HOST(self):
            return self.getToken(frameQLParser.HOST, 0)

        def IDENTIFIED(self):
            return self.getToken(frameQLParser.IDENTIFIED, 0)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(frameQLParser.IGNORE_SERVER_IDS, 0)

        def IMPORT(self):
            return self.getToken(frameQLParser.IMPORT, 0)

        def INDEXES(self):
            return self.getToken(frameQLParser.INDEXES, 0)

        def INITIAL_SIZE(self):
            return self.getToken(frameQLParser.INITIAL_SIZE, 0)

        def INPLACE(self):
            return self.getToken(frameQLParser.INPLACE, 0)

        def INSERT_METHOD(self):
            return self.getToken(frameQLParser.INSERT_METHOD, 0)

        def INSTANCE(self):
            return self.getToken(frameQLParser.INSTANCE, 0)

        def INVOKER(self):
            return self.getToken(frameQLParser.INVOKER, 0)

        def IO(self):
            return self.getToken(frameQLParser.IO, 0)

        def IO_THREAD(self):
            return self.getToken(frameQLParser.IO_THREAD, 0)

        def IPC(self):
            return self.getToken(frameQLParser.IPC, 0)

        def ISOLATION(self):
            return self.getToken(frameQLParser.ISOLATION, 0)

        def ISSUER(self):
            return self.getToken(frameQLParser.ISSUER, 0)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(frameQLParser.KEY_BLOCK_SIZE, 0)

        def LANGUAGE(self):
            return self.getToken(frameQLParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(frameQLParser.LAST, 0)

        def LEAVES(self):
            return self.getToken(frameQLParser.LEAVES, 0)

        def LESS(self):
            return self.getToken(frameQLParser.LESS, 0)

        def LEVEL(self):
            return self.getToken(frameQLParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(frameQLParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(frameQLParser.LOCAL, 0)

        def LOGFILE(self):
            return self.getToken(frameQLParser.LOGFILE, 0)

        def LOGS(self):
            return self.getToken(frameQLParser.LOGS, 0)

        def MASTER(self):
            return self.getToken(frameQLParser.MASTER, 0)

        def MASTER_AUTO_POSITION(self):
            return self.getToken(frameQLParser.MASTER_AUTO_POSITION, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(frameQLParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_DELAY(self):
            return self.getToken(frameQLParser.MASTER_DELAY, 0)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(frameQLParser.MASTER_HEARTBEAT_PERIOD, 0)

        def MASTER_HOST(self):
            return self.getToken(frameQLParser.MASTER_HOST, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(frameQLParser.MASTER_LOG_FILE, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(frameQLParser.MASTER_LOG_POS, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(frameQLParser.MASTER_PASSWORD, 0)

        def MASTER_PORT(self):
            return self.getToken(frameQLParser.MASTER_PORT, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(frameQLParser.MASTER_RETRY_COUNT, 0)

        def MASTER_SSL(self):
            return self.getToken(frameQLParser.MASTER_SSL, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(frameQLParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(frameQLParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(frameQLParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(frameQLParser.MASTER_SSL_CIPHER, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(frameQLParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(frameQLParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(frameQLParser.MASTER_SSL_KEY, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(frameQLParser.MASTER_TLS_VERSION, 0)

        def MASTER_USER(self):
            return self.getToken(frameQLParser.MASTER_USER, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(frameQLParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(frameQLParser.MAX_QUERIES_PER_HOUR, 0)

        def MAX_ROWS(self):
            return self.getToken(frameQLParser.MAX_ROWS, 0)

        def MAX_SIZE(self):
            return self.getToken(frameQLParser.MAX_SIZE, 0)

        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(frameQLParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(frameQLParser.MAX_USER_CONNECTIONS, 0)

        def MEDIUM(self):
            return self.getToken(frameQLParser.MEDIUM, 0)

        def MEMORY(self):
            return self.getToken(frameQLParser.MEMORY, 0)

        def MERGE(self):
            return self.getToken(frameQLParser.MERGE, 0)

        def MID(self):
            return self.getToken(frameQLParser.MID, 0)

        def MIGRATE(self):
            return self.getToken(frameQLParser.MIGRATE, 0)

        def MIN_ROWS(self):
            return self.getToken(frameQLParser.MIN_ROWS, 0)

        def MODIFY(self):
            return self.getToken(frameQLParser.MODIFY, 0)

        def MUTEX(self):
            return self.getToken(frameQLParser.MUTEX, 0)

        def MYSQL(self):
            return self.getToken(frameQLParser.MYSQL, 0)

        def NAME(self):
            return self.getToken(frameQLParser.NAME, 0)

        def NAMES(self):
            return self.getToken(frameQLParser.NAMES, 0)

        def NCHAR(self):
            return self.getToken(frameQLParser.NCHAR, 0)

        def NEVER(self):
            return self.getToken(frameQLParser.NEVER, 0)

        def NO(self):
            return self.getToken(frameQLParser.NO, 0)

        def NODEGROUP(self):
            return self.getToken(frameQLParser.NODEGROUP, 0)

        def NONE(self):
            return self.getToken(frameQLParser.NONE, 0)

        def OFFLINE(self):
            return self.getToken(frameQLParser.OFFLINE, 0)

        def OFFSET(self):
            return self.getToken(frameQLParser.OFFSET, 0)

        def OJ(self):
            return self.getToken(frameQLParser.OJ, 0)

        def OLD_PASSWORD(self):
            return self.getToken(frameQLParser.OLD_PASSWORD, 0)

        def ONE(self):
            return self.getToken(frameQLParser.ONE, 0)

        def ONLINE(self):
            return self.getToken(frameQLParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(frameQLParser.ONLY, 0)

        def OPTIMIZER_COSTS(self):
            return self.getToken(frameQLParser.OPTIMIZER_COSTS, 0)

        def OPTIONS(self):
            return self.getToken(frameQLParser.OPTIONS, 0)

        def OWNER(self):
            return self.getToken(frameQLParser.OWNER, 0)

        def PACK_KEYS(self):
            return self.getToken(frameQLParser.PACK_KEYS, 0)

        def PAGE(self):
            return self.getToken(frameQLParser.PAGE, 0)

        def PARSER(self):
            return self.getToken(frameQLParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(frameQLParser.PARTIAL, 0)

        def PARTITIONING(self):
            return self.getToken(frameQLParser.PARTITIONING, 0)

        def PARTITIONS(self):
            return self.getToken(frameQLParser.PARTITIONS, 0)

        def PASSWORD(self):
            return self.getToken(frameQLParser.PASSWORD, 0)

        def PHASE(self):
            return self.getToken(frameQLParser.PHASE, 0)

        def PLUGINS(self):
            return self.getToken(frameQLParser.PLUGINS, 0)

        def PLUGIN_DIR(self):
            return self.getToken(frameQLParser.PLUGIN_DIR, 0)

        def PORT(self):
            return self.getToken(frameQLParser.PORT, 0)

        def PRECEDES(self):
            return self.getToken(frameQLParser.PRECEDES, 0)

        def PREPARE(self):
            return self.getToken(frameQLParser.PREPARE, 0)

        def PRESERVE(self):
            return self.getToken(frameQLParser.PRESERVE, 0)

        def PREV(self):
            return self.getToken(frameQLParser.PREV, 0)

        def PROCESSLIST(self):
            return self.getToken(frameQLParser.PROCESSLIST, 0)

        def PROFILE(self):
            return self.getToken(frameQLParser.PROFILE, 0)

        def PROFILES(self):
            return self.getToken(frameQLParser.PROFILES, 0)

        def PROXY(self):
            return self.getToken(frameQLParser.PROXY, 0)

        def QUERY(self):
            return self.getToken(frameQLParser.QUERY, 0)

        def QUICK(self):
            return self.getToken(frameQLParser.QUICK, 0)

        def REBUILD(self):
            return self.getToken(frameQLParser.REBUILD, 0)

        def RECOVER(self):
            return self.getToken(frameQLParser.RECOVER, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(frameQLParser.REDO_BUFFER_SIZE, 0)

        def REDUNDANT(self):
            return self.getToken(frameQLParser.REDUNDANT, 0)

        def RELAYLOG(self):
            return self.getToken(frameQLParser.RELAYLOG, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(frameQLParser.RELAY_LOG_FILE, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(frameQLParser.RELAY_LOG_POS, 0)

        def REMOVE(self):
            return self.getToken(frameQLParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(frameQLParser.REORGANIZE, 0)

        def REPAIR(self):
            return self.getToken(frameQLParser.REPAIR, 0)

        def REPLICATE_DO_DB(self):
            return self.getToken(frameQLParser.REPLICATE_DO_DB, 0)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(frameQLParser.REPLICATE_DO_TABLE, 0)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(frameQLParser.REPLICATE_IGNORE_DB, 0)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(frameQLParser.REPLICATE_IGNORE_TABLE, 0)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(frameQLParser.REPLICATE_REWRITE_DB, 0)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(frameQLParser.REPLICATE_WILD_DO_TABLE, 0)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(frameQLParser.REPLICATE_WILD_IGNORE_TABLE, 0)

        def REPLICATION(self):
            return self.getToken(frameQLParser.REPLICATION, 0)

        def RESUME(self):
            return self.getToken(frameQLParser.RESUME, 0)

        def RETURNS(self):
            return self.getToken(frameQLParser.RETURNS, 0)

        def ROLLBACK(self):
            return self.getToken(frameQLParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(frameQLParser.ROLLUP, 0)

        def ROTATE(self):
            return self.getToken(frameQLParser.ROTATE, 0)

        def ROW(self):
            return self.getToken(frameQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(frameQLParser.ROWS, 0)

        def ROW_FORMAT(self):
            return self.getToken(frameQLParser.ROW_FORMAT, 0)

        def SAVEPOINT(self):
            return self.getToken(frameQLParser.SAVEPOINT, 0)

        def SCHEDULE(self):
            return self.getToken(frameQLParser.SCHEDULE, 0)

        def SECURITY(self):
            return self.getToken(frameQLParser.SECURITY, 0)

        def SERIAL(self):
            return self.getToken(frameQLParser.SERIAL, 0)

        def SERVER(self):
            return self.getToken(frameQLParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(frameQLParser.SESSION, 0)

        def SHARE(self):
            return self.getToken(frameQLParser.SHARE, 0)

        def SHARED(self):
            return self.getToken(frameQLParser.SHARED, 0)

        def SIGNED(self):
            return self.getToken(frameQLParser.SIGNED, 0)

        def SIMPLE(self):
            return self.getToken(frameQLParser.SIMPLE, 0)

        def SLAVE(self):
            return self.getToken(frameQLParser.SLAVE, 0)

        def SNAPSHOT(self):
            return self.getToken(frameQLParser.SNAPSHOT, 0)

        def SOCKET(self):
            return self.getToken(frameQLParser.SOCKET, 0)

        def SOME(self):
            return self.getToken(frameQLParser.SOME, 0)

        def SOUNDS(self):
            return self.getToken(frameQLParser.SOUNDS, 0)

        def SOURCE(self):
            return self.getToken(frameQLParser.SOURCE, 0)

        def SQL_AFTER_GTIDS(self):
            return self.getToken(frameQLParser.SQL_AFTER_GTIDS, 0)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(frameQLParser.SQL_AFTER_MTS_GAPS, 0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(frameQLParser.SQL_BEFORE_GTIDS, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(frameQLParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(frameQLParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(frameQLParser.SQL_NO_CACHE, 0)

        def SQL_THREAD(self):
            return self.getToken(frameQLParser.SQL_THREAD, 0)

        def START(self):
            return self.getToken(frameQLParser.START, 0)

        def STARTS(self):
            return self.getToken(frameQLParser.STARTS, 0)

        def STATS_AUTO_RECALC(self):
            return self.getToken(frameQLParser.STATS_AUTO_RECALC, 0)

        def STATS_PERSISTENT(self):
            return self.getToken(frameQLParser.STATS_PERSISTENT, 0)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(frameQLParser.STATS_SAMPLE_PAGES, 0)

        def STATUS(self):
            return self.getToken(frameQLParser.STATUS, 0)

        def STOP(self):
            return self.getToken(frameQLParser.STOP, 0)

        def STORAGE(self):
            return self.getToken(frameQLParser.STORAGE, 0)

        def STRING(self):
            return self.getToken(frameQLParser.STRING, 0)

        def SUBJECT(self):
            return self.getToken(frameQLParser.SUBJECT, 0)

        def SUBPARTITION(self):
            return self.getToken(frameQLParser.SUBPARTITION, 0)

        def SUBPARTITIONS(self):
            return self.getToken(frameQLParser.SUBPARTITIONS, 0)

        def SUSPEND(self):
            return self.getToken(frameQLParser.SUSPEND, 0)

        def SWAPS(self):
            return self.getToken(frameQLParser.SWAPS, 0)

        def SWITCHES(self):
            return self.getToken(frameQLParser.SWITCHES, 0)

        def TABLESPACE(self):
            return self.getToken(frameQLParser.TABLESPACE, 0)

        def TEMPORARY(self):
            return self.getToken(frameQLParser.TEMPORARY, 0)

        def TEMPTABLE(self):
            return self.getToken(frameQLParser.TEMPTABLE, 0)

        def THAN(self):
            return self.getToken(frameQLParser.THAN, 0)

        def TRANSACTION(self):
            return self.getToken(frameQLParser.TRANSACTION, 0)

        def TRUNCATE(self):
            return self.getToken(frameQLParser.TRUNCATE, 0)

        def UNDEFINED(self):
            return self.getToken(frameQLParser.UNDEFINED, 0)

        def UNDOFILE(self):
            return self.getToken(frameQLParser.UNDOFILE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(frameQLParser.UNDO_BUFFER_SIZE, 0)

        def UNKNOWN(self):
            return self.getToken(frameQLParser.UNKNOWN, 0)

        def UPGRADE(self):
            return self.getToken(frameQLParser.UPGRADE, 0)

        def USER(self):
            return self.getToken(frameQLParser.USER, 0)

        def VALIDATION(self):
            return self.getToken(frameQLParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(frameQLParser.VALUE, 0)

        def VARIABLES(self):
            return self.getToken(frameQLParser.VARIABLES, 0)

        def VIEW(self):
            return self.getToken(frameQLParser.VIEW, 0)

        def WAIT(self):
            return self.getToken(frameQLParser.WAIT, 0)

        def WARNINGS(self):
            return self.getToken(frameQLParser.WARNINGS, 0)

        def WITHOUT(self):
            return self.getToken(frameQLParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(frameQLParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(frameQLParser.WRAPPER, 0)

        def X509(self):
            return self.getToken(frameQLParser.X509, 0)

        def XA(self):
            return self.getToken(frameQLParser.XA, 0)

        def XML(self):
            return self.getToken(frameQLParser.XML, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_keywordsCanBeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordsCanBeId" ):
                listener.enterKeywordsCanBeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordsCanBeId" ):
                listener.exitKeywordsCanBeId(self)




    def keywordsCanBeId(self):

        localctx = frameQLParser.KeywordsCanBeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_keywordsCanBeId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6089
            _la = self._input.LA(1)
            if not(((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (frameQLParser.SERIAL - 202)) | (1 << (frameQLParser.ACCOUNT - 202)) | (1 << (frameQLParser.ACTION - 202)) | (1 << (frameQLParser.AFTER - 202)) | (1 << (frameQLParser.AGGREGATE - 202)) | (1 << (frameQLParser.ALGORITHM - 202)) | (1 << (frameQLParser.ANY - 202)) | (1 << (frameQLParser.AT - 202)) | (1 << (frameQLParser.AUTHORS - 202)) | (1 << (frameQLParser.AUTOCOMMIT - 202)) | (1 << (frameQLParser.AUTOEXTEND_SIZE - 202)) | (1 << (frameQLParser.AUTO_INCREMENT - 202)) | (1 << (frameQLParser.AVG_ROW_LENGTH - 202)) | (1 << (frameQLParser.BEGIN - 202)) | (1 << (frameQLParser.BINLOG - 202)) | (1 << (frameQLParser.BIT - 202)) | (1 << (frameQLParser.BLOCK - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (frameQLParser.BOOL - 266)) | (1 << (frameQLParser.BOOLEAN - 266)) | (1 << (frameQLParser.BTREE - 266)) | (1 << (frameQLParser.CASCADED - 266)) | (1 << (frameQLParser.CHAIN - 266)) | (1 << (frameQLParser.CHANGED - 266)) | (1 << (frameQLParser.CHANNEL - 266)) | (1 << (frameQLParser.CHECKSUM - 266)) | (1 << (frameQLParser.CIPHER - 266)) | (1 << (frameQLParser.CLIENT - 266)) | (1 << (frameQLParser.COALESCE - 266)) | (1 << (frameQLParser.CODE - 266)) | (1 << (frameQLParser.COLUMNS - 266)) | (1 << (frameQLParser.COLUMN_FORMAT - 266)) | (1 << (frameQLParser.COMMENT - 266)) | (1 << (frameQLParser.COMMIT - 266)) | (1 << (frameQLParser.COMPACT - 266)) | (1 << (frameQLParser.COMPLETION - 266)) | (1 << (frameQLParser.COMPRESSED - 266)) | (1 << (frameQLParser.COMPRESSION - 266)) | (1 << (frameQLParser.CONCURRENT - 266)) | (1 << (frameQLParser.CONNECTION - 266)) | (1 << (frameQLParser.CONSISTENT - 266)) | (1 << (frameQLParser.CONTAINS - 266)) | (1 << (frameQLParser.CONTEXT - 266)) | (1 << (frameQLParser.CONTRIBUTORS - 266)) | (1 << (frameQLParser.COPY - 266)) | (1 << (frameQLParser.CPU - 266)) | (1 << (frameQLParser.DATA - 266)) | (1 << (frameQLParser.DATAFILE - 266)) | (1 << (frameQLParser.DEALLOCATE - 266)) | (1 << (frameQLParser.DEFAULT_AUTH - 266)) | (1 << (frameQLParser.DEFINER - 266)) | (1 << (frameQLParser.DELAY_KEY_WRITE - 266)) | (1 << (frameQLParser.DIRECTORY - 266)) | (1 << (frameQLParser.DISABLE - 266)) | (1 << (frameQLParser.DISCARD - 266)) | (1 << (frameQLParser.DISK - 266)) | (1 << (frameQLParser.DO - 266)) | (1 << (frameQLParser.DUMPFILE - 266)) | (1 << (frameQLParser.DUPLICATE - 266)) | (1 << (frameQLParser.DYNAMIC - 266)) | (1 << (frameQLParser.ENABLE - 266)) | (1 << (frameQLParser.ENCRYPTION - 266)) | (1 << (frameQLParser.ENDS - 266)) | (1 << (frameQLParser.ENGINE - 266)) | (1 << (frameQLParser.ENGINES - 266)) | (1 << (frameQLParser.ERROR - 266)) | (1 << (frameQLParser.ERRORS - 266)) | (1 << (frameQLParser.ESCAPE - 266)) | (1 << (frameQLParser.EVEN - 266)) | (1 << (frameQLParser.EVENT - 266)) | (1 << (frameQLParser.EVENTS - 266)) | (1 << (frameQLParser.EVERY - 266)) | (1 << (frameQLParser.EXCHANGE - 266)) | (1 << (frameQLParser.EXCLUSIVE - 266)) | (1 << (frameQLParser.EXPIRE - 266)) | (1 << (frameQLParser.EXTENDED - 266)) | (1 << (frameQLParser.EXTENT_SIZE - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (frameQLParser.FAST - 330)) | (1 << (frameQLParser.FAULTS - 330)) | (1 << (frameQLParser.FIELDS - 330)) | (1 << (frameQLParser.FILE_BLOCK_SIZE - 330)) | (1 << (frameQLParser.FILTER - 330)) | (1 << (frameQLParser.FIRST - 330)) | (1 << (frameQLParser.FIXED - 330)) | (1 << (frameQLParser.FOLLOWS - 330)) | (1 << (frameQLParser.FULL - 330)) | (1 << (frameQLParser.FUNCTION - 330)) | (1 << (frameQLParser.GLOBAL - 330)) | (1 << (frameQLParser.GRANTS - 330)) | (1 << (frameQLParser.GROUP_REPLICATION - 330)) | (1 << (frameQLParser.HASH - 330)) | (1 << (frameQLParser.HOST - 330)) | (1 << (frameQLParser.IDENTIFIED - 330)) | (1 << (frameQLParser.IGNORE_SERVER_IDS - 330)) | (1 << (frameQLParser.IMPORT - 330)) | (1 << (frameQLParser.INDEXES - 330)) | (1 << (frameQLParser.INITIAL_SIZE - 330)) | (1 << (frameQLParser.INPLACE - 330)) | (1 << (frameQLParser.INSERT_METHOD - 330)) | (1 << (frameQLParser.INSTANCE - 330)) | (1 << (frameQLParser.INVOKER - 330)) | (1 << (frameQLParser.IO - 330)) | (1 << (frameQLParser.IO_THREAD - 330)) | (1 << (frameQLParser.IPC - 330)) | (1 << (frameQLParser.ISOLATION - 330)) | (1 << (frameQLParser.ISSUER - 330)) | (1 << (frameQLParser.KEY_BLOCK_SIZE - 330)) | (1 << (frameQLParser.LANGUAGE - 330)) | (1 << (frameQLParser.LAST - 330)) | (1 << (frameQLParser.LEAVES - 330)) | (1 << (frameQLParser.LESS - 330)) | (1 << (frameQLParser.LEVEL - 330)) | (1 << (frameQLParser.LIST - 330)) | (1 << (frameQLParser.LOCAL - 330)) | (1 << (frameQLParser.LOGFILE - 330)) | (1 << (frameQLParser.LOGS - 330)) | (1 << (frameQLParser.MASTER - 330)) | (1 << (frameQLParser.MASTER_AUTO_POSITION - 330)) | (1 << (frameQLParser.MASTER_CONNECT_RETRY - 330)) | (1 << (frameQLParser.MASTER_DELAY - 330)) | (1 << (frameQLParser.MASTER_HEARTBEAT_PERIOD - 330)) | (1 << (frameQLParser.MASTER_HOST - 330)) | (1 << (frameQLParser.MASTER_LOG_FILE - 330)) | (1 << (frameQLParser.MASTER_LOG_POS - 330)) | (1 << (frameQLParser.MASTER_PASSWORD - 330)) | (1 << (frameQLParser.MASTER_PORT - 330)) | (1 << (frameQLParser.MASTER_RETRY_COUNT - 330)) | (1 << (frameQLParser.MASTER_SSL - 330)) | (1 << (frameQLParser.MASTER_SSL_CA - 330)) | (1 << (frameQLParser.MASTER_SSL_CAPATH - 330)) | (1 << (frameQLParser.MASTER_SSL_CERT - 330)) | (1 << (frameQLParser.MASTER_SSL_CIPHER - 330)) | (1 << (frameQLParser.MASTER_SSL_CRL - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (frameQLParser.MASTER_SSL_CRLPATH - 394)) | (1 << (frameQLParser.MASTER_SSL_KEY - 394)) | (1 << (frameQLParser.MASTER_TLS_VERSION - 394)) | (1 << (frameQLParser.MASTER_USER - 394)) | (1 << (frameQLParser.MAX_CONNECTIONS_PER_HOUR - 394)) | (1 << (frameQLParser.MAX_QUERIES_PER_HOUR - 394)) | (1 << (frameQLParser.MAX_ROWS - 394)) | (1 << (frameQLParser.MAX_SIZE - 394)) | (1 << (frameQLParser.MAX_UPDATES_PER_HOUR - 394)) | (1 << (frameQLParser.MAX_USER_CONNECTIONS - 394)) | (1 << (frameQLParser.MEDIUM - 394)) | (1 << (frameQLParser.MERGE - 394)) | (1 << (frameQLParser.MID - 394)) | (1 << (frameQLParser.MIGRATE - 394)) | (1 << (frameQLParser.MIN_ROWS - 394)) | (1 << (frameQLParser.MODIFY - 394)) | (1 << (frameQLParser.MUTEX - 394)) | (1 << (frameQLParser.MYSQL - 394)) | (1 << (frameQLParser.NAME - 394)) | (1 << (frameQLParser.NAMES - 394)) | (1 << (frameQLParser.NCHAR - 394)) | (1 << (frameQLParser.NEVER - 394)) | (1 << (frameQLParser.NO - 394)) | (1 << (frameQLParser.NODEGROUP - 394)) | (1 << (frameQLParser.NONE - 394)) | (1 << (frameQLParser.OFFLINE - 394)) | (1 << (frameQLParser.OFFSET - 394)) | (1 << (frameQLParser.OJ - 394)) | (1 << (frameQLParser.OLD_PASSWORD - 394)) | (1 << (frameQLParser.ONE - 394)) | (1 << (frameQLParser.ONLINE - 394)) | (1 << (frameQLParser.ONLY - 394)) | (1 << (frameQLParser.OPTIMIZER_COSTS - 394)) | (1 << (frameQLParser.OPTIONS - 394)) | (1 << (frameQLParser.OWNER - 394)) | (1 << (frameQLParser.PACK_KEYS - 394)) | (1 << (frameQLParser.PAGE - 394)) | (1 << (frameQLParser.PARSER - 394)) | (1 << (frameQLParser.PARTIAL - 394)) | (1 << (frameQLParser.PARTITIONING - 394)) | (1 << (frameQLParser.PARTITIONS - 394)) | (1 << (frameQLParser.PASSWORD - 394)) | (1 << (frameQLParser.PHASE - 394)) | (1 << (frameQLParser.PLUGIN_DIR - 394)) | (1 << (frameQLParser.PLUGINS - 394)) | (1 << (frameQLParser.PORT - 394)) | (1 << (frameQLParser.PRECEDES - 394)) | (1 << (frameQLParser.PREPARE - 394)) | (1 << (frameQLParser.PRESERVE - 394)) | (1 << (frameQLParser.PREV - 394)) | (1 << (frameQLParser.PROCESSLIST - 394)) | (1 << (frameQLParser.PROFILE - 394)) | (1 << (frameQLParser.PROFILES - 394)) | (1 << (frameQLParser.PROXY - 394)) | (1 << (frameQLParser.QUERY - 394)) | (1 << (frameQLParser.QUICK - 394)) | (1 << (frameQLParser.REBUILD - 394)) | (1 << (frameQLParser.RECOVER - 394)) | (1 << (frameQLParser.REDO_BUFFER_SIZE - 394)) | (1 << (frameQLParser.REDUNDANT - 394)))) != 0) or ((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & ((1 << (frameQLParser.RELAY_LOG_FILE - 459)) | (1 << (frameQLParser.RELAY_LOG_POS - 459)) | (1 << (frameQLParser.RELAYLOG - 459)) | (1 << (frameQLParser.REMOVE - 459)) | (1 << (frameQLParser.REORGANIZE - 459)) | (1 << (frameQLParser.REPAIR - 459)) | (1 << (frameQLParser.REPLICATE_DO_DB - 459)) | (1 << (frameQLParser.REPLICATE_DO_TABLE - 459)) | (1 << (frameQLParser.REPLICATE_IGNORE_DB - 459)) | (1 << (frameQLParser.REPLICATE_IGNORE_TABLE - 459)) | (1 << (frameQLParser.REPLICATE_REWRITE_DB - 459)) | (1 << (frameQLParser.REPLICATE_WILD_DO_TABLE - 459)) | (1 << (frameQLParser.REPLICATE_WILD_IGNORE_TABLE - 459)) | (1 << (frameQLParser.REPLICATION - 459)) | (1 << (frameQLParser.RESUME - 459)) | (1 << (frameQLParser.RETURNS - 459)) | (1 << (frameQLParser.ROLLBACK - 459)) | (1 << (frameQLParser.ROLLUP - 459)) | (1 << (frameQLParser.ROTATE - 459)) | (1 << (frameQLParser.ROW - 459)) | (1 << (frameQLParser.ROWS - 459)) | (1 << (frameQLParser.ROW_FORMAT - 459)) | (1 << (frameQLParser.SAVEPOINT - 459)) | (1 << (frameQLParser.SCHEDULE - 459)) | (1 << (frameQLParser.SECURITY - 459)) | (1 << (frameQLParser.SERVER - 459)) | (1 << (frameQLParser.SESSION - 459)) | (1 << (frameQLParser.SHARE - 459)) | (1 << (frameQLParser.SHARED - 459)) | (1 << (frameQLParser.SIGNED - 459)) | (1 << (frameQLParser.SIMPLE - 459)) | (1 << (frameQLParser.SLAVE - 459)) | (1 << (frameQLParser.SNAPSHOT - 459)) | (1 << (frameQLParser.SOCKET - 459)) | (1 << (frameQLParser.SOME - 459)) | (1 << (frameQLParser.SOUNDS - 459)) | (1 << (frameQLParser.SOURCE - 459)) | (1 << (frameQLParser.SQL_AFTER_GTIDS - 459)) | (1 << (frameQLParser.SQL_AFTER_MTS_GAPS - 459)) | (1 << (frameQLParser.SQL_BEFORE_GTIDS - 459)) | (1 << (frameQLParser.SQL_BUFFER_RESULT - 459)) | (1 << (frameQLParser.SQL_CACHE - 459)) | (1 << (frameQLParser.SQL_NO_CACHE - 459)) | (1 << (frameQLParser.SQL_THREAD - 459)) | (1 << (frameQLParser.START - 459)) | (1 << (frameQLParser.STARTS - 459)) | (1 << (frameQLParser.STATS_AUTO_RECALC - 459)) | (1 << (frameQLParser.STATS_PERSISTENT - 459)) | (1 << (frameQLParser.STATS_SAMPLE_PAGES - 459)) | (1 << (frameQLParser.STATUS - 459)) | (1 << (frameQLParser.STOP - 459)) | (1 << (frameQLParser.STORAGE - 459)) | (1 << (frameQLParser.STRING - 459)) | (1 << (frameQLParser.SUBJECT - 459)) | (1 << (frameQLParser.SUBPARTITION - 459)) | (1 << (frameQLParser.SUBPARTITIONS - 459)) | (1 << (frameQLParser.SUSPEND - 459)) | (1 << (frameQLParser.SWAPS - 459)) | (1 << (frameQLParser.SWITCHES - 459)) | (1 << (frameQLParser.TABLESPACE - 459)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (frameQLParser.TEMPORARY - 523)) | (1 << (frameQLParser.TEMPTABLE - 523)) | (1 << (frameQLParser.THAN - 523)) | (1 << (frameQLParser.TRANSACTION - 523)) | (1 << (frameQLParser.TRUNCATE - 523)) | (1 << (frameQLParser.UNDEFINED - 523)) | (1 << (frameQLParser.UNDOFILE - 523)) | (1 << (frameQLParser.UNDO_BUFFER_SIZE - 523)) | (1 << (frameQLParser.UNKNOWN - 523)) | (1 << (frameQLParser.UPGRADE - 523)) | (1 << (frameQLParser.USER - 523)) | (1 << (frameQLParser.VALIDATION - 523)) | (1 << (frameQLParser.VALUE - 523)) | (1 << (frameQLParser.VARIABLES - 523)) | (1 << (frameQLParser.VIEW - 523)) | (1 << (frameQLParser.WAIT - 523)) | (1 << (frameQLParser.WARNINGS - 523)) | (1 << (frameQLParser.WITHOUT - 523)) | (1 << (frameQLParser.WORK - 523)) | (1 << (frameQLParser.WRAPPER - 523)) | (1 << (frameQLParser.X509 - 523)) | (1 << (frameQLParser.XA - 523)) | (1 << (frameQLParser.XML - 523)))) != 0) or _la==frameQLParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(frameQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(frameQLParser.ACOS, 0)

        def ADDDATE(self):
            return self.getToken(frameQLParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(frameQLParser.ADDTIME, 0)

        def AES_DECRYPT(self):
            return self.getToken(frameQLParser.AES_DECRYPT, 0)

        def AES_ENCRYPT(self):
            return self.getToken(frameQLParser.AES_ENCRYPT, 0)

        def AREA(self):
            return self.getToken(frameQLParser.AREA, 0)

        def ASBINARY(self):
            return self.getToken(frameQLParser.ASBINARY, 0)

        def ASIN(self):
            return self.getToken(frameQLParser.ASIN, 0)

        def ASTEXT(self):
            return self.getToken(frameQLParser.ASTEXT, 0)

        def ASWKB(self):
            return self.getToken(frameQLParser.ASWKB, 0)

        def ASWKT(self):
            return self.getToken(frameQLParser.ASWKT, 0)

        def ASYMMETRIC_DECRYPT(self):
            return self.getToken(frameQLParser.ASYMMETRIC_DECRYPT, 0)

        def ASYMMETRIC_DERIVE(self):
            return self.getToken(frameQLParser.ASYMMETRIC_DERIVE, 0)

        def ASYMMETRIC_ENCRYPT(self):
            return self.getToken(frameQLParser.ASYMMETRIC_ENCRYPT, 0)

        def ASYMMETRIC_SIGN(self):
            return self.getToken(frameQLParser.ASYMMETRIC_SIGN, 0)

        def ASYMMETRIC_VERIFY(self):
            return self.getToken(frameQLParser.ASYMMETRIC_VERIFY, 0)

        def ATAN(self):
            return self.getToken(frameQLParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(frameQLParser.ATAN2, 0)

        def BENCHMARK(self):
            return self.getToken(frameQLParser.BENCHMARK, 0)

        def BIN(self):
            return self.getToken(frameQLParser.BIN, 0)

        def BIT_COUNT(self):
            return self.getToken(frameQLParser.BIT_COUNT, 0)

        def BIT_LENGTH(self):
            return self.getToken(frameQLParser.BIT_LENGTH, 0)

        def BUFFER(self):
            return self.getToken(frameQLParser.BUFFER, 0)

        def CEIL(self):
            return self.getToken(frameQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(frameQLParser.CEILING, 0)

        def CENTROID(self):
            return self.getToken(frameQLParser.CENTROID, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(frameQLParser.CHARACTER_LENGTH, 0)

        def CHARSET(self):
            return self.getToken(frameQLParser.CHARSET, 0)

        def CHAR_LENGTH(self):
            return self.getToken(frameQLParser.CHAR_LENGTH, 0)

        def COERCIBILITY(self):
            return self.getToken(frameQLParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(frameQLParser.COLLATION, 0)

        def COMPRESS(self):
            return self.getToken(frameQLParser.COMPRESS, 0)

        def CONCAT(self):
            return self.getToken(frameQLParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(frameQLParser.CONCAT_WS, 0)

        def CONNECTION_ID(self):
            return self.getToken(frameQLParser.CONNECTION_ID, 0)

        def CONV(self):
            return self.getToken(frameQLParser.CONV, 0)

        def CONVERT_TZ(self):
            return self.getToken(frameQLParser.CONVERT_TZ, 0)

        def COS(self):
            return self.getToken(frameQLParser.COS, 0)

        def COT(self):
            return self.getToken(frameQLParser.COT, 0)

        def COUNT(self):
            return self.getToken(frameQLParser.COUNT, 0)

        def CRC32(self):
            return self.getToken(frameQLParser.CRC32, 0)

        def CREATE_ASYMMETRIC_PRIV_KEY(self):
            return self.getToken(frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY, 0)

        def CREATE_ASYMMETRIC_PUB_KEY(self):
            return self.getToken(frameQLParser.CREATE_ASYMMETRIC_PUB_KEY, 0)

        def CREATE_DH_PARAMETERS(self):
            return self.getToken(frameQLParser.CREATE_DH_PARAMETERS, 0)

        def CREATE_DIGEST(self):
            return self.getToken(frameQLParser.CREATE_DIGEST, 0)

        def CROSSES(self):
            return self.getToken(frameQLParser.CROSSES, 0)

        def DATABASE(self):
            return self.getToken(frameQLParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(frameQLParser.DATE, 0)

        def DATEDIFF(self):
            return self.getToken(frameQLParser.DATEDIFF, 0)

        def DATE_FORMAT(self):
            return self.getToken(frameQLParser.DATE_FORMAT, 0)

        def DAY(self):
            return self.getToken(frameQLParser.DAY, 0)

        def DAYNAME(self):
            return self.getToken(frameQLParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(frameQLParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(frameQLParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(frameQLParser.DAYOFYEAR, 0)

        def DECODE(self):
            return self.getToken(frameQLParser.DECODE, 0)

        def DEGREES(self):
            return self.getToken(frameQLParser.DEGREES, 0)

        def DES_DECRYPT(self):
            return self.getToken(frameQLParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(frameQLParser.DES_ENCRYPT, 0)

        def DIMENSION(self):
            return self.getToken(frameQLParser.DIMENSION, 0)

        def DISJOINT(self):
            return self.getToken(frameQLParser.DISJOINT, 0)

        def ELT(self):
            return self.getToken(frameQLParser.ELT, 0)

        def ENCODE(self):
            return self.getToken(frameQLParser.ENCODE, 0)

        def ENCRYPT(self):
            return self.getToken(frameQLParser.ENCRYPT, 0)

        def ENDPOINT(self):
            return self.getToken(frameQLParser.ENDPOINT, 0)

        def ENVELOPE(self):
            return self.getToken(frameQLParser.ENVELOPE, 0)

        def EQUALS(self):
            return self.getToken(frameQLParser.EQUALS, 0)

        def EXP(self):
            return self.getToken(frameQLParser.EXP, 0)

        def EXPORT_SET(self):
            return self.getToken(frameQLParser.EXPORT_SET, 0)

        def EXTERIORRING(self):
            return self.getToken(frameQLParser.EXTERIORRING, 0)

        def EXTRACTVALUE(self):
            return self.getToken(frameQLParser.EXTRACTVALUE, 0)

        def FIELD(self):
            return self.getToken(frameQLParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(frameQLParser.FIND_IN_SET, 0)

        def FLOOR(self):
            return self.getToken(frameQLParser.FLOOR, 0)

        def FORMAT(self):
            return self.getToken(frameQLParser.FORMAT, 0)

        def FOUND_ROWS(self):
            return self.getToken(frameQLParser.FOUND_ROWS, 0)

        def FROM_BASE64(self):
            return self.getToken(frameQLParser.FROM_BASE64, 0)

        def FROM_DAYS(self):
            return self.getToken(frameQLParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(frameQLParser.FROM_UNIXTIME, 0)

        def GEOMCOLLFROMTEXT(self):
            return self.getToken(frameQLParser.GEOMCOLLFROMTEXT, 0)

        def GEOMCOLLFROMWKB(self):
            return self.getToken(frameQLParser.GEOMCOLLFROMWKB, 0)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(frameQLParser.GEOMETRYCOLLECTION, 0)

        def GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(frameQLParser.GEOMETRYCOLLECTIONFROMTEXT, 0)

        def GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(frameQLParser.GEOMETRYCOLLECTIONFROMWKB, 0)

        def GEOMETRYFROMTEXT(self):
            return self.getToken(frameQLParser.GEOMETRYFROMTEXT, 0)

        def GEOMETRYFROMWKB(self):
            return self.getToken(frameQLParser.GEOMETRYFROMWKB, 0)

        def GEOMETRYN(self):
            return self.getToken(frameQLParser.GEOMETRYN, 0)

        def GEOMETRYTYPE(self):
            return self.getToken(frameQLParser.GEOMETRYTYPE, 0)

        def GEOMFROMTEXT(self):
            return self.getToken(frameQLParser.GEOMFROMTEXT, 0)

        def GEOMFROMWKB(self):
            return self.getToken(frameQLParser.GEOMFROMWKB, 0)

        def GET_FORMAT(self):
            return self.getToken(frameQLParser.GET_FORMAT, 0)

        def GET_LOCK(self):
            return self.getToken(frameQLParser.GET_LOCK, 0)

        def GLENGTH(self):
            return self.getToken(frameQLParser.GLENGTH, 0)

        def GREATEST(self):
            return self.getToken(frameQLParser.GREATEST, 0)

        def GTID_SUBSET(self):
            return self.getToken(frameQLParser.GTID_SUBSET, 0)

        def GTID_SUBTRACT(self):
            return self.getToken(frameQLParser.GTID_SUBTRACT, 0)

        def HEX(self):
            return self.getToken(frameQLParser.HEX, 0)

        def HOUR(self):
            return self.getToken(frameQLParser.HOUR, 0)

        def IFNULL(self):
            return self.getToken(frameQLParser.IFNULL, 0)

        def INET6_ATON(self):
            return self.getToken(frameQLParser.INET6_ATON, 0)

        def INET6_NTOA(self):
            return self.getToken(frameQLParser.INET6_NTOA, 0)

        def INET_ATON(self):
            return self.getToken(frameQLParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(frameQLParser.INET_NTOA, 0)

        def INSTR(self):
            return self.getToken(frameQLParser.INSTR, 0)

        def INTERIORRINGN(self):
            return self.getToken(frameQLParser.INTERIORRINGN, 0)

        def INTERSECTS(self):
            return self.getToken(frameQLParser.INTERSECTS, 0)

        def ISCLOSED(self):
            return self.getToken(frameQLParser.ISCLOSED, 0)

        def ISEMPTY(self):
            return self.getToken(frameQLParser.ISEMPTY, 0)

        def ISNULL(self):
            return self.getToken(frameQLParser.ISNULL, 0)

        def ISSIMPLE(self):
            return self.getToken(frameQLParser.ISSIMPLE, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(frameQLParser.IS_FREE_LOCK, 0)

        def IS_IPV4(self):
            return self.getToken(frameQLParser.IS_IPV4, 0)

        def IS_IPV4_COMPAT(self):
            return self.getToken(frameQLParser.IS_IPV4_COMPAT, 0)

        def IS_IPV4_MAPPED(self):
            return self.getToken(frameQLParser.IS_IPV4_MAPPED, 0)

        def IS_IPV6(self):
            return self.getToken(frameQLParser.IS_IPV6, 0)

        def IS_USED_LOCK(self):
            return self.getToken(frameQLParser.IS_USED_LOCK, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(frameQLParser.LAST_INSERT_ID, 0)

        def LCASE(self):
            return self.getToken(frameQLParser.LCASE, 0)

        def LEAST(self):
            return self.getToken(frameQLParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(frameQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(frameQLParser.LENGTH, 0)

        def LINEFROMTEXT(self):
            return self.getToken(frameQLParser.LINEFROMTEXT, 0)

        def LINEFROMWKB(self):
            return self.getToken(frameQLParser.LINEFROMWKB, 0)

        def LINESTRING(self):
            return self.getToken(frameQLParser.LINESTRING, 0)

        def LINESTRINGFROMTEXT(self):
            return self.getToken(frameQLParser.LINESTRINGFROMTEXT, 0)

        def LINESTRINGFROMWKB(self):
            return self.getToken(frameQLParser.LINESTRINGFROMWKB, 0)

        def LN(self):
            return self.getToken(frameQLParser.LN, 0)

        def LOAD_FILE(self):
            return self.getToken(frameQLParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(frameQLParser.LOCATE, 0)

        def LOG(self):
            return self.getToken(frameQLParser.LOG, 0)

        def LOG10(self):
            return self.getToken(frameQLParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(frameQLParser.LOG2, 0)

        def LOWER(self):
            return self.getToken(frameQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(frameQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(frameQLParser.LTRIM, 0)

        def MAKEDATE(self):
            return self.getToken(frameQLParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(frameQLParser.MAKETIME, 0)

        def MAKE_SET(self):
            return self.getToken(frameQLParser.MAKE_SET, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(frameQLParser.MASTER_POS_WAIT, 0)

        def MBRCONTAINS(self):
            return self.getToken(frameQLParser.MBRCONTAINS, 0)

        def MBRDISJOINT(self):
            return self.getToken(frameQLParser.MBRDISJOINT, 0)

        def MBREQUAL(self):
            return self.getToken(frameQLParser.MBREQUAL, 0)

        def MBRINTERSECTS(self):
            return self.getToken(frameQLParser.MBRINTERSECTS, 0)

        def MBROVERLAPS(self):
            return self.getToken(frameQLParser.MBROVERLAPS, 0)

        def MBRTOUCHES(self):
            return self.getToken(frameQLParser.MBRTOUCHES, 0)

        def MBRWITHIN(self):
            return self.getToken(frameQLParser.MBRWITHIN, 0)

        def MD5(self):
            return self.getToken(frameQLParser.MD5, 0)

        def MICROSECOND(self):
            return self.getToken(frameQLParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(frameQLParser.MINUTE, 0)

        def MLINEFROMTEXT(self):
            return self.getToken(frameQLParser.MLINEFROMTEXT, 0)

        def MLINEFROMWKB(self):
            return self.getToken(frameQLParser.MLINEFROMWKB, 0)

        def MONTH(self):
            return self.getToken(frameQLParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(frameQLParser.MONTHNAME, 0)

        def MPOINTFROMTEXT(self):
            return self.getToken(frameQLParser.MPOINTFROMTEXT, 0)

        def MPOINTFROMWKB(self):
            return self.getToken(frameQLParser.MPOINTFROMWKB, 0)

        def MPOLYFROMTEXT(self):
            return self.getToken(frameQLParser.MPOLYFROMTEXT, 0)

        def MPOLYFROMWKB(self):
            return self.getToken(frameQLParser.MPOLYFROMWKB, 0)

        def MULTILINESTRING(self):
            return self.getToken(frameQLParser.MULTILINESTRING, 0)

        def MULTILINESTRINGFROMTEXT(self):
            return self.getToken(frameQLParser.MULTILINESTRINGFROMTEXT, 0)

        def MULTILINESTRINGFROMWKB(self):
            return self.getToken(frameQLParser.MULTILINESTRINGFROMWKB, 0)

        def MULTIPOINT(self):
            return self.getToken(frameQLParser.MULTIPOINT, 0)

        def MULTIPOINTFROMTEXT(self):
            return self.getToken(frameQLParser.MULTIPOINTFROMTEXT, 0)

        def MULTIPOINTFROMWKB(self):
            return self.getToken(frameQLParser.MULTIPOINTFROMWKB, 0)

        def MULTIPOLYGON(self):
            return self.getToken(frameQLParser.MULTIPOLYGON, 0)

        def MULTIPOLYGONFROMTEXT(self):
            return self.getToken(frameQLParser.MULTIPOLYGONFROMTEXT, 0)

        def MULTIPOLYGONFROMWKB(self):
            return self.getToken(frameQLParser.MULTIPOLYGONFROMWKB, 0)

        def NAME_CONST(self):
            return self.getToken(frameQLParser.NAME_CONST, 0)

        def NULLIF(self):
            return self.getToken(frameQLParser.NULLIF, 0)

        def NUMGEOMETRIES(self):
            return self.getToken(frameQLParser.NUMGEOMETRIES, 0)

        def NUMINTERIORRINGS(self):
            return self.getToken(frameQLParser.NUMINTERIORRINGS, 0)

        def NUMPOINTS(self):
            return self.getToken(frameQLParser.NUMPOINTS, 0)

        def OCT(self):
            return self.getToken(frameQLParser.OCT, 0)

        def OCTET_LENGTH(self):
            return self.getToken(frameQLParser.OCTET_LENGTH, 0)

        def ORD(self):
            return self.getToken(frameQLParser.ORD, 0)

        def OVERLAPS(self):
            return self.getToken(frameQLParser.OVERLAPS, 0)

        def PERIOD_ADD(self):
            return self.getToken(frameQLParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(frameQLParser.PERIOD_DIFF, 0)

        def PI(self):
            return self.getToken(frameQLParser.PI, 0)

        def POINT(self):
            return self.getToken(frameQLParser.POINT, 0)

        def POINTFROMTEXT(self):
            return self.getToken(frameQLParser.POINTFROMTEXT, 0)

        def POINTFROMWKB(self):
            return self.getToken(frameQLParser.POINTFROMWKB, 0)

        def POINTN(self):
            return self.getToken(frameQLParser.POINTN, 0)

        def POLYFROMTEXT(self):
            return self.getToken(frameQLParser.POLYFROMTEXT, 0)

        def POLYFROMWKB(self):
            return self.getToken(frameQLParser.POLYFROMWKB, 0)

        def POLYGON(self):
            return self.getToken(frameQLParser.POLYGON, 0)

        def POLYGONFROMTEXT(self):
            return self.getToken(frameQLParser.POLYGONFROMTEXT, 0)

        def POLYGONFROMWKB(self):
            return self.getToken(frameQLParser.POLYGONFROMWKB, 0)

        def POSITION(self):
            return self.getToken(frameQLParser.POSITION, 0)

        def POW(self):
            return self.getToken(frameQLParser.POW, 0)

        def POWER(self):
            return self.getToken(frameQLParser.POWER, 0)

        def QUARTER(self):
            return self.getToken(frameQLParser.QUARTER, 0)

        def QUOTE(self):
            return self.getToken(frameQLParser.QUOTE, 0)

        def RADIANS(self):
            return self.getToken(frameQLParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(frameQLParser.RAND, 0)

        def RANDOM_BYTES(self):
            return self.getToken(frameQLParser.RANDOM_BYTES, 0)

        def RELEASE_LOCK(self):
            return self.getToken(frameQLParser.RELEASE_LOCK, 0)

        def REVERSE(self):
            return self.getToken(frameQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(frameQLParser.RIGHT, 0)

        def ROUND(self):
            return self.getToken(frameQLParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(frameQLParser.ROW_COUNT, 0)

        def RPAD(self):
            return self.getToken(frameQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(frameQLParser.RTRIM, 0)

        def SECOND(self):
            return self.getToken(frameQLParser.SECOND, 0)

        def SEC_TO_TIME(self):
            return self.getToken(frameQLParser.SEC_TO_TIME, 0)

        def SESSION_USER(self):
            return self.getToken(frameQLParser.SESSION_USER, 0)

        def SHA(self):
            return self.getToken(frameQLParser.SHA, 0)

        def SHA1(self):
            return self.getToken(frameQLParser.SHA1, 0)

        def SHA2(self):
            return self.getToken(frameQLParser.SHA2, 0)

        def SIGN(self):
            return self.getToken(frameQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(frameQLParser.SIN, 0)

        def SLEEP(self):
            return self.getToken(frameQLParser.SLEEP, 0)

        def SOUNDEX(self):
            return self.getToken(frameQLParser.SOUNDEX, 0)

        def SQL_THREAD_WAIT_AFTER_GTIDS(self):
            return self.getToken(frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0)

        def SQRT(self):
            return self.getToken(frameQLParser.SQRT, 0)

        def SRID(self):
            return self.getToken(frameQLParser.SRID, 0)

        def STARTPOINT(self):
            return self.getToken(frameQLParser.STARTPOINT, 0)

        def STRCMP(self):
            return self.getToken(frameQLParser.STRCMP, 0)

        def STR_TO_DATE(self):
            return self.getToken(frameQLParser.STR_TO_DATE, 0)

        def ST_AREA(self):
            return self.getToken(frameQLParser.ST_AREA, 0)

        def ST_ASBINARY(self):
            return self.getToken(frameQLParser.ST_ASBINARY, 0)

        def ST_ASTEXT(self):
            return self.getToken(frameQLParser.ST_ASTEXT, 0)

        def ST_ASWKB(self):
            return self.getToken(frameQLParser.ST_ASWKB, 0)

        def ST_ASWKT(self):
            return self.getToken(frameQLParser.ST_ASWKT, 0)

        def ST_BUFFER(self):
            return self.getToken(frameQLParser.ST_BUFFER, 0)

        def ST_CENTROID(self):
            return self.getToken(frameQLParser.ST_CENTROID, 0)

        def ST_CONTAINS(self):
            return self.getToken(frameQLParser.ST_CONTAINS, 0)

        def ST_CROSSES(self):
            return self.getToken(frameQLParser.ST_CROSSES, 0)

        def ST_DIFFERENCE(self):
            return self.getToken(frameQLParser.ST_DIFFERENCE, 0)

        def ST_DIMENSION(self):
            return self.getToken(frameQLParser.ST_DIMENSION, 0)

        def ST_DISJOINT(self):
            return self.getToken(frameQLParser.ST_DISJOINT, 0)

        def ST_DISTANCE(self):
            return self.getToken(frameQLParser.ST_DISTANCE, 0)

        def ST_ENDPOINT(self):
            return self.getToken(frameQLParser.ST_ENDPOINT, 0)

        def ST_ENVELOPE(self):
            return self.getToken(frameQLParser.ST_ENVELOPE, 0)

        def ST_EQUALS(self):
            return self.getToken(frameQLParser.ST_EQUALS, 0)

        def ST_EXTERIORRING(self):
            return self.getToken(frameQLParser.ST_EXTERIORRING, 0)

        def ST_GEOMCOLLFROMTEXT(self):
            return self.getToken(frameQLParser.ST_GEOMCOLLFROMTEXT, 0)

        def ST_GEOMCOLLFROMTXT(self):
            return self.getToken(frameQLParser.ST_GEOMCOLLFROMTXT, 0)

        def ST_GEOMCOLLFROMWKB(self):
            return self.getToken(frameQLParser.ST_GEOMCOLLFROMWKB, 0)

        def ST_GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0)

        def ST_GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0)

        def ST_GEOMETRYFROMTEXT(self):
            return self.getToken(frameQLParser.ST_GEOMETRYFROMTEXT, 0)

        def ST_GEOMETRYFROMWKB(self):
            return self.getToken(frameQLParser.ST_GEOMETRYFROMWKB, 0)

        def ST_GEOMETRYN(self):
            return self.getToken(frameQLParser.ST_GEOMETRYN, 0)

        def ST_GEOMETRYTYPE(self):
            return self.getToken(frameQLParser.ST_GEOMETRYTYPE, 0)

        def ST_GEOMFROMTEXT(self):
            return self.getToken(frameQLParser.ST_GEOMFROMTEXT, 0)

        def ST_GEOMFROMWKB(self):
            return self.getToken(frameQLParser.ST_GEOMFROMWKB, 0)

        def ST_INTERIORRINGN(self):
            return self.getToken(frameQLParser.ST_INTERIORRINGN, 0)

        def ST_INTERSECTION(self):
            return self.getToken(frameQLParser.ST_INTERSECTION, 0)

        def ST_INTERSECTS(self):
            return self.getToken(frameQLParser.ST_INTERSECTS, 0)

        def ST_ISCLOSED(self):
            return self.getToken(frameQLParser.ST_ISCLOSED, 0)

        def ST_ISEMPTY(self):
            return self.getToken(frameQLParser.ST_ISEMPTY, 0)

        def ST_ISSIMPLE(self):
            return self.getToken(frameQLParser.ST_ISSIMPLE, 0)

        def ST_LINEFROMTEXT(self):
            return self.getToken(frameQLParser.ST_LINEFROMTEXT, 0)

        def ST_LINEFROMWKB(self):
            return self.getToken(frameQLParser.ST_LINEFROMWKB, 0)

        def ST_LINESTRINGFROMTEXT(self):
            return self.getToken(frameQLParser.ST_LINESTRINGFROMTEXT, 0)

        def ST_LINESTRINGFROMWKB(self):
            return self.getToken(frameQLParser.ST_LINESTRINGFROMWKB, 0)

        def ST_NUMGEOMETRIES(self):
            return self.getToken(frameQLParser.ST_NUMGEOMETRIES, 0)

        def ST_NUMINTERIORRING(self):
            return self.getToken(frameQLParser.ST_NUMINTERIORRING, 0)

        def ST_NUMINTERIORRINGS(self):
            return self.getToken(frameQLParser.ST_NUMINTERIORRINGS, 0)

        def ST_NUMPOINTS(self):
            return self.getToken(frameQLParser.ST_NUMPOINTS, 0)

        def ST_OVERLAPS(self):
            return self.getToken(frameQLParser.ST_OVERLAPS, 0)

        def ST_POINTFROMTEXT(self):
            return self.getToken(frameQLParser.ST_POINTFROMTEXT, 0)

        def ST_POINTFROMWKB(self):
            return self.getToken(frameQLParser.ST_POINTFROMWKB, 0)

        def ST_POINTN(self):
            return self.getToken(frameQLParser.ST_POINTN, 0)

        def ST_POLYFROMTEXT(self):
            return self.getToken(frameQLParser.ST_POLYFROMTEXT, 0)

        def ST_POLYFROMWKB(self):
            return self.getToken(frameQLParser.ST_POLYFROMWKB, 0)

        def ST_POLYGONFROMTEXT(self):
            return self.getToken(frameQLParser.ST_POLYGONFROMTEXT, 0)

        def ST_POLYGONFROMWKB(self):
            return self.getToken(frameQLParser.ST_POLYGONFROMWKB, 0)

        def ST_SRID(self):
            return self.getToken(frameQLParser.ST_SRID, 0)

        def ST_STARTPOINT(self):
            return self.getToken(frameQLParser.ST_STARTPOINT, 0)

        def ST_SYMDIFFERENCE(self):
            return self.getToken(frameQLParser.ST_SYMDIFFERENCE, 0)

        def ST_TOUCHES(self):
            return self.getToken(frameQLParser.ST_TOUCHES, 0)

        def ST_UNION(self):
            return self.getToken(frameQLParser.ST_UNION, 0)

        def ST_WITHIN(self):
            return self.getToken(frameQLParser.ST_WITHIN, 0)

        def ST_X(self):
            return self.getToken(frameQLParser.ST_X, 0)

        def ST_Y(self):
            return self.getToken(frameQLParser.ST_Y, 0)

        def SUBDATE(self):
            return self.getToken(frameQLParser.SUBDATE, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(frameQLParser.SUBSTRING_INDEX, 0)

        def SUBTIME(self):
            return self.getToken(frameQLParser.SUBTIME, 0)

        def SYSTEM_USER(self):
            return self.getToken(frameQLParser.SYSTEM_USER, 0)

        def TAN(self):
            return self.getToken(frameQLParser.TAN, 0)

        def TIME(self):
            return self.getToken(frameQLParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(frameQLParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(frameQLParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(frameQLParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(frameQLParser.TIMESTAMPDIFF, 0)

        def TIME_FORMAT(self):
            return self.getToken(frameQLParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(frameQLParser.TIME_TO_SEC, 0)

        def TOUCHES(self):
            return self.getToken(frameQLParser.TOUCHES, 0)

        def TO_BASE64(self):
            return self.getToken(frameQLParser.TO_BASE64, 0)

        def TO_DAYS(self):
            return self.getToken(frameQLParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(frameQLParser.TO_SECONDS, 0)

        def UCASE(self):
            return self.getToken(frameQLParser.UCASE, 0)

        def UNCOMPRESS(self):
            return self.getToken(frameQLParser.UNCOMPRESS, 0)

        def UNCOMPRESSED_LENGTH(self):
            return self.getToken(frameQLParser.UNCOMPRESSED_LENGTH, 0)

        def UNHEX(self):
            return self.getToken(frameQLParser.UNHEX, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(frameQLParser.UNIX_TIMESTAMP, 0)

        def UPDATEXML(self):
            return self.getToken(frameQLParser.UPDATEXML, 0)

        def UPPER(self):
            return self.getToken(frameQLParser.UPPER, 0)

        def UUID(self):
            return self.getToken(frameQLParser.UUID, 0)

        def UUID_SHORT(self):
            return self.getToken(frameQLParser.UUID_SHORT, 0)

        def VALIDATE_PASSWORD_STRENGTH(self):
            return self.getToken(frameQLParser.VALIDATE_PASSWORD_STRENGTH, 0)

        def VERSION(self):
            return self.getToken(frameQLParser.VERSION, 0)

        def WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(self):
            return self.getToken(frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)

        def WEEK(self):
            return self.getToken(frameQLParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(frameQLParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(frameQLParser.WEEKOFYEAR, 0)

        def WEIGHT_STRING(self):
            return self.getToken(frameQLParser.WEIGHT_STRING, 0)

        def WITHIN(self):
            return self.getToken(frameQLParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(frameQLParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(frameQLParser.YEARWEEK, 0)

        def Y_FUNCTION(self):
            return self.getToken(frameQLParser.Y_FUNCTION, 0)

        def X_FUNCTION(self):
            return self.getToken(frameQLParser.X_FUNCTION, 0)

        def getRuleIndex(self):
            return frameQLParser.RULE_functionNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionNameBase" ):
                listener.enterFunctionNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionNameBase" ):
                listener.exitFunctionNameBase(self)




    def functionNameBase(self):

        localctx = frameQLParser.FunctionNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_functionNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6091
            _la = self._input.LA(1)
            if not(_la==frameQLParser.DATABASE or _la==frameQLParser.LEFT or _la==frameQLParser.RIGHT or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (frameQLParser.DATE - 184)) | (1 << (frameQLParser.TIME - 184)) | (1 << (frameQLParser.TIMESTAMP - 184)) | (1 << (frameQLParser.YEAR - 184)) | (1 << (frameQLParser.COUNT - 184)) | (1 << (frameQLParser.POSITION - 184)))) != 0) or ((((_la - 558)) & ~0x3f) == 0 and ((1 << (_la - 558)) & ((1 << (frameQLParser.QUARTER - 558)) | (1 << (frameQLParser.MONTH - 558)) | (1 << (frameQLParser.DAY - 558)) | (1 << (frameQLParser.HOUR - 558)) | (1 << (frameQLParser.MINUTE - 558)) | (1 << (frameQLParser.WEEK - 558)) | (1 << (frameQLParser.SECOND - 558)) | (1 << (frameQLParser.MICROSECOND - 558)))) != 0) or ((((_la - 630)) & ~0x3f) == 0 and ((1 << (_la - 630)) & ((1 << (frameQLParser.GEOMETRYCOLLECTION - 630)) | (1 << (frameQLParser.LINESTRING - 630)) | (1 << (frameQLParser.MULTILINESTRING - 630)) | (1 << (frameQLParser.MULTIPOINT - 630)) | (1 << (frameQLParser.MULTIPOLYGON - 630)) | (1 << (frameQLParser.POINT - 630)) | (1 << (frameQLParser.POLYGON - 630)) | (1 << (frameQLParser.ABS - 630)) | (1 << (frameQLParser.ACOS - 630)) | (1 << (frameQLParser.ADDDATE - 630)) | (1 << (frameQLParser.ADDTIME - 630)) | (1 << (frameQLParser.AES_DECRYPT - 630)) | (1 << (frameQLParser.AES_ENCRYPT - 630)) | (1 << (frameQLParser.AREA - 630)) | (1 << (frameQLParser.ASBINARY - 630)) | (1 << (frameQLParser.ASIN - 630)) | (1 << (frameQLParser.ASTEXT - 630)) | (1 << (frameQLParser.ASWKB - 630)) | (1 << (frameQLParser.ASWKT - 630)) | (1 << (frameQLParser.ASYMMETRIC_DECRYPT - 630)) | (1 << (frameQLParser.ASYMMETRIC_DERIVE - 630)) | (1 << (frameQLParser.ASYMMETRIC_ENCRYPT - 630)) | (1 << (frameQLParser.ASYMMETRIC_SIGN - 630)) | (1 << (frameQLParser.ASYMMETRIC_VERIFY - 630)) | (1 << (frameQLParser.ATAN - 630)) | (1 << (frameQLParser.ATAN2 - 630)) | (1 << (frameQLParser.BENCHMARK - 630)) | (1 << (frameQLParser.BIN - 630)) | (1 << (frameQLParser.BIT_COUNT - 630)) | (1 << (frameQLParser.BIT_LENGTH - 630)) | (1 << (frameQLParser.BUFFER - 630)) | (1 << (frameQLParser.CEIL - 630)) | (1 << (frameQLParser.CEILING - 630)) | (1 << (frameQLParser.CENTROID - 630)) | (1 << (frameQLParser.CHARACTER_LENGTH - 630)) | (1 << (frameQLParser.CHARSET - 630)) | (1 << (frameQLParser.CHAR_LENGTH - 630)) | (1 << (frameQLParser.COERCIBILITY - 630)) | (1 << (frameQLParser.COLLATION - 630)) | (1 << (frameQLParser.COMPRESS - 630)) | (1 << (frameQLParser.CONCAT - 630)) | (1 << (frameQLParser.CONCAT_WS - 630)) | (1 << (frameQLParser.CONNECTION_ID - 630)) | (1 << (frameQLParser.CONV - 630)) | (1 << (frameQLParser.CONVERT_TZ - 630)) | (1 << (frameQLParser.COS - 630)) | (1 << (frameQLParser.COT - 630)) | (1 << (frameQLParser.CRC32 - 630)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 630)) | (1 << (frameQLParser.CREATE_ASYMMETRIC_PUB_KEY - 630)) | (1 << (frameQLParser.CREATE_DH_PARAMETERS - 630)) | (1 << (frameQLParser.CREATE_DIGEST - 630)) | (1 << (frameQLParser.CROSSES - 630)) | (1 << (frameQLParser.DATEDIFF - 630)) | (1 << (frameQLParser.DATE_FORMAT - 630)) | (1 << (frameQLParser.DAYNAME - 630)) | (1 << (frameQLParser.DAYOFMONTH - 630)) | (1 << (frameQLParser.DAYOFWEEK - 630)) | (1 << (frameQLParser.DAYOFYEAR - 630)) | (1 << (frameQLParser.DECODE - 630)) | (1 << (frameQLParser.DEGREES - 630)) | (1 << (frameQLParser.DES_DECRYPT - 630)) | (1 << (frameQLParser.DES_ENCRYPT - 630)) | (1 << (frameQLParser.DIMENSION - 630)))) != 0) or ((((_la - 694)) & ~0x3f) == 0 and ((1 << (_la - 694)) & ((1 << (frameQLParser.DISJOINT - 694)) | (1 << (frameQLParser.ELT - 694)) | (1 << (frameQLParser.ENCODE - 694)) | (1 << (frameQLParser.ENCRYPT - 694)) | (1 << (frameQLParser.ENDPOINT - 694)) | (1 << (frameQLParser.ENVELOPE - 694)) | (1 << (frameQLParser.EQUALS - 694)) | (1 << (frameQLParser.EXP - 694)) | (1 << (frameQLParser.EXPORT_SET - 694)) | (1 << (frameQLParser.EXTERIORRING - 694)) | (1 << (frameQLParser.EXTRACTVALUE - 694)) | (1 << (frameQLParser.FIELD - 694)) | (1 << (frameQLParser.FIND_IN_SET - 694)) | (1 << (frameQLParser.FLOOR - 694)) | (1 << (frameQLParser.FORMAT - 694)) | (1 << (frameQLParser.FOUND_ROWS - 694)) | (1 << (frameQLParser.FROM_BASE64 - 694)) | (1 << (frameQLParser.FROM_DAYS - 694)) | (1 << (frameQLParser.FROM_UNIXTIME - 694)) | (1 << (frameQLParser.GEOMCOLLFROMTEXT - 694)) | (1 << (frameQLParser.GEOMCOLLFROMWKB - 694)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMTEXT - 694)) | (1 << (frameQLParser.GEOMETRYCOLLECTIONFROMWKB - 694)) | (1 << (frameQLParser.GEOMETRYFROMTEXT - 694)) | (1 << (frameQLParser.GEOMETRYFROMWKB - 694)) | (1 << (frameQLParser.GEOMETRYN - 694)) | (1 << (frameQLParser.GEOMETRYTYPE - 694)) | (1 << (frameQLParser.GEOMFROMTEXT - 694)) | (1 << (frameQLParser.GEOMFROMWKB - 694)) | (1 << (frameQLParser.GET_FORMAT - 694)) | (1 << (frameQLParser.GET_LOCK - 694)) | (1 << (frameQLParser.GLENGTH - 694)) | (1 << (frameQLParser.GREATEST - 694)) | (1 << (frameQLParser.GTID_SUBSET - 694)) | (1 << (frameQLParser.GTID_SUBTRACT - 694)) | (1 << (frameQLParser.HEX - 694)) | (1 << (frameQLParser.IFNULL - 694)) | (1 << (frameQLParser.INET6_ATON - 694)) | (1 << (frameQLParser.INET6_NTOA - 694)) | (1 << (frameQLParser.INET_ATON - 694)) | (1 << (frameQLParser.INET_NTOA - 694)) | (1 << (frameQLParser.INSTR - 694)) | (1 << (frameQLParser.INTERIORRINGN - 694)) | (1 << (frameQLParser.INTERSECTS - 694)) | (1 << (frameQLParser.ISCLOSED - 694)) | (1 << (frameQLParser.ISEMPTY - 694)) | (1 << (frameQLParser.ISNULL - 694)) | (1 << (frameQLParser.ISSIMPLE - 694)) | (1 << (frameQLParser.IS_FREE_LOCK - 694)) | (1 << (frameQLParser.IS_IPV4 - 694)) | (1 << (frameQLParser.IS_IPV4_COMPAT - 694)) | (1 << (frameQLParser.IS_IPV4_MAPPED - 694)) | (1 << (frameQLParser.IS_IPV6 - 694)) | (1 << (frameQLParser.IS_USED_LOCK - 694)) | (1 << (frameQLParser.LAST_INSERT_ID - 694)) | (1 << (frameQLParser.LCASE - 694)) | (1 << (frameQLParser.LEAST - 694)) | (1 << (frameQLParser.LENGTH - 694)) | (1 << (frameQLParser.LINEFROMTEXT - 694)) | (1 << (frameQLParser.LINEFROMWKB - 694)) | (1 << (frameQLParser.LINESTRINGFROMTEXT - 694)) | (1 << (frameQLParser.LINESTRINGFROMWKB - 694)) | (1 << (frameQLParser.LN - 694)) | (1 << (frameQLParser.LOAD_FILE - 694)))) != 0) or ((((_la - 758)) & ~0x3f) == 0 and ((1 << (_la - 758)) & ((1 << (frameQLParser.LOCATE - 758)) | (1 << (frameQLParser.LOG - 758)) | (1 << (frameQLParser.LOG10 - 758)) | (1 << (frameQLParser.LOG2 - 758)) | (1 << (frameQLParser.LOWER - 758)) | (1 << (frameQLParser.LPAD - 758)) | (1 << (frameQLParser.LTRIM - 758)) | (1 << (frameQLParser.MAKEDATE - 758)) | (1 << (frameQLParser.MAKETIME - 758)) | (1 << (frameQLParser.MAKE_SET - 758)) | (1 << (frameQLParser.MASTER_POS_WAIT - 758)) | (1 << (frameQLParser.MBRCONTAINS - 758)) | (1 << (frameQLParser.MBRDISJOINT - 758)) | (1 << (frameQLParser.MBREQUAL - 758)) | (1 << (frameQLParser.MBRINTERSECTS - 758)) | (1 << (frameQLParser.MBROVERLAPS - 758)) | (1 << (frameQLParser.MBRTOUCHES - 758)) | (1 << (frameQLParser.MBRWITHIN - 758)) | (1 << (frameQLParser.MD5 - 758)) | (1 << (frameQLParser.MLINEFROMTEXT - 758)) | (1 << (frameQLParser.MLINEFROMWKB - 758)) | (1 << (frameQLParser.MONTHNAME - 758)) | (1 << (frameQLParser.MPOINTFROMTEXT - 758)) | (1 << (frameQLParser.MPOINTFROMWKB - 758)) | (1 << (frameQLParser.MPOLYFROMTEXT - 758)) | (1 << (frameQLParser.MPOLYFROMWKB - 758)) | (1 << (frameQLParser.MULTILINESTRINGFROMTEXT - 758)) | (1 << (frameQLParser.MULTILINESTRINGFROMWKB - 758)) | (1 << (frameQLParser.MULTIPOINTFROMTEXT - 758)) | (1 << (frameQLParser.MULTIPOINTFROMWKB - 758)) | (1 << (frameQLParser.MULTIPOLYGONFROMTEXT - 758)) | (1 << (frameQLParser.MULTIPOLYGONFROMWKB - 758)) | (1 << (frameQLParser.NAME_CONST - 758)) | (1 << (frameQLParser.NULLIF - 758)) | (1 << (frameQLParser.NUMGEOMETRIES - 758)) | (1 << (frameQLParser.NUMINTERIORRINGS - 758)) | (1 << (frameQLParser.NUMPOINTS - 758)) | (1 << (frameQLParser.OCT - 758)) | (1 << (frameQLParser.OCTET_LENGTH - 758)) | (1 << (frameQLParser.ORD - 758)) | (1 << (frameQLParser.OVERLAPS - 758)) | (1 << (frameQLParser.PERIOD_ADD - 758)) | (1 << (frameQLParser.PERIOD_DIFF - 758)) | (1 << (frameQLParser.PI - 758)) | (1 << (frameQLParser.POINTFROMTEXT - 758)) | (1 << (frameQLParser.POINTFROMWKB - 758)) | (1 << (frameQLParser.POINTN - 758)) | (1 << (frameQLParser.POLYFROMTEXT - 758)) | (1 << (frameQLParser.POLYFROMWKB - 758)) | (1 << (frameQLParser.POLYGONFROMTEXT - 758)) | (1 << (frameQLParser.POLYGONFROMWKB - 758)) | (1 << (frameQLParser.POW - 758)) | (1 << (frameQLParser.POWER - 758)) | (1 << (frameQLParser.QUOTE - 758)) | (1 << (frameQLParser.RADIANS - 758)) | (1 << (frameQLParser.RAND - 758)) | (1 << (frameQLParser.RANDOM_BYTES - 758)) | (1 << (frameQLParser.RELEASE_LOCK - 758)) | (1 << (frameQLParser.REVERSE - 758)) | (1 << (frameQLParser.ROUND - 758)) | (1 << (frameQLParser.ROW_COUNT - 758)) | (1 << (frameQLParser.RPAD - 758)) | (1 << (frameQLParser.RTRIM - 758)) | (1 << (frameQLParser.SEC_TO_TIME - 758)))) != 0) or ((((_la - 822)) & ~0x3f) == 0 and ((1 << (_la - 822)) & ((1 << (frameQLParser.SESSION_USER - 822)) | (1 << (frameQLParser.SHA - 822)) | (1 << (frameQLParser.SHA1 - 822)) | (1 << (frameQLParser.SHA2 - 822)) | (1 << (frameQLParser.SIGN - 822)) | (1 << (frameQLParser.SIN - 822)) | (1 << (frameQLParser.SLEEP - 822)) | (1 << (frameQLParser.SOUNDEX - 822)) | (1 << (frameQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 822)) | (1 << (frameQLParser.SQRT - 822)) | (1 << (frameQLParser.SRID - 822)) | (1 << (frameQLParser.STARTPOINT - 822)) | (1 << (frameQLParser.STRCMP - 822)) | (1 << (frameQLParser.STR_TO_DATE - 822)) | (1 << (frameQLParser.ST_AREA - 822)) | (1 << (frameQLParser.ST_ASBINARY - 822)) | (1 << (frameQLParser.ST_ASTEXT - 822)) | (1 << (frameQLParser.ST_ASWKB - 822)) | (1 << (frameQLParser.ST_ASWKT - 822)) | (1 << (frameQLParser.ST_BUFFER - 822)) | (1 << (frameQLParser.ST_CENTROID - 822)) | (1 << (frameQLParser.ST_CONTAINS - 822)) | (1 << (frameQLParser.ST_CROSSES - 822)) | (1 << (frameQLParser.ST_DIFFERENCE - 822)) | (1 << (frameQLParser.ST_DIMENSION - 822)) | (1 << (frameQLParser.ST_DISJOINT - 822)) | (1 << (frameQLParser.ST_DISTANCE - 822)) | (1 << (frameQLParser.ST_ENDPOINT - 822)) | (1 << (frameQLParser.ST_ENVELOPE - 822)) | (1 << (frameQLParser.ST_EQUALS - 822)) | (1 << (frameQLParser.ST_EXTERIORRING - 822)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTEXT - 822)) | (1 << (frameQLParser.ST_GEOMCOLLFROMTXT - 822)) | (1 << (frameQLParser.ST_GEOMCOLLFROMWKB - 822)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 822)) | (1 << (frameQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 822)) | (1 << (frameQLParser.ST_GEOMETRYFROMTEXT - 822)) | (1 << (frameQLParser.ST_GEOMETRYFROMWKB - 822)) | (1 << (frameQLParser.ST_GEOMETRYN - 822)) | (1 << (frameQLParser.ST_GEOMETRYTYPE - 822)) | (1 << (frameQLParser.ST_GEOMFROMTEXT - 822)) | (1 << (frameQLParser.ST_GEOMFROMWKB - 822)) | (1 << (frameQLParser.ST_INTERIORRINGN - 822)) | (1 << (frameQLParser.ST_INTERSECTION - 822)) | (1 << (frameQLParser.ST_INTERSECTS - 822)) | (1 << (frameQLParser.ST_ISCLOSED - 822)) | (1 << (frameQLParser.ST_ISEMPTY - 822)) | (1 << (frameQLParser.ST_ISSIMPLE - 822)) | (1 << (frameQLParser.ST_LINEFROMTEXT - 822)) | (1 << (frameQLParser.ST_LINEFROMWKB - 822)) | (1 << (frameQLParser.ST_LINESTRINGFROMTEXT - 822)) | (1 << (frameQLParser.ST_LINESTRINGFROMWKB - 822)) | (1 << (frameQLParser.ST_NUMGEOMETRIES - 822)) | (1 << (frameQLParser.ST_NUMINTERIORRING - 822)) | (1 << (frameQLParser.ST_NUMINTERIORRINGS - 822)) | (1 << (frameQLParser.ST_NUMPOINTS - 822)) | (1 << (frameQLParser.ST_OVERLAPS - 822)) | (1 << (frameQLParser.ST_POINTFROMTEXT - 822)) | (1 << (frameQLParser.ST_POINTFROMWKB - 822)) | (1 << (frameQLParser.ST_POINTN - 822)) | (1 << (frameQLParser.ST_POLYFROMTEXT - 822)) | (1 << (frameQLParser.ST_POLYFROMWKB - 822)) | (1 << (frameQLParser.ST_POLYGONFROMTEXT - 822)) | (1 << (frameQLParser.ST_POLYGONFROMWKB - 822)))) != 0) or ((((_la - 886)) & ~0x3f) == 0 and ((1 << (_la - 886)) & ((1 << (frameQLParser.ST_SRID - 886)) | (1 << (frameQLParser.ST_STARTPOINT - 886)) | (1 << (frameQLParser.ST_SYMDIFFERENCE - 886)) | (1 << (frameQLParser.ST_TOUCHES - 886)) | (1 << (frameQLParser.ST_UNION - 886)) | (1 << (frameQLParser.ST_WITHIN - 886)) | (1 << (frameQLParser.ST_X - 886)) | (1 << (frameQLParser.ST_Y - 886)) | (1 << (frameQLParser.SUBDATE - 886)) | (1 << (frameQLParser.SUBSTRING_INDEX - 886)) | (1 << (frameQLParser.SUBTIME - 886)) | (1 << (frameQLParser.SYSTEM_USER - 886)) | (1 << (frameQLParser.TAN - 886)) | (1 << (frameQLParser.TIMEDIFF - 886)) | (1 << (frameQLParser.TIMESTAMPADD - 886)) | (1 << (frameQLParser.TIMESTAMPDIFF - 886)) | (1 << (frameQLParser.TIME_FORMAT - 886)) | (1 << (frameQLParser.TIME_TO_SEC - 886)) | (1 << (frameQLParser.TOUCHES - 886)) | (1 << (frameQLParser.TO_BASE64 - 886)) | (1 << (frameQLParser.TO_DAYS - 886)) | (1 << (frameQLParser.TO_SECONDS - 886)) | (1 << (frameQLParser.UCASE - 886)) | (1 << (frameQLParser.UNCOMPRESS - 886)) | (1 << (frameQLParser.UNCOMPRESSED_LENGTH - 886)) | (1 << (frameQLParser.UNHEX - 886)) | (1 << (frameQLParser.UNIX_TIMESTAMP - 886)) | (1 << (frameQLParser.UPDATEXML - 886)) | (1 << (frameQLParser.UPPER - 886)) | (1 << (frameQLParser.UUID - 886)) | (1 << (frameQLParser.UUID_SHORT - 886)) | (1 << (frameQLParser.VALIDATE_PASSWORD_STRENGTH - 886)) | (1 << (frameQLParser.VERSION - 886)) | (1 << (frameQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 886)) | (1 << (frameQLParser.WEEKDAY - 886)) | (1 << (frameQLParser.WEEKOFYEAR - 886)) | (1 << (frameQLParser.WEIGHT_STRING - 886)) | (1 << (frameQLParser.WITHIN - 886)) | (1 << (frameQLParser.YEARWEEK - 886)) | (1 << (frameQLParser.Y_FUNCTION - 886)) | (1 << (frameQLParser.X_FUNCTION - 886)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[295] = self.expression_sempred
        self._predicates[296] = self.predicate_sempred
        self._predicates[297] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         




